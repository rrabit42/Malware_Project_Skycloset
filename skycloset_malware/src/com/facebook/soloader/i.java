package com.facebook.soloader;

import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;

public final class i {
  private static String a(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, long paramLong) {
    StringBuilder stringBuilder = new StringBuilder();
    while (true) {
      short s = e(paramFileChannel, paramByteBuffer, paramLong);
      if (s != 0) {
        stringBuilder.append((char)s);
        paramLong = 1L + paramLong;
        continue;
      } 
      break;
    } 
    return stringBuilder.toString();
  }
  
  private static void a(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, int paramInt, long paramLong) {
    paramByteBuffer.position(0);
    paramByteBuffer.limit(paramInt);
    while (paramByteBuffer.remaining() > 0) {
      paramInt = paramFileChannel.read(paramByteBuffer, paramLong);
      if (paramInt == -1)
        break; 
      paramLong += paramInt;
    } 
    if (paramByteBuffer.remaining() <= 0) {
      paramByteBuffer.position(0);
      return;
    } 
    throw new a("ELF file truncated");
  }
  
  public static String[] a(File paramFile) {
    fileInputStream = new FileInputStream(paramFile);
    try {
      return a(fileInputStream.getChannel());
    } finally {
      fileInputStream.close();
    } 
  }
  
  public static String[] a(FileChannel paramFileChannel) {
    ByteBuffer byteBuffer = ByteBuffer.allocate(8);
    byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    if (c(paramFileChannel, byteBuffer, 0L) == 1179403647L) {
      long l2;
      short s = e(paramFileChannel, byteBuffer, 4L);
      boolean bool = true;
      if (s != 1)
        bool = false; 
      if (e(paramFileChannel, byteBuffer, 5L) == 2)
        byteBuffer.order(ByteOrder.BIG_ENDIAN); 
      if (bool) {
        l2 = c(paramFileChannel, byteBuffer, 28L);
      } else {
        l2 = b(paramFileChannel, byteBuffer, 32L);
      } 
      if (bool) {
        l1 = d(paramFileChannel, byteBuffer, 44L);
      } else {
        l1 = d(paramFileChannel, byteBuffer, 56L);
      } 
      if (bool) {
        l3 = 42L;
      } else {
        l3 = 54L;
      } 
      int j = d(paramFileChannel, byteBuffer, l3);
      long l4 = l1;
      if (l1 == 65535L) {
        if (bool) {
          l1 = c(paramFileChannel, byteBuffer, 32L);
        } else {
          l1 = b(paramFileChannel, byteBuffer, 40L);
        } 
        if (bool) {
          l1 += 28L;
        } else {
          l1 += 44L;
        } 
        l4 = c(paramFileChannel, byteBuffer, l1);
      } 
      long l3 = l2;
      long l1 = 0L;
      while (true) {
        if (l1 < l4) {
          if (c(paramFileChannel, byteBuffer, l3 + 0L) == 2L) {
            if (bool) {
              l1 = c(paramFileChannel, byteBuffer, l3 + 4L);
              break;
            } 
            l1 = b(paramFileChannel, byteBuffer, l3 + 8L);
            break;
          } 
          l3 += j;
          l1++;
          continue;
        } 
        l1 = 0L;
        break;
      } 
      if (l1 != 0L) {
        long l6;
        long l5 = l1;
        l3 = 0L;
        s = 0;
        do {
          long l;
          if (bool) {
            l6 = c(paramFileChannel, byteBuffer, l5 + 0L);
          } else {
            l6 = b(paramFileChannel, byteBuffer, l5 + 0L);
          } 
          if (l6 == 1L) {
            if (s != Integer.MAX_VALUE) {
              s++;
            } else {
              throw new a("malformed DT_NEEDED section");
            } 
          } else if (l6 == 5L) {
            if (bool) {
              l3 = c(paramFileChannel, byteBuffer, l5 + 4L);
            } else {
              l3 = b(paramFileChannel, byteBuffer, l5 + 8L);
            } 
          } 
          if (bool) {
            l = 8L;
          } else {
            l = 16L;
          } 
          l5 += l;
        } while (l6 != 0L);
        if (l3 != 0L) {
          byte b = 0;
          l5 = l2;
          while (true) {
            if (b < l4) {
              if (c(paramFileChannel, byteBuffer, l5 + 0L) == 1L) {
                if (bool) {
                  l2 = c(paramFileChannel, byteBuffer, l5 + 8L);
                } else {
                  l2 = b(paramFileChannel, byteBuffer, l5 + 16L);
                } 
                if (bool) {
                  l6 = c(paramFileChannel, byteBuffer, l5 + 20L);
                } else {
                  l6 = b(paramFileChannel, byteBuffer, l5 + 40L);
                } 
                if (l2 <= l3 && l3 < l6 + l2) {
                  if (bool) {
                    l4 = c(paramFileChannel, byteBuffer, l5 + 4L);
                  } else {
                    l4 = b(paramFileChannel, byteBuffer, l5 + 8L);
                  } 
                  l2 = l4 + l3 - l2;
                  break;
                } 
              } 
              l5 += j;
              b++;
              continue;
            } 
            l2 = 0L;
            break;
          } 
          if (l2 != 0L) {
            String[] arrayOfString = new String[s];
            s = 0;
            do {
              if (bool) {
                l3 = c(paramFileChannel, byteBuffer, l1 + 0L);
              } else {
                l3 = b(paramFileChannel, byteBuffer, l1 + 0L);
              } 
              if (l3 == 1L) {
                if (bool) {
                  l4 = c(paramFileChannel, byteBuffer, l1 + 4L);
                } else {
                  l4 = b(paramFileChannel, byteBuffer, l1 + 8L);
                } 
                arrayOfString[s] = a(paramFileChannel, byteBuffer, l4 + l2);
                if (s != Integer.MAX_VALUE) {
                  s++;
                } else {
                  throw new a("malformed DT_NEEDED section");
                } 
              } 
              if (bool) {
                l4 = 8L;
              } else {
                l4 = 16L;
              } 
              l1 += l4;
            } while (l3 != 0L);
            if (s == arrayOfString.length)
              return arrayOfString; 
            throw new a("malformed DT_NEEDED section");
          } 
          throw new a("did not find file offset of DT_STRTAB table");
        } 
        throw new a("Dynamic section string-table not found");
      } 
      throw new a("ELF file does not contain dynamic linking information");
    } 
    throw new a("file is not ELF");
  }
  
  private static long b(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, long paramLong) {
    a(paramFileChannel, paramByteBuffer, 8, paramLong);
    return paramByteBuffer.getLong();
  }
  
  private static long c(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, long paramLong) {
    a(paramFileChannel, paramByteBuffer, 4, paramLong);
    return paramByteBuffer.getInt() & 0xFFFFFFFFL;
  }
  
  private static int d(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, long paramLong) {
    a(paramFileChannel, paramByteBuffer, 2, paramLong);
    return paramByteBuffer.getShort() & 0xFFFF;
  }
  
  private static short e(FileChannel paramFileChannel, ByteBuffer paramByteBuffer, long paramLong) {
    a(paramFileChannel, paramByteBuffer, 1, paramLong);
    return (short)(paramByteBuffer.get() & 0xFF);
  }
}
