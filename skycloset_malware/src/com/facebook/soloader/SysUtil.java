package com.facebook.soloader;

import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Build;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;

public final class SysUtil {
  public static int a(Context paramContext) {
    PackageManager packageManager = paramContext.getPackageManager();
    if (packageManager != null)
      try {
        return (packageManager.getPackageInfo(paramContext.getPackageName(), 0)).versionCode;
      } catch (android.content.pm.PackageManager.NameNotFoundException|RuntimeException paramContext) {
        return 0;
      }  
    return 0;
  }
  
  static int a(RandomAccessFile paramRandomAccessFile, InputStream paramInputStream, int paramInt, byte[] paramArrayOfByte) {
    int i = 0;
    while (i < paramInt) {
      int j = paramInputStream.read(paramArrayOfByte, 0, Math.min(paramArrayOfByte.length, paramInt - i));
      if (j != -1) {
        paramRandomAccessFile.write(paramArrayOfByte, 0, j);
        i += j;
      } 
    } 
    return i;
  }
  
  public static int a(String[] paramArrayOfString, String paramString) {
    for (byte b = 0; b < paramArrayOfString.length; b++) {
      if (paramArrayOfString[b] != null && paramString.equals(paramArrayOfString[b]))
        return b; 
    } 
    return -1;
  }
  
  public static void a(File paramFile) {
    if (paramFile.isDirectory()) {
      File[] arrayOfFile = paramFile.listFiles();
      if (arrayOfFile == null)
        return; 
      int i = arrayOfFile.length;
      for (byte b = 0; b < i; b++)
        a(arrayOfFile[b]); 
    } 
    if (!paramFile.delete()) {
      if (!paramFile.exists())
        return; 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("could not delete: ");
      stringBuilder.append(paramFile);
      throw new IOException(stringBuilder.toString());
    } 
  }
  
  public static void a(FileDescriptor paramFileDescriptor, long paramLong) {
    if (Build.VERSION.SDK_INT >= 21)
      LollipopSysdeps.fallocateIfSupported(paramFileDescriptor, paramLong); 
  }
  
  public static String[] a() { return (Build.VERSION.SDK_INT < 21) ? new String[] { Build.CPU_ABI, Build.CPU_ABI2 } : LollipopSysdeps.getSupportedAbis(); }
  
  static void b(File paramFile) {
    if (!paramFile.mkdirs()) {
      if (paramFile.isDirectory())
        return; 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("cannot mkdir: ");
      stringBuilder.append(paramFile);
      throw new IOException(stringBuilder.toString());
    } 
  }
  
  static void c(File paramFile) {
    if (paramFile.isDirectory()) {
      File[] arrayOfFile = paramFile.listFiles();
      if (arrayOfFile != null) {
        for (byte b = 0; b < arrayOfFile.length; b++)
          c(arrayOfFile[b]); 
      } else {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("cannot list directory ");
        stringBuilder.append(paramFile);
        throw new IOException(stringBuilder.toString());
      } 
    } else {
      String str;
      Throwable throwable;
      if (paramFile.getPath().endsWith("_lock"))
        return; 
      randomAccessFile = new RandomAccessFile(paramFile, "r");
      paramFile = null;
      try {
        randomAccessFile.getFD().sync();
        randomAccessFile.close();
        return;
      } catch (Throwable null) {
        throwable = str;
        throw str;
      } finally {}
      if (throwable != null) {
        try {
          randomAccessFile.close();
        } catch (Throwable randomAccessFile) {
          throwable.addSuppressed(randomAccessFile);
        } 
      } else {
        randomAccessFile.close();
      } 
      throw str;
    } 
  }
}
