package com.facebook.soloader;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build;
import android.os.StrictMode;
import android.text.TextUtils;
import android.util.Log;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class SoLoader {
  static final boolean a;
  
  static j b;
  
  private static final ReentrantReadWriteLock c = new ReentrantReadWriteLock();
  
  private static k[] d = null;
  
  private static int e;
  
  private static m[] f;
  
  private static b g;
  
  private static final HashSet<String> h;
  
  private static final Map<String, Object> i;
  
  private static final Set<String> j;
  
  private static l k;
  
  private static int l;
  
  static  {
    boolean bool = false;
    e = 0;
    h = new HashSet();
    i = new HashMap();
    j = Collections.newSetFromMap(new ConcurrentHashMap());
    k = null;
    try {
      int n = Build.VERSION.SDK_INT;
      if (n >= 18)
        bool = true; 
    } catch (NoClassDefFoundError|UnsatisfiedLinkError noClassDefFoundError) {}
    a = bool;
  }
  
  private static int a() {
    c.writeLock().lock();
    try {
      n = l;
      if ((n & 0x2) != 0) {
        n = 1;
      } else {
        n = 0;
      } 
      return n;
    } finally {
      c.writeLock().unlock();
    } 
  }
  
  public static void a(Context paramContext, int paramInt) { a(paramContext, paramInt, null); }
  
  private static void a(Context paramContext, int paramInt, j paramj) {
    threadPolicy = StrictMode.allowThreadDiskWrites();
    try {
      a(paramj);
      b(paramContext, paramInt, paramj);
      return;
    } finally {
      StrictMode.setThreadPolicy(threadPolicy);
    } 
  }
  
  public static void a(Context paramContext, boolean paramBoolean) {
    byte b1;
    if (paramBoolean) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    try {
      a(paramContext, b1);
      return;
    } catch (IOException paramContext) {
      throw new RuntimeException(paramContext);
    } 
  }
  
  private static void a(j paramj) { // Byte code:
    //   0: ldc com/facebook/soloader/SoLoader
    //   2: monitorenter
    //   3: aload_0
    //   4: ifnull -> 15
    //   7: aload_0
    //   8: putstatic com/facebook/soloader/SoLoader.b : Lcom/facebook/soloader/j;
    //   11: ldc com/facebook/soloader/SoLoader
    //   13: monitorexit
    //   14: return
    //   15: invokestatic getRuntime : ()Ljava/lang/Runtime;
    //   18: astore_2
    //   19: invokestatic b : ()Ljava/lang/reflect/Method;
    //   22: astore_3
    //   23: aload_3
    //   24: ifnull -> 71
    //   27: iconst_1
    //   28: istore_1
    //   29: goto -> 32
    //   32: iload_1
    //   33: ifeq -> 76
    //   36: invokestatic a : ()Ljava/lang/String;
    //   39: astore_0
    //   40: goto -> 43
    //   43: new com/facebook/soloader/SoLoader$1
    //   46: dup
    //   47: iload_1
    //   48: aload_0
    //   49: aload_0
    //   50: invokestatic c : (Ljava/lang/String;)Ljava/lang/String;
    //   53: aload_2
    //   54: aload_3
    //   55: invokespecial <init> : (ZLjava/lang/String;Ljava/lang/String;Ljava/lang/Runtime;Ljava/lang/reflect/Method;)V
    //   58: putstatic com/facebook/soloader/SoLoader.b : Lcom/facebook/soloader/j;
    //   61: ldc com/facebook/soloader/SoLoader
    //   63: monitorexit
    //   64: return
    //   65: astore_0
    //   66: ldc com/facebook/soloader/SoLoader
    //   68: monitorexit
    //   69: aload_0
    //   70: athrow
    //   71: iconst_0
    //   72: istore_1
    //   73: goto -> 32
    //   76: aconst_null
    //   77: astore_0
    //   78: goto -> 43
    // Exception table:
    //   from	to	target	type
    //   7	11	65	finally
    //   15	23	65	finally
    //   36	40	65	finally
    //   43	61	65	finally }
  
  static void a(String paramString, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy) { a(paramString, null, null, paramInt, paramThreadPolicy); }
  
  public static boolean a(String paramString) { return a(paramString, 0); }
  
  public static boolean a(String paramString, int paramInt) { // Byte code:
    //   0: getstatic com/facebook/soloader/SoLoader.c : Ljava/util/concurrent/locks/ReentrantReadWriteLock;
    //   3: invokevirtual readLock : ()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   6: invokevirtual lock : ()V
    //   9: getstatic com/facebook/soloader/SoLoader.d : [Lcom/facebook/soloader/k;
    //   12: ifnonnull -> 93
    //   15: ldc 'http://www.android.com/'
    //   17: ldc 'java.vendor.url'
    //   19: invokestatic getProperty : (Ljava/lang/String;)Ljava/lang/String;
    //   22: invokevirtual equals : (Ljava/lang/Object;)Z
    //   25: ifeq -> 34
    //   28: invokestatic c : ()V
    //   31: goto -> 93
    //   34: ldc com/facebook/soloader/SoLoader
    //   36: monitorenter
    //   37: getstatic com/facebook/soloader/SoLoader.h : Ljava/util/HashSet;
    //   40: aload_0
    //   41: invokevirtual contains : (Ljava/lang/Object;)Z
    //   44: iconst_1
    //   45: ixor
    //   46: istore_2
    //   47: iload_2
    //   48: ifeq -> 73
    //   51: getstatic com/facebook/soloader/SoLoader.k : Lcom/facebook/soloader/l;
    //   54: ifnull -> 69
    //   57: getstatic com/facebook/soloader/SoLoader.k : Lcom/facebook/soloader/l;
    //   60: aload_0
    //   61: invokeinterface a : (Ljava/lang/String;)V
    //   66: goto -> 73
    //   69: aload_0
    //   70: invokestatic loadLibrary : (Ljava/lang/String;)V
    //   73: ldc com/facebook/soloader/SoLoader
    //   75: monitorexit
    //   76: getstatic com/facebook/soloader/SoLoader.c : Ljava/util/concurrent/locks/ReentrantReadWriteLock;
    //   79: invokevirtual readLock : ()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   82: invokevirtual unlock : ()V
    //   85: iload_2
    //   86: ireturn
    //   87: astore_0
    //   88: ldc com/facebook/soloader/SoLoader
    //   90: monitorexit
    //   91: aload_0
    //   92: athrow
    //   93: getstatic com/facebook/soloader/SoLoader.c : Ljava/util/concurrent/locks/ReentrantReadWriteLock;
    //   96: invokevirtual readLock : ()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   99: invokevirtual unlock : ()V
    //   102: aload_0
    //   103: invokestatic a : (Ljava/lang/String;)Ljava/lang/String;
    //   106: astore #4
    //   108: aload #4
    //   110: ifnull -> 119
    //   113: aload #4
    //   115: astore_3
    //   116: goto -> 121
    //   119: aload_0
    //   120: astore_3
    //   121: aload_3
    //   122: invokestatic mapLibraryName : (Ljava/lang/String;)Ljava/lang/String;
    //   125: aload_0
    //   126: aload #4
    //   128: iload_1
    //   129: iconst_2
    //   130: ior
    //   131: aconst_null
    //   132: invokestatic a : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)Z
    //   135: ireturn
    //   136: astore_0
    //   137: getstatic com/facebook/soloader/SoLoader.c : Ljava/util/concurrent/locks/ReentrantReadWriteLock;
    //   140: invokevirtual readLock : ()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
    //   143: invokevirtual unlock : ()V
    //   146: aload_0
    //   147: athrow
    // Exception table:
    //   from	to	target	type
    //   9	31	136	finally
    //   34	37	136	finally
    //   37	47	87	finally
    //   51	66	87	finally
    //   69	73	87	finally
    //   73	76	87	finally
    //   88	91	87	finally
    //   91	93	136	finally }
  
  private static boolean a(String paramString1, String paramString2, String paramString3, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy) { // Byte code:
    //   0: aload_1
    //   1: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   4: istore #8
    //   6: iconst_0
    //   7: istore #7
    //   9: iload #8
    //   11: ifne -> 28
    //   14: getstatic com/facebook/soloader/SoLoader.j : Ljava/util/Set;
    //   17: aload_1
    //   18: invokeinterface contains : (Ljava/lang/Object;)Z
    //   23: ifeq -> 28
    //   26: iconst_0
    //   27: ireturn
    //   28: ldc com/facebook/soloader/SoLoader
    //   30: monitorenter
    //   31: getstatic com/facebook/soloader/SoLoader.h : Ljava/util/HashSet;
    //   34: aload_0
    //   35: invokevirtual contains : (Ljava/lang/Object;)Z
    //   38: ifeq -> 490
    //   41: aload_2
    //   42: ifnonnull -> 484
    //   45: ldc com/facebook/soloader/SoLoader
    //   47: monitorexit
    //   48: iconst_0
    //   49: ireturn
    //   50: getstatic com/facebook/soloader/SoLoader.i : Ljava/util/Map;
    //   53: aload_0
    //   54: invokeinterface containsKey : (Ljava/lang/Object;)Z
    //   59: ifeq -> 76
    //   62: getstatic com/facebook/soloader/SoLoader.i : Ljava/util/Map;
    //   65: aload_0
    //   66: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   71: astore #9
    //   73: goto -> 97
    //   76: new java/lang/Object
    //   79: dup
    //   80: invokespecial <init> : ()V
    //   83: astore #9
    //   85: getstatic com/facebook/soloader/SoLoader.i : Ljava/util/Map;
    //   88: aload_0
    //   89: aload #9
    //   91: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   96: pop
    //   97: ldc com/facebook/soloader/SoLoader
    //   99: monitorexit
    //   100: aload #9
    //   102: monitorenter
    //   103: iload #5
    //   105: istore #6
    //   107: iload #5
    //   109: ifne -> 302
    //   112: ldc com/facebook/soloader/SoLoader
    //   114: monitorenter
    //   115: getstatic com/facebook/soloader/SoLoader.h : Ljava/util/HashSet;
    //   118: aload_0
    //   119: invokevirtual contains : (Ljava/lang/Object;)Z
    //   122: ifeq -> 140
    //   125: aload_2
    //   126: ifnonnull -> 137
    //   129: ldc com/facebook/soloader/SoLoader
    //   131: monitorexit
    //   132: aload #9
    //   134: monitorexit
    //   135: iconst_0
    //   136: ireturn
    //   137: iconst_1
    //   138: istore #5
    //   140: ldc com/facebook/soloader/SoLoader
    //   142: monitorexit
    //   143: iload #5
    //   145: istore #6
    //   147: iload #5
    //   149: ifne -> 302
    //   152: new java/lang/StringBuilder
    //   155: dup
    //   156: invokespecial <init> : ()V
    //   159: astore #10
    //   161: aload #10
    //   163: ldc 'About to load: '
    //   165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   168: pop
    //   169: aload #10
    //   171: aload_0
    //   172: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: pop
    //   176: ldc 'SoLoader'
    //   178: aload #10
    //   180: invokevirtual toString : ()Ljava/lang/String;
    //   183: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   186: pop
    //   187: aload_0
    //   188: iload_3
    //   189: aload #4
    //   191: invokestatic b : (Ljava/lang/String;ILandroid/os/StrictMode$ThreadPolicy;)V
    //   194: ldc com/facebook/soloader/SoLoader
    //   196: monitorenter
    //   197: new java/lang/StringBuilder
    //   200: dup
    //   201: invokespecial <init> : ()V
    //   204: astore #4
    //   206: aload #4
    //   208: ldc 'Loaded: '
    //   210: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   213: pop
    //   214: aload #4
    //   216: aload_0
    //   217: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   220: pop
    //   221: ldc 'SoLoader'
    //   223: aload #4
    //   225: invokevirtual toString : ()Ljava/lang/String;
    //   228: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   231: pop
    //   232: getstatic com/facebook/soloader/SoLoader.h : Ljava/util/HashSet;
    //   235: aload_0
    //   236: invokevirtual add : (Ljava/lang/Object;)Z
    //   239: pop
    //   240: ldc com/facebook/soloader/SoLoader
    //   242: monitorexit
    //   243: iload #5
    //   245: istore #6
    //   247: goto -> 302
    //   250: astore_0
    //   251: ldc com/facebook/soloader/SoLoader
    //   253: monitorexit
    //   254: aload_0
    //   255: athrow
    //   256: astore_0
    //   257: aload_0
    //   258: invokevirtual getMessage : ()Ljava/lang/String;
    //   261: astore_1
    //   262: aload_1
    //   263: ifnull -> 284
    //   266: aload_1
    //   267: ldc 'unexpected e_machine:'
    //   269: invokevirtual contains : (Ljava/lang/CharSequence;)Z
    //   272: ifeq -> 284
    //   275: new com/facebook/soloader/SoLoader$a
    //   278: dup
    //   279: aload_0
    //   280: invokespecial <init> : (Ljava/lang/Throwable;)V
    //   283: athrow
    //   284: aload_0
    //   285: athrow
    //   286: astore_0
    //   287: new java/lang/RuntimeException
    //   290: dup
    //   291: aload_0
    //   292: invokespecial <init> : (Ljava/lang/Throwable;)V
    //   295: athrow
    //   296: astore_0
    //   297: ldc com/facebook/soloader/SoLoader
    //   299: monitorexit
    //   300: aload_0
    //   301: athrow
    //   302: iload #7
    //   304: istore_3
    //   305: aload_1
    //   306: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   309: ifne -> 329
    //   312: iload #7
    //   314: istore_3
    //   315: getstatic com/facebook/soloader/SoLoader.j : Ljava/util/Set;
    //   318: aload_1
    //   319: invokeinterface contains : (Ljava/lang/Object;)Z
    //   324: ifeq -> 329
    //   327: iconst_1
    //   328: istore_3
    //   329: aload_2
    //   330: ifnull -> 464
    //   333: iload_3
    //   334: ifne -> 464
    //   337: getstatic com/facebook/soloader/SoLoader.a : Z
    //   340: ifeq -> 380
    //   343: new java/lang/StringBuilder
    //   346: dup
    //   347: invokespecial <init> : ()V
    //   350: astore_2
    //   351: aload_2
    //   352: ldc_w 'MergedSoMapping.invokeJniOnload['
    //   355: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   358: pop
    //   359: aload_2
    //   360: aload_1
    //   361: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   364: pop
    //   365: aload_2
    //   366: ldc_w ']'
    //   369: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   372: pop
    //   373: aload_2
    //   374: invokevirtual toString : ()Ljava/lang/String;
    //   377: invokestatic a : (Ljava/lang/String;)V
    //   380: new java/lang/StringBuilder
    //   383: dup
    //   384: invokespecial <init> : ()V
    //   387: astore_2
    //   388: aload_2
    //   389: ldc_w 'About to merge: '
    //   392: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   395: pop
    //   396: aload_2
    //   397: aload_1
    //   398: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   401: pop
    //   402: aload_2
    //   403: ldc_w ' / '
    //   406: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   409: pop
    //   410: aload_2
    //   411: aload_0
    //   412: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   415: pop
    //   416: ldc 'SoLoader'
    //   418: aload_2
    //   419: invokevirtual toString : ()Ljava/lang/String;
    //   422: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   425: pop
    //   426: aload_1
    //   427: invokestatic b : (Ljava/lang/String;)V
    //   430: getstatic com/facebook/soloader/SoLoader.j : Ljava/util/Set;
    //   433: aload_1
    //   434: invokeinterface add : (Ljava/lang/Object;)Z
    //   439: pop
    //   440: getstatic com/facebook/soloader/SoLoader.a : Z
    //   443: ifeq -> 464
    //   446: invokestatic a : ()V
    //   449: goto -> 464
    //   452: astore_0
    //   453: getstatic com/facebook/soloader/SoLoader.a : Z
    //   456: ifeq -> 462
    //   459: invokestatic a : ()V
    //   462: aload_0
    //   463: athrow
    //   464: aload #9
    //   466: monitorexit
    //   467: iload #6
    //   469: iconst_1
    //   470: ixor
    //   471: ireturn
    //   472: astore_0
    //   473: aload #9
    //   475: monitorexit
    //   476: aload_0
    //   477: athrow
    //   478: astore_0
    //   479: ldc com/facebook/soloader/SoLoader
    //   481: monitorexit
    //   482: aload_0
    //   483: athrow
    //   484: iconst_1
    //   485: istore #5
    //   487: goto -> 50
    //   490: iconst_0
    //   491: istore #5
    //   493: goto -> 50
    // Exception table:
    //   from	to	target	type
    //   31	41	478	finally
    //   45	48	478	finally
    //   50	73	478	finally
    //   76	97	478	finally
    //   97	100	478	finally
    //   112	115	472	finally
    //   115	125	296	finally
    //   129	132	296	finally
    //   132	135	472	finally
    //   140	143	296	finally
    //   152	194	286	java/io/IOException
    //   152	194	256	java/lang/UnsatisfiedLinkError
    //   152	194	472	finally
    //   194	197	472	finally
    //   197	243	250	finally
    //   251	254	250	finally
    //   254	256	472	finally
    //   257	262	472	finally
    //   266	284	472	finally
    //   284	286	472	finally
    //   287	296	472	finally
    //   297	300	296	finally
    //   300	302	472	finally
    //   305	312	472	finally
    //   315	327	472	finally
    //   337	380	472	finally
    //   380	440	452	finally
    //   440	449	472	finally
    //   453	462	472	finally
    //   462	464	472	finally
    //   464	467	472	finally
    //   473	476	472	finally
    //   479	482	478	finally }
  
  public static File b(String paramString) {
    c();
    try {
      return d(System.mapLibraryName(paramString));
    } catch (IOException paramString) {
      throw new RuntimeException(paramString);
    } 
  }
  
  private static Method b() {
    if (Build.VERSION.SDK_INT >= 23) {
      if (Build.VERSION.SDK_INT > 27)
        return null; 
      try {
        securityException = Runtime.class.getDeclaredMethod("nativeLoad", new Class[] { String.class, ClassLoader.class, String.class });
        securityException.setAccessible(true);
        return securityException;
      } catch (NoSuchMethodException null) {
      
      } catch (SecurityException securityException) {}
      Log.w("SoLoader", "Cannot get nativeLoad method", securityException);
    } 
    return null;
  }
  
  private static void b(Context paramContext, int paramInt, j paramj) {
    c.writeLock().lock();
    try {
      if (d == null) {
        Log.d("SoLoader", "init start");
        l = paramInt;
        ArrayList arrayList = new ArrayList();
        String str2 = System.getenv("LD_LIBRARY_PATH");
        String str1 = str2;
        if (str2 == null)
          str1 = "/vendor/lib:/system/lib"; 
        String[] arrayOfString = str1.split(":");
        int n;
        for (n = 0; n < arrayOfString.length; n++) {
          StringBuilder stringBuilder1 = new StringBuilder();
          stringBuilder1.append("adding system library source: ");
          stringBuilder1.append(arrayOfString[n]);
          Log.d("SoLoader", stringBuilder1.toString());
          arrayList.add(new c(new File(arrayOfString[n]), 2));
        } 
        if (paramContext != null)
          if ((paramInt & true) != 0) {
            f = null;
            Log.d("SoLoader", "adding exo package source: lib-main");
            arrayList.add(0, new e(paramContext, "lib-main"));
          } else {
            ApplicationInfo applicationInfo = paramContext.getApplicationInfo();
            if ((applicationInfo.flags & true) != 0 && (applicationInfo.flags & 0x80) == 0) {
              paramInt = 1;
            } else {
              paramInt = 0;
            } 
            if (paramInt != 0) {
              paramInt = 0;
            } else {
              if (Build.VERSION.SDK_INT <= 17) {
                paramInt = 1;
              } else {
                paramInt = 0;
              } 
              g = new b(paramContext, paramInt);
              StringBuilder stringBuilder1 = new StringBuilder();
              stringBuilder1.append("adding application source: ");
              stringBuilder1.append(g.toString());
              Log.d("SoLoader", stringBuilder1.toString());
              arrayList.add(0, g);
              paramInt = 1;
            } 
            if ((l & 0x8) != 0) {
              f = null;
            } else {
              File file = new File((paramContext.getApplicationInfo()).sourceDir);
              ArrayList arrayList1 = new ArrayList();
              a a1 = new a(paramContext, file, "lib-main", paramInt);
              arrayList1.add(a1);
              StringBuilder stringBuilder1 = new StringBuilder();
              stringBuilder1.append("adding backup source from : ");
              stringBuilder1.append(a1.toString());
              Log.d("SoLoader", stringBuilder1.toString());
              if (Build.VERSION.SDK_INT >= 21 && (paramContext.getApplicationInfo()).splitSourceDirs != null) {
                Log.d("SoLoader", "adding backup sources from split apks");
                String[] arrayOfString1 = (paramContext.getApplicationInfo()).splitSourceDirs;
                int i2 = arrayOfString1.length;
                byte b1 = 0;
                for (n = b1; b1 < i2; n++) {
                  File file1 = new File(arrayOfString1[b1]);
                  StringBuilder stringBuilder2 = new StringBuilder();
                  stringBuilder2.append("lib-");
                  stringBuilder2.append(n);
                  a a2 = new a(paramContext, file1, stringBuilder2.toString(), paramInt);
                  stringBuilder2 = new StringBuilder();
                  stringBuilder2.append("adding backup source: ");
                  stringBuilder2.append(a2.toString());
                  Log.d("SoLoader", stringBuilder2.toString());
                  arrayList1.add(a2);
                  b1++;
                } 
              } 
              f = (m[])arrayList1.toArray(new m[arrayList1.size()]);
              arrayList.addAll(0, arrayList1);
            } 
          }  
        k[] arrayOfk = (k[])arrayList.toArray(new k[arrayList.size()]);
        int i1 = a();
        paramInt = arrayOfk.length;
        while (true) {
          n = paramInt - 1;
          if (paramInt > 0) {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append("Preparing SO source: ");
            stringBuilder1.append(arrayOfk[n]);
            Log.d("SoLoader", stringBuilder1.toString());
            arrayOfk[n].a(i1);
            paramInt = n;
            continue;
          } 
          break;
        } 
        d = arrayOfk;
        e++;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("init finish: ");
        stringBuilder.append(d.length);
        stringBuilder.append(" SO sources prepared");
        Log.d("SoLoader", stringBuilder.toString());
      } 
      return;
    } finally {
      Log.d("SoLoader", "init exiting");
      c.writeLock().unlock();
    } 
  }
  
  private static void b(String paramString, int paramInt, StrictMode.ThreadPolicy paramThreadPolicy) {
    c.readLock().lock();
    try {
      arrayOfk = d;
      if (arrayOfk != null) {
        c.readLock().unlock();
        if (paramThreadPolicy == null) {
          paramThreadPolicy = StrictMode.allowThreadDiskReads();
          bool = true;
        } else {
          bool = false;
        } 
        if (a) {
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.append("SoLoader.loadLibrary[");
          stringBuilder2.append(paramString);
          stringBuilder2.append("]");
          Api18TraceUtils.a(stringBuilder2.toString());
        } 
        n = 0;
        while (true) {
          i2 = n;
          i1 = n;
          try {
            c.readLock().lock();
            i2 = n;
            i1 = n;
            i4 = e;
            i1 = 0;
            i2 = n;
            while (true) {
              i3 = i2;
              if (i2 == 0) {
                n = i2;
                i3 = i2;
                try {
                  if (i1 < d.length) {
                    n = i2;
                    i2 = d[i1].a(paramString, paramInt, paramThreadPolicy);
                    if (i2 == 3) {
                      n = i2;
                      if (f != null) {
                        n = i2;
                        StringBuilder stringBuilder2 = new StringBuilder();
                        n = i2;
                        stringBuilder2.append("Trying backup SoSource for ");
                        n = i2;
                        stringBuilder2.append(paramString);
                        n = i2;
                        Log.d("SoLoader", stringBuilder2.toString());
                        n = i2;
                        m[] arrayOfm = f;
                        n = i2;
                        int i5 = arrayOfm.length;
                        i1 = 0;
                        while (true) {
                          i3 = i2;
                          if (i1 < i5) {
                            m m1 = arrayOfm[i1];
                            n = i2;
                            m1.b(paramString);
                            n = i2;
                            i3 = m1.a(paramString, paramInt, paramThreadPolicy);
                            if (i3 == 1)
                              break; 
                            i1++;
                            continue;
                          } 
                          break;
                        } 
                        break;
                      } 
                    } 
                    i1++;
                    continue;
                  } 
                  break;
                } finally {
                  i2 = n;
                  i1 = n;
                  c.readLock().unlock();
                  i2 = n;
                  i1 = n;
                } 
              } 
              break;
            } 
            i2 = i3;
            i1 = i3;
            c.readLock().unlock();
          } catch (Throwable arrayOfk) {
          
          } finally {
            if (a)
              Api18TraceUtils.a(); 
            if (bool)
              StrictMode.setThreadPolicy(stringBuilder1); 
            if (i2 == 0 || i2 == 3) {
              stringBuilder1 = new StringBuilder();
              stringBuilder1.append("couldn't find DSO to load: ");
              stringBuilder1.append(paramString);
              paramString = stringBuilder1.toString();
              Log.e("SoLoader", paramString);
              throw new UnsatisfiedLinkError(paramString);
            } 
          } 
        } 
        if (a)
          Api18TraceUtils.a(); 
        if (bool)
          StrictMode.setThreadPolicy(stringBuilder1); 
        return;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Could not load: ");
      stringBuilder.append(paramString);
      stringBuilder.append(" because no SO source exists");
      Log.e("SoLoader", stringBuilder.toString());
      stringBuilder = new StringBuilder();
      stringBuilder.append("couldn't find DSO to load: ");
      stringBuilder.append(paramString);
      throw new UnsatisfiedLinkError(stringBuilder.toString());
    } finally {
      c.readLock().unlock();
    } 
  }
  
  public static String c(String paramString) {
    if (paramString == null)
      return null; 
    String[] arrayOfString = paramString.split(":");
    ArrayList arrayList = new ArrayList(arrayOfString.length);
    int n = arrayOfString.length;
    for (byte b1 = 0; b1 < n; b1++) {
      String str = arrayOfString[b1];
      if (!str.contains("!"))
        arrayList.add(str); 
    } 
    return TextUtils.join(":", arrayList);
  }
  
  private static void c() {
    c.readLock().lock();
    try {
      k[] arrayOfk = d;
      if (arrayOfk != null)
        return; 
      throw new RuntimeException("SoLoader.init() not yet called");
    } finally {
      c.readLock().unlock();
    } 
  }
  
  static File d(String paramString) {
    c.readLock().lock();
    byte b1 = 0;
    try {
      while (b1 < d.length) {
        file = d[b1].a(paramString);
        if (file != null)
          return file; 
        b1++;
      } 
      c.readLock().unlock();
      throw new FileNotFoundException(paramString);
    } finally {
      c.readLock().unlock();
    } 
  }
}
