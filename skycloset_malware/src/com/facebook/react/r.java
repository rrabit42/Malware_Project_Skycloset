package com.facebook.react;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import com.facebook.common.e.a;
import com.facebook.i.a.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.modules.appregistry.AppRegistry;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ab;
import com.facebook.react.uimanager.al;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.react.uimanager.common.a;
import com.facebook.react.uimanager.events.d;
import com.facebook.react.uimanager.f;
import com.facebook.react.uimanager.g;
import com.facebook.systrace.a;

public class r extends SizeMonitoringFrameLayout implements ab, a {
  private k a;
  
  private String b;
  
  private Bundle c;
  
  private String d;
  
  private a e;
  
  private b f;
  
  private int g;
  
  private boolean h;
  
  private boolean i;
  
  private g j;
  
  private final i k = new i(this);
  
  private boolean l = false;
  
  private int m = View.MeasureSpec.makeMeasureSpec(0, 0);
  
  private int n = View.MeasureSpec.makeMeasureSpec(0, 0);
  
  private int o = 1;
  
  public r(Context paramContext) {
    super(paramContext);
    d();
  }
  
  private void a(int paramInt1, int paramInt2) {
    k k1 = this.a;
    if (k1 == null) {
      a.c("ReactNative", "Unable to update root layout specs for uninitialized ReactInstanceManager");
      return;
    } 
    ReactContext reactContext = k1.j();
    if (reactContext != null)
      al.a(reactContext, getUIManagerType()).updateRootLayoutSpecs(getRootViewTag(), paramInt1, paramInt2); 
  }
  
  private void b(MotionEvent paramMotionEvent) {
    k k1 = this.a;
    if (k1 == null || !this.h || k1.j() == null) {
      a.c("ReactNative", "Unable to dispatch touch to JS as the catalyst instance has not been attached");
      return;
    } 
    if (this.j == null) {
      a.c("ReactNative", "Unable to dispatch touch to JS before the dispatcher is available");
      return;
    } 
    d d1 = ((UIManagerModule)this.a.j().getNativeModule(UIManagerModule.class)).getEventDispatcher();
    this.j.b(paramMotionEvent, d1);
  }
  
  private void d() { setClipChildren(false); }
  
  private void e() { getViewTreeObserver().removeOnGlobalLayoutListener(getCustomGlobalLayoutListener()); }
  
  private void f() {
    k k1 = this.a;
    if (k1 == null) {
      a.c("ReactNative", "Unable to enable layout calculation for uninitialized ReactInstanceManager");
      return;
    } 
    ReactContext reactContext = k1.j();
    if (reactContext != null)
      ((UIManagerModule)reactContext.getCatalystInstance().getNativeModule(UIManagerModule.class)).getUIImplementation().g(getRootViewTag()); 
  }
  
  private void g() {
    a.a(0L, "attachToReactInstanceManager");
    try {
      boolean bool = this.h;
      if (bool)
        return; 
      this.h = true;
      ((k)a.a(this.a)).a(this);
      getViewTreeObserver().addOnGlobalLayoutListener(getCustomGlobalLayoutListener());
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  private a getCustomGlobalLayoutListener() {
    if (this.e == null)
      this.e = new a(this); 
    return this.e;
  }
  
  public void a() {
    k k1 = this.a;
    if (k1 != null && this.h) {
      k1.b(this);
      this.a = null;
      this.h = false;
    } 
    this.i = false;
  }
  
  public void a(MotionEvent paramMotionEvent) {
    k k1 = this.a;
    if (k1 == null || !this.h || k1.j() == null) {
      a.c("ReactNative", "Unable to dispatch touch to JS as the catalyst instance has not been attached");
      return;
    } 
    if (this.j == null) {
      a.c("ReactNative", "Unable to dispatch touch to JS before the dispatcher is available");
      return;
    } 
    d d1 = ((UIManagerModule)this.a.j().getNativeModule(UIManagerModule.class)).getEventDispatcher();
    this.j.a(paramMotionEvent, d1);
  }
  
  public void a(k paramk, String paramString, Bundle paramBundle) { a(paramk, paramString, paramBundle, null); }
  
  public void a(k paramk, String paramString1, Bundle paramBundle, String paramString2) { a.a(0L, "startReactApplication"); }
  
  void a(String paramString, WritableMap paramWritableMap) {
    k k1 = this.a;
    if (k1 != null)
      ((DeviceEventManagerModule.RCTDeviceEventEmitter)k1.j().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit(paramString, paramWritableMap); 
  }
  
  public void a(Throwable paramThrowable) {
    f f1;
    k k1 = this.a;
    if (k1 != null && k1.j() != null) {
      f1 = new f(paramThrowable.getMessage(), this, paramThrowable);
      this.a.j().handleException(f1);
      return;
    } 
    throw new RuntimeException(f1);
  }
  
  public void b() {
    this.j = new g(this);
    b b1 = this.f;
    if (b1 != null)
      b1.a(this); 
  }
  
  void c() {
    a.a(0L, "ReactRootView.runApplication");
    try {
      if (this.a == null || !this.h)
        return; 
      ReactContext reactContext = this.a.j();
      if (reactContext == null)
        return; 
      CatalystInstance catalystInstance = reactContext.getCatalystInstance();
      WritableNativeMap writableNativeMap = new WritableNativeMap();
      writableNativeMap.putDouble("rootTag", getRootViewTag());
      Bundle bundle = getAppProperties();
      if (bundle != null)
        writableNativeMap.putMap("initialProps", Arguments.fromBundle(bundle)); 
      if (getUIManagerType() == 2)
        writableNativeMap.putBoolean("fabric", true); 
      this.i = true;
      String str = getJSModuleName();
      ((AppRegistry)catalystInstance.getJSModule(AppRegistry.class)).runApplication(str, writableNativeMap);
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  protected void dispatchDraw(Canvas paramCanvas) {
    try {
      super.dispatchDraw(paramCanvas);
      return;
    } catch (StackOverflowError paramCanvas) {
      a(paramCanvas);
      return;
    } 
  }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent) {
    k k1 = this.a;
    if (k1 == null || !this.h || k1.j() == null) {
      a.c("ReactNative", "Unable to handle key event as the catalyst instance has not been attached");
      return super.dispatchKeyEvent(paramKeyEvent);
    } 
    this.k.a(paramKeyEvent);
    return super.dispatchKeyEvent(paramKeyEvent);
  }
  
  protected void finalize() {
    super.finalize();
    a.a(this.h ^ true, "The application this ReactRootView was rendering was not unmounted before the ReactRootView was garbage collected. This usually means that your application is leaking large amounts of memory. To solve this, make sure to call ReactRootView#unmountReactApplication in the onDestroy() of your hosting Activity or in the onDestroyView() of your hosting Fragment.");
  }
  
  public Bundle getAppProperties() { return this.c; }
  
  public int getHeightMeasureSpec() { return (!this.l && getLayoutParams() != null && (getLayoutParams()).height > 0) ? View.MeasureSpec.makeMeasureSpec((getLayoutParams()).height, 1073741824) : this.n; }
  
  public String getInitialUITemplate() { return this.d; }
  
  String getJSModuleName() { return (String)a.a(this.b); }
  
  public k getReactInstanceManager() { return this.a; }
  
  public int getRootViewTag() { return this.g; }
  
  public int getUIManagerType() { return this.o; }
  
  public int getWidthMeasureSpec() { return (!this.l && getLayoutParams() != null && (getLayoutParams()).width > 0) ? View.MeasureSpec.makeMeasureSpec((getLayoutParams()).width, 1073741824) : this.m; }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.h) {
      e();
      getViewTreeObserver().addOnGlobalLayoutListener(getCustomGlobalLayoutListener());
    } 
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    if (this.h)
      e(); 
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect) {
    k k1 = this.a;
    if (k1 == null || !this.h || k1.j() == null) {
      a.c("ReactNative", "Unable to handle focus changed event as the catalyst instance has not been attached");
    } else {
      this.k.a();
    } 
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) {
    b(paramMotionEvent);
    return super.onInterceptTouchEvent(paramMotionEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    a.a(0L, "ReactRootView.onMeasure");
    try {
      this.m = paramInt1;
      this.n = paramInt2;
      int i1 = View.MeasureSpec.getMode(paramInt1);
      int i2 = 0;
      if (i1 == Integer.MIN_VALUE || i1 == 0) {
        i1 = 0;
        paramInt1 = i1;
        while (i1 < getChildCount()) {
          View view = getChildAt(i1);
          paramInt1 = Math.max(paramInt1, view.getLeft() + view.getMeasuredWidth() + view.getPaddingLeft() + view.getPaddingRight());
          i1++;
        } 
        i1 = paramInt1;
      } else {
        i1 = View.MeasureSpec.getSize(paramInt1);
      } 
      paramInt1 = View.MeasureSpec.getMode(paramInt2);
      if (paramInt1 == Integer.MIN_VALUE || paramInt1 == 0) {
        paramInt1 = 0;
        paramInt2 = i2;
        while (true) {
          i2 = paramInt1;
          if (paramInt2 < getChildCount()) {
            View view = getChildAt(paramInt2);
            paramInt1 = Math.max(paramInt1, view.getTop() + view.getMeasuredHeight() + view.getPaddingTop() + view.getPaddingBottom());
            paramInt2++;
            continue;
          } 
          break;
        } 
      } else {
        i2 = View.MeasureSpec.getSize(paramInt2);
      } 
      setMeasuredDimension(i1, i2);
      this.l = true;
      if (this.a != null && !this.h) {
        g();
        f();
      } else {
        f();
        a(this.m, this.n);
      } 
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    b(paramMotionEvent);
    super.onTouchEvent(paramMotionEvent);
    return true;
  }
  
  public void onViewAdded(View paramView) {
    super.onViewAdded(paramView);
    if (this.i) {
      this.i = false;
      if (this.b != null)
        ReactMarker.logMarker(ReactMarkerConstants.CONTENT_APPEARED, this.b, this.g); 
    } 
  }
  
  public void requestChildFocus(View paramView1, View paramView2) {
    k k1 = this.a;
    if (k1 == null || !this.h || k1.j() == null) {
      a.c("ReactNative", "Unable to handle child focus changed event as the catalyst instance has not been attached");
    } else {
      this.k.a(paramView2);
    } 
    super.requestChildFocus(paramView1, paramView2);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean) {
    if (getParent() != null)
      getParent().requestDisallowInterceptTouchEvent(paramBoolean); 
  }
  
  public void setAppProperties(Bundle paramBundle) {
    UiThreadUtil.assertOnUiThread();
    this.c = paramBundle;
    if (getRootViewTag() != 0)
      c(); 
  }
  
  public void setEventListener(b paramb) { this.f = paramb; }
  
  public void setIsFabric(boolean paramBoolean) {
    boolean bool;
    if (paramBoolean) {
      bool = true;
    } else {
      bool = true;
    } 
    this.o = bool;
  }
  
  public void setRootViewTag(int paramInt) { this.g = paramInt; }
}
