package com.facebook.react.common.futures;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class SimpleSettableFuture<T> extends Object implements Future<T> {
  private final CountDownLatch a = new CountDownLatch(1);
  
  private T b;
  
  private Exception c;
  
  private void b() {
    if (this.a.getCount() != 0L)
      return; 
    throw new RuntimeException("Result has already been set!");
  }
  
  public T a() {
    try {
      return (T)get();
    } catch (InterruptedException null) {
    
    } catch (ExecutionException executionException) {}
    throw new RuntimeException(executionException);
  }
  
  public void a(Exception paramException) {
    b();
    this.c = paramException;
    this.a.countDown();
  }
  
  public void a(T paramT) {
    b();
    this.b = paramT;
    this.a.countDown();
  }
  
  public boolean cancel(boolean paramBoolean) { throw new UnsupportedOperationException(); }
  
  public T get() {
    this.a.await();
    Exception exception = this.c;
    if (exception == null)
      return (T)this.b; 
    throw new ExecutionException(exception);
  }
  
  public T get(long paramLong, TimeUnit paramTimeUnit) {
    if (this.a.await(paramLong, paramTimeUnit)) {
      Exception exception = this.c;
      if (exception == null)
        return (T)this.b; 
      throw new ExecutionException(exception);
    } 
    throw new TimeoutException("Timed out waiting for result");
  }
  
  public boolean isCancelled() { return false; }
  
  public boolean isDone() { return (this.a.getCount() == 0L); }
}
