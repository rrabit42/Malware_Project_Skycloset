package com.facebook.react.uimanager;

import com.facebook.common.e.a;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import java.util.HashMap;
import java.util.Map;

public class as {
  private static final Map<Class<?>, e<?, ?>> a = new HashMap();
  
  private static final Map<Class<?>, d<?>> b = new HashMap();
  
  private static <T extends ViewManager, V extends android.view.View> e<T, V> a(Class<? extends ViewManager> paramClass) {
    e e = (e)a.get(paramClass);
    b b1 = e;
    if (e == null) {
      e = (e)c(paramClass);
      b1 = e;
      if (e == null)
        b1 = new b(paramClass, null); 
      a.put(paramClass, b1);
    } 
    return b1;
  }
  
  public static Map<String, String> a(Class<? extends ViewManager> paramClass1, Class<? extends w> paramClass2) {
    HashMap hashMap = new HashMap();
    a(paramClass1).a(hashMap);
    b(paramClass2).a(hashMap);
    return hashMap;
  }
  
  public static void a() {
    au.a();
    a.clear();
    b.clear();
  }
  
  public static <T extends ViewManager, V extends android.view.View> void a(T paramT, V paramV, y paramy) {
    e e = a(paramT.getClass());
    ReadableMapKeySetIterator readableMapKeySetIterator = paramy.a.keySetIterator();
    while (readableMapKeySetIterator.hasNextKey())
      e.a(paramT, paramV, readableMapKeySetIterator.nextKey(), paramy); 
  }
  
  public static <T extends w> void a(T paramT, y paramy) {
    d d = b(paramT.getClass());
    ReadableMapKeySetIterator readableMapKeySetIterator = paramy.a.keySetIterator();
    while (readableMapKeySetIterator.hasNextKey())
      d.a(paramT, readableMapKeySetIterator.nextKey(), paramy); 
  }
  
  private static <T extends w> d<T> b(Class<? extends w> paramClass) {
    d d = (d)b.get(paramClass);
    a a1 = d;
    if (d == null) {
      d = (d)c(paramClass);
      a1 = d;
      if (d == null)
        a1 = new a(paramClass, null); 
      b.put(paramClass, a1);
    } 
    return a1;
  }
  
  private static <T> T c(Class<?> paramClass) {
    StringBuilder stringBuilder = paramClass.getName();
    try {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(stringBuilder);
      stringBuilder1.append("$$PropsSetter");
      return (T)Class.forName(stringBuilder1.toString()).newInstance();
    } catch (ClassNotFoundException null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Could not find generated setter for ");
      stringBuilder.append(paramClass);
      a.c("ViewManagerPropertyUpdater", stringBuilder.toString());
      return null;
    } catch (InstantiationException paramClass) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Unable to instantiate methods getter for ");
      stringBuilder1.append(stringBuilder);
      throw new RuntimeException(stringBuilder1.toString(), paramClass);
    } catch (IllegalAccessException paramClass) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Unable to instantiate methods getter for ");
      stringBuilder1.append(stringBuilder);
      throw new RuntimeException(stringBuilder1.toString(), paramClass);
    } 
  }
}
