package com.facebook.react.uimanager;

import android.content.Context;
import android.os.Build;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.facebook.i.a.a;
import com.facebook.react.bridge.WritableNativeMap;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

public class c {
  private static DisplayMetrics a;
  
  private static DisplayMetrics b;
  
  @Deprecated
  public static DisplayMetrics a() { return a; }
  
  public static Map<String, Map<String, Object>> a(double paramDouble) {
    if (a != null || b != null) {
      boolean bool1 = true;
      a.a(Boolean.valueOf(bool1), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
      HashMap hashMap1 = new HashMap();
      hashMap1.put("windowPhysicalPixels", a(a, paramDouble));
      hashMap1.put("screenPhysicalPixels", a(b, paramDouble));
      return hashMap1;
    } 
    boolean bool = false;
    a.a(Boolean.valueOf(bool), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
    HashMap hashMap = new HashMap();
    hashMap.put("windowPhysicalPixels", a(a, paramDouble));
    hashMap.put("screenPhysicalPixels", a(b, paramDouble));
    return hashMap;
  }
  
  private static Map<String, Object> a(DisplayMetrics paramDisplayMetrics, double paramDouble) {
    HashMap hashMap = new HashMap();
    hashMap.put("width", Integer.valueOf(paramDisplayMetrics.widthPixels));
    hashMap.put("height", Integer.valueOf(paramDisplayMetrics.heightPixels));
    hashMap.put("scale", Float.valueOf(paramDisplayMetrics.density));
    hashMap.put("fontScale", Double.valueOf(paramDouble));
    hashMap.put("densityDpi", Integer.valueOf(paramDisplayMetrics.densityDpi));
    return hashMap;
  }
  
  public static void a(Context paramContext) {
    if (b() != null)
      return; 
    b(paramContext);
  }
  
  public static void a(DisplayMetrics paramDisplayMetrics) { a = paramDisplayMetrics; }
  
  public static DisplayMetrics b() { return b; }
  
  public static WritableNativeMap b(double paramDouble) {
    if (a != null || b != null) {
      boolean bool1 = true;
      a.a(Boolean.valueOf(bool1), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
      WritableNativeMap writableNativeMap1 = new WritableNativeMap();
      writableNativeMap1.putMap("windowPhysicalPixels", b(a, paramDouble));
      writableNativeMap1.putMap("screenPhysicalPixels", b(b, paramDouble));
      return writableNativeMap1;
    } 
    boolean bool = false;
    a.a(Boolean.valueOf(bool), "DisplayMetricsHolder must be initialized with initDisplayMetricsIfNotInitialized or initDisplayMetrics");
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    writableNativeMap.putMap("windowPhysicalPixels", b(a, paramDouble));
    writableNativeMap.putMap("screenPhysicalPixels", b(b, paramDouble));
    return writableNativeMap;
  }
  
  private static WritableNativeMap b(DisplayMetrics paramDisplayMetrics, double paramDouble) {
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    writableNativeMap.putInt("width", paramDisplayMetrics.widthPixels);
    writableNativeMap.putInt("height", paramDisplayMetrics.heightPixels);
    writableNativeMap.putDouble("scale", paramDisplayMetrics.density);
    writableNativeMap.putDouble("fontScale", paramDouble);
    writableNativeMap.putDouble("densityDpi", paramDisplayMetrics.densityDpi);
    return writableNativeMap;
  }
  
  public static void b(Context paramContext) {
    DisplayMetrics displayMetrics2 = paramContext.getResources().getDisplayMetrics();
    a(displayMetrics2);
    DisplayMetrics displayMetrics1 = new DisplayMetrics();
    displayMetrics1.setTo(displayMetrics2);
    WindowManager windowManager = (WindowManager)paramContext.getSystemService("window");
    a.a(windowManager, "WindowManager is null!");
    display = windowManager.getDefaultDisplay();
    if (Build.VERSION.SDK_INT >= 17) {
      display.getRealMetrics(displayMetrics1);
    } else {
      try {
        Method method = Display.class.getMethod("getRawHeight", new Class[0]);
        displayMetrics1.widthPixels = ((Integer)Display.class.getMethod("getRawWidth", new Class[0]).invoke(display, new Object[0])).intValue();
        displayMetrics1.heightPixels = ((Integer)method.invoke(display, new Object[0])).intValue();
        b(displayMetrics1);
        return;
      } catch (InvocationTargetException display) {
      
      } catch (IllegalAccessException display) {
      
      } catch (NoSuchMethodException display) {}
      throw new RuntimeException("Error getting real dimensions for API level < 17", display);
    } 
    b(displayMetrics1);
  }
  
  public static void b(DisplayMetrics paramDisplayMetrics) { b = paramDisplayMetrics; }
}
