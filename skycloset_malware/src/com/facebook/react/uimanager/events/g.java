package com.facebook.react.uimanager.events;

import android.support.v4.util.Pools;
import android.view.MotionEvent;
import com.facebook.i.a.a;
import com.facebook.react.bridge.SoftAssertions;

public class g extends c<g> {
  private static final Pools.a<g> a = new Pools.a(3);
  
  private MotionEvent b;
  
  private i c;
  
  private short d;
  
  private float e;
  
  private float f;
  
  public static g a(int paramInt, i parami, MotionEvent paramMotionEvent, long paramLong, float paramFloat1, float paramFloat2, h paramh) {
    g g2 = (g)a.a();
    g g1 = g2;
    if (g2 == null)
      g1 = new g(); 
    g1.b(paramInt, parami, paramMotionEvent, paramLong, paramFloat1, paramFloat2, paramh);
    return g1;
  }
  
  private void b(int paramInt, i parami, MotionEvent paramMotionEvent, long paramLong, float paramFloat1, float paramFloat2, h paramh) {
    boolean bool;
    StringBuilder stringBuilder;
    a(paramInt);
    short s = 0;
    if (paramLong != Float.MIN_VALUE) {
      bool = true;
    } else {
      bool = false;
    } 
    SoftAssertions.assertCondition(bool, "Gesture start time must be initialized");
    paramInt = paramMotionEvent.getAction() & 0xFF;
    switch (paramInt) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unhandled MotionEvent action: ");
        stringBuilder.append(paramInt);
        throw new RuntimeException(stringBuilder.toString());
      case 5:
      case 6:
        paramh.b(paramLong);
        break;
      case 2:
        s = paramh.c(paramLong);
        break;
      case 1:
      case 3:
        paramh.d(paramLong);
        break;
      case 0:
        paramh.a(paramLong);
        break;
    } 
    this.c = stringBuilder;
    this.b = MotionEvent.obtain(paramMotionEvent);
    this.d = s;
    this.e = paramFloat1;
    this.f = paramFloat2;
  }
  
  public void a() {
    ((MotionEvent)a.a(this.b)).recycle();
    this.b = null;
    a.a(this);
  }
  
  public void a(RCTEventEmitter paramRCTEventEmitter) { j.a(paramRCTEventEmitter, (i)a.a(this.c), c(), this); }
  
  public String b() { return i.a((i)a.a(this.c)); }
  
  public boolean e() {
    StringBuilder stringBuilder;
    switch (null.a[((i)a.a(this.c)).ordinal()]) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unknown touch event type: ");
        stringBuilder.append(this.c);
        throw new RuntimeException(stringBuilder.toString());
      case 4:
        return true;
      case 1:
      case 2:
      case 3:
        break;
    } 
    return false;
  }
  
  public short f() { return this.d; }
  
  public MotionEvent j() {
    a.a(this.b);
    return this.b;
  }
  
  public float k() { return this.e; }
  
  public float l() { return this.f; }
}
