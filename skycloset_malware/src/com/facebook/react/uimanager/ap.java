package com.facebook.react.uimanager;

import android.os.SystemClock;
import com.facebook.common.e.a;
import com.facebook.react.a.a;
import com.facebook.react.a.d;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.modules.core.e;
import com.facebook.react.uimanager.b.a;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.systrace.a;
import com.facebook.systrace.b;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class ap {
  private final int[] a = new int[4];
  
  private final k b;
  
  private final d c;
  
  private final Object d = new Object();
  
  private final Object e = new Object();
  
  private final h f;
  
  private final ReactApplicationContext g;
  
  private ArrayList<u> h = new ArrayList();
  
  private ArrayList<Runnable> i = new ArrayList();
  
  private ArrayDeque<u> j = new ArrayDeque();
  
  private a k;
  
  private boolean l = false;
  
  private boolean m = false;
  
  private boolean n = false;
  
  private long o;
  
  private long p;
  
  private long q;
  
  private long r;
  
  private long s;
  
  private long t;
  
  private long u;
  
  private long v;
  
  public ap(ReactApplicationContext paramReactApplicationContext, k paramk, int paramInt) {
    this.b = paramk;
    this.c = paramk.a();
    int i1 = paramInt;
    if (paramInt == -1)
      i1 = 8; 
    this.f = new h(this, paramReactApplicationContext, i1, null);
    this.g = paramReactApplicationContext;
  }
  
  private void i() {
    if (this.m) {
      a.c("ReactNative", "Not flushing pending UI operations because of previously thrown Exception");
      return;
    } 
    synchronized (this.d) {
      if (!this.i.isEmpty()) {
        ArrayList arrayList = this.i;
        this.i = new ArrayList();
        long l1 = SystemClock.uptimeMillis();
        null = arrayList.iterator();
        while (null.hasNext())
          ((Runnable)null.next()).run(); 
        if (this.n) {
          this.t = SystemClock.uptimeMillis() - l1;
          this.u = this.o;
          this.n = false;
          a.a(0L, "batchedExecutionTime", 0, 1000000L * l1);
          a.b(0L, "batchedExecutionTime", 0);
        } 
        this.o = 0L;
        return;
      } 
      return;
    } 
  }
  
  k a() { return this.b; }
  
  public void a(int paramInt) { this.h.add(new p(this, paramInt)); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2, Callback paramCallback) { this.h.add(new i(this, paramInt, paramFloat1, paramFloat2, paramCallback, null)); }
  
  public void a(int paramInt1, int paramInt2) { this.h.add(new q(this, paramInt1, paramInt2, null)); }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6) { this.h.add(new v(this, paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6)); }
  
  public void a(int paramInt1, int paramInt2, Callback paramCallback) { this.h.add(new a(this, paramInt1, paramInt2, paramCallback, null)); }
  
  public void a(int paramInt1, int paramInt2, ReadableArray paramReadableArray) { this.h.add(new g(this, paramInt1, paramInt2, paramReadableArray)); }
  
  public void a(int paramInt1, int paramInt2, boolean paramBoolean) { this.h.add(new c(this, paramInt1, paramInt2, false, paramBoolean)); }
  
  public void a(int paramInt, long paramLong1, long paramLong2) {
    b.a(0L, "UIViewOperationQueue.dispatchViewUpdates").a("batchId", paramInt).a();
    try {
      l1 = SystemClock.uptimeMillis();
      l2 = SystemClock.currentThreadTimeMillis();
      boolean bool = this.h.isEmpty();
      arrayDeque = null;
      if (!bool) {
        arrayList = this.h;
        this.h = new ArrayList();
      } else {
        arrayList = null;
      } 
      Object object = this.e;
      /* monitor enter ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
      try {
        if (!this.j.isEmpty()) {
          arrayDeque = this.j;
          this.j = new ArrayDeque();
        } 
        /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
        if (this.k != null)
          this.k.a(); 
      } finally {
        arrayList = null;
      } 
    } finally {}
    a.b(0L);
    throw arrayList;
  }
  
  public void a(int paramInt, Callback paramCallback) { this.h.add(new m(this, paramInt, paramCallback, null)); }
  
  public void a(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2) { this.h.add(new s(this, paramInt, paramReadableArray, paramCallback1, paramCallback2)); }
  
  public void a(int paramInt, SizeMonitoringFrameLayout paramSizeMonitoringFrameLayout, af paramaf) { this.b.a(paramInt, paramSizeMonitoringFrameLayout, paramaf); }
  
  public void a(int paramInt, Object paramObject) { this.h.add(new x(this, paramInt, paramObject)); }
  
  public void a(int paramInt, String paramString, y paramy) { this.h.add(new w(this, paramInt, paramy, null)); }
  
  public void a(int paramInt, int[] paramArrayOfInt1, aq[] paramArrayOfaq, int[] paramArrayOfInt2) { this.h.add(new k(this, paramInt, paramArrayOfInt1, paramArrayOfaq, paramArrayOfInt2)); }
  
  public void a(a parama) { this.h.add(new n(this, parama, null)); }
  
  public void a(ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2) { this.h.add(new d(this, paramReadableMap, null)); }
  
  public void a(af paramaf, int paramInt, String paramString, y paramy) {
    synchronized (this.e) {
      this.j.addLast(new e(this, paramaf, paramInt, paramString, paramy));
      return;
    } 
  }
  
  public void a(ai paramai) { this.h.add(new t(this, paramai)); }
  
  public void a(a parama) { this.k = parama; }
  
  public void a(w paramw, aj.a parama) { this.h.add(new j(this, paramw, parama, null)); }
  
  public void a(boolean paramBoolean) { this.h.add(new r(this, paramBoolean, null)); }
  
  public void b() {
    this.n = true;
    this.p = 0L;
  }
  
  public void b(int paramInt) { this.h.add(new o(this, paramInt, null)); }
  
  public void b(int paramInt, Callback paramCallback) { this.h.add(new l(this, paramInt, paramCallback, null)); }
  
  public void b(ai paramai) { this.h.add(0, new t(this, paramai)); }
  
  public Map<String, Long> c() {
    HashMap hashMap = new HashMap();
    hashMap.put("CommitStartTime", Long.valueOf(this.p));
    hashMap.put("LayoutTime", Long.valueOf(this.q));
    hashMap.put("DispatchViewUpdatesTime", Long.valueOf(this.r));
    hashMap.put("RunStartTime", Long.valueOf(this.s));
    hashMap.put("BatchedExecutionTime", Long.valueOf(this.t));
    hashMap.put("NonBatchedExecutionTime", Long.valueOf(this.u));
    hashMap.put("NativeModulesThreadCpuTime", Long.valueOf(this.v));
    return hashMap;
  }
  
  public boolean d() { return this.h.isEmpty(); }
  
  public void e() { this.h.add(new c(this, 0, 0, true, false)); }
  
  public void f() { this.h.add(new f(this, null)); }
  
  void g() {
    this.l = true;
    e.b().a(e.a.b, this.f);
  }
  
  void h() {
    this.l = false;
    e.b().b(e.a.b, this.f);
    i();
  }
}
