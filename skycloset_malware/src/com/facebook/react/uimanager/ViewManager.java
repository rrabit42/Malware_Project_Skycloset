package com.facebook.react.uimanager;

import android.view.View;
import com.facebook.react.bridge.BaseJavaModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.e.a;
import com.facebook.react.e.d;
import com.facebook.yoga.YogaMeasureMode;
import java.util.Map;

public abstract class ViewManager<T extends View, C extends w> extends BaseJavaModule {
  protected void addEventEmitters(af paramaf, T paramT) {}
  
  public C createShadowNodeInstance() { throw new RuntimeException("ViewManager subclasses must implement createShadowNodeInstance()"); }
  
  public C createShadowNodeInstance(ReactApplicationContext paramReactApplicationContext) { return (C)createShadowNodeInstance(); }
  
  public final T createView(af paramaf, a parama) {
    View view = createViewInstance(paramaf);
    addEventEmitters(paramaf, view);
    if (view instanceof d)
      ((d)view).setOnInterceptTouchEventListener(parama); 
    return (T)view;
  }
  
  protected abstract T createViewInstance(af paramaf);
  
  public Map<String, Integer> getCommandsMap() { return null; }
  
  public Map<String, Object> getExportedCustomBubblingEventTypeConstants() { return null; }
  
  public Map<String, Object> getExportedCustomDirectEventTypeConstants() { return null; }
  
  public Map<String, Object> getExportedViewConstants() { return null; }
  
  public abstract String getName();
  
  public Map<String, String> getNativeProps() { return as.a(getClass(), getShadowNodeClass()); }
  
  public abstract Class<? extends C> getShadowNodeClass();
  
  public long measure(ReactContext paramReactContext, ReadableNativeMap paramReadableNativeMap1, ReadableNativeMap paramReadableNativeMap2, float paramFloat1, YogaMeasureMode paramYogaMeasureMode1, float paramFloat2, YogaMeasureMode paramYogaMeasureMode2) { return 0L; }
  
  protected void onAfterUpdateTransaction(T paramT) {}
  
  public void onDropViewInstance(T paramT) {}
  
  public void receiveCommand(T paramT, int paramInt, ReadableArray paramReadableArray) {}
  
  public abstract void updateExtraData(T paramT, Object paramObject);
  
  public Object updateLocalData(T paramT, y paramy1, y paramy2) { return null; }
  
  public final void updateProperties(T paramT, y paramy) {
    as.a(this, paramT, paramy);
    onAfterUpdateTransaction(paramT);
  }
}
