package com.facebook.react.uimanager;

import android.support.v4.f.r;
import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.f;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.d.a;

public abstract class BaseViewManager<T extends View, C extends h> extends ViewManager<T, C> {
  private static final float CAMERA_DISTANCE_NORMALIZATION_MULTIPLIER = (float)Math.sqrt(5.0D);
  
  private static final int PERSPECTIVE_ARRAY_INVERTED_CAMERA_DISTANCE_INDEX = 2;
  
  private static final String PROP_ACCESSIBILITY_COMPONENT_TYPE = "accessibilityComponentType";
  
  private static final String PROP_ACCESSIBILITY_HINT = "accessibilityHint";
  
  private static final String PROP_ACCESSIBILITY_LABEL = "accessibilityLabel";
  
  private static final String PROP_ACCESSIBILITY_LIVE_REGION = "accessibilityLiveRegion";
  
  private static final String PROP_ACCESSIBILITY_ROLE = "accessibilityRole";
  
  private static final String PROP_ACCESSIBILITY_STATES = "accessibilityStates";
  
  private static final String PROP_BACKGROUND_COLOR = "backgroundColor";
  
  private static final String PROP_ELEVATION = "elevation";
  
  private static final String PROP_IMPORTANT_FOR_ACCESSIBILITY = "importantForAccessibility";
  
  public static final String PROP_NATIVE_ID = "nativeID";
  
  private static final String PROP_RENDER_TO_HARDWARE_TEXTURE = "renderToHardwareTextureAndroid";
  
  private static final String PROP_ROTATION = "rotation";
  
  private static final String PROP_SCALE_X = "scaleX";
  
  private static final String PROP_SCALE_Y = "scaleY";
  
  public static final String PROP_TEST_ID = "testID";
  
  private static final String PROP_TRANSFORM = "transform";
  
  private static final String PROP_TRANSLATE_X = "translateX";
  
  private static final String PROP_TRANSLATE_Y = "translateY";
  
  private static final String PROP_Z_INDEX = "zIndex";
  
  private static i.a sMatrixDecompositionContext = new i.a();
  
  private static double[] sTransformDecompositionArray = new double[16];
  
  private static void resetTransformProperty(View paramView) {
    paramView.setTranslationX(o.a(0.0F));
    paramView.setTranslationY(o.a(0.0F));
    paramView.setRotation(0.0F);
    paramView.setRotationX(0.0F);
    paramView.setRotationY(0.0F);
    paramView.setScaleX(1.0F);
    paramView.setScaleY(1.0F);
    paramView.setCameraDistance(0.0F);
  }
  
  private static void setTransformProperty(View paramView, ReadableArray paramReadableArray) {
    ah.a(paramReadableArray, sTransformDecompositionArray);
    i.a(sTransformDecompositionArray, sMatrixDecompositionContext);
    paramView.setTranslationX(o.a((float)sMatrixDecompositionContext.d[0]));
    paramView.setTranslationY(o.a((float)sMatrixDecompositionContext.d[1]));
    paramView.setRotation((float)sMatrixDecompositionContext.e[2]);
    paramView.setRotationX((float)sMatrixDecompositionContext.e[0]);
    paramView.setRotationY((float)sMatrixDecompositionContext.e[1]);
    paramView.setScaleX((float)sMatrixDecompositionContext.b[0]);
    paramView.setScaleY((float)sMatrixDecompositionContext.b[1]);
    double[] arrayOfDouble = sMatrixDecompositionContext.a;
    if (arrayOfDouble.length > 2) {
      float f2 = (float)arrayOfDouble[2];
      float f1 = f2;
      if (f2 == 0.0F)
        f1 = 7.8125E-4F; 
      f1 = -1.0F / f1;
      f2 = (c.b()).density;
      paramView.setCameraDistance(f2 * f2 * f1 * CAMERA_DISTANCE_NORMALIZATION_MULTIPLIER);
    } 
  }
  
  private void updateViewAccessibility(T paramT) { a.a(paramT); }
  
  protected void onAfterUpdateTransaction(T paramT) {
    super.onAfterUpdateTransaction(paramT);
    updateViewAccessibility(paramT);
  }
  
  @a(a = "accessibilityComponentType")
  public void setAccessibilityComponentType(T paramT, String paramString) { b.a(paramT, paramString); }
  
  @a(a = "accessibilityHint")
  public void setAccessibilityHint(T paramT, String paramString) { paramT.setTag(f.a.accessibility_hint, paramString); }
  
  @a(a = "accessibilityLabel")
  public void setAccessibilityLabel(T paramT, String paramString) { paramT.setContentDescription(paramString); }
  
  @a(a = "accessibilityLiveRegion")
  public void setAccessibilityLiveRegion(T paramT, String paramString) {
    byte b;
    if (paramString == null || paramString.equals("none")) {
      b = 0;
    } else if (paramString.equals("polite")) {
      b = 1;
    } else if (paramString.equals("assertive")) {
      b = 2;
    } else {
      return;
    } 
    r.c(paramT, b);
  }
  
  @a(a = "accessibilityRole")
  public void setAccessibilityRole(T paramT, String paramString) {
    if (paramString == null)
      return; 
    paramT.setTag(f.a.accessibility_role, a.a.a(paramString));
  }
  
  @a(a = "backgroundColor", b = "Color", e = 0)
  public void setBackgroundColor(T paramT, int paramInt) { paramT.setBackgroundColor(paramInt); }
  
  @a(a = "elevation")
  public void setElevation(T paramT, float paramFloat) { r.a(paramT, o.a(paramFloat)); }
  
  @a(a = "importantForAccessibility")
  public void setImportantForAccessibility(T paramT, String paramString) {
    byte b;
    if (paramString == null || paramString.equals("auto")) {
      b = 0;
    } else if (paramString.equals("yes")) {
      b = 1;
    } else if (paramString.equals("no")) {
      b = 2;
    } else if (paramString.equals("no-hide-descendants")) {
      b = 4;
    } else {
      return;
    } 
    r.a(paramT, b);
  }
  
  @a(a = "nativeID")
  public void setNativeId(T paramT, String paramString) {
    paramT.setTag(f.a.view_tag_native_id, paramString);
    a.a(paramT);
  }
  
  @a(a = "opacity", d = 1.0F)
  public void setOpacity(T paramT, float paramFloat) { paramT.setAlpha(paramFloat); }
  
  @a(a = "renderToHardwareTextureAndroid")
  public void setRenderToHardwareTexture(T paramT, boolean paramBoolean) {
    byte b;
    if (paramBoolean) {
      b = 2;
    } else {
      b = 0;
    } 
    paramT.setLayerType(b, null);
  }
  
  @a(a = "rotation")
  @Deprecated
  public void setRotation(T paramT, float paramFloat) { paramT.setRotation(paramFloat); }
  
  @a(a = "scaleX", d = 1.0F)
  @Deprecated
  public void setScaleX(T paramT, float paramFloat) { paramT.setScaleX(paramFloat); }
  
  @a(a = "scaleY", d = 1.0F)
  @Deprecated
  public void setScaleY(T paramT, float paramFloat) { paramT.setScaleY(paramFloat); }
  
  @a(a = "testID")
  public void setTestId(T paramT, String paramString) {
    paramT.setTag(f.a.react_test_id, paramString);
    paramT.setTag(paramString);
  }
  
  @a(a = "transform")
  public void setTransform(T paramT, ReadableArray paramReadableArray) {
    if (paramReadableArray == null) {
      resetTransformProperty(paramT);
      return;
    } 
    setTransformProperty(paramT, paramReadableArray);
  }
  
  @a(a = "translateX", d = 0.0F)
  @Deprecated
  public void setTranslateX(T paramT, float paramFloat) { paramT.setTranslationX(o.a(paramFloat)); }
  
  @a(a = "translateY", d = 0.0F)
  @Deprecated
  public void setTranslateY(T paramT, float paramFloat) { paramT.setTranslationY(o.a(paramFloat)); }
  
  @a(a = "accessibilityStates")
  public void setViewStates(T paramT, ReadableArray paramReadableArray) {
    paramT.setSelected(false);
    paramT.setEnabled(true);
    if (paramReadableArray == null)
      return; 
    for (byte b = 0; b < paramReadableArray.size(); b++) {
      String str = paramReadableArray.getString(b);
      if (str.equals("selected")) {
        paramT.setSelected(true);
      } else if (str.equals("disabled")) {
        paramT.setEnabled(false);
      } 
    } 
  }
  
  @a(a = "zIndex")
  public void setZIndex(T paramT, float paramFloat) {
    ViewGroupManager.setViewZIndex(paramT, Math.round(paramFloat));
    paramT = (T)paramT.getParent();
    if (paramT != null && paramT instanceof aa)
      ((aa)paramT).b(); 
  }
}
