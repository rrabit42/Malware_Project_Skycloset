package com.facebook.react.uimanager;

import android.util.SparseBooleanArray;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMapKeySetIterator;

public class l {
  private final ap a;
  
  private final ad b;
  
  private final SparseBooleanArray c = new SparseBooleanArray();
  
  public l(ap paramap, ad paramad) {
    this.a = paramap;
    this.b = paramad;
  }
  
  private a a(w paramw, int paramInt) {
    while (paramw.s()) {
      w w1 = paramw.l();
      if (w1 == null)
        return null; 
      paramInt += w1.d(paramw);
      paramw = w1;
    } 
    return new a(paramw, paramInt);
  }
  
  public static void a(w paramw) { paramw.p(); }
  
  private void a(w paramw, int paramInt1, int paramInt2) {
    if (!paramw.s() && paramw.r() != null) {
      int i = paramw.j();
      this.a.a(paramw.r().j(), i, paramInt1, paramInt2, paramw.x(), paramw.y());
      return;
    } 
    byte b1;
    for (b1 = 0; b1 < paramw.g(); b1++) {
      w w1 = paramw.b(b1);
      int i = w1.j();
      if (!this.c.get(i)) {
        this.c.put(i, true);
        a(w1, w1.v() + paramInt1, w1.w() + paramInt2);
      } 
    } 
  }
  
  private void a(w paramw1, w paramw2, int paramInt) {
    int i = paramw1.d(paramw1.b(paramInt));
    w w1 = paramw1;
    paramInt = i;
    if (paramw1.s()) {
      a a1 = a(paramw1, i);
      if (a1 == null)
        return; 
      w1 = a1.a;
      paramInt = a1.b;
    } 
    if (!paramw2.s()) {
      c(w1, paramw2, paramInt);
      return;
    } 
    b(w1, paramw2, paramInt);
  }
  
  private void a(w paramw, y paramy) {
    boolean bool;
    w w1 = paramw.l();
    int j = 0;
    if (w1 == null) {
      paramw.a(false);
      return;
    } 
    int i = w1.a(paramw);
    w1.a(i);
    a(paramw, false);
    paramw.a(false);
    this.a.a(paramw.m(), paramw.j(), paramw.c(), paramy);
    w1.a(paramw, i);
    a(w1, paramw, i);
    for (i = 0; i < paramw.g(); i++)
      a(paramw, paramw.b(i), i); 
    if (this.c.size() == 0) {
      bool = true;
    } else {
      bool = false;
    } 
    a.a(bool);
    c(paramw);
    for (i = j; i < paramw.g(); i++)
      c(paramw.b(i)); 
    this.c.clear();
  }
  
  private void a(w paramw, boolean paramBoolean) {
    w w1 = paramw.r();
    if (w1 != null) {
      int j = w1.b(paramw);
      w1.e(j);
      ap ap1 = this.a;
      int k = w1.j();
      if (paramBoolean) {
        int[] arrayOfInt2 = new int[1];
        arrayOfInt2[0] = paramw.j();
        int[] arrayOfInt1 = arrayOfInt2;
      } else {
        paramw = null;
      } 
      ap1.a(k, new int[] { j }, null, paramw);
      return;
    } 
    for (int i = paramw.g() - 1; i >= 0; i--)
      a(paramw.b(i), paramBoolean); 
  }
  
  private static boolean a(y paramy) {
    if (paramy == null)
      return true; 
    if (paramy.a("collapsable") && !paramy.a("collapsable", true))
      return false; 
    ReadableMapKeySetIterator readableMapKeySetIterator = paramy.a.keySetIterator();
    while (readableMapKeySetIterator.hasNextKey()) {
      if (!av.a(paramy.a, readableMapKeySetIterator.nextKey()))
        return false; 
    } 
    return true;
  }
  
  private void b(w paramw1, w paramw2, int paramInt) { d(paramw1, paramw2, paramInt); }
  
  private void c(w paramw) {
    int i = paramw.j();
    if (this.c.get(i))
      return; 
    this.c.put(i, true);
    w w1 = paramw.l();
    int j = paramw.v();
    i = paramw.w();
    while (w1 != null && w1.s()) {
      j += Math.round(w1.t());
      i += Math.round(w1.u());
      w1 = w1.l();
    } 
    a(paramw, j, i);
  }
  
  private void c(w paramw1, w paramw2, int paramInt) {
    paramw1.b(paramw2, paramInt);
    this.a.a(paramw1.j(), null, new aq[] { new aq(paramw2.j(), paramInt) }null);
  }
  
  private void d(w paramw1, w paramw2, int paramInt) {
    a.a(paramw1.s() ^ true);
    byte b1;
    for (b1 = 0; b1 < paramw2.g(); b1++) {
      boolean bool;
      w w1 = paramw2.b(b1);
      if (w1.r() == null) {
        bool = true;
      } else {
        bool = false;
      } 
      a.a(bool);
      if (w1.s()) {
        int i = paramw1.q();
        b(paramw1, w1, paramInt);
        paramInt += paramw1.q() - i;
      } else {
        c(paramw1, w1, paramInt);
        paramInt++;
      } 
    } 
  }
  
  public void a() { this.c.clear(); }
  
  public void a(w paramw, ReadableArray paramReadableArray) {
    for (byte b1 = 0; b1 < paramReadableArray.size(); b1++)
      a(paramw, this.b.c(paramReadableArray.getInt(b1)), b1); 
  }
  
  public void a(w paramw, af paramaf, y paramy) {
    boolean bool;
    if (paramw.c().equals("RCTView") && a(paramy)) {
      bool = true;
    } else {
      bool = false;
    } 
    paramw.a(bool);
    if (!bool)
      this.a.a(paramaf, paramw.j(), paramw.c(), paramy); 
  }
  
  public void a(w paramw, String paramString, y paramy) {
    boolean bool;
    if (paramw.s() && !a(paramy)) {
      bool = true;
    } else {
      bool = false;
    } 
    if (bool) {
      a(paramw, paramy);
      return;
    } 
    if (!paramw.s())
      this.a.a(paramw.j(), paramString, paramy); 
  }
  
  public void a(w paramw, int[] paramArrayOfInt1, int[] paramArrayOfInt2, aq[] paramArrayOfaq, int[] paramArrayOfInt3) {
    byte b2;
    boolean bool = false;
    byte b1 = 0;
    while (true) {
      b2 = bool;
      if (b1 < paramArrayOfInt2.length) {
        boolean bool1;
        int i = paramArrayOfInt2[b1];
        b2 = 0;
        while (true) {
          if (b2 < paramArrayOfInt3.length) {
            if (paramArrayOfInt3[b2] == i) {
              boolean bool2 = true;
              break;
            } 
            b2++;
            continue;
          } 
          bool1 = false;
          break;
        } 
        a(this.b.c(i), bool1);
        b1++;
        continue;
      } 
      break;
    } 
    while (b2 < paramArrayOfaq.length) {
      aq aq1 = paramArrayOfaq[b2];
      a(paramw, this.b.c(aq1.b), aq1.c);
      b2++;
    } 
  }
  
  public void b(w paramw) { c(paramw); }
}
