package com.facebook.react.uimanager;

import com.facebook.react.bridge.Dynamic;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.modules.i18nmanager.a;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.yoga.YogaAlign;
import com.facebook.yoga.YogaDisplay;
import com.facebook.yoga.YogaFlexDirection;
import com.facebook.yoga.YogaJustify;
import com.facebook.yoga.YogaOverflow;
import com.facebook.yoga.YogaPositionType;
import com.facebook.yoga.YogaWrap;

public class h extends x {
  private final a a = new a(null);
  
  private int k(int paramInt) { return !a.a().b(m()) ? paramInt : ((paramInt != 0) ? ((paramInt != 2) ? paramInt : 5) : 4); }
  
  @a(a = "alignContent")
  public void setAlignContent(String paramString) {
    StringBuilder stringBuilder;
    if (a())
      return; 
    if (paramString == null);
    byte b = -1;
    switch (paramString.hashCode()) {
      case 1937124468:
        if (paramString.equals("space-around"))
          b = 7; 
        break;
      case 1742952711:
        if (paramString.equals("flex-end"))
          b = 3; 
        break;
      case 441309761:
        if (paramString.equals("space-between"))
          b = 6; 
        break;
      case 3005871:
        if (paramString.equals("auto"))
          b = 0; 
        break;
      case -46581362:
        if (paramString.equals("flex-start"))
          b = 1; 
        break;
      case -1364013995:
        if (paramString.equals("center"))
          b = 2; 
        break;
      case -1720785339:
        if (paramString.equals("baseline"))
          b = 5; 
        break;
      case -1881872635:
        if (paramString.equals("stretch"))
          b = 4; 
        break;
    } 
    switch (b) {
      case 1:
        yogaAlign = YogaAlign.b;
        c(yogaAlign);
        return;
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for alignContent: ");
        stringBuilder.append(yogaAlign);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 7:
        yogaAlign = YogaAlign.h;
        c(yogaAlign);
        return;
      case 6:
        yogaAlign = YogaAlign.g;
        c(yogaAlign);
        return;
      case 5:
        yogaAlign = YogaAlign.f;
        c(yogaAlign);
        return;
      case 4:
        yogaAlign = YogaAlign.e;
        c(yogaAlign);
        return;
      case 3:
        yogaAlign = YogaAlign.d;
        c(yogaAlign);
        return;
      case 2:
        yogaAlign = YogaAlign.c;
        c(yogaAlign);
        return;
      case 0:
        break;
    } 
    YogaAlign yogaAlign = YogaAlign.a;
    c(yogaAlign);
  }
  
  @a(a = "alignItems")
  public void setAlignItems(String paramString) {
    StringBuilder stringBuilder;
    if (a())
      return; 
    if (paramString == null);
    byte b = -1;
    switch (paramString.hashCode()) {
      case 1937124468:
        if (paramString.equals("space-around"))
          b = 7; 
        break;
      case 1742952711:
        if (paramString.equals("flex-end"))
          b = 3; 
        break;
      case 441309761:
        if (paramString.equals("space-between"))
          b = 6; 
        break;
      case 3005871:
        if (paramString.equals("auto"))
          b = 0; 
        break;
      case -46581362:
        if (paramString.equals("flex-start"))
          b = 1; 
        break;
      case -1364013995:
        if (paramString.equals("center"))
          b = 2; 
        break;
      case -1720785339:
        if (paramString.equals("baseline"))
          b = 5; 
        break;
      case -1881872635:
        if (paramString.equals("stretch"))
          b = 4; 
        break;
    } 
    switch (b) {
      case 4:
        yogaAlign = YogaAlign.e;
        b(yogaAlign);
        return;
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for alignItems: ");
        stringBuilder.append(yogaAlign);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 7:
        yogaAlign = YogaAlign.h;
        b(yogaAlign);
        return;
      case 6:
        yogaAlign = YogaAlign.g;
        b(yogaAlign);
        return;
      case 5:
        yogaAlign = YogaAlign.f;
        b(yogaAlign);
        return;
      case 3:
        yogaAlign = YogaAlign.d;
        b(yogaAlign);
        return;
      case 2:
        yogaAlign = YogaAlign.c;
        b(yogaAlign);
        return;
      case 1:
        yogaAlign = YogaAlign.b;
        b(yogaAlign);
        return;
      case 0:
        break;
    } 
    YogaAlign yogaAlign = YogaAlign.a;
    b(yogaAlign);
  }
  
  @a(a = "alignSelf")
  public void setAlignSelf(String paramString) {
    StringBuilder stringBuilder;
    if (a())
      return; 
    if (paramString == null);
    byte b = -1;
    switch (paramString.hashCode()) {
      case 1937124468:
        if (paramString.equals("space-around"))
          b = 7; 
        break;
      case 1742952711:
        if (paramString.equals("flex-end"))
          b = 3; 
        break;
      case 441309761:
        if (paramString.equals("space-between"))
          b = 6; 
        break;
      case 3005871:
        if (paramString.equals("auto"))
          b = 0; 
        break;
      case -46581362:
        if (paramString.equals("flex-start"))
          b = 1; 
        break;
      case -1364013995:
        if (paramString.equals("center"))
          b = 2; 
        break;
      case -1720785339:
        if (paramString.equals("baseline"))
          b = 5; 
        break;
      case -1881872635:
        if (paramString.equals("stretch"))
          b = 4; 
        break;
    } 
    switch (b) {
      case 0:
        yogaAlign = YogaAlign.a;
        a(yogaAlign);
        return;
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for alignSelf: ");
        stringBuilder.append(yogaAlign);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 7:
        yogaAlign = YogaAlign.h;
        a(yogaAlign);
        return;
      case 6:
        yogaAlign = YogaAlign.g;
        a(yogaAlign);
        return;
      case 5:
        yogaAlign = YogaAlign.f;
        a(yogaAlign);
        return;
      case 4:
        yogaAlign = YogaAlign.e;
        a(yogaAlign);
        return;
      case 3:
        yogaAlign = YogaAlign.d;
        a(yogaAlign);
        return;
      case 2:
        yogaAlign = YogaAlign.c;
        a(yogaAlign);
        return;
      case 1:
        break;
    } 
    YogaAlign yogaAlign = YogaAlign.b;
    a(yogaAlign);
  }
  
  @a(a = "aspectRatio", d = NaNF)
  public void setAspectRatio(float paramFloat) { o(paramFloat); }
  
  @b(a = {"borderWidth", "borderStartWidth", "borderEndWidth", "borderTopWidth", "borderBottomWidth", "borderLeftWidth", "borderRightWidth"}, c = NaNF)
  public void setBorderWidths(int paramInt, float paramFloat) {
    if (a())
      return; 
    f(k(av.a[paramInt]), o.a(paramFloat));
  }
  
  @a(a = "display")
  public void setDisplay(String paramString) {
    StringBuilder stringBuilder;
    YogaDisplay yogaDisplay;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaDisplay.a);
      return;
    } 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != 3145721) {
      if (i == 3387192 && paramString.equals("none"))
        b = 1; 
    } else if (paramString.equals("flex")) {
      b = 0;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for display: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 1:
        yogaDisplay = YogaDisplay.b;
        break;
      case 0:
        yogaDisplay = YogaDisplay.a;
        break;
    } 
    a(yogaDisplay);
  }
  
  @a(a = "flex", d = 0.0F)
  public void setFlex(float paramFloat) {
    if (a())
      return; 
    super.setFlex(paramFloat);
  }
  
  @a(a = "flexBasis")
  public void setFlexBasis(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    switch (null.a[this.a.b.ordinal()]) {
      case 4:
        n(this.a.a);
        break;
      case 3:
        O();
        break;
      case 1:
      case 2:
        m(this.a.a);
        break;
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "flexDirection")
  public void setFlexDirection(String paramString) {
    StringBuilder stringBuilder;
    YogaFlexDirection yogaFlexDirection;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaFlexDirection.a);
      return;
    } 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != -1448970769) {
      if (i != -1354837162) {
        if (i != 113114) {
          if (i == 1272730475 && paramString.equals("column-reverse"))
            b = 1; 
        } else if (paramString.equals("row")) {
          b = 2;
        } 
      } else if (paramString.equals("column")) {
        b = 0;
      } 
    } else if (paramString.equals("row-reverse")) {
      b = 3;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for flexDirection: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 3:
        yogaFlexDirection = YogaFlexDirection.d;
        break;
      case 2:
        yogaFlexDirection = YogaFlexDirection.c;
        break;
      case 1:
        yogaFlexDirection = YogaFlexDirection.b;
        break;
      case 0:
        yogaFlexDirection = YogaFlexDirection.a;
        break;
    } 
    a(yogaFlexDirection);
  }
  
  @a(a = "flexGrow", d = 0.0F)
  public void setFlexGrow(float paramFloat) {
    if (a())
      return; 
    super.setFlexGrow(paramFloat);
  }
  
  @a(a = "flexShrink", d = 0.0F)
  public void setFlexShrink(float paramFloat) {
    if (a())
      return; 
    super.setFlexShrink(paramFloat);
  }
  
  @a(a = "flexWrap")
  public void setFlexWrap(String paramString) {
    StringBuilder stringBuilder;
    YogaWrap yogaWrap;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaWrap.a);
      return;
    } 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != -1039592053) {
      if (i != -749527969) {
        if (i == 3657802 && paramString.equals("wrap"))
          b = 1; 
      } else if (paramString.equals("wrap-reverse")) {
        b = 2;
      } 
    } else if (paramString.equals("nowrap")) {
      b = 0;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for flexWrap: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 2:
        yogaWrap = YogaWrap.c;
        break;
      case 1:
        yogaWrap = YogaWrap.b;
        break;
      case 0:
        yogaWrap = YogaWrap.a;
        break;
    } 
    a(yogaWrap);
  }
  
  @a(a = "height")
  public void setHeight(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    switch (null.a[this.a.b.ordinal()]) {
      case 4:
        i(this.a.a);
        break;
      case 3:
        A();
        break;
      case 1:
      case 2:
        c(this.a.a);
        break;
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "justifyContent")
  public void setJustifyContent(String paramString) {
    StringBuilder stringBuilder;
    YogaJustify yogaJustify;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaJustify.a);
      return;
    } 
    byte b = -1;
    switch (paramString.hashCode()) {
      case 2055030478:
        if (paramString.equals("space-evenly"))
          b = 5; 
        break;
      case 1937124468:
        if (paramString.equals("space-around"))
          b = 4; 
        break;
      case 1742952711:
        if (paramString.equals("flex-end"))
          b = 2; 
        break;
      case 441309761:
        if (paramString.equals("space-between"))
          b = 3; 
        break;
      case -46581362:
        if (paramString.equals("flex-start"))
          b = 0; 
        break;
      case -1364013995:
        if (paramString.equals("center"))
          b = 1; 
        break;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for justifyContent: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 5:
        yogaJustify = YogaJustify.f;
        break;
      case 4:
        yogaJustify = YogaJustify.e;
        break;
      case 3:
        yogaJustify = YogaJustify.d;
        break;
      case 2:
        yogaJustify = YogaJustify.c;
        break;
      case 1:
        yogaJustify = YogaJustify.b;
        break;
      case 0:
        yogaJustify = YogaJustify.a;
        break;
    } 
    a(yogaJustify);
  }
  
  @b(a = {"margin", "marginVertical", "marginHorizontal", "marginStart", "marginEnd", "marginTop", "marginBottom", "marginLeft", "marginRight"})
  public void setMargins(int paramInt, Dynamic paramDynamic) {
    if (a())
      return; 
    paramInt = k(av.b[paramInt]);
    this.a.a(paramDynamic);
    switch (null.a[this.a.b.ordinal()]) {
      case 4:
        b(paramInt, this.a.a);
        break;
      case 3:
        i(paramInt);
        break;
      case 1:
      case 2:
        a(paramInt, this.a.a);
        break;
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "maxHeight")
  public void setMaxHeight(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          d(this.a.a);
          break;
      } 
    } else {
      l(this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "maxWidth")
  public void setMaxWidth(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          b(this.a.a);
          break;
      } 
    } else {
      h(this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "minHeight")
  public void setMinHeight(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          j(this.a.a);
          break;
      } 
    } else {
      k(this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "minWidth")
  public void setMinWidth(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          f(this.a.a);
          break;
      } 
    } else {
      g(this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "overflow")
  public void setOverflow(String paramString) {
    StringBuilder stringBuilder;
    YogaOverflow yogaOverflow;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaOverflow.a);
      return;
    } 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != -1217487446) {
      if (i != -907680051) {
        if (i == 466743410 && paramString.equals("visible"))
          b = 0; 
      } else if (paramString.equals("scroll")) {
        b = 2;
      } 
    } else if (paramString.equals("hidden")) {
      b = 1;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for overflow: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 2:
        yogaOverflow = YogaOverflow.c;
        break;
      case 1:
        yogaOverflow = YogaOverflow.b;
        break;
      case 0:
        yogaOverflow = YogaOverflow.a;
        break;
    } 
    a(yogaOverflow);
  }
  
  @b(a = {"padding", "paddingVertical", "paddingHorizontal", "paddingStart", "paddingEnd", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"})
  public void setPaddings(int paramInt, Dynamic paramDynamic) {
    if (a())
      return; 
    paramInt = k(av.b[paramInt]);
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          d(paramInt, this.a.a);
          break;
      } 
    } else {
      e(paramInt, this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "position")
  public void setPosition(String paramString) {
    StringBuilder stringBuilder;
    YogaPositionType yogaPositionType;
    if (a())
      return; 
    if (paramString == null) {
      a(YogaPositionType.a);
      return;
    } 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != -554435892) {
      if (i == 1728122231 && paramString.equals("absolute"))
        b = 1; 
    } else if (paramString.equals("relative")) {
      b = 0;
    } 
    switch (b) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("invalid value for position: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      case 1:
        yogaPositionType = YogaPositionType.b;
        break;
      case 0:
        yogaPositionType = YogaPositionType.a;
        break;
    } 
    a(yogaPositionType);
  }
  
  @b(a = {"start", "end", "left", "right", "top", "bottom"})
  public void setPositionValues(int paramInt, Dynamic paramDynamic) {
    if (a())
      return; 
    new int[6][0] = 4;
    new int[6][1] = 5;
    new int[6][2] = 0;
    new int[6][3] = 2;
    new int[6][4] = 1;
    new int[6][5] = 3;
    paramInt = k(new int[6][paramInt]);
    this.a.a(paramDynamic);
    int i = null.a[this.a.b.ordinal()];
    if (i != 4) {
      switch (i) {
        case 1:
        case 2:
          g(paramInt, this.a.a);
          break;
      } 
    } else {
      h(paramInt, this.a.a);
    } 
    paramDynamic.recycle();
  }
  
  @a(a = "onLayout")
  public void setShouldNotifyOnLayout(boolean paramBoolean) { super.setShouldNotifyOnLayout(paramBoolean); }
  
  @a(a = "width")
  public void setWidth(Dynamic paramDynamic) {
    if (a())
      return; 
    this.a.a(paramDynamic);
    switch (null.a[this.a.b.ordinal()]) {
      case 4:
        e(this.a.a);
        break;
      case 3:
        z();
        break;
      case 1:
      case 2:
        a(this.a.a);
        break;
    } 
    paramDynamic.recycle();
  }
}
