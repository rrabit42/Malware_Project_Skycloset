package com.facebook.react.uimanager;

import com.facebook.i.a.a;
import com.facebook.yoga.YogaAlign;
import com.facebook.yoga.YogaConfig;
import com.facebook.yoga.YogaDirection;
import com.facebook.yoga.YogaDisplay;
import com.facebook.yoga.YogaEdge;
import com.facebook.yoga.YogaFlexDirection;
import com.facebook.yoga.YogaJustify;
import com.facebook.yoga.YogaMeasureFunction;
import com.facebook.yoga.YogaNode;
import com.facebook.yoga.YogaOverflow;
import com.facebook.yoga.YogaPositionType;
import com.facebook.yoga.YogaWrap;
import com.facebook.yoga.a;
import java.util.ArrayList;
import java.util.Arrays;

public class x extends Object implements w<x> {
  private static final YogaConfig a = z.a();
  
  private int b;
  
  private String c;
  
  private int d;
  
  private af e;
  
  private boolean f;
  
  private boolean g = true;
  
  private ArrayList<x> h;
  
  private x i;
  
  private boolean j;
  
  private int k = 0;
  
  private x l;
  
  private ArrayList<x> m;
  
  private int n;
  
  private int o;
  
  private int p;
  
  private int q;
  
  private final ae r = new ae(0.0F);
  
  private final float[] s = new float[9];
  
  private final boolean[] t = new boolean[9];
  
  private YogaNode u;
  
  public x() {
    if (!a()) {
      YogaNode yogaNode2 = (YogaNode)aw.a().a();
      YogaNode yogaNode1 = yogaNode2;
      if (yogaNode2 == null)
        yogaNode1 = new YogaNode(a); 
      this.u = yogaNode1;
      this.u.a(this);
      Arrays.fill(this.s, NaNF);
      return;
    } 
    this.u = null;
  }
  
  private void Q() {
    byte b1 = 0;
    while (true) {
      YogaEdge yogaEdge;
      YogaNode yogaNode;
      float f1;
      if (b1 <= 8) {
        if ((b1 == 5) ? (a.a(this.s[b1]) && a.a(this.s[6]) && a.a(this.s[8])) : ((b1 == 3) ? (a.a(this.s[b1]) && a.a(this.s[7]) && a.a(this.s[8])) : a.a(this.s[b1]))) {
          yogaNode = this.u;
          yogaEdge = YogaEdge.a(b1);
          f1 = this.r.b(b1);
        } else {
          if (this.t[b1]) {
            this.u.d(YogaEdge.a(b1), this.s[b1]);
          } else {
            yogaNode = this.u;
            yogaEdge = YogaEdge.a(b1);
            f1 = this.s[b1];
            yogaNode.c(yogaEdge, f1);
          } 
          b1++;
          continue;
        } 
      } else {
        break;
      } 
      yogaNode.c(yogaEdge, f1);
    } 
  }
  
  private void k(int paramInt) {
    if (this.j)
      for (x x1 = G(); x1 != null; x1 = x1.G()) {
        x1.k += paramInt;
        if (!x1.s())
          return; 
      }  
  }
  
  public void A() { this.u.j(); }
  
  public void B() {
    YogaNode yogaNode = this.u;
    if (yogaNode != null) {
      yogaNode.b();
      aw.a().a(this.u);
    } 
  }
  
  public boolean C() { return P(); }
  
  public void D() {
    if (this.g)
      return; 
    this.g = true;
    x x1 = G();
    if (x1 != null)
      x1.D(); 
  }
  
  public final boolean E() {
    YogaNode yogaNode = this.u;
    return (yogaNode != null && yogaNode.f());
  }
  
  public void F() {}
  
  public final x G() { return this.i; }
  
  public final boolean H() {
    YogaNode yogaNode = this.u;
    return (yogaNode != null && yogaNode.d());
  }
  
  public final void I() {
    YogaNode yogaNode = this.u;
    if (yogaNode != null)
      yogaNode.g(); 
  }
  
  public final x J() { return this.l; }
  
  public final int K() { return this.k; }
  
  public final float L() { return this.u.m(); }
  
  public final float M() { return this.u.n(); }
  
  public final YogaDirection N() { return this.u.o(); }
  
  public void O() { this.u.h(); }
  
  public boolean P() { return this.u.p(); }
  
  public final int a(x paramx) {
    ArrayList arrayList = this.h;
    return (arrayList == null) ? -1 : arrayList.indexOf(paramx);
  }
  
  public void a(float paramFloat) { this.u.f(paramFloat); }
  
  public void a(int paramInt, float paramFloat) { this.u.a(YogaEdge.a(paramInt), paramFloat); }
  
  public void a(af paramaf) { this.e = paramaf; }
  
  public void a(ap paramap) {}
  
  public void a(x paramx, int paramInt) {
    if (this.h == null)
      this.h = new ArrayList(4); 
    this.h.add(paramInt, paramx);
    paramx.i = this;
    if (this.u != null && !C()) {
      YogaNode yogaNode = paramx.u;
      if (yogaNode != null) {
        this.u.a(yogaNode, paramInt);
      } else {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Cannot add a child that doesn't have a YogaNode to a parent without a measure function! (Trying to add a '");
        stringBuilder.append(paramx.toString());
        stringBuilder.append("' to a '");
        stringBuilder.append(toString());
        stringBuilder.append("')");
        throw new RuntimeException(stringBuilder.toString());
      } 
    } 
    D();
    if (paramx.s()) {
      paramInt = paramx.K();
    } else {
      paramInt = 1;
    } 
    this.k += paramInt;
    k(paramInt);
  }
  
  public final void a(y paramy) {
    as.a(this, paramy);
    F();
  }
  
  public void a(YogaAlign paramYogaAlign) { this.u.b(paramYogaAlign); }
  
  public void a(YogaDirection paramYogaDirection) { this.u.a(paramYogaDirection); }
  
  public void a(YogaDisplay paramYogaDisplay) { this.u.a(paramYogaDisplay); }
  
  public void a(YogaFlexDirection paramYogaFlexDirection) { this.u.a(paramYogaFlexDirection); }
  
  public void a(YogaJustify paramYogaJustify) { this.u.a(paramYogaJustify); }
  
  public void a(YogaMeasureFunction paramYogaMeasureFunction) { this.u.a(paramYogaMeasureFunction); }
  
  public void a(YogaOverflow paramYogaOverflow) { this.u.a(paramYogaOverflow); }
  
  public void a(YogaPositionType paramYogaPositionType) { this.u.a(paramYogaPositionType); }
  
  public void a(YogaWrap paramYogaWrap) { this.u.a(paramYogaWrap); }
  
  public void a(Object paramObject) {}
  
  public final void a(String paramString) { this.c = paramString; }
  
  public final void a(boolean paramBoolean) {
    boolean bool;
    x x1 = G();
    boolean bool1 = true;
    if (x1 == null) {
      bool = true;
    } else {
      bool = false;
    } 
    a.a(bool, "Must remove from no opt parent first");
    if (this.l == null) {
      bool = true;
    } else {
      bool = false;
    } 
    a.a(bool, "Must remove from native parent first");
    if (q() == 0) {
      bool = bool1;
    } else {
      bool = false;
    } 
    a.a(bool, "Must remove all native children first");
    this.j = paramBoolean;
  }
  
  public boolean a() { return false; }
  
  public boolean a(float paramFloat1, float paramFloat2, ap paramap, l paraml) {
    if (this.g)
      a(paramap); 
    boolean bool = H();
    int i2 = 0;
    int i1 = 0;
    if (bool) {
      float f1 = t();
      float f2 = u();
      paramFloat1 += f1;
      int i7 = Math.round(paramFloat1);
      paramFloat2 += f2;
      int i5 = Math.round(paramFloat2);
      int i8 = Math.round(paramFloat1 + L());
      int i6 = Math.round(paramFloat2 + M());
      int i3 = Math.round(f1);
      int i4 = Math.round(f2);
      i7 = i8 - i7;
      i5 = i6 - i5;
      if (i3 != this.n || i4 != this.o || i7 != this.p || i5 != this.q)
        i1 = 1; 
      this.n = i3;
      this.o = i4;
      this.p = i7;
      this.q = i5;
      i2 = i1;
      if (i1 != 0) {
        if (paraml != null) {
          paraml.b(this);
          return i1;
        } 
        paramap.a(G().j(), j(), v(), w(), x(), y());
        i2 = i1;
      } 
    } 
    return i2;
  }
  
  public final int b(x paramx) {
    a.a(this.m);
    return this.m.indexOf(paramx);
  }
  
  public void b(float paramFloat) { this.u.n(paramFloat); }
  
  public void b(int paramInt, float paramFloat) { this.u.b(YogaEdge.a(paramInt), paramFloat); }
  
  public final void b(x paramx, int paramInt) {
    a.a(this.j ^ true);
    a.a(paramx.j ^ true);
    if (this.m == null)
      this.m = new ArrayList(4); 
    this.m.add(paramInt, paramx);
    paramx.l = this;
  }
  
  public void b(YogaAlign paramYogaAlign) { this.u.a(paramYogaAlign); }
  
  public boolean b() { return false; }
  
  public final String c() { return (String)a.a(this.c); }
  
  public void c(float paramFloat) { this.u.h(paramFloat); }
  
  public void c(int paramInt) { this.b = paramInt; }
  
  public void c(int paramInt, float paramFloat) {
    this.r.a(paramInt, paramFloat);
    Q();
  }
  
  public void c(YogaAlign paramYogaAlign) { this.u.c(paramYogaAlign); }
  
  public boolean c(x paramx) {
    for (x x1 = G(); x1 != null; x1 = x1.G()) {
      if (x1 == paramx)
        return true; 
    } 
    return false;
  }
  
  public final int d(x paramx) {
    int i2;
    boolean bool = false;
    byte b1 = 0;
    int i1 = b1;
    while (true) {
      int i3 = g();
      byte b2 = 1;
      i2 = bool;
      if (b1 < i3) {
        x x1 = g(b1);
        if (paramx == x1) {
          i2 = 1;
          break;
        } 
        i2 = b2;
        if (x1.s())
          i2 = x1.K(); 
        i1 += i2;
        b1++;
        continue;
      } 
      break;
    } 
    if (i2 != 0)
      return i1; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Child ");
    stringBuilder.append(paramx.j());
    stringBuilder.append(" was not a child of ");
    stringBuilder.append(this.b);
    throw new RuntimeException(stringBuilder.toString());
  }
  
  public void d(float paramFloat) { this.u.p(paramFloat); }
  
  public final void d(int paramInt) { this.d = paramInt; }
  
  public void d(int paramInt, float paramFloat) {
    this.s[paramInt] = paramFloat;
    this.t[paramInt] = false;
    Q();
  }
  
  public final boolean d() { return (this.g || H() || E()); }
  
  public final void e() {
    this.g = false;
    if (H())
      I(); 
  }
  
  public void e(float paramFloat) { this.u.g(paramFloat); }
  
  public void e(int paramInt, float paramFloat) {
    this.s[paramInt] = paramFloat;
    this.t[paramInt] = a.a(paramFloat) ^ true;
    Q();
  }
  
  public x f(int paramInt) {
    ArrayList arrayList = this.h;
    if (arrayList != null) {
      x x1 = (x)arrayList.remove(paramInt);
      x1.i = null;
      if (this.u != null && !C())
        this.u.a(paramInt); 
      D();
      if (x1.s()) {
        paramInt = x1.K();
      } else {
        paramInt = 1;
      } 
      this.k -= paramInt;
      k(-paramInt);
      return x1;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Index ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" out of bounds: node has no children");
    throw new ArrayIndexOutOfBoundsException(stringBuilder.toString());
  }
  
  public void f() {
    if (!a())
      this.u.e(); 
  }
  
  public void f(float paramFloat) { this.u.j(paramFloat); }
  
  public void f(int paramInt, float paramFloat) { this.u.e(YogaEdge.a(paramInt), paramFloat); }
  
  public final int g() {
    ArrayList arrayList = this.h;
    return (arrayList == null) ? 0 : arrayList.size();
  }
  
  public final x g(int paramInt) {
    ArrayList arrayList = this.h;
    if (arrayList != null)
      return (x)arrayList.get(paramInt); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Index ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" out of bounds: node has no children");
    throw new ArrayIndexOutOfBoundsException(stringBuilder.toString());
  }
  
  public void g(float paramFloat) { this.u.k(paramFloat); }
  
  public void g(int paramInt, float paramFloat) { this.u.f(YogaEdge.a(paramInt), paramFloat); }
  
  public final x h(int paramInt) {
    a.a(this.m);
    x x1 = (x)this.m.remove(paramInt);
    x1.l = null;
    return x1;
  }
  
  public void h() {
    if (g() == 0)
      return; 
    int i2 = 0;
    for (int i1 = g() - 1; i1 >= 0; i1--) {
      byte b1;
      if (this.u != null && !C())
        this.u.a(i1); 
      x x1 = g(i1);
      x1.i = null;
      x1.B();
      if (x1.s()) {
        b1 = x1.K();
      } else {
        b1 = 1;
      } 
      i2 += b1;
    } 
    ((ArrayList)a.a(this.h)).clear();
    D();
    this.k -= i2;
    k(-i2);
  }
  
  public void h(float paramFloat) { this.u.o(paramFloat); }
  
  public void h(int paramInt, float paramFloat) { this.u.g(YogaEdge.a(paramInt), paramFloat); }
  
  public void i() {}
  
  public void i(float paramFloat) { this.u.i(paramFloat); }
  
  public void i(int paramInt) { this.u.a(YogaEdge.a(paramInt)); }
  
  public final float j(int paramInt) { return this.u.b(YogaEdge.a(paramInt)); }
  
  public final int j() { return this.b; }
  
  public void j(float paramFloat) { this.u.l(paramFloat); }
  
  public final int k() {
    boolean bool;
    if (this.d != 0) {
      bool = true;
    } else {
      bool = false;
    } 
    a.a(bool);
    return this.d;
  }
  
  public void k(float paramFloat) { this.u.m(paramFloat); }
  
  public void l(float paramFloat) { this.u.q(paramFloat); }
  
  public final af m() { return (af)a.a(this.e); }
  
  public void m(float paramFloat) { this.u.d(paramFloat); }
  
  public void n(float paramFloat) { this.u.e(paramFloat); }
  
  public final boolean n() { return this.f; }
  
  public void o() { this.u.a(NaNF, NaNF); }
  
  public void o(float paramFloat) { this.u.r(paramFloat); }
  
  public final void p() {
    ArrayList arrayList = this.m;
    if (arrayList != null) {
      for (int i1 = arrayList.size() - 1; i1 >= 0; i1--)
        ((x)this.m.get(i1)).l = null; 
      this.m.clear();
    } 
  }
  
  public final int q() {
    ArrayList arrayList = this.m;
    return (arrayList == null) ? 0 : arrayList.size();
  }
  
  public final boolean s() { return this.j; }
  
  public void setFlex(float paramFloat) { this.u.a(paramFloat); }
  
  public void setFlexGrow(float paramFloat) { this.u.b(paramFloat); }
  
  public void setFlexShrink(float paramFloat) { this.u.c(paramFloat); }
  
  public void setShouldNotifyOnLayout(boolean paramBoolean) { this.f = paramBoolean; }
  
  public final float t() { return this.u.k(); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    stringBuilder.append(this.c);
    stringBuilder.append(" ");
    stringBuilder.append(j());
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
  
  public final float u() { return this.u.l(); }
  
  public int v() { return this.n; }
  
  public int w() { return this.o; }
  
  public int x() { return this.p; }
  
  public int y() { return this.q; }
  
  public void z() { this.u.i(); }
}
