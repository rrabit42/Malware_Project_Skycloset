package com.facebook.react.uimanager;

import android.os.SystemClock;
import android.view.View;
import com.facebook.common.e.a;
import com.facebook.i.a.a;
import com.facebook.react.a.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.modules.i18nmanager.a;
import com.facebook.react.uimanager.b.a;
import com.facebook.react.uimanager.common.a;
import com.facebook.react.uimanager.events.d;
import com.facebook.systrace.a;
import com.facebook.systrace.b;
import com.facebook.yoga.YogaDirection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class aj {
  protected Object a = new Object();
  
  protected final d b;
  
  protected final ReactApplicationContext c;
  
  protected final ad d = new ad();
  
  protected a e;
  
  private final Set<Integer> f = new HashSet();
  
  private final at g;
  
  private final ap h;
  
  private final l i;
  
  private final int[] j = new int[4];
  
  private long k = 0L;
  
  protected aj(ReactApplicationContext paramReactApplicationContext, at paramat, ap paramap, d paramd) {
    this.c = paramReactApplicationContext;
    this.g = paramat;
    this.h = paramap;
    this.i = new l(this.h, this.d);
    this.b = paramd;
  }
  
  aj(ReactApplicationContext paramReactApplicationContext, at paramat, d paramd, int paramInt) { this(paramReactApplicationContext, paramat, new ap(paramReactApplicationContext, new k(paramat), paramInt), paramd); }
  
  private void a(int paramInt1, int paramInt2, int[] paramArrayOfInt) {
    StringBuilder stringBuilder;
    w w1 = this.d.c(paramInt1);
    w w2 = this.d.c(paramInt2);
    if (w1 == null || w2 == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Tag ");
      if (w1 != null)
        paramInt1 = paramInt2; 
      stringBuilder.append(paramInt1);
      stringBuilder.append(" does not exist");
      throw new f(stringBuilder.toString());
    } 
    if (w1 != w2) {
      w w = w1.l();
      while (w != w2) {
        if (w != null) {
          w = w.l();
          continue;
        } 
        stringBuilder = new StringBuilder();
        stringBuilder.append("Tag ");
        stringBuilder.append(paramInt2);
        stringBuilder.append(" is not an ancestor of tag ");
        stringBuilder.append(paramInt1);
        throw new f(stringBuilder.toString());
      } 
    } 
    a(w1, w2, stringBuilder);
  }
  
  private void a(int paramInt, String paramString) {
    if (this.d.c(paramInt) != null)
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to execute operation ");
    stringBuilder.append(paramString);
    stringBuilder.append(" on view with tag: ");
    stringBuilder.append(paramInt);
    stringBuilder.append(", since the view does not exists");
    throw new f(stringBuilder.toString());
  }
  
  private void a(int paramInt, int[] paramArrayOfInt) {
    w w = this.d.c(paramInt);
    if (w != null) {
      w w1 = w.l();
      if (w1 != null) {
        a(w, w1, paramArrayOfInt);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("View with tag ");
      stringBuilder1.append(paramInt);
      stringBuilder1.append(" doesn't have a parent!");
      throw new f(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("No native view for tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" exists!");
    throw new f(stringBuilder.toString());
  }
  
  private void a(w paramw1, w paramw2, int[] paramArrayOfInt) {
    boolean bool2;
    boolean bool1;
    if (paramw1 != paramw2) {
      bool1 = Math.round(paramw1.t());
      int m = Math.round(paramw1.u());
      for (w w1 = paramw1.l(); w1 != paramw2; w1 = w1.l()) {
        a.a(w1);
        d(w1);
        bool1 += Math.round(w1.t());
        m += Math.round(w1.u());
      } 
      d(paramw2);
      bool2 = m;
    } else {
      boolean bool = false;
      bool2 = bool;
      bool1 = bool;
    } 
    paramArrayOfInt[0] = bool1;
    paramArrayOfInt[1] = bool2;
    paramArrayOfInt[2] = paramw1.x();
    paramArrayOfInt[3] = paramw1.y();
  }
  
  private void c(w paramw) {
    l.a(paramw);
    this.d.b(paramw.j());
    this.f.remove(Integer.valueOf(paramw.j()));
    for (int m = paramw.g() - 1; m >= 0; m--)
      c(paramw.b(m)); 
    paramw.h();
  }
  
  private void d(w paramw) {
    ViewManager viewManager = (ViewManager)a.a(this.g.a(paramw.c()));
    if (viewManager instanceof ViewGroupManager) {
      ViewGroupManager viewGroupManager = (ViewGroupManager)viewManager;
      if (viewGroupManager != null) {
        if (!viewGroupManager.needsCustomLayoutForChildren())
          return; 
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append("Trying to measure a view using measureLayout/measureLayoutRelativeToParent relative to an ancestor that requires custom layout for it's children (");
        stringBuilder1.append(paramw.c());
        stringBuilder1.append("). Use measure instead.");
        throw new f(stringBuilder1.toString());
      } 
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Trying to use view ");
    stringBuilder.append(paramw.c());
    stringBuilder.append(" as a parent, but its Manager doesn't extends ViewGroupManager");
    throw new f(stringBuilder.toString());
  }
  
  private void e(w paramw) {
    if (!paramw.d())
      return; 
    for (byte b1 = 0; b1 < paramw.g(); b1++)
      e(paramw.b(b1)); 
    paramw.i();
  }
  
  private void j() {
    if (this.h.d())
      e(-1); 
  }
  
  protected w a() {
    x x = new x();
    if (a.a().a(this.c))
      x.a(YogaDirection.c); 
    x.a("Root");
    return x;
  }
  
  public final w a(int paramInt) { return this.d.c(paramInt); }
  
  protected w a(String paramString) { return this.g.a(paramString).createShadowNodeInstance(this.c); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2, Callback paramCallback) { this.h.a(paramInt, paramFloat1, paramFloat2, paramCallback); }
  
  public void a(int paramInt1, int paramInt2) {
    if (!this.d.d(paramInt1) && !this.d.d(paramInt2)) {
      w w = this.d.c(paramInt1);
      if (w != null) {
        w w1 = w.l();
        if (w1 != null) {
          paramInt1 = w1.a(w);
          if (paramInt1 >= 0) {
            WritableArray writableArray1 = Arguments.createArray();
            writableArray1.pushInt(paramInt2);
            WritableArray writableArray2 = Arguments.createArray();
            writableArray2.pushInt(paramInt1);
            WritableArray writableArray3 = Arguments.createArray();
            writableArray3.pushInt(paramInt1);
            a(w1.j(), null, null, writableArray1, writableArray2, writableArray3);
            return;
          } 
          throw new IllegalStateException("Didn't find child tag in parent");
        } 
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append("Node is not attached to a parent: ");
        stringBuilder1.append(paramInt1);
        throw new f(stringBuilder1.toString());
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Trying to replace unknown view tag: ");
      stringBuilder.append(paramInt1);
      throw new f(stringBuilder.toString());
    } 
    throw new f("Trying to add or replace a root tag!");
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3) {
    StringBuilder stringBuilder = this.d.c(paramInt1);
    if (stringBuilder == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Tried to update non-existent root tag: ");
      stringBuilder.append(paramInt1);
      a.c("ReactNative", stringBuilder.toString());
      return;
    } 
    a(stringBuilder, paramInt2, paramInt3);
  }
  
  public void a(int paramInt1, int paramInt2, Callback paramCallback) {
    w w1 = this.d.c(paramInt1);
    w w2 = this.d.c(paramInt2);
    if (w1 == null || w2 == null) {
      paramCallback.invoke(new Object[] { Boolean.valueOf(false) });
      return;
    } 
    paramCallback.invoke(new Object[] { Boolean.valueOf(w1.c(w2)) });
  }
  
  public void a(int paramInt1, int paramInt2, Callback paramCallback1, Callback paramCallback2) {
    try {
      a(paramInt1, paramInt2, this.j);
      paramCallback2.invoke(new Object[] { Float.valueOf(o.d(this.j[0])), Float.valueOf(o.d(this.j[1])), Float.valueOf(o.d(this.j[2])), Float.valueOf(o.d(this.j[3])) });
      return;
    } catch (f paramCallback2) {
      paramCallback1.invoke(new Object[] { paramCallback2.getMessage() });
      return;
    } 
  }
  
  public void a(int paramInt1, int paramInt2, ReadableArray paramReadableArray) {
    a(paramInt1, "dispatchViewManagerCommand");
    this.h.a(paramInt1, paramInt2, paramReadableArray);
  }
  
  public void a(int paramInt, Callback paramCallback) { this.h.a(paramInt, paramCallback); }
  
  public void a(int paramInt, Callback paramCallback1, Callback paramCallback2) {
    try {
      a(paramInt, this.j);
      paramCallback2.invoke(new Object[] { Float.valueOf(o.d(this.j[0])), Float.valueOf(o.d(this.j[1])), Float.valueOf(o.d(this.j[2])), Float.valueOf(o.d(this.j[3])) });
      return;
    } catch (f paramCallback2) {
      paramCallback1.invoke(new Object[] { paramCallback2.getMessage() });
      return;
    } 
  }
  
  public void a(int paramInt, ReadableArray paramReadableArray) {
    synchronized (this.a) {
      StringBuilder stringBuilder = this.d.c(paramInt);
      paramInt = 0;
      while (paramInt < paramReadableArray.size()) {
        w w = this.d.c(paramReadableArray.getInt(paramInt));
        if (w != null) {
          stringBuilder.a(w, paramInt);
          paramInt++;
          continue;
        } 
        stringBuilder = new StringBuilder();
        stringBuilder.append("Trying to add unknown view tag: ");
        stringBuilder.append(paramReadableArray.getInt(paramInt));
        throw new f(stringBuilder.toString());
      } 
      if (!stringBuilder.a() && !stringBuilder.b())
        this.i.a(stringBuilder, paramReadableArray); 
      return;
    } 
  }
  
  public void a(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2) {
    a(paramInt, "showPopupMenu");
    this.h.a(paramInt, paramReadableArray, paramCallback1, paramCallback2);
  }
  
  public void a(int paramInt, ReadableArray paramReadableArray1, ReadableArray paramReadableArray2, ReadableArray paramReadableArray3, ReadableArray paramReadableArray4, ReadableArray paramReadableArray5) { // Byte code:
    //   0: aload_0
    //   1: getfield a : Ljava/lang/Object;
    //   4: astore #17
    //   6: aload #17
    //   8: monitorenter
    //   9: aload_0
    //   10: getfield d : Lcom/facebook/react/uimanager/ad;
    //   13: iload_1
    //   14: invokevirtual c : (I)Lcom/facebook/react/uimanager/w;
    //   17: astore #14
    //   19: aload_2
    //   20: ifnonnull -> 29
    //   23: iconst_0
    //   24: istore #7
    //   26: goto -> 700
    //   29: aload_2
    //   30: invokeinterface size : ()I
    //   35: istore #7
    //   37: goto -> 700
    //   40: aload #4
    //   42: invokeinterface size : ()I
    //   47: istore #9
    //   49: goto -> 708
    //   52: aload #6
    //   54: invokeinterface size : ()I
    //   59: istore #8
    //   61: iload #7
    //   63: ifeq -> 95
    //   66: aload_3
    //   67: ifnull -> 84
    //   70: iload #7
    //   72: aload_3
    //   73: invokeinterface size : ()I
    //   78: if_icmpne -> 84
    //   81: goto -> 95
    //   84: new com/facebook/react/uimanager/f
    //   87: dup
    //   88: ldc_w 'Size of moveFrom != size of moveTo!'
    //   91: invokespecial <init> : (Ljava/lang/String;)V
    //   94: athrow
    //   95: iload #9
    //   97: ifeq -> 131
    //   100: aload #5
    //   102: ifnull -> 120
    //   105: iload #9
    //   107: aload #5
    //   109: invokeinterface size : ()I
    //   114: if_icmpne -> 120
    //   117: goto -> 131
    //   120: new com/facebook/react/uimanager/f
    //   123: dup
    //   124: ldc_w 'Size of addChildTags != size of addAtIndices!'
    //   127: invokespecial <init> : (Ljava/lang/String;)V
    //   130: athrow
    //   131: iload #7
    //   133: iload #9
    //   135: iadd
    //   136: anewarray com/facebook/react/uimanager/aq
    //   139: astore #18
    //   141: iload #7
    //   143: iload #8
    //   145: iadd
    //   146: newarray int
    //   148: astore #19
    //   150: aload #19
    //   152: arraylength
    //   153: newarray int
    //   155: astore #20
    //   157: iload #8
    //   159: newarray int
    //   161: astore #15
    //   163: aload #14
    //   165: astore #13
    //   167: aload #15
    //   169: astore #16
    //   171: iload #7
    //   173: ifle -> 275
    //   176: aload_2
    //   177: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   180: pop
    //   181: aload_3
    //   182: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   185: pop
    //   186: iconst_0
    //   187: istore #10
    //   189: aload #14
    //   191: astore #13
    //   193: aload #15
    //   195: astore #16
    //   197: iload #10
    //   199: iload #7
    //   201: if_icmpge -> 275
    //   204: aload_2
    //   205: iload #10
    //   207: invokeinterface getInt : (I)I
    //   212: istore #11
    //   214: aload #14
    //   216: iload #11
    //   218: invokeinterface b : (I)Lcom/facebook/react/uimanager/w;
    //   223: invokeinterface j : ()I
    //   228: istore #12
    //   230: aload #18
    //   232: iload #10
    //   234: new com/facebook/react/uimanager/aq
    //   237: dup
    //   238: iload #12
    //   240: aload_3
    //   241: iload #10
    //   243: invokeinterface getInt : (I)I
    //   248: invokespecial <init> : (II)V
    //   251: aastore
    //   252: aload #19
    //   254: iload #10
    //   256: iload #11
    //   258: iastore
    //   259: aload #20
    //   261: iload #10
    //   263: iload #12
    //   265: iastore
    //   266: iload #10
    //   268: iconst_1
    //   269: iadd
    //   270: istore #10
    //   272: goto -> 189
    //   275: iload #9
    //   277: ifle -> 344
    //   280: aload #4
    //   282: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   285: pop
    //   286: aload #5
    //   288: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   291: pop
    //   292: iconst_0
    //   293: istore #10
    //   295: iload #10
    //   297: iload #9
    //   299: if_icmpge -> 344
    //   302: aload #18
    //   304: iload #7
    //   306: iload #10
    //   308: iadd
    //   309: new com/facebook/react/uimanager/aq
    //   312: dup
    //   313: aload #4
    //   315: iload #10
    //   317: invokeinterface getInt : (I)I
    //   322: aload #5
    //   324: iload #10
    //   326: invokeinterface getInt : (I)I
    //   331: invokespecial <init> : (II)V
    //   334: aastore
    //   335: iload #10
    //   337: iconst_1
    //   338: iadd
    //   339: istore #10
    //   341: goto -> 295
    //   344: aload #13
    //   346: astore_2
    //   347: iload #8
    //   349: ifle -> 435
    //   352: aload #6
    //   354: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   357: pop
    //   358: iconst_0
    //   359: istore #9
    //   361: aload #13
    //   363: astore_2
    //   364: iload #9
    //   366: iload #8
    //   368: if_icmpge -> 435
    //   371: aload #6
    //   373: iload #9
    //   375: invokeinterface getInt : (I)I
    //   380: istore #10
    //   382: aload #13
    //   384: iload #10
    //   386: invokeinterface b : (I)Lcom/facebook/react/uimanager/w;
    //   391: invokeinterface j : ()I
    //   396: istore #11
    //   398: iload #7
    //   400: iload #9
    //   402: iadd
    //   403: istore #12
    //   405: aload #19
    //   407: iload #12
    //   409: iload #10
    //   411: iastore
    //   412: aload #20
    //   414: iload #12
    //   416: iload #11
    //   418: iastore
    //   419: aload #16
    //   421: iload #9
    //   423: iload #11
    //   425: iastore
    //   426: iload #9
    //   428: iconst_1
    //   429: iadd
    //   430: istore #9
    //   432: goto -> 361
    //   435: aload #18
    //   437: getstatic com/facebook/react/uimanager/aq.a : Ljava/util/Comparator;
    //   440: invokestatic sort : ([Ljava/lang/Object;Ljava/util/Comparator;)V
    //   443: aload #19
    //   445: invokestatic sort : ([I)V
    //   448: aload #19
    //   450: arraylength
    //   451: iconst_1
    //   452: isub
    //   453: istore #7
    //   455: iconst_m1
    //   456: istore #8
    //   458: iload #7
    //   460: iflt -> 723
    //   463: aload #19
    //   465: iload #7
    //   467: iaload
    //   468: iload #8
    //   470: if_icmpeq -> 501
    //   473: aload_2
    //   474: aload #19
    //   476: iload #7
    //   478: iaload
    //   479: invokeinterface a : (I)Lcom/facebook/react/uimanager/w;
    //   484: pop
    //   485: aload #19
    //   487: iload #7
    //   489: iaload
    //   490: istore #8
    //   492: iload #7
    //   494: iconst_1
    //   495: isub
    //   496: istore #7
    //   498: goto -> 458
    //   501: new java/lang/StringBuilder
    //   504: dup
    //   505: invokespecial <init> : ()V
    //   508: astore_2
    //   509: aload_2
    //   510: ldc_w 'Repeated indices in Removal list for view tag: '
    //   513: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   516: pop
    //   517: aload_2
    //   518: iload_1
    //   519: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   522: pop
    //   523: new com/facebook/react/uimanager/f
    //   526: dup
    //   527: aload_2
    //   528: invokevirtual toString : ()Ljava/lang/String;
    //   531: invokespecial <init> : (Ljava/lang/String;)V
    //   534: athrow
    //   535: iload_1
    //   536: aload #18
    //   538: arraylength
    //   539: if_icmpge -> 621
    //   542: aload #18
    //   544: iload_1
    //   545: aaload
    //   546: astore_3
    //   547: aload_0
    //   548: getfield d : Lcom/facebook/react/uimanager/ad;
    //   551: aload_3
    //   552: getfield b : I
    //   555: invokevirtual c : (I)Lcom/facebook/react/uimanager/w;
    //   558: astore #4
    //   560: aload #4
    //   562: ifnull -> 584
    //   565: aload_2
    //   566: aload #4
    //   568: aload_3
    //   569: getfield c : I
    //   572: invokeinterface a : (Lcom/facebook/react/uimanager/w;I)V
    //   577: iload_1
    //   578: iconst_1
    //   579: iadd
    //   580: istore_1
    //   581: goto -> 535
    //   584: new java/lang/StringBuilder
    //   587: dup
    //   588: invokespecial <init> : ()V
    //   591: astore_2
    //   592: aload_2
    //   593: ldc_w 'Trying to add unknown view tag: '
    //   596: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   599: pop
    //   600: aload_2
    //   601: aload_3
    //   602: getfield b : I
    //   605: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   608: pop
    //   609: new com/facebook/react/uimanager/f
    //   612: dup
    //   613: aload_2
    //   614: invokevirtual toString : ()Ljava/lang/String;
    //   617: invokespecial <init> : (Ljava/lang/String;)V
    //   620: athrow
    //   621: aload_2
    //   622: invokeinterface a : ()Z
    //   627: ifne -> 728
    //   630: aload_2
    //   631: invokeinterface b : ()Z
    //   636: ifne -> 728
    //   639: aload_0
    //   640: getfield i : Lcom/facebook/react/uimanager/l;
    //   643: aload_2
    //   644: aload #19
    //   646: aload #20
    //   648: aload #18
    //   650: aload #16
    //   652: invokevirtual a : (Lcom/facebook/react/uimanager/w;[I[I[Lcom/facebook/react/uimanager/aq;[I)V
    //   655: goto -> 728
    //   658: iload_1
    //   659: aload #16
    //   661: arraylength
    //   662: if_icmpge -> 687
    //   665: aload_0
    //   666: aload_0
    //   667: getfield d : Lcom/facebook/react/uimanager/ad;
    //   670: aload #16
    //   672: iload_1
    //   673: iaload
    //   674: invokevirtual c : (I)Lcom/facebook/react/uimanager/w;
    //   677: invokevirtual a : (Lcom/facebook/react/uimanager/w;)V
    //   680: iload_1
    //   681: iconst_1
    //   682: iadd
    //   683: istore_1
    //   684: goto -> 658
    //   687: aload #17
    //   689: monitorexit
    //   690: return
    //   691: aload #17
    //   693: monitorexit
    //   694: aload_2
    //   695: athrow
    //   696: astore_2
    //   697: goto -> 691
    //   700: aload #4
    //   702: ifnonnull -> 40
    //   705: iconst_0
    //   706: istore #9
    //   708: aload #6
    //   710: ifnonnull -> 52
    //   713: iconst_0
    //   714: istore #8
    //   716: goto -> 61
    //   719: astore_2
    //   720: goto -> 691
    //   723: iconst_0
    //   724: istore_1
    //   725: goto -> 535
    //   728: iconst_0
    //   729: istore_1
    //   730: goto -> 658
    //   733: astore_2
    //   734: goto -> 691
    // Exception table:
    //   from	to	target	type
    //   9	19	733	finally
    //   29	37	733	finally
    //   40	49	733	finally
    //   52	61	733	finally
    //   70	81	733	finally
    //   84	95	733	finally
    //   105	117	733	finally
    //   120	131	733	finally
    //   131	163	733	finally
    //   176	186	719	finally
    //   204	252	719	finally
    //   280	292	719	finally
    //   302	335	719	finally
    //   352	358	719	finally
    //   371	398	719	finally
    //   435	455	719	finally
    //   473	485	719	finally
    //   501	535	719	finally
    //   535	542	719	finally
    //   547	560	696	finally
    //   565	577	696	finally
    //   584	621	696	finally
    //   621	655	696	finally
    //   658	680	696	finally
    //   687	690	696	finally
    //   691	694	696	finally }
  
  public void a(int paramInt, y paramy) {
    UiThreadUtil.assertOnUiThread();
    this.h.a().a(paramInt, paramy);
  }
  
  public void a(int paramInt, Object paramObject) {
    w w = this.d.c(paramInt);
    if (w == null) {
      paramObject = new StringBuilder();
      paramObject.append("Attempt to set local data for view with unknown tag: ");
      paramObject.append(paramInt);
      a.c("ReactNative", paramObject.toString());
      return;
    } 
    w.a(paramObject);
    j();
  }
  
  public void a(int paramInt1, String paramString, int paramInt2, ReadableMap paramReadableMap) {
    synchronized (this.a) {
      y y;
      w w1 = a(paramString);
      w w2 = this.d.c(paramInt2);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Root node with tag ");
      stringBuilder.append(paramInt2);
      stringBuilder.append(" doesn't exist");
      a.a(w2, stringBuilder.toString());
      w1.c(paramInt1);
      w1.a(paramString);
      w1.d(w2.j());
      w1.a(w2.m());
      this.d.b(w1);
      paramString = null;
      if (paramReadableMap != null) {
        y = new y(paramReadableMap);
        w1.a(y);
      } 
      a(w1, paramInt2, y);
      return;
    } 
  }
  
  public void a(int paramInt, String paramString, ReadableMap paramReadableMap) {
    StringBuilder stringBuilder1;
    if (this.g.a(paramString) != null) {
      w w = this.d.c(paramInt);
      if (w != null) {
        if (paramReadableMap != null) {
          y y = new y(paramReadableMap);
          w.a(y);
          a(w, paramString, y);
        } 
        return;
      } 
      stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Trying to update non-existent view with tag ");
      stringBuilder1.append(paramInt);
      throw new f(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder2 = new StringBuilder();
    stringBuilder2.append("Got unknown view type: ");
    stringBuilder2.append(stringBuilder1);
    throw new f(stringBuilder2.toString());
  }
  
  public void a(int paramInt, boolean paramBoolean) {
    w w2 = this.d.c(paramInt);
    w w1 = w2;
    if (w2 == null)
      return; 
    while (true) {
      if (w1.a() || w1.s()) {
        w1 = w1.l();
        continue;
      } 
      this.h.a(w1.j(), paramInt, paramBoolean);
      return;
    } 
  }
  
  public void a(a parama) { this.h.a(parama); }
  
  public void a(ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2) { this.h.a(paramReadableMap, paramCallback1, paramCallback2); }
  
  public void a(ai paramai) { this.h.a(paramai); }
  
  public void a(a parama) { this.h.a(parama); }
  
  public <T extends com.facebook.react.uimanager.common.SizeMonitoringFrameLayout & a> void a(T paramT, int paramInt, af paramaf) {
    synchronized (this.a) {
      w w = a();
      w.c(paramInt);
      w.a(paramaf);
      a(w, ((a)paramT).getWidthMeasureSpec(), ((a)paramT).getHeightMeasureSpec());
      paramaf.runOnNativeModulesQueueThread(new Object(this, w));
      this.h.a(paramInt, paramT, paramaf);
      return;
    } 
  }
  
  protected final void a(w paramw) {
    c(paramw);
    paramw.B();
  }
  
  protected void a(w paramw, float paramFloat1, float paramFloat2) {
    if (!paramw.d())
      return; 
    if (!paramw.b()) {
      byte b1;
      for (b1 = 0; b1 < paramw.g(); b1++)
        a(paramw.b(b1), paramw.t() + paramFloat1, paramw.u() + paramFloat2); 
    } 
    int m = paramw.j();
    if (!this.d.d(m) && paramw.a(paramFloat1, paramFloat2, this.h, this.i) && paramw.n())
      this.b.a(n.a(m, paramw.v(), paramw.w(), paramw.x(), paramw.y())); 
    paramw.e();
  }
  
  public void a(w paramw, int paramInt1, int paramInt2) {
    int m = View.MeasureSpec.getMode(paramInt1);
    paramInt1 = View.MeasureSpec.getSize(paramInt1);
    if (m != Integer.MIN_VALUE) {
      if (m != 0) {
        if (m == 1073741824)
          paramw.a(paramInt1); 
      } else {
        paramw.z();
      } 
    } else {
      paramw.b(paramInt1);
    } 
    paramInt1 = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (paramInt1 != Integer.MIN_VALUE) {
      if (paramInt1 != 0) {
        if (paramInt1 != 1073741824)
          return; 
        paramw.c(paramInt2);
        return;
      } 
      paramw.A();
      return;
    } 
    paramw.d(paramInt2);
  }
  
  protected void a(w paramw, int paramInt, y paramy) {
    if (!paramw.a())
      this.i.a(paramw, paramw.m(), paramy); 
  }
  
  protected void a(w paramw, String paramString, y paramy) {
    if (!paramw.a())
      this.i.a(paramw, paramString, paramy); 
  }
  
  public void a(boolean paramBoolean) { this.h.a(paramBoolean); }
  
  protected final ViewManager b(String paramString) { return this.g.a(paramString); }
  
  public void b() { this.h.b(); }
  
  public void b(int paramInt) {
    c(paramInt);
    this.h.a(paramInt);
  }
  
  public void b(int paramInt1, int paramInt2) {
    a(paramInt1, "removeAnimation");
    this.h.b(paramInt2);
  }
  
  public void b(int paramInt1, int paramInt2, int paramInt3) {
    StringBuilder stringBuilder = this.d.c(paramInt1);
    if (stringBuilder == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Tried to update size of non-existent tag: ");
      stringBuilder.append(paramInt1);
      a.c("ReactNative", stringBuilder.toString());
      return;
    } 
    stringBuilder.a(paramInt2);
    stringBuilder.c(paramInt3);
    j();
  }
  
  public void b(int paramInt1, int paramInt2, Callback paramCallback) {
    a(paramInt1, "addAnimation");
    this.h.a(paramInt1, paramInt2, paramCallback);
  }
  
  public void b(int paramInt, Callback paramCallback) { this.h.b(paramInt, paramCallback); }
  
  public void b(ai paramai) { this.h.b(paramai); }
  
  protected void b(w paramw) {
    b.a(0L, "cssRoot.calculateLayout").a("rootTag", paramw.j()).a();
    l1 = SystemClock.uptimeMillis();
    try {
      paramw.o();
      return;
    } finally {
      a.b(0L);
      this.k = SystemClock.uptimeMillis() - l1;
    } 
  }
  
  public Map<String, Long> c() { return this.h.c(); }
  
  public void c(int paramInt) {
    synchronized (this.a) {
      this.d.a(paramInt);
      return;
    } 
  }
  
  public void c(int paramInt1, int paramInt2) { this.h.a(paramInt1, paramInt2); }
  
  protected void d() {
    a.a(0L, "UIImplementation.updateViewHierarchy");
    byte b1 = 0;
    try {
      while (b1 < this.d.a()) {
        int m = this.d.e(b1);
        w = this.d.c(m);
        if (this.f.contains(Integer.valueOf(m))) {
          b.a(0L, "UIImplementation.notifyOnBeforeLayoutRecursive").a("rootTag", w.j()).a();
          try {
            e(w);
            a.b(0L);
            b(w);
            b.a(0L, "UIImplementation.applyUpdatesRecursive").a("rootTag", w.j()).a();
          } finally {
            a.b(0L);
          } 
        } 
        b1++;
      } 
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  public void d(int paramInt) {
    w w = this.d.c(paramInt);
    if (w != null) {
      WritableArray writableArray = Arguments.createArray();
      for (byte b1 = 0; b1 < w.g(); b1++)
        writableArray.pushInt(b1); 
      a(paramInt, null, null, null, null, writableArray);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Trying to remove subviews of an unknown view tag: ");
    stringBuilder.append(paramInt);
    throw new f(stringBuilder.toString());
  }
  
  public void e() { this.h.e(); }
  
  public void e(int paramInt) {
    b.a(0L, "UIImplementation.dispatchViewUpdates").a("batchId", paramInt).a();
    long l1 = SystemClock.uptimeMillis();
    try {
      d();
      this.i.a();
      this.h.a(paramInt, l1, this.k);
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  public int f(int paramInt) {
    if (this.d.d(paramInt))
      return paramInt; 
    w w = a(paramInt);
    if (w != null)
      return w.k(); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Warning : attempted to resolve a non-existent react shadow node. reactTag=");
    stringBuilder.append(paramInt);
    a.c("ReactNative", stringBuilder.toString());
    return 0;
  }
  
  public void f() { this.h.f(); }
  
  public void g() { this.h.g(); }
  
  public void g(int paramInt) { this.f.add(Integer.valueOf(paramInt)); }
  
  public void h() { this.h.h(); }
  
  public void i() {}
}
