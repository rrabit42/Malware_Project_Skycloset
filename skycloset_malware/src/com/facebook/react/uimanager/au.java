package com.facebook.react.uimanager;

import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

class au {
  private static final Map<Class, Map<String, j>> a = new HashMap();
  
  private static final Map<String, j> b = new HashMap();
  
  private static j a(a parama, Method paramMethod, Class<?> paramClass) {
    if (paramClass == com.facebook.react.bridge.Dynamic.class)
      return new f(parama, paramMethod); 
    if (paramClass == boolean.class)
      return new b(parama, paramMethod, parama.f()); 
    if (paramClass == int.class)
      return new h(parama, paramMethod, parama.e()); 
    if (paramClass == float.class)
      return new g(parama, paramMethod, parama.d()); 
    if (paramClass == double.class)
      return new e(parama, paramMethod, parama.c()); 
    if (paramClass == String.class)
      return new k(parama, paramMethod); 
    if (paramClass == Boolean.class)
      return new c(parama, paramMethod); 
    if (paramClass == Integer.class)
      return new d(parama, paramMethod); 
    if (paramClass == com.facebook.react.bridge.ReadableArray.class)
      return new a(parama, paramMethod); 
    if (paramClass == com.facebook.react.bridge.ReadableMap.class)
      return new i(parama, paramMethod); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unrecognized type: ");
    stringBuilder.append(paramClass);
    stringBuilder.append(" for method: ");
    stringBuilder.append(paramMethod.getDeclaringClass().getName());
    stringBuilder.append("#");
    stringBuilder.append(paramMethod.getName());
    throw new RuntimeException(stringBuilder.toString());
  }
  
  static Map<String, j> a(Class<? extends ViewManager> paramClass) {
    if (paramClass == ViewManager.class)
      return b; 
    Map map = (Map)a.get(paramClass);
    if (map != null)
      return map; 
    map = new HashMap(a(paramClass.getSuperclass()));
    a(paramClass, map);
    a.put(paramClass, map);
    return map;
  }
  
  public static void a() {
    a.clear();
    b.clear();
  }
  
  private static void a(b paramb, Method paramMethod, Class<?> paramClass, Map<String, j> paramMap) {
    String[] arrayOfString = paramb.a();
    byte b2 = 0;
    byte b3 = 0;
    byte b4 = 0;
    byte b5 = 0;
    byte b1 = 0;
    if (paramClass == com.facebook.react.bridge.Dynamic.class) {
      while (b1 < arrayOfString.length) {
        paramMap.put(arrayOfString[b1], new f(paramb, paramMethod, b1));
        b1++;
      } 
    } else if (paramClass == int.class) {
      for (b1 = b2; b1 < arrayOfString.length; b1++)
        paramMap.put(arrayOfString[b1], new h(paramb, paramMethod, b1, paramb.e())); 
    } else if (paramClass == float.class) {
      for (b1 = b3; b1 < arrayOfString.length; b1++)
        paramMap.put(arrayOfString[b1], new g(paramb, paramMethod, b1, paramb.c())); 
    } else if (paramClass == double.class) {
      for (b1 = b4; b1 < arrayOfString.length; b1++)
        paramMap.put(arrayOfString[b1], new e(paramb, paramMethod, b1, paramb.d())); 
    } else {
      if (paramClass == Integer.class) {
        for (b1 = b5; b1 < arrayOfString.length; b1++)
          paramMap.put(arrayOfString[b1], new d(paramb, paramMethod, b1)); 
        return;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Unrecognized type: ");
      stringBuilder.append(paramClass);
      stringBuilder.append(" for method: ");
      stringBuilder.append(paramMethod.getDeclaringClass().getName());
      stringBuilder.append("#");
      stringBuilder.append(paramMethod.getName());
      throw new RuntimeException(stringBuilder.toString());
    } 
  }
  
  private static void a(Class<? extends ViewManager> paramClass, Map<String, j> paramMap) {
    Method[] arrayOfMethod = paramClass.getDeclaredMethods();
    for (byte b1 = 0; b1 < arrayOfMethod.length; b1++) {
      StringBuilder stringBuilder;
      Method method = arrayOfMethod[b1];
      a a1 = (a)method.getAnnotation(a.class);
      if (a1 != null) {
        Class[] arrayOfClass = method.getParameterTypes();
        if (arrayOfClass.length == 2) {
          if (android.view.View.class.isAssignableFrom(arrayOfClass[0])) {
            paramMap.put(a1.a(), a(a1, method, arrayOfClass[1]));
          } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("First param should be a view subclass to be updated: ");
            stringBuilder.append(paramClass.getName());
            stringBuilder.append("#");
            stringBuilder.append(method.getName());
            throw new RuntimeException(stringBuilder.toString());
          } 
        } else {
          stringBuilder = new StringBuilder();
          stringBuilder.append("Wrong number of args for prop setter: ");
          stringBuilder.append(paramClass.getName());
          stringBuilder.append("#");
          stringBuilder.append(method.getName());
          throw new RuntimeException(stringBuilder.toString());
        } 
      } 
      b b2 = (b)method.getAnnotation(b.class);
      if (b2 != null) {
        Class[] arrayOfClass = method.getParameterTypes();
        if (arrayOfClass.length == 3) {
          if (android.view.View.class.isAssignableFrom(arrayOfClass[0])) {
            if (arrayOfClass[true] == int.class) {
              a(b2, method, arrayOfClass[2], stringBuilder);
            } else {
              stringBuilder = new StringBuilder();
              stringBuilder.append("Second argument should be property index: ");
              stringBuilder.append(paramClass.getName());
              stringBuilder.append("#");
              stringBuilder.append(method.getName());
              throw new RuntimeException(stringBuilder.toString());
            } 
          } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("First param should be a view subclass to be updated: ");
            stringBuilder.append(paramClass.getName());
            stringBuilder.append("#");
            stringBuilder.append(method.getName());
            throw new RuntimeException(stringBuilder.toString());
          } 
        } else {
          stringBuilder = new StringBuilder();
          stringBuilder.append("Wrong number of args for group prop setter: ");
          stringBuilder.append(paramClass.getName());
          stringBuilder.append("#");
          stringBuilder.append(method.getName());
          throw new RuntimeException(stringBuilder.toString());
        } 
      } 
    } 
  }
  
  static Map<String, j> b(Class<? extends w> paramClass) {
    Class[] arrayOfClass = paramClass.getInterfaces();
    int i = arrayOfClass.length;
    for (byte b1 = 0; b1 < i; b1++) {
      if (arrayOfClass[b1] == w.class)
        return b; 
    } 
    Map map = (Map)a.get(paramClass);
    if (map != null)
      return map; 
    map = new HashMap(b(paramClass.getSuperclass()));
    b(paramClass, map);
    a.put(paramClass, map);
    return map;
  }
  
  private static void b(Class<? extends w> paramClass, Map<String, j> paramMap) {
    for (Method method : paramClass.getDeclaredMethods()) {
      StringBuilder stringBuilder;
      a a1 = (a)method.getAnnotation(a.class);
      if (a1 != null) {
        Class[] arrayOfClass = method.getParameterTypes();
        if (arrayOfClass.length == 1) {
          paramMap.put(a1.a(), a(a1, method, arrayOfClass[0]));
        } else {
          stringBuilder = new StringBuilder();
          stringBuilder.append("Wrong number of args for prop setter: ");
          stringBuilder.append(paramClass.getName());
          stringBuilder.append("#");
          stringBuilder.append(method.getName());
          throw new RuntimeException(stringBuilder.toString());
        } 
      } 
      b b1 = (b)method.getAnnotation(b.class);
      if (b1 != null) {
        Class[] arrayOfClass = method.getParameterTypes();
        if (arrayOfClass.length == 2) {
          if (arrayOfClass[false] == int.class) {
            a(b1, method, arrayOfClass[1], stringBuilder);
          } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("Second argument should be property index: ");
            stringBuilder.append(paramClass.getName());
            stringBuilder.append("#");
            stringBuilder.append(method.getName());
            throw new RuntimeException(stringBuilder.toString());
          } 
        } else {
          stringBuilder = new StringBuilder();
          stringBuilder.append("Wrong number of args for group prop setter: ");
          stringBuilder.append(paramClass.getName());
          stringBuilder.append("#");
          stringBuilder.append(method.getName());
          throw new RuntimeException(stringBuilder.toString());
        } 
      } 
    } 
  }
}
