package com.facebook.react.uimanager;

import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableType;

public class ah {
  private static ThreadLocal<double[]> a = new Object();
  
  private static double a(ReadableMap paramReadableMap, String paramString) {
    double d;
    String str;
    ReadableType readableType1 = paramReadableMap.getType(paramString);
    ReadableType readableType2 = ReadableType.String;
    byte b2 = 1;
    byte b1 = 1;
    if (readableType1 == readableType2) {
      paramString = paramReadableMap.getString(paramString);
      if (paramString.endsWith("rad")) {
        str = paramString.substring(0, paramString.length() - 3);
      } else {
        str = paramString;
        if (paramString.endsWith("deg")) {
          str = paramString.substring(0, paramString.length() - 3);
          b1 = 0;
        } 
      } 
      d = Float.parseFloat(str);
    } else {
      d = str.getDouble(paramString);
      b1 = b2;
    } 
    return (b1 != 0) ? d : i.b(d);
  }
  
  public static void a(ReadableArray paramReadableArray, double[] paramArrayOfDouble) {
    double[] arrayOfDouble = (double[])a.get();
    i.e(paramArrayOfDouble);
    int i = paramReadableArray.size();
    byte b;
    for (b = 0;; b++) {
      if (b < i) {
        ReadableMap readableMap = paramReadableArray.getMap(b);
        ReadableArray readableArray = readableMap.keySetIterator().nextKey();
        i.e(arrayOfDouble);
        if ("matrix".equals(readableArray)) {
          readableArray = readableMap.getArray(readableArray);
          byte b1;
          for (b1 = 0; b1 < 16; b1++)
            arrayOfDouble[b1] = readableArray.getDouble(b1); 
        } else if ("perspective".equals(readableArray)) {
          i.b(arrayOfDouble, readableMap.getDouble(readableArray));
        } else if ("rotateX".equals(readableArray)) {
          i.g(arrayOfDouble, a(readableMap, readableArray));
        } else if ("rotateY".equals(readableArray)) {
          i.h(arrayOfDouble, a(readableMap, readableArray));
        } else if ("rotate".equals(readableArray) || "rotateZ".equals(readableArray)) {
          i.i(arrayOfDouble, a(readableMap, readableArray));
        } else {
          double d;
          if ("scale".equals(readableArray)) {
            d = readableMap.getDouble(readableArray);
            i.c(arrayOfDouble, d);
          } else {
            if ("scaleX".equals(readableArray)) {
              i.c(arrayOfDouble, readableMap.getDouble(readableArray));
            } else {
              if ("scaleY".equals(readableArray)) {
                d = readableMap.getDouble(readableArray);
              } else {
                boolean bool = "translate".equals(readableArray);
                d = 0.0D;
                if (bool) {
                  readableArray = readableMap.getArray(readableArray);
                  double d1 = readableArray.getDouble(0);
                  double d2 = readableArray.getDouble(1);
                  if (readableArray.size() > 2)
                    d = readableArray.getDouble(2); 
                  i.a(arrayOfDouble, d1, d2, d);
                } else if ("translateX".equals(readableArray)) {
                  i.a(arrayOfDouble, readableMap.getDouble(readableArray), 0.0D);
                } else if ("translateY".equals(readableArray)) {
                  i.a(arrayOfDouble, 0.0D, readableMap.getDouble(readableArray));
                } else if ("skewX".equals(readableArray)) {
                  i.e(arrayOfDouble, a(readableMap, readableArray));
                } else if ("skewY".equals(readableArray)) {
                  i.f(arrayOfDouble, a(readableMap, readableArray));
                } else {
                  StringBuilder stringBuilder = new StringBuilder();
                  stringBuilder.append("Unsupported transform type: ");
                  stringBuilder.append(readableArray);
                  throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
                } 
                i.a(paramArrayOfDouble, paramArrayOfDouble, arrayOfDouble);
                b++;
              } 
              i.d(arrayOfDouble, d);
            } 
            i.a(paramArrayOfDouble, paramArrayOfDouble, arrayOfDouble);
            b++;
          } 
          i.d(arrayOfDouble, d);
        } 
      } else {
        break;
      } 
      i.a(paramArrayOfDouble, paramArrayOfDouble, arrayOfDouble);
    } 
  }
}
