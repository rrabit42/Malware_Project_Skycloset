package com.facebook.react.uimanager;

import android.media.AudioManager;
import android.util.ArrayMap;
import com.facebook.common.e.a;
import com.facebook.d.b.c;
import com.facebook.d.c.a;
import com.facebook.react.a.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.OnBatchCompleteListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.UIManager;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.b.a;
import com.facebook.react.uimanager.common.b;
import com.facebook.react.uimanager.events.RCTEventEmitter;
import com.facebook.react.uimanager.events.d;
import com.facebook.systrace.a;
import com.facebook.systrace.b;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@a(a = "UIManager")
public class UIManagerModule extends ReactContextBaseJavaModule implements LifecycleEventListener, OnBatchCompleteListener, UIManager {
  private static final boolean DEBUG = c.a().a(a.f);
  
  public static final String NAME = "UIManager";
  
  private int mBatchId = 0;
  
  private final Map<String, Object> mCustomDirectEvents;
  
  private final d mEventDispatcher;
  
  private final List<ao> mListeners = new ArrayList();
  
  private final b mMemoryTrimCallback = new b(this, null);
  
  private final Map<String, Object> mModuleConstants;
  
  private final aj mUIImplementation;
  
  private Map<String, WritableMap> mViewManagerConstantsCache;
  
  private final at mViewManagerRegistry;
  
  public UIManagerModule(ReactApplicationContext paramReactApplicationContext, c paramc, int paramInt) { this(paramReactApplicationContext, paramc, new ak(), paramInt); }
  
  @Deprecated
  public UIManagerModule(ReactApplicationContext paramReactApplicationContext, c paramc, ak paramak, int paramInt) {
    super(paramReactApplicationContext);
    c.a(paramReactApplicationContext);
    this.mEventDispatcher = new d(paramReactApplicationContext);
    this.mModuleConstants = createConstants(paramc);
    this.mCustomDirectEvents = am.b();
    this.mViewManagerRegistry = new at(paramc);
    this.mUIImplementation = paramak.a(paramReactApplicationContext, this.mViewManagerRegistry, this.mEventDispatcher, paramInt);
    paramReactApplicationContext.addLifecycleEventListener(this);
  }
  
  public UIManagerModule(ReactApplicationContext paramReactApplicationContext, List<ViewManager> paramList, int paramInt) { this(paramReactApplicationContext, paramList, new ak(), paramInt); }
  
  @Deprecated
  public UIManagerModule(ReactApplicationContext paramReactApplicationContext, List<ViewManager> paramList, ak paramak, int paramInt) {
    super(paramReactApplicationContext);
    c.a(paramReactApplicationContext);
    this.mEventDispatcher = new d(paramReactApplicationContext);
    this.mCustomDirectEvents = e.a();
    this.mModuleConstants = createConstants(paramList, null, this.mCustomDirectEvents);
    this.mViewManagerRegistry = new at(paramList);
    this.mUIImplementation = paramak.a(paramReactApplicationContext, this.mViewManagerRegistry, this.mEventDispatcher, paramInt);
    paramReactApplicationContext.addLifecycleEventListener(this);
  }
  
  private WritableMap computeConstantsForViewManager(String paramString) {
    if (paramString != null) {
      ViewManager viewManager = this.mUIImplementation.b(paramString);
    } else {
      paramString = null;
    } 
    if (paramString == null)
      return null; 
    b.a(0L, "UIManagerModule.getConstantsForViewManager").a("ViewManager", paramString.getName()).a("Lazy", Boolean.valueOf(true)).a();
    try {
      Map map = an.a(paramString, null, null, null, this.mCustomDirectEvents);
      if (map != null)
        return Arguments.makeNativeMap(map); 
      return null;
    } finally {
      b.a(0L).a();
    } 
  }
  
  private static Map<String, Object> createConstants(c paramc) {
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_UI_MANAGER_MODULE_CONSTANTS_START);
    b.a(0L, "CreateUIManagerConstants").a("Lazy", Boolean.valueOf(true)).a();
    try {
      return an.a(paramc);
    } finally {
      a.b(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_UI_MANAGER_MODULE_CONSTANTS_END);
    } 
  }
  
  private static Map<String, Object> createConstants(List<ViewManager> paramList, Map<String, Object> paramMap1, Map<String, Object> paramMap2) {
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_UI_MANAGER_MODULE_CONSTANTS_START);
    b.a(0L, "CreateUIManagerConstants").a("Lazy", Boolean.valueOf(false)).a();
    try {
      return an.a(paramList, paramMap1, paramMap2);
    } finally {
      a.b(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_UI_MANAGER_MODULE_CONSTANTS_END);
    } 
  }
  
  public void addAnimation(int paramInt1, int paramInt2, Callback paramCallback) { this.mUIImplementation.b(paramInt1, paramInt2, paramCallback); }
  
  public <T extends com.facebook.react.uimanager.common.SizeMonitoringFrameLayout & com.facebook.react.uimanager.common.a> int addRootView(T paramT) { return addRootView(paramT, null, null); }
  
  public <T extends com.facebook.react.uimanager.common.SizeMonitoringFrameLayout & com.facebook.react.uimanager.common.a> int addRootView(T paramT, WritableMap paramWritableMap, String paramString) {
    a.a(0L, "UIManagerModule.addRootView");
    int i = v.a();
    ReactApplicationContext reactApplicationContext = getReactApplicationContext();
    af af = new af(reactApplicationContext, paramT.getContext());
    this.mUIImplementation.a(paramT, i, af);
    paramT.setOnSizeChangedListener(new Object(this, reactApplicationContext, i));
    a.b(0L);
    return i;
  }
  
  public void addUIBlock(ai paramai) { this.mUIImplementation.a(paramai); }
  
  public void addUIManagerListener(ao paramao) { this.mListeners.add(paramao); }
  
  @ReactMethod
  public void clearJSResponder() { this.mUIImplementation.e(); }
  
  @ReactMethod
  public void configureNextLayoutAnimation(ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2) { this.mUIImplementation.a(paramReadableMap, paramCallback1, paramCallback2); }
  
  @ReactMethod
  public void createView(int paramInt1, String paramString, int paramInt2, ReadableMap paramReadableMap) {
    if (DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("(UIManager.createView) tag: ");
      stringBuilder.append(paramInt1);
      stringBuilder.append(", class: ");
      stringBuilder.append(paramString);
      stringBuilder.append(", props: ");
      stringBuilder.append(paramReadableMap);
      String str = stringBuilder.toString();
      a.a("ReactNative", str);
      c.a().a(a.f, str);
    } 
    this.mUIImplementation.a(paramInt1, paramString, paramInt2, paramReadableMap);
  }
  
  @ReactMethod
  public void dismissPopupMenu() { this.mUIImplementation.f(); }
  
  public void dispatchCommand(int paramInt1, int paramInt2, ReadableArray paramReadableArray) { this.mUIImplementation.a(paramInt1, paramInt2, paramReadableArray); }
  
  @ReactMethod
  public void dispatchViewManagerCommand(int paramInt1, int paramInt2, ReadableArray paramReadableArray) { al.a(getReactApplicationContext(), b.a(paramInt1)).dispatchCommand(paramInt1, paramInt2, paramReadableArray); }
  
  @ReactMethod
  public void findSubviewIn(int paramInt, ReadableArray paramReadableArray, Callback paramCallback) { this.mUIImplementation.a(paramInt, Math.round(o.a(paramReadableArray.getDouble(0))), Math.round(o.a(paramReadableArray.getDouble(1))), paramCallback); }
  
  public Map<String, Object> getConstants() { return this.mModuleConstants; }
  
  @ReactMethod(isBlockingSynchronousMethod = true)
  public WritableMap getConstantsForViewManager(String paramString) {
    WritableMap writableMap;
    Map map = this.mViewManagerConstantsCache;
    if (map != null && map.containsKey(paramString)) {
      writableMap = (WritableMap)this.mViewManagerConstantsCache.get(paramString);
      int i = this.mViewManagerConstantsCacheSize - 1;
      this.mViewManagerConstantsCacheSize = i;
      if (i <= 0)
        this.mViewManagerConstantsCache = null; 
      return writableMap;
    } 
    return computeConstantsForViewManager(writableMap);
  }
  
  @ReactMethod(isBlockingSynchronousMethod = true)
  public WritableMap getDefaultEventTypes() { return Arguments.makeNativeMap(an.a()); }
  
  public a getDirectEventNamesResolver() { return new Object(this); }
  
  public d getEventDispatcher() { return this.mEventDispatcher; }
  
  public String getName() { return "UIManager"; }
  
  public Map<String, Long> getPerformanceCounters() { return this.mUIImplementation.c(); }
  
  public aj getUIImplementation() { return this.mUIImplementation; }
  
  @Deprecated
  public at getViewManagerRegistry_DO_NOT_USE() { return this.mViewManagerRegistry; }
  
  public void initialize() {
    getReactApplicationContext().registerComponentCallbacks(this.mMemoryTrimCallback);
    this.mEventDispatcher.a(1, (RCTEventEmitter)getReactApplicationContext().getJSModule(RCTEventEmitter.class));
  }
  
  public void invalidateNodeLayout(int paramInt) {
    StringBuilder stringBuilder = this.mUIImplementation.a(paramInt);
    if (stringBuilder == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Warning : attempted to dirty a non-existent react shadow node. reactTag=");
      stringBuilder.append(paramInt);
      a.c("ReactNative", stringBuilder.toString());
      return;
    } 
    stringBuilder.f();
    this.mUIImplementation.e(-1);
  }
  
  @ReactMethod
  public void manageChildren(int paramInt, ReadableArray paramReadableArray1, ReadableArray paramReadableArray2, ReadableArray paramReadableArray3, ReadableArray paramReadableArray4, ReadableArray paramReadableArray5) {
    if (DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("(UIManager.manageChildren) tag: ");
      stringBuilder.append(paramInt);
      stringBuilder.append(", moveFrom: ");
      stringBuilder.append(paramReadableArray1);
      stringBuilder.append(", moveTo: ");
      stringBuilder.append(paramReadableArray2);
      stringBuilder.append(", addTags: ");
      stringBuilder.append(paramReadableArray3);
      stringBuilder.append(", atIndices: ");
      stringBuilder.append(paramReadableArray4);
      stringBuilder.append(", removeFrom: ");
      stringBuilder.append(paramReadableArray5);
      String str = stringBuilder.toString();
      a.a("ReactNative", str);
      c.a().a(a.f, str);
    } 
    this.mUIImplementation.a(paramInt, paramReadableArray1, paramReadableArray2, paramReadableArray3, paramReadableArray4, paramReadableArray5);
  }
  
  @ReactMethod
  public void measure(int paramInt, Callback paramCallback) { this.mUIImplementation.a(paramInt, paramCallback); }
  
  @ReactMethod
  public void measureInWindow(int paramInt, Callback paramCallback) { this.mUIImplementation.b(paramInt, paramCallback); }
  
  @ReactMethod
  public void measureLayout(int paramInt1, int paramInt2, Callback paramCallback1, Callback paramCallback2) { this.mUIImplementation.a(paramInt1, paramInt2, paramCallback1, paramCallback2); }
  
  @ReactMethod
  public void measureLayoutRelativeToParent(int paramInt, Callback paramCallback1, Callback paramCallback2) { this.mUIImplementation.a(paramInt, paramCallback1, paramCallback2); }
  
  public void onBatchComplete() {
    int i = this.mBatchId;
    this.mBatchId = i + 1;
    b.a(0L, "onBatchCompleteUI").a("BatchId", i).a();
    null = this.mListeners.iterator();
    while (null.hasNext())
      ((ao)null.next()).willDispatchViewUpdates(this); 
    try {
      this.mUIImplementation.e(i);
      return;
    } finally {
      a.b(0L);
    } 
  }
  
  public void onCatalystInstanceDestroy() {
    super.onCatalystInstanceDestroy();
    this.mEventDispatcher.b();
    getReactApplicationContext().unregisterComponentCallbacks(this.mMemoryTrimCallback);
    aw.a().b();
    as.a();
  }
  
  public void onHostDestroy() { this.mUIImplementation.i(); }
  
  public void onHostPause() { this.mUIImplementation.h(); }
  
  public void onHostResume() { this.mUIImplementation.g(); }
  
  @ReactMethod
  public void playTouchSound() {
    AudioManager audioManager = (AudioManager)getReactApplicationContext().getSystemService("audio");
    if (audioManager != null)
      audioManager.playSoundEffect(0); 
  }
  
  @Deprecated
  public void preComputeConstantsForViewManager(List<String> paramList) {
    ArrayMap arrayMap = new ArrayMap();
    for (String str : paramList) {
      WritableMap writableMap = computeConstantsForViewManager(str);
      if (writableMap != null)
        arrayMap.put(str, writableMap); 
    } 
    this.mViewManagerConstantsCacheSize = paramList.size();
    this.mViewManagerConstantsCache = Collections.unmodifiableMap(arrayMap);
  }
  
  public void prependUIBlock(ai paramai) { this.mUIImplementation.b(paramai); }
  
  public void profileNextBatch() { this.mUIImplementation.b(); }
  
  public void registerAnimation(a parama) { this.mUIImplementation.a(parama); }
  
  public void removeAnimation(int paramInt1, int paramInt2) { this.mUIImplementation.b(paramInt1, paramInt2); }
  
  @ReactMethod
  public void removeRootView(int paramInt) { this.mUIImplementation.b(paramInt); }
  
  @ReactMethod
  public void removeSubviewsFromContainerWithID(int paramInt) { this.mUIImplementation.d(paramInt); }
  
  public void removeUIManagerListener(ao paramao) { this.mListeners.remove(paramao); }
  
  @ReactMethod
  public void replaceExistingNonRootView(int paramInt1, int paramInt2) { this.mUIImplementation.a(paramInt1, paramInt2); }
  
  public int resolveRootTagFromReactTag(int paramInt) { return b.b(paramInt) ? paramInt : this.mUIImplementation.f(paramInt); }
  
  @ReactMethod
  public void sendAccessibilityEvent(int paramInt1, int paramInt2) { this.mUIImplementation.c(paramInt1, paramInt2); }
  
  @ReactMethod
  public void setChildren(int paramInt, ReadableArray paramReadableArray) {
    if (DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("(UIManager.setChildren) tag: ");
      stringBuilder.append(paramInt);
      stringBuilder.append(", children: ");
      stringBuilder.append(paramReadableArray);
      String str = stringBuilder.toString();
      a.a("ReactNative", str);
      c.a().a(a.f, str);
    } 
    this.mUIImplementation.a(paramInt, paramReadableArray);
  }
  
  @ReactMethod
  public void setJSResponder(int paramInt, boolean paramBoolean) { this.mUIImplementation.a(paramInt, paramBoolean); }
  
  @ReactMethod
  public void setLayoutAnimationEnabledExperimental(boolean paramBoolean) { this.mUIImplementation.a(paramBoolean); }
  
  public void setViewHierarchyUpdateDebugListener(a parama) { this.mUIImplementation.a(parama); }
  
  public void setViewLocalData(int paramInt, Object paramObject) {
    ReactApplicationContext reactApplicationContext = getReactApplicationContext();
    reactApplicationContext.assertOnUiQueueThread();
    reactApplicationContext.runOnNativeModulesQueueThread(new Object(this, reactApplicationContext, paramInt, paramObject));
  }
  
  @ReactMethod
  public void showPopupMenu(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2) { this.mUIImplementation.a(paramInt, paramReadableArray, paramCallback1, paramCallback2); }
  
  public void updateNodeSize(int paramInt1, int paramInt2, int paramInt3) {
    getReactApplicationContext().assertOnNativeModulesQueueThread();
    this.mUIImplementation.b(paramInt1, paramInt2, paramInt3);
  }
  
  public void updateRootLayoutSpecs(int paramInt1, int paramInt2, int paramInt3) {
    ReactApplicationContext reactApplicationContext = getReactApplicationContext();
    reactApplicationContext.runOnNativeModulesQueueThread(new Object(this, reactApplicationContext, paramInt1, paramInt2, paramInt3));
  }
  
  @ReactMethod
  public void updateView(int paramInt, String paramString, ReadableMap paramReadableMap) {
    if (DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("(UIManager.updateView) tag: ");
      stringBuilder.append(paramInt);
      stringBuilder.append(", class: ");
      stringBuilder.append(paramString);
      stringBuilder.append(", props: ");
      stringBuilder.append(paramReadableMap);
      String str = stringBuilder.toString();
      a.a("ReactNative", str);
      c.a().a(a.f, str);
    } 
    this.mUIImplementation.a(paramInt, paramString, paramReadableMap);
  }
  
  @ReactMethod
  public void viewIsDescendantOf(int paramInt1, int paramInt2, Callback paramCallback) { this.mUIImplementation.a(paramInt1, paramInt2, paramCallback); }
}
