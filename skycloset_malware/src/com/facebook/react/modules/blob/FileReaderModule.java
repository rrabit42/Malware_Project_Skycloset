package com.facebook.react.modules.blob;

import android.util.Base64;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.module.a.a;

@a(a = "FileReaderModule")
public class FileReaderModule extends ReactContextBaseJavaModule {
  private static final String ERROR_INVALID_BLOB = "ERROR_INVALID_BLOB";
  
  protected static final String NAME = "FileReaderModule";
  
  public FileReaderModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private BlobModule getBlobModule() { return (BlobModule)getReactApplicationContext().getNativeModule(BlobModule.class); }
  
  public String getName() { return "FileReaderModule"; }
  
  @ReactMethod
  public void readAsDataURL(ReadableMap paramReadableMap, Promise paramPromise) {
    byte[] arrayOfByte = getBlobModule().resolve(paramReadableMap.getString("blobId"), paramReadableMap.getInt("offset"), paramReadableMap.getInt("size"));
    if (arrayOfByte == null) {
      paramPromise.reject("ERROR_INVALID_BLOB", "The specified blob is invalid");
      return;
    } 
    try {
      String str;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("data:");
      if (paramReadableMap.hasKey("type") && !paramReadableMap.getString("type").isEmpty()) {
        str = paramReadableMap.getString("type");
      } else {
        str = "application/octet-stream";
      } 
      stringBuilder.append(str);
      stringBuilder.append(";base64,");
      stringBuilder.append(Base64.encodeToString(arrayOfByte, 2));
      paramPromise.resolve(stringBuilder.toString());
      return;
    } catch (Exception paramReadableMap) {
      paramPromise.reject(paramReadableMap);
      return;
    } 
  }
  
  @ReactMethod
  public void readAsText(ReadableMap paramReadableMap, String paramString, Promise paramPromise) {
    arrayOfByte = getBlobModule().resolve(paramReadableMap.getString("blobId"), paramReadableMap.getInt("offset"), paramReadableMap.getInt("size"));
    if (arrayOfByte == null) {
      paramPromise.reject("ERROR_INVALID_BLOB", "The specified blob is invalid");
      return;
    } 
    try {
      paramPromise.resolve(new String(arrayOfByte, paramString));
      return;
    } catch (Exception arrayOfByte) {
      paramPromise.reject(arrayOfByte);
      return;
    } 
  }
}
