package com.facebook.react.modules.image;

import android.net.Uri;
import android.util.SparseArray;
import com.facebook.c.c;
import com.facebook.common.b.a;
import com.facebook.f.a.a.c;
import com.facebook.imagepipeline.o.b;
import com.facebook.imagepipeline.o.c;
import com.facebook.react.bridge.GuardedAsyncTask;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.module.a.a;

@a(a = "ImageLoader")
public class ImageLoaderModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
  private static final String ERROR_GET_SIZE_FAILURE = "E_GET_SIZE_FAILURE";
  
  private static final String ERROR_INVALID_URI = "E_INVALID_URI";
  
  private static final String ERROR_PREFETCH_FAILURE = "E_PREFETCH_FAILURE";
  
  public static final String NAME = "ImageLoader";
  
  private final Object mCallerContext = this;
  
  private final Object mEnqueuedRequestMonitor = new Object();
  
  private final SparseArray<c<Void>> mEnqueuedRequests = new SparseArray();
  
  public ImageLoaderModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  public ImageLoaderModule(ReactApplicationContext paramReactApplicationContext, Object paramObject) { super(paramReactApplicationContext); }
  
  private void registerRequest(int paramInt, c<Void> paramc) {
    synchronized (this.mEnqueuedRequestMonitor) {
      this.mEnqueuedRequests.put(paramInt, paramc);
      return;
    } 
  }
  
  private c<Void> removeRequest(int paramInt) {
    synchronized (this.mEnqueuedRequestMonitor) {
      c c = (c)this.mEnqueuedRequests.get(paramInt);
      this.mEnqueuedRequests.remove(paramInt);
      return c;
    } 
  }
  
  @ReactMethod
  public void abortRequest(int paramInt) {
    c c = removeRequest(paramInt);
    if (c != null)
      c.h(); 
  }
  
  public String getName() { return "ImageLoader"; }
  
  @ReactMethod
  public void getSize(String paramString, Promise paramPromise) {
    if (paramString == null || paramString.isEmpty()) {
      paramPromise.reject("E_INVALID_URI", "Cannot get the size of an image for an empty URI");
      return;
    } 
    b b = c.a(Uri.parse(paramString)).o();
    c.c().a(b, this.mCallerContext).a(new Object(this, paramPromise), a.a());
  }
  
  public void onHostDestroy() { // Byte code:
    //   0: aload_0
    //   1: getfield mEnqueuedRequestMonitor : Ljava/lang/Object;
    //   4: astore_3
    //   5: aload_3
    //   6: monitorenter
    //   7: iconst_0
    //   8: istore_1
    //   9: aload_0
    //   10: getfield mEnqueuedRequests : Landroid/util/SparseArray;
    //   13: invokevirtual size : ()I
    //   16: istore_2
    //   17: iload_1
    //   18: iload_2
    //   19: if_icmpge -> 51
    //   22: aload_0
    //   23: getfield mEnqueuedRequests : Landroid/util/SparseArray;
    //   26: iload_1
    //   27: invokevirtual valueAt : (I)Ljava/lang/Object;
    //   30: checkcast com/facebook/c/c
    //   33: astore #4
    //   35: aload #4
    //   37: ifnull -> 68
    //   40: aload #4
    //   42: invokeinterface h : ()Z
    //   47: pop
    //   48: goto -> 68
    //   51: aload_0
    //   52: getfield mEnqueuedRequests : Landroid/util/SparseArray;
    //   55: invokevirtual clear : ()V
    //   58: aload_3
    //   59: monitorexit
    //   60: return
    //   61: astore #4
    //   63: aload_3
    //   64: monitorexit
    //   65: aload #4
    //   67: athrow
    //   68: iload_1
    //   69: iconst_1
    //   70: iadd
    //   71: istore_1
    //   72: goto -> 17
    // Exception table:
    //   from	to	target	type
    //   9	17	61	finally
    //   22	35	61	finally
    //   40	48	61	finally
    //   51	60	61	finally
    //   63	65	61	finally }
  
  public void onHostPause() {}
  
  public void onHostResume() {}
  
  @ReactMethod
  public void prefetchImage(String paramString, int paramInt, Promise paramPromise) {
    if (paramString == null || paramString.isEmpty()) {
      paramPromise.reject("E_INVALID_URI", "Cannot prefetch an image for an empty URI");
      return;
    } 
    b b = c.a(Uri.parse(paramString)).o();
    c c = c.c().b(b, this.mCallerContext);
    Object object = new Object(this, paramInt, paramPromise);
    registerRequest(paramInt, c);
    c.a(object, a.a());
  }
  
  @ReactMethod
  public void queryCache(ReadableArray paramReadableArray, Promise paramPromise) { (new Object(this, getReactApplicationContext(), paramReadableArray, paramPromise)).executeOnExecutor(GuardedAsyncTask.THREAD_POOL_EXECUTOR, new Void[0]); }
}
