package com.facebook.react.modules.datepicker;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.e;
import android.widget.DatePicker;
import java.util.Calendar;
import java.util.Locale;

@SuppressLint({"ValidFragment"})
public class a extends e {
  private DatePickerDialog.OnDateSetListener ag;
  
  private DialogInterface.OnDismissListener ah;
  
  static Dialog a(Bundle paramBundle, Context paramContext, DatePickerDialog.OnDateSetListener paramOnDateSetListener) {
    long l;
    c c;
    Calendar calendar = Calendar.getInstance();
    if (paramBundle != null && paramBundle.containsKey("date"))
      calendar.setTimeInMillis(paramBundle.getLong("date")); 
    int i = calendar.get(1);
    int j = calendar.get(2);
    int k = calendar.get(5);
    b b2 = b.c;
    b b1 = b2;
    if (paramBundle != null) {
      b1 = b2;
      if (paramBundle.getString("mode", null) != null)
        b1 = b.valueOf(paramBundle.getString("mode").toUpperCase(Locale.US)); 
    } 
    if (Build.VERSION.SDK_INT >= 21) {
      switch (null.a[b1.ordinal()]) {
        default:
          paramContext = null;
          break;
        case 3:
          c = new c(paramContext, paramOnDateSetListener, i, j, k);
          break;
        case 2:
          c = new c(c, c.getResources().getIdentifier("SpinnerDatePickerDialog", "style", c.getPackageName()), paramOnDateSetListener, i, j, k);
          break;
        case 1:
          c = new c(c, c.getResources().getIdentifier("CalendarDatePickerDialog", "style", c.getPackageName()), paramOnDateSetListener, i, j, k);
          break;
      } 
    } else {
      c = new c(c, paramOnDateSetListener, i, j, k);
      switch (null.a[b1.ordinal()]) {
        case 2:
          c.getDatePicker().setCalendarViewShown(false);
          break;
        case 1:
          c.getDatePicker().setCalendarViewShown(true);
          c.getDatePicker().setSpinnersShown(false);
          break;
      } 
    } 
    DatePicker datePicker = c.getDatePicker();
    if (paramBundle != null && paramBundle.containsKey("minDate")) {
      calendar.setTimeInMillis(paramBundle.getLong("minDate"));
      calendar.set(11, 0);
      calendar.set(12, 0);
      calendar.set(13, 0);
      calendar.set(14, 0);
      l = calendar.getTimeInMillis();
    } else {
      l = -2208988800001L;
    } 
    datePicker.setMinDate(l);
    if (paramBundle != null && paramBundle.containsKey("maxDate")) {
      calendar.setTimeInMillis(paramBundle.getLong("maxDate"));
      calendar.set(11, 23);
      calendar.set(12, 59);
      calendar.set(13, 59);
      calendar.set(14, 999);
      datePicker.setMaxDate(calendar.getTimeInMillis());
    } 
    return c;
  }
  
  void a(DatePickerDialog.OnDateSetListener paramOnDateSetListener) { this.ag = paramOnDateSetListener; }
  
  void a(DialogInterface.OnDismissListener paramOnDismissListener) { this.ah = paramOnDismissListener; }
  
  public Dialog c(Bundle paramBundle) { return a(j(), n(), this.ag); }
  
  public void onDismiss(DialogInterface paramDialogInterface) {
    super.onDismiss(paramDialogInterface);
    DialogInterface.OnDismissListener onDismissListener = this.ah;
    if (onDismissListener != null)
      onDismissListener.onDismiss(paramDialogInterface); 
  }
}
