package com.facebook.react.modules.fresco;

import android.net.Uri;
import android.os.SystemClock;
import com.facebook.imagepipeline.b.a.b;
import com.facebook.imagepipeline.n.ag;
import com.facebook.imagepipeline.n.t;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import okhttp3.CacheControl;
import okhttp3.Headers;
import okhttp3.OkHttpClient;
import okhttp3.Request;

class b extends b {
  private final OkHttpClient a;
  
  private final Executor b;
  
  public b(OkHttpClient paramOkHttpClient) {
    super(paramOkHttpClient);
    this.a = paramOkHttpClient;
    this.b = paramOkHttpClient.dispatcher().executorService();
  }
  
  private Map<String, String> a(ReadableMap paramReadableMap) {
    if (paramReadableMap == null)
      return null; 
    ReadableMapKeySetIterator readableMapKeySetIterator = paramReadableMap.keySetIterator();
    HashMap hashMap = new HashMap();
    while (readableMapKeySetIterator.hasNextKey()) {
      String str = readableMapKeySetIterator.nextKey();
      hashMap.put(str, paramReadableMap.getString(str));
    } 
    return hashMap;
  }
  
  public void a(b.a parama, ag.a parama1) {
    Object object;
    parama.a = SystemClock.elapsedRealtime();
    Uri uri = parama.e();
    if (parama.b().a() instanceof a) {
      object = a(((a)parama.b().a()).s());
    } else {
      object = null;
    } 
    Map map = object;
    if (object == null)
      map = Collections.emptyMap(); 
    a(parama, parama1, (new Request.Builder()).cacheControl((new CacheControl.Builder()).noStore().build()).url(uri.toString()).headers(Headers.of(map)).get().build());
  }
}
