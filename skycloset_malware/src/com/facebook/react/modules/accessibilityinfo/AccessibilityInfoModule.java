package com.facebook.react.modules.accessibilityinfo;

import android.os.Build;
import android.view.accessibility.AccessibilityManager;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.DeviceEventManagerModule;

@a(a = "AccessibilityInfo")
public class AccessibilityInfoModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
  private static final String EVENT_NAME = "touchExplorationDidChange";
  
  public static final String NAME = "AccessibilityInfo";
  
  private AccessibilityManager mAccessibilityManager;
  
  private boolean mEnabled = false;
  
  private a mTouchExplorationStateChangeListener;
  
  public AccessibilityInfoModule(ReactApplicationContext paramReactApplicationContext) {
    super(paramReactApplicationContext);
    this.mAccessibilityManager = (AccessibilityManager)paramReactApplicationContext.getApplicationContext().getSystemService("accessibility");
    this.mEnabled = this.mAccessibilityManager.isTouchExplorationEnabled();
    if (Build.VERSION.SDK_INT >= 19)
      this.mTouchExplorationStateChangeListener = new a(this, null); 
  }
  
  private void updateAndSendChangeEvent(boolean paramBoolean) {
    if (this.mEnabled != paramBoolean) {
      this.mEnabled = paramBoolean;
      ((DeviceEventManagerModule.RCTDeviceEventEmitter)getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("touchExplorationDidChange", Boolean.valueOf(this.mEnabled));
    } 
  }
  
  public String getName() { return "AccessibilityInfo"; }
  
  public void initialize() {
    getReactApplicationContext().addLifecycleEventListener(this);
    updateAndSendChangeEvent(this.mAccessibilityManager.isTouchExplorationEnabled());
  }
  
  @ReactMethod
  public void isTouchExplorationEnabled(Callback paramCallback) { paramCallback.invoke(new Object[] { Boolean.valueOf(this.mEnabled) }); }
  
  public void onCatalystInstanceDestroy() {
    super.onCatalystInstanceDestroy();
    getReactApplicationContext().removeLifecycleEventListener(this);
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause() {
    if (Build.VERSION.SDK_INT >= 19)
      this.mAccessibilityManager.removeTouchExplorationStateChangeListener(this.mTouchExplorationStateChangeListener); 
  }
  
  public void onHostResume() {
    if (Build.VERSION.SDK_INT >= 19)
      this.mAccessibilityManager.addTouchExplorationStateChangeListener(this.mTouchExplorationStateChangeListener); 
    updateAndSendChangeEvent(this.mAccessibilityManager.isTouchExplorationEnabled());
  }
}
