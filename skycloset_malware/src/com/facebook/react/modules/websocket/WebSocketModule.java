package com.facebook.react.modules.websocket;

import b.f;
import com.facebook.common.e.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.modules.network.c;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.WebSocket;

@a(a = "WebSocketModule", d = false)
public final class WebSocketModule extends ReactContextBaseJavaModule {
  public static final String NAME = "WebSocketModule";
  
  private final Map<Integer, a> mContentHandlers = new ConcurrentHashMap();
  
  private c mCookieHandler;
  
  private ReactContext mReactContext;
  
  private final Map<Integer, WebSocket> mWebSocketConnections = new ConcurrentHashMap();
  
  public WebSocketModule(ReactApplicationContext paramReactApplicationContext) {
    super(paramReactApplicationContext);
    this.mReactContext = paramReactApplicationContext;
    this.mCookieHandler = new c(paramReactApplicationContext);
  }
  
  private String getCookie(String paramString) {
    try {
      URI uRI = new URI(getDefaultOrigin(paramString));
      List list = (List)this.mCookieHandler.get(uRI, new HashMap()).get("Cookie");
      return (list == null || list.isEmpty()) ? null : (String)list.get(0);
    } catch (URISyntaxException|java.io.IOException uRISyntaxException) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Unable to get cookie from ");
      stringBuilder.append(paramString);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
  }
  
  private static String getDefaultOrigin(String paramString) { // Byte code:
    //   0: ldc ''
    //   2: astore_1
    //   3: new java/net/URI
    //   6: dup
    //   7: aload_0
    //   8: invokespecial <init> : (Ljava/lang/String;)V
    //   11: astore #4
    //   13: aload #4
    //   15: invokevirtual getScheme : ()Ljava/lang/String;
    //   18: ldc 'wss'
    //   20: invokevirtual equals : (Ljava/lang/Object;)Z
    //   23: ifeq -> 58
    //   26: new java/lang/StringBuilder
    //   29: dup
    //   30: invokespecial <init> : ()V
    //   33: astore_2
    //   34: aload_2
    //   35: ldc ''
    //   37: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   40: pop
    //   41: ldc 'https'
    //   43: astore_1
    //   44: aload_2
    //   45: aload_1
    //   46: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   49: pop
    //   50: aload_2
    //   51: invokevirtual toString : ()Ljava/lang/String;
    //   54: astore_1
    //   55: goto -> 142
    //   58: aload #4
    //   60: invokevirtual getScheme : ()Ljava/lang/String;
    //   63: ldc 'ws'
    //   65: invokevirtual equals : (Ljava/lang/Object;)Z
    //   68: ifeq -> 92
    //   71: new java/lang/StringBuilder
    //   74: dup
    //   75: invokespecial <init> : ()V
    //   78: astore_2
    //   79: aload_2
    //   80: ldc ''
    //   82: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   85: pop
    //   86: ldc 'http'
    //   88: astore_1
    //   89: goto -> 44
    //   92: aload #4
    //   94: invokevirtual getScheme : ()Ljava/lang/String;
    //   97: ldc 'http'
    //   99: invokevirtual equals : (Ljava/lang/Object;)Z
    //   102: ifne -> 118
    //   105: aload #4
    //   107: invokevirtual getScheme : ()Ljava/lang/String;
    //   110: ldc 'https'
    //   112: invokevirtual equals : (Ljava/lang/Object;)Z
    //   115: ifeq -> 142
    //   118: new java/lang/StringBuilder
    //   121: dup
    //   122: invokespecial <init> : ()V
    //   125: astore_2
    //   126: aload_2
    //   127: ldc ''
    //   129: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   132: pop
    //   133: aload #4
    //   135: invokevirtual getScheme : ()Ljava/lang/String;
    //   138: astore_1
    //   139: goto -> 44
    //   142: aload #4
    //   144: invokevirtual getPort : ()I
    //   147: iconst_m1
    //   148: if_icmpeq -> 190
    //   151: ldc '%s://%s:%s'
    //   153: astore_3
    //   154: iconst_3
    //   155: anewarray java/lang/Object
    //   158: astore_2
    //   159: aload_2
    //   160: iconst_0
    //   161: aload_1
    //   162: aastore
    //   163: aload_2
    //   164: iconst_1
    //   165: aload #4
    //   167: invokevirtual getHost : ()Ljava/lang/String;
    //   170: aastore
    //   171: aload_2
    //   172: iconst_2
    //   173: aload #4
    //   175: invokevirtual getPort : ()I
    //   178: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   181: aastore
    //   182: aload_3
    //   183: astore_1
    //   184: aload_1
    //   185: aload_2
    //   186: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   189: areturn
    //   190: ldc '%s://%s'
    //   192: astore_3
    //   193: iconst_2
    //   194: anewarray java/lang/Object
    //   197: astore_2
    //   198: aload_2
    //   199: iconst_0
    //   200: aload_1
    //   201: aastore
    //   202: aload_2
    //   203: iconst_1
    //   204: aload #4
    //   206: invokevirtual getHost : ()Ljava/lang/String;
    //   209: aastore
    //   210: aload_3
    //   211: astore_1
    //   212: goto -> 184
    //   215: new java/lang/StringBuilder
    //   218: dup
    //   219: invokespecial <init> : ()V
    //   222: astore_1
    //   223: aload_1
    //   224: ldc 'Unable to set '
    //   226: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   229: pop
    //   230: aload_1
    //   231: aload_0
    //   232: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   235: pop
    //   236: aload_1
    //   237: ldc ' as default origin header'
    //   239: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   242: pop
    //   243: new java/lang/IllegalArgumentException
    //   246: dup
    //   247: aload_1
    //   248: invokevirtual toString : ()Ljava/lang/String;
    //   251: invokespecial <init> : (Ljava/lang/String;)V
    //   254: athrow
    //   255: astore_1
    //   256: goto -> 215
    // Exception table:
    //   from	to	target	type
    //   3	41	255	java/net/URISyntaxException
    //   44	55	255	java/net/URISyntaxException
    //   58	86	255	java/net/URISyntaxException
    //   92	105	255	java/net/URISyntaxException
    //   105	118	255	java/net/URISyntaxException
    //   118	139	255	java/net/URISyntaxException
    //   142	151	255	java/net/URISyntaxException
    //   154	159	255	java/net/URISyntaxException
    //   163	182	255	java/net/URISyntaxException
    //   184	190	255	java/net/URISyntaxException
    //   193	198	255	java/net/URISyntaxException
    //   202	210	255	java/net/URISyntaxException }
  
  private void notifyWebSocketFailed(int paramInt, String paramString) {
    WritableMap writableMap = Arguments.createMap();
    writableMap.putInt("id", paramInt);
    writableMap.putString("message", paramString);
    sendEvent("websocketFailed", writableMap);
  }
  
  private void sendEvent(String paramString, WritableMap paramWritableMap) { ((DeviceEventManagerModule.RCTDeviceEventEmitter)this.mReactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit(paramString, paramWritableMap); }
  
  @ReactMethod
  public void close(int paramInt1, String paramString, int paramInt2) {
    WebSocket webSocket = (WebSocket)this.mWebSocketConnections.get(Integer.valueOf(paramInt2));
    if (webSocket == null)
      return; 
    try {
      webSocket.close(paramInt1, paramString);
      this.mWebSocketConnections.remove(Integer.valueOf(paramInt2));
      this.mContentHandlers.remove(Integer.valueOf(paramInt2));
      return;
    } catch (Exception paramString) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Could not close WebSocket connection for id ");
      stringBuilder.append(paramInt2);
      a.c("ReactNative", stringBuilder.toString(), paramString);
      return;
    } 
  }
  
  @ReactMethod
  public void connect(String paramString, ReadableArray paramReadableArray, ReadableMap paramReadableMap, int paramInt) {
    OkHttpClient okHttpClient = (new OkHttpClient.Builder()).connectTimeout(10L, TimeUnit.SECONDS).writeTimeout(10L, TimeUnit.SECONDS).readTimeout(0L, TimeUnit.MINUTES).build();
    Request.Builder builder = (new Request.Builder()).tag(Integer.valueOf(paramInt)).url(paramString);
    String str = getCookie(paramString);
    if (str != null)
      builder.addHeader("Cookie", str); 
    if (paramReadableMap != null && paramReadableMap.hasKey("headers") && paramReadableMap.getType("headers").equals(ReadableType.Map)) {
      paramReadableMap = paramReadableMap.getMap("headers");
      ReadableMapKeySetIterator readableMapKeySetIterator = paramReadableMap.keySetIterator();
      if (!paramReadableMap.hasKey("origin"))
        builder.addHeader("origin", getDefaultOrigin(paramString)); 
      while (readableMapKeySetIterator.hasNextKey()) {
        paramString = readableMapKeySetIterator.nextKey();
        if (ReadableType.String.equals(paramReadableMap.getType(paramString))) {
          builder.addHeader(paramString, paramReadableMap.getString(paramString));
          continue;
        } 
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Ignoring: requested ");
        stringBuilder.append(paramString);
        stringBuilder.append(", value not a string");
        a.c("ReactNative", stringBuilder.toString());
      } 
    } else {
      builder.addHeader("origin", getDefaultOrigin(paramString));
    } 
    if (paramReadableArray != null && paramReadableArray.size() > 0) {
      StringBuilder stringBuilder = new StringBuilder("");
      byte b;
      for (b = 0; b < paramReadableArray.size(); b++) {
        String str1 = paramReadableArray.getString(b).trim();
        if (!str1.isEmpty() && !str1.contains(",")) {
          stringBuilder.append(str1);
          stringBuilder.append(",");
        } 
      } 
      if (stringBuilder.length() > 0) {
        stringBuilder.replace(stringBuilder.length() - 1, stringBuilder.length(), "");
        builder.addHeader("Sec-WebSocket-Protocol", stringBuilder.toString());
      } 
    } 
    okHttpClient.newWebSocket(builder.build(), new Object(this, paramInt));
    okHttpClient.dispatcher().executorService().shutdown();
  }
  
  public String getName() { return "WebSocketModule"; }
  
  @ReactMethod
  public void ping(int paramInt) {
    writableMap = (WebSocket)this.mWebSocketConnections.get(Integer.valueOf(paramInt));
    if (writableMap == null) {
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putString("message", "client is null");
      sendEvent("websocketFailed", writableMap);
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putInt("code", 0);
      writableMap.putString("reason", "client is null");
      sendEvent("websocketClosed", writableMap);
      this.mWebSocketConnections.remove(Integer.valueOf(paramInt));
      this.mContentHandlers.remove(Integer.valueOf(paramInt));
      return;
    } 
    try {
      writableMap.send(f.b);
      return;
    } catch (Exception writableMap) {
      notifyWebSocketFailed(paramInt, writableMap.getMessage());
      return;
    } 
  }
  
  @ReactMethod
  public void send(String paramString, int paramInt) {
    WebSocket webSocket = (WebSocket)this.mWebSocketConnections.get(Integer.valueOf(paramInt));
    if (webSocket == null) {
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putString("message", "client is null");
      sendEvent("websocketFailed", writableMap);
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putInt("code", 0);
      writableMap.putString("reason", "client is null");
      sendEvent("websocketClosed", writableMap);
      this.mWebSocketConnections.remove(Integer.valueOf(paramInt));
      this.mContentHandlers.remove(Integer.valueOf(paramInt));
      return;
    } 
    try {
      webSocket.send(writableMap);
      return;
    } catch (Exception writableMap) {
      notifyWebSocketFailed(paramInt, writableMap.getMessage());
      return;
    } 
  }
  
  public void sendBinary(f paramf, int paramInt) {
    WebSocket webSocket = (WebSocket)this.mWebSocketConnections.get(Integer.valueOf(paramInt));
    if (webSocket == null) {
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putString("message", "client is null");
      sendEvent("websocketFailed", writableMap);
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putInt("code", 0);
      writableMap.putString("reason", "client is null");
      sendEvent("websocketClosed", writableMap);
      this.mWebSocketConnections.remove(Integer.valueOf(paramInt));
      this.mContentHandlers.remove(Integer.valueOf(paramInt));
      return;
    } 
    try {
      webSocket.send(writableMap);
      return;
    } catch (Exception writableMap) {
      notifyWebSocketFailed(paramInt, writableMap.getMessage());
      return;
    } 
  }
  
  @ReactMethod
  public void sendBinary(String paramString, int paramInt) {
    WebSocket webSocket = (WebSocket)this.mWebSocketConnections.get(Integer.valueOf(paramInt));
    if (webSocket == null) {
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putString("message", "client is null");
      sendEvent("websocketFailed", writableMap);
      writableMap = Arguments.createMap();
      writableMap.putInt("id", paramInt);
      writableMap.putInt("code", 0);
      writableMap.putString("reason", "client is null");
      sendEvent("websocketClosed", writableMap);
      this.mWebSocketConnections.remove(Integer.valueOf(paramInt));
      this.mContentHandlers.remove(Integer.valueOf(paramInt));
      return;
    } 
    try {
      webSocket.send(f.b(writableMap));
      return;
    } catch (Exception writableMap) {
      notifyWebSocketFailed(paramInt, writableMap.getMessage());
      return;
    } 
  }
  
  public void setContentHandler(int paramInt, a parama) {
    if (parama != null) {
      this.mContentHandlers.put(Integer.valueOf(paramInt), parama);
      return;
    } 
    this.mContentHandlers.remove(Integer.valueOf(paramInt));
  }
}
