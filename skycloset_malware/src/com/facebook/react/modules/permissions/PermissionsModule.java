package com.facebook.react.modules.permissions;

import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.os.Process;
import android.util.SparseArray;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.c;
import com.facebook.react.modules.core.d;

@a(a = "PermissionsAndroid")
public class PermissionsModule extends ReactContextBaseJavaModule implements d {
  private static final String ERROR_INVALID_ACTIVITY = "E_INVALID_ACTIVITY";
  
  public static final String NAME = "PermissionsAndroid";
  
  private final String DENIED = "denied";
  
  private final String GRANTED = "granted";
  
  private final String NEVER_ASK_AGAIN = "never_ask_again";
  
  private final SparseArray<Callback> mCallbacks = new SparseArray();
  
  private int mRequestCode = 0;
  
  public PermissionsModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private c getPermissionAwareActivity() {
    Activity activity = getCurrentActivity();
    if (activity != null) {
      if (activity instanceof c)
        return (c)activity; 
      throw new IllegalStateException("Tried to use permissions API but the host Activity doesn't implement PermissionAwareActivity.");
    } 
    throw new IllegalStateException("Tried to use permissions API while not attached to an Activity.");
  }
  
  @ReactMethod
  public void checkPermission(String paramString, Promise paramPromise) {
    Context context = getReactApplicationContext().getBaseContext();
    int i = Build.VERSION.SDK_INT;
    boolean bool = true;
    if ((i < 23) ? (context.checkPermission(paramString, Process.myPid(), Process.myUid()) == 0) : (context.checkSelfPermission(paramString) == 0))
      bool = false; 
    paramPromise.resolve(Boolean.valueOf(bool));
  }
  
  public String getName() { return "PermissionsAndroid"; }
  
  public boolean onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt) {
    Callback callback = (Callback)this.mCallbacks.get(paramInt);
    boolean bool = false;
    callback.invoke(new Object[] { paramArrayOfInt, getPermissionAwareActivity() });
    this.mCallbacks.remove(paramInt);
    if (this.mCallbacks.size() == 0)
      bool = true; 
    return bool;
  }
  
  @ReactMethod
  public void requestMultiplePermissions(ReadableArray paramReadableArray, Promise paramPromise) { // Byte code:
    //   0: new com/facebook/react/bridge/WritableNativeMap
    //   3: dup
    //   4: invokespecial <init> : ()V
    //   7: astore #6
    //   9: new java/util/ArrayList
    //   12: dup
    //   13: invokespecial <init> : ()V
    //   16: astore #7
    //   18: aload_0
    //   19: invokevirtual getReactApplicationContext : ()Lcom/facebook/react/bridge/ReactApplicationContext;
    //   22: invokevirtual getBaseContext : ()Landroid/content/Context;
    //   25: astore #8
    //   27: iconst_0
    //   28: istore_3
    //   29: iload_3
    //   30: istore #4
    //   32: iload_3
    //   33: aload_1
    //   34: invokeinterface size : ()I
    //   39: if_icmpge -> 134
    //   42: aload_1
    //   43: iload_3
    //   44: invokeinterface getString : (I)Ljava/lang/String;
    //   49: astore #9
    //   51: getstatic android/os/Build$VERSION.SDK_INT : I
    //   54: bipush #23
    //   56: if_icmpge -> 85
    //   59: aload #8
    //   61: aload #9
    //   63: invokestatic myPid : ()I
    //   66: invokestatic myUid : ()I
    //   69: invokevirtual checkPermission : (Ljava/lang/String;II)I
    //   72: ifne -> 78
    //   75: goto -> 95
    //   78: ldc 'denied'
    //   80: astore #5
    //   82: goto -> 99
    //   85: aload #8
    //   87: aload #9
    //   89: invokevirtual checkSelfPermission : (Ljava/lang/String;)I
    //   92: ifne -> 119
    //   95: ldc 'granted'
    //   97: astore #5
    //   99: aload #6
    //   101: aload #9
    //   103: aload #5
    //   105: invokeinterface putString : (Ljava/lang/String;Ljava/lang/String;)V
    //   110: iload #4
    //   112: iconst_1
    //   113: iadd
    //   114: istore #4
    //   116: goto -> 127
    //   119: aload #7
    //   121: aload #9
    //   123: invokevirtual add : (Ljava/lang/Object;)Z
    //   126: pop
    //   127: iload_3
    //   128: iconst_1
    //   129: iadd
    //   130: istore_3
    //   131: goto -> 32
    //   134: aload_1
    //   135: invokeinterface size : ()I
    //   140: iload #4
    //   142: if_icmpne -> 154
    //   145: aload_2
    //   146: aload #6
    //   148: invokeinterface resolve : (Ljava/lang/Object;)V
    //   153: return
    //   154: aload_0
    //   155: invokespecial getPermissionAwareActivity : ()Lcom/facebook/react/modules/core/c;
    //   158: astore_1
    //   159: aload_0
    //   160: getfield mCallbacks : Landroid/util/SparseArray;
    //   163: aload_0
    //   164: getfield mRequestCode : I
    //   167: new com/facebook/react/modules/permissions/PermissionsModule$2
    //   170: dup
    //   171: aload_0
    //   172: aload #7
    //   174: aload #6
    //   176: aload_2
    //   177: invokespecial <init> : (Lcom/facebook/react/modules/permissions/PermissionsModule;Ljava/util/ArrayList;Lcom/facebook/react/bridge/WritableMap;Lcom/facebook/react/bridge/Promise;)V
    //   180: invokevirtual put : (ILjava/lang/Object;)V
    //   183: aload_1
    //   184: aload #7
    //   186: iconst_0
    //   187: anewarray java/lang/String
    //   190: invokevirtual toArray : ([Ljava/lang/Object;)[Ljava/lang/Object;
    //   193: checkcast [Ljava/lang/String;
    //   196: aload_0
    //   197: getfield mRequestCode : I
    //   200: aload_0
    //   201: invokeinterface a : ([Ljava/lang/String;ILcom/facebook/react/modules/core/d;)V
    //   206: aload_0
    //   207: aload_0
    //   208: getfield mRequestCode : I
    //   211: iconst_1
    //   212: iadd
    //   213: putfield mRequestCode : I
    //   216: return
    //   217: astore_1
    //   218: aload_2
    //   219: ldc 'E_INVALID_ACTIVITY'
    //   221: aload_1
    //   222: invokeinterface reject : (Ljava/lang/String;Ljava/lang/Throwable;)V
    //   227: return
    // Exception table:
    //   from	to	target	type
    //   154	216	217	java/lang/IllegalStateException }
  
  @ReactMethod
  public void requestPermission(String paramString, Promise paramPromise) {
    Context context = getReactApplicationContext().getBaseContext();
    if (Build.VERSION.SDK_INT < 23) {
      if (context.checkPermission(paramString, Process.myPid(), Process.myUid()) == 0) {
        paramString = "granted";
      } else {
        paramString = "denied";
      } 
      paramPromise.resolve(paramString);
      return;
    } 
    if (context.checkSelfPermission(paramString) == 0) {
      paramPromise.resolve("granted");
      return;
    } 
    try {
      c c = getPermissionAwareActivity();
      this.mCallbacks.put(this.mRequestCode, new Object(this, paramPromise, paramString));
      int i = this.mRequestCode;
      c.a(new String[] { paramString }, i, this);
      this.mRequestCode++;
      return;
    } catch (IllegalStateException paramString) {
      paramPromise.reject("E_INVALID_ACTIVITY", paramString);
      return;
    } 
  }
  
  @ReactMethod
  public void shouldShowRequestPermissionRationale(String paramString, Promise paramPromise) {
    if (Build.VERSION.SDK_INT < 23) {
      paramPromise.resolve(Boolean.valueOf(false));
      return;
    } 
    try {
      paramPromise.resolve(Boolean.valueOf(getPermissionAwareActivity().shouldShowRequestPermissionRationale(paramString)));
      return;
    } catch (IllegalStateException paramString) {
      paramPromise.reject("E_INVALID_ACTIVITY", paramString);
      return;
    } 
  }
}
