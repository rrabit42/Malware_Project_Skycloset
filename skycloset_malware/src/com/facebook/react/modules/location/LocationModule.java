package com.facebook.react.modules.location;

import android.annotation.SuppressLint;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.support.v4.a.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.h;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.DeviceEventManagerModule;

@a(a = "LocationObserver")
@SuppressLint({"MissingPermission"})
public class LocationModule extends ReactContextBaseJavaModule {
  public static final String NAME = "LocationObserver";
  
  private static final float RCT_DEFAULT_LOCATION_ACCURACY = 100.0F;
  
  private final LocationListener mLocationListener = new Object(this);
  
  private String mWatchedProvider;
  
  public LocationModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private void emitError(int paramInt, String paramString) { ((DeviceEventManagerModule.RCTDeviceEventEmitter)getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("geolocationError", a.a(paramInt, paramString)); }
  
  private String getValidProvider(LocationManager paramLocationManager, boolean paramBoolean) {
    String str1;
    if (paramBoolean) {
      str1 = "gps";
    } else {
      str1 = "network";
    } 
    String str2 = str1;
    if (!paramLocationManager.isProviderEnabled(str1)) {
      if (str1.equals("gps")) {
        str1 = "network";
      } else {
        str1 = "gps";
      } 
      str2 = str1;
      if (!paramLocationManager.isProviderEnabled(str1))
        return null; 
    } 
    int i = a.a(getReactApplicationContext(), "android.permission.ACCESS_FINE_LOCATION");
    return (str2.equals("gps") && i != 0) ? null : str2;
  }
  
  private static WritableMap locationToMap(Location paramLocation) {
    WritableMap writableMap1 = Arguments.createMap();
    WritableMap writableMap2 = Arguments.createMap();
    writableMap2.putDouble("latitude", paramLocation.getLatitude());
    writableMap2.putDouble("longitude", paramLocation.getLongitude());
    writableMap2.putDouble("altitude", paramLocation.getAltitude());
    writableMap2.putDouble("accuracy", paramLocation.getAccuracy());
    writableMap2.putDouble("heading", paramLocation.getBearing());
    writableMap2.putDouble("speed", paramLocation.getSpeed());
    writableMap1.putMap("coords", writableMap2);
    writableMap1.putDouble("timestamp", paramLocation.getTime());
    if (Build.VERSION.SDK_INT >= 18)
      writableMap1.putBoolean("mocked", paramLocation.isFromMockProvider()); 
    return writableMap1;
  }
  
  private static void throwLocationPermissionMissing(SecurityException paramSecurityException) { throw new SecurityException("Looks like the app doesn't have the permission to access location.\nAdd the following line to your app's AndroidManifest.xml:\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />", paramSecurityException); }
  
  @ReactMethod
  public void getCurrentPosition(ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2) {
    a = a.a(paramReadableMap);
    try {
      LocationManager locationManager = (LocationManager)getReactApplicationContext().getSystemService("location");
      String str = getValidProvider(locationManager, a.a(a));
      if (str == null) {
        paramCallback2.invoke(new Object[] { a.a(a.b, "No location provider available.") });
        return;
      } 
      Location location = locationManager.getLastKnownLocation(str);
      if (location != null && (h.a() - location.getTime()) < a.b(a)) {
        paramCallback1.invoke(new Object[] { locationToMap(location) });
        return;
      } 
      (new b(locationManager, str, a.c(a), paramCallback1, paramCallback2, null)).a(location);
      return;
    } catch (SecurityException a) {
      throwLocationPermissionMissing(a);
      return;
    } 
  }
  
  public String getName() { return "LocationObserver"; }
  
  @ReactMethod
  public void startObserving(ReadableMap paramReadableMap) {
    if ("gps".equals(this.mWatchedProvider))
      return; 
    a = a.a(paramReadableMap);
    try {
      LocationManager locationManager = (LocationManager)getReactApplicationContext().getSystemService("location");
      String str = getValidProvider(locationManager, a.a(a));
      if (str == null) {
        emitError(a.b, "No location provider available.");
        return;
      } 
      if (!str.equals(this.mWatchedProvider)) {
        locationManager.removeUpdates(this.mLocationListener);
        locationManager.requestLocationUpdates(str, 1000L, a.d(a), this.mLocationListener);
      } 
      this.mWatchedProvider = str;
      return;
    } catch (SecurityException a) {
      throwLocationPermissionMissing(a);
      return;
    } 
  }
  
  @ReactMethod
  public void stopObserving() {
    ((LocationManager)getReactApplicationContext().getSystemService("location")).removeUpdates(this.mLocationListener);
    this.mWatchedProvider = null;
  }
}
