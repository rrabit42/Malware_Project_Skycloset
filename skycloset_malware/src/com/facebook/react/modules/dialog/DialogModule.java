package com.facebook.react.modules.dialog;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.g;
import com.facebook.common.e.a;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import java.util.Map;

@a(a = "DialogManagerAndroid")
public class DialogModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
  static final String ACTION_BUTTON_CLICKED = "buttonClicked";
  
  static final String ACTION_DISMISSED = "dismissed";
  
  static final Map<String, Object> CONSTANTS = e.a("buttonClicked", "buttonClicked", "dismissed", "dismissed", "buttonPositive", Integer.valueOf(-1), "buttonNegative", Integer.valueOf(-2), "buttonNeutral", Integer.valueOf(-3));
  
  static final String FRAGMENT_TAG = "com.facebook.catalyst.react.dialog.DialogModule";
  
  static final String KEY_BUTTON_NEGATIVE = "buttonNegative";
  
  static final String KEY_BUTTON_NEUTRAL = "buttonNeutral";
  
  static final String KEY_BUTTON_POSITIVE = "buttonPositive";
  
  static final String KEY_CANCELABLE = "cancelable";
  
  static final String KEY_ITEMS = "items";
  
  static final String KEY_MESSAGE = "message";
  
  static final String KEY_TITLE = "title";
  
  public static final String NAME = "DialogManagerAndroid";
  
  private boolean mIsInForeground;
  
  public DialogModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private b getFragmentManagerHelper() {
    Activity activity = getCurrentActivity();
    return (activity == null) ? null : ((activity instanceof g) ? new b(this, ((g)activity).f()) : new b(this, activity.getFragmentManager()));
  }
  
  public Map<String, Object> getConstants() { return CONSTANTS; }
  
  public String getName() { return "DialogManagerAndroid"; }
  
  public void initialize() { getReactApplicationContext().addLifecycleEventListener(this); }
  
  public void onHostDestroy() {}
  
  public void onHostPause() { this.mIsInForeground = false; }
  
  public void onHostResume() {
    this.mIsInForeground = true;
    b b = getFragmentManagerHelper();
    if (b != null) {
      b.a();
      return;
    } 
    a.b(DialogModule.class, "onHostResume called but no FragmentManager found");
  }
  
  @ReactMethod
  public void showAlert(ReadableMap paramReadableMap, Callback paramCallback1, Callback paramCallback2) {
    b b1 = getFragmentManagerHelper();
    byte b = 0;
    if (b1 == null) {
      paramCallback1.invoke(new Object[] { "Tried to show an alert while not attached to an Activity" });
      return;
    } 
    Bundle bundle = new Bundle();
    if (paramReadableMap.hasKey("title"))
      bundle.putString("title", paramReadableMap.getString("title")); 
    if (paramReadableMap.hasKey("message"))
      bundle.putString("message", paramReadableMap.getString("message")); 
    if (paramReadableMap.hasKey("buttonPositive"))
      bundle.putString("button_positive", paramReadableMap.getString("buttonPositive")); 
    if (paramReadableMap.hasKey("buttonNegative"))
      bundle.putString("button_negative", paramReadableMap.getString("buttonNegative")); 
    if (paramReadableMap.hasKey("buttonNeutral"))
      bundle.putString("button_neutral", paramReadableMap.getString("buttonNeutral")); 
    if (paramReadableMap.hasKey("items")) {
      ReadableArray readableArray = paramReadableMap.getArray("items");
      CharSequence[] arrayOfCharSequence = new CharSequence[readableArray.size()];
      while (b < readableArray.size()) {
        arrayOfCharSequence[b] = readableArray.getString(b);
        b++;
      } 
      bundle.putCharSequenceArray("items", arrayOfCharSequence);
    } 
    if (paramReadableMap.hasKey("cancelable"))
      bundle.putBoolean("cancelable", paramReadableMap.getBoolean("cancelable")); 
    UiThreadUtil.runOnUiThread(new Object(this, b1, bundle, paramCallback2));
  }
}
