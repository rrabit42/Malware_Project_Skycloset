package com.facebook.react.modules.camera;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.a.a;

@a(a = "CameraRollManager")
public class CameraRollManager extends ReactContextBaseJavaModule {
  private static final String ASSET_TYPE_ALL = "All";
  
  private static final String ASSET_TYPE_PHOTOS = "Photos";
  
  private static final String ASSET_TYPE_VIDEOS = "Videos";
  
  private static final String ERROR_UNABLE_TO_FILTER = "E_UNABLE_TO_FILTER";
  
  private static final String ERROR_UNABLE_TO_LOAD = "E_UNABLE_TO_LOAD";
  
  private static final String ERROR_UNABLE_TO_LOAD_PERMISSION = "E_UNABLE_TO_LOAD_PERMISSION";
  
  private static final String ERROR_UNABLE_TO_SAVE = "E_UNABLE_TO_SAVE";
  
  public static final String NAME = "CameraRollManager";
  
  private static final String[] PROJECTION = { "_id", "mime_type", "bucket_display_name", "datetaken", "width", "height", "longitude", "latitude", "_data" };
  
  private static final String SELECTION_BUCKET = "bucket_display_name = ?";
  
  private static final String SELECTION_DATE_TAKEN = "datetaken < ?";
  
  public CameraRollManager(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private static void putBasicNodeInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2, int paramInt3) {
    paramWritableMap.putString("type", paramCursor.getString(paramInt1));
    paramWritableMap.putString("group_name", paramCursor.getString(paramInt2));
    paramWritableMap.putDouble("timestamp", paramCursor.getLong(paramInt3) / 1000.0D);
  }
  
  private static void putEdges(ContentResolver paramContentResolver, Cursor paramCursor, WritableMap paramWritableMap, int paramInt) {
    WritableNativeArray writableNativeArray = new WritableNativeArray();
    paramCursor.moveToFirst();
    int i = paramCursor.getColumnIndex("_id");
    int k = paramCursor.getColumnIndex("mime_type");
    int m = paramCursor.getColumnIndex("bucket_display_name");
    int n = paramCursor.getColumnIndex("datetaken");
    int i1 = paramCursor.getColumnIndex("width");
    int i2 = paramCursor.getColumnIndex("height");
    int i3 = paramCursor.getColumnIndex("longitude");
    int j = paramCursor.getColumnIndex("latitude");
    int i4 = paramCursor.getColumnIndex("_data");
    byte b;
    for (b = 0; b < paramInt && !paramCursor.isAfterLast(); b++) {
      WritableNativeMap writableNativeMap1 = new WritableNativeMap();
      WritableNativeMap writableNativeMap2 = new WritableNativeMap();
      if (putImageInfo(paramContentResolver, paramCursor, writableNativeMap2, i, i1, i2, i4)) {
        putBasicNodeInfo(paramCursor, writableNativeMap2, k, m, n);
        putLocationInfo(paramCursor, writableNativeMap2, i3, j);
        writableNativeMap1.putMap("node", writableNativeMap2);
        writableNativeArray.pushMap(writableNativeMap1);
      } else {
        b--;
      } 
      paramCursor.moveToNext();
    } 
    paramWritableMap.putArray("edges", writableNativeArray);
  }
  
  private static boolean putImageInfo(ContentResolver paramContentResolver, Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { // Byte code:
    //   0: new com/facebook/react/bridge/WritableNativeMap
    //   3: dup
    //   4: invokespecial <init> : ()V
    //   7: astore #12
    //   9: new java/lang/StringBuilder
    //   12: dup
    //   13: invokespecial <init> : ()V
    //   16: astore #11
    //   18: aload #11
    //   20: ldc 'file://'
    //   22: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   25: pop
    //   26: aload #11
    //   28: aload_1
    //   29: iload #6
    //   31: invokeinterface getString : (I)Ljava/lang/String;
    //   36: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: pop
    //   40: aload #11
    //   42: invokevirtual toString : ()Ljava/lang/String;
    //   45: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   48: astore #11
    //   50: aload #12
    //   52: ldc 'uri'
    //   54: aload #11
    //   56: invokevirtual toString : ()Ljava/lang/String;
    //   59: invokeinterface putString : (Ljava/lang/String;Ljava/lang/String;)V
    //   64: aload_1
    //   65: iload #4
    //   67: invokeinterface getInt : (I)I
    //   72: i2f
    //   73: fstore #10
    //   75: aload_1
    //   76: iload #5
    //   78: invokeinterface getInt : (I)I
    //   83: i2f
    //   84: fstore #9
    //   86: aload #11
    //   88: invokevirtual toString : ()Ljava/lang/String;
    //   91: invokestatic guessContentTypeFromName : (Ljava/lang/String;)Ljava/lang/String;
    //   94: astore_1
    //   95: fload #9
    //   97: fstore #7
    //   99: fload #10
    //   101: fstore #8
    //   103: aload_1
    //   104: ifnull -> 339
    //   107: fload #9
    //   109: fstore #7
    //   111: fload #10
    //   113: fstore #8
    //   115: aload_1
    //   116: ldc 'video'
    //   118: invokevirtual startsWith : (Ljava/lang/String;)Z
    //   121: ifeq -> 339
    //   124: aload_0
    //   125: aload #11
    //   127: ldc 'r'
    //   129: invokevirtual openAssetFileDescriptor : (Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
    //   132: astore_1
    //   133: new android/media/MediaMetadataRetriever
    //   136: dup
    //   137: invokespecial <init> : ()V
    //   140: astore #13
    //   142: aload #13
    //   144: aload_1
    //   145: invokevirtual getFileDescriptor : ()Ljava/io/FileDescriptor;
    //   148: invokevirtual setDataSource : (Ljava/io/FileDescriptor;)V
    //   151: fload #10
    //   153: fconst_0
    //   154: fcmpg
    //   155: ifle -> 173
    //   158: fload #9
    //   160: fstore #7
    //   162: fload #10
    //   164: fstore #8
    //   166: fload #9
    //   168: fconst_0
    //   169: fcmpg
    //   170: ifgt -> 199
    //   173: aload #13
    //   175: bipush #18
    //   177: invokevirtual extractMetadata : (I)Ljava/lang/String;
    //   180: invokestatic parseInt : (Ljava/lang/String;)I
    //   183: i2f
    //   184: fstore #8
    //   186: aload #13
    //   188: bipush #19
    //   190: invokevirtual extractMetadata : (I)Ljava/lang/String;
    //   193: invokestatic parseInt : (Ljava/lang/String;)I
    //   196: i2f
    //   197: fstore #7
    //   199: aload #12
    //   201: ldc 'playableDuration'
    //   203: aload #13
    //   205: bipush #9
    //   207: invokevirtual extractMetadata : (I)Ljava/lang/String;
    //   210: invokestatic parseInt : (Ljava/lang/String;)I
    //   213: sipush #1000
    //   216: idiv
    //   217: invokeinterface putInt : (Ljava/lang/String;I)V
    //   222: aload #13
    //   224: invokevirtual release : ()V
    //   227: aload_1
    //   228: invokevirtual close : ()V
    //   231: goto -> 339
    //   234: astore_0
    //   235: goto -> 286
    //   238: astore_0
    //   239: new java/lang/StringBuilder
    //   242: dup
    //   243: invokespecial <init> : ()V
    //   246: astore_2
    //   247: aload_2
    //   248: ldc 'Number format exception occurred while trying to fetch video metadata for '
    //   250: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   253: pop
    //   254: aload_2
    //   255: aload #11
    //   257: invokevirtual toString : ()Ljava/lang/String;
    //   260: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   263: pop
    //   264: ldc_w 'ReactNative'
    //   267: aload_2
    //   268: invokevirtual toString : ()Ljava/lang/String;
    //   271: aload_0
    //   272: invokestatic c : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   275: aload #13
    //   277: invokevirtual release : ()V
    //   280: aload_1
    //   281: invokevirtual close : ()V
    //   284: iconst_0
    //   285: ireturn
    //   286: aload #13
    //   288: invokevirtual release : ()V
    //   291: aload_1
    //   292: invokevirtual close : ()V
    //   295: aload_0
    //   296: athrow
    //   297: astore_0
    //   298: new java/lang/StringBuilder
    //   301: dup
    //   302: invokespecial <init> : ()V
    //   305: astore_1
    //   306: ldc_w 'Could not get video metadata for '
    //   309: astore_2
    //   310: aload_1
    //   311: aload_2
    //   312: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   315: pop
    //   316: aload_1
    //   317: aload #11
    //   319: invokevirtual toString : ()Ljava/lang/String;
    //   322: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   325: pop
    //   326: ldc_w 'ReactNative'
    //   329: aload_1
    //   330: invokevirtual toString : ()Ljava/lang/String;
    //   333: aload_0
    //   334: invokestatic c : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   337: iconst_0
    //   338: ireturn
    //   339: fload #8
    //   341: fconst_0
    //   342: fcmpg
    //   343: ifle -> 357
    //   346: fload #7
    //   348: fstore #9
    //   350: fload #7
    //   352: fconst_0
    //   353: fcmpg
    //   354: ifgt -> 407
    //   357: aload_0
    //   358: aload #11
    //   360: ldc 'r'
    //   362: invokevirtual openAssetFileDescriptor : (Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
    //   365: astore_0
    //   366: new android/graphics/BitmapFactory$Options
    //   369: dup
    //   370: invokespecial <init> : ()V
    //   373: astore_1
    //   374: aload_1
    //   375: iconst_1
    //   376: putfield inJustDecodeBounds : Z
    //   379: aload_0
    //   380: invokevirtual getFileDescriptor : ()Ljava/io/FileDescriptor;
    //   383: aconst_null
    //   384: aload_1
    //   385: invokestatic decodeFileDescriptor : (Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   388: pop
    //   389: aload_1
    //   390: getfield outWidth : I
    //   393: i2f
    //   394: fstore #8
    //   396: aload_1
    //   397: getfield outHeight : I
    //   400: i2f
    //   401: fstore #9
    //   403: aload_0
    //   404: invokevirtual close : ()V
    //   407: aload #12
    //   409: ldc 'width'
    //   411: fload #8
    //   413: f2d
    //   414: invokeinterface putDouble : (Ljava/lang/String;D)V
    //   419: aload #12
    //   421: ldc 'height'
    //   423: fload #9
    //   425: f2d
    //   426: invokeinterface putDouble : (Ljava/lang/String;D)V
    //   431: aload_2
    //   432: ldc_w 'image'
    //   435: aload #12
    //   437: invokeinterface putMap : (Ljava/lang/String;Lcom/facebook/react/bridge/WritableMap;)V
    //   442: iconst_1
    //   443: ireturn
    //   444: astore_0
    //   445: new java/lang/StringBuilder
    //   448: dup
    //   449: invokespecial <init> : ()V
    //   452: astore_1
    //   453: ldc_w 'Could not get width/height for '
    //   456: astore_2
    //   457: goto -> 310
    // Exception table:
    //   from	to	target	type
    //   124	151	297	java/lang/Exception
    //   173	199	238	java/lang/NumberFormatException
    //   173	199	234	finally
    //   199	222	238	java/lang/NumberFormatException
    //   199	222	234	finally
    //   222	231	297	java/lang/Exception
    //   239	275	234	finally
    //   275	284	297	java/lang/Exception
    //   286	297	297	java/lang/Exception
    //   357	407	444	java/io/IOException }
  
  private static void putLocationInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt1, int paramInt2) {
    double d1 = paramCursor.getDouble(paramInt1);
    double d2 = paramCursor.getDouble(paramInt2);
    if (d1 > 0.0D || d2 > 0.0D) {
      WritableNativeMap writableNativeMap = new WritableNativeMap();
      writableNativeMap.putDouble("longitude", d1);
      writableNativeMap.putDouble("latitude", d2);
      paramWritableMap.putMap("location", writableNativeMap);
    } 
  }
  
  private static void putPageInfo(Cursor paramCursor, WritableMap paramWritableMap, int paramInt) {
    boolean bool;
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    if (paramInt < paramCursor.getCount()) {
      bool = true;
    } else {
      bool = false;
    } 
    writableNativeMap.putBoolean("has_next_page", bool);
    if (paramInt < paramCursor.getCount()) {
      paramCursor.moveToPosition(paramInt - 1);
      writableNativeMap.putString("end_cursor", paramCursor.getString(paramCursor.getColumnIndex("datetaken")));
    } 
    paramWritableMap.putMap("page_info", writableNativeMap);
  }
  
  public String getName() { return "CameraRollManager"; }
  
  @ReactMethod
  public void getPhotos(ReadableMap paramReadableMap, Promise paramPromise) {
    ReadableArray readableArray;
    String str3;
    String str2;
    String str1;
    int i = paramReadableMap.getInt("first");
    if (paramReadableMap.hasKey("after")) {
      str1 = paramReadableMap.getString("after");
    } else {
      str1 = null;
    } 
    if (paramReadableMap.hasKey("groupName")) {
      str2 = paramReadableMap.getString("groupName");
    } else {
      str2 = null;
    } 
    if (paramReadableMap.hasKey("assetType")) {
      str3 = paramReadableMap.getString("assetType");
    } else {
      str3 = "Photos";
    } 
    if (paramReadableMap.hasKey("mimeTypes")) {
      readableArray = paramReadableMap.getArray("mimeTypes");
    } else {
      readableArray = null;
    } 
    if (!paramReadableMap.hasKey("groupTypes")) {
      (new a(getReactApplicationContext(), i, str1, str2, readableArray, str3, paramPromise, null)).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]);
      return;
    } 
    throw new JSApplicationIllegalArgumentException("groupTypes is not supported on Android");
  }
  
  @ReactMethod
  public void saveToCameraRoll(String paramString1, String paramString2, Promise paramPromise) { (new b(getReactApplicationContext(), Uri.parse(paramString1), paramPromise)).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Void[0]); }
}
