package com.facebook.react.modules.network;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.text.TextUtils;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactContext;
import java.net.CookieHandler;
import java.net.URI;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class c extends CookieHandler {
  private static final boolean a;
  
  private final a b;
  
  private final ReactContext c;
  
  private CookieManager d;
  
  static  {
    boolean bool;
    if (Build.VERSION.SDK_INT < 21) {
      bool = true;
    } else {
      bool = false;
    } 
    a = bool;
  }
  
  public c(ReactContext paramReactContext) {
    this.c = paramReactContext;
    this.b = new a(this);
  }
  
  private static void a(Context paramContext) {
    if (a)
      CookieSyncManager.createInstance(paramContext).sync(); 
  }
  
  private void a(Runnable paramRunnable) { (new Object(this, this.c, paramRunnable)).execute(new Void[0]); }
  
  @TargetApi(21)
  private void a(String paramString1, String paramString2) {
    CookieManager cookieManager = c();
    if (cookieManager != null)
      cookieManager.setCookie(paramString1, paramString2, null); 
  }
  
  private void a(String paramString, List<String> paramList) {
    CookieManager cookieManager = c();
    if (cookieManager == null)
      return; 
    if (a) {
      a(new Object(this, paramList, cookieManager, paramString));
      return;
    } 
    Iterator iterator = paramList.iterator();
    while (iterator.hasNext())
      a(paramString, (String)iterator.next()); 
    cookieManager.flush();
    this.b.a();
  }
  
  private static boolean a(String paramString) { return (paramString.equalsIgnoreCase("Set-cookie") || paramString.equalsIgnoreCase("Set-cookie2")); }
  
  private void b(Callback paramCallback) {
    CookieManager cookieManager = c();
    if (cookieManager != null)
      cookieManager.removeAllCookies(new Object(this, paramCallback)); 
  }
  
  private CookieManager c() {
    if (this.d == null) {
      a(this.c);
      try {
        this.d = CookieManager.getInstance();
        if (a)
          this.d.removeExpiredCookie(); 
        return this.d;
      } catch (IllegalArgumentException illegalArgumentException) {
        return null;
      } catch (Exception exception) {
        String str = exception.getMessage();
        if (str != null && str.contains("No WebView installed"))
          return null; 
        throw exception;
      } 
    } 
    return this.d;
  }
  
  public void a() {
    if (a) {
      CookieManager cookieManager = c();
      if (cookieManager != null)
        cookieManager.removeExpiredCookie(); 
      this.b.b();
    } 
  }
  
  public void a(Callback paramCallback) {
    if (a) {
      (new Object(this, this.c, paramCallback)).execute(new Void[0]);
      return;
    } 
    b(paramCallback);
  }
  
  public Map<String, List<String>> get(URI paramURI, Map<String, List<String>> paramMap) {
    CookieManager cookieManager = c();
    if (cookieManager == null)
      return Collections.emptyMap(); 
    String str = cookieManager.getCookie(paramURI.toString());
    return TextUtils.isEmpty(str) ? Collections.emptyMap() : Collections.singletonMap("Cookie", Collections.singletonList(str));
  }
  
  public void put(URI paramURI, Map<String, List<String>> paramMap) {
    String str = paramURI.toString();
    for (Map.Entry entry : paramMap.entrySet()) {
      String str1 = (String)entry.getKey();
      if (str1 != null && a(str1))
        a(str, (List)entry.getValue()); 
    } 
  }
}
