package com.facebook.react.modules.network;

import com.facebook.common.e.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.g;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import okhttp3.Headers;
import okhttp3.JavaNetCookieJar;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;

@a(a = "Networking")
public final class NetworkingModule extends ReactContextBaseJavaModule {
  private static final int CHUNK_TIMEOUT_NS = 100000000;
  
  private static final String CONTENT_ENCODING_HEADER_NAME = "content-encoding";
  
  private static final String CONTENT_TYPE_HEADER_NAME = "content-type";
  
  private static final int MAX_CHUNK_SIZE_BETWEEN_FLUSHES = 8192;
  
  protected static final String NAME = "Networking";
  
  private static final String REQUEST_BODY_KEY_BASE64 = "base64";
  
  private static final String REQUEST_BODY_KEY_FORMDATA = "formData";
  
  private static final String REQUEST_BODY_KEY_STRING = "string";
  
  private static final String REQUEST_BODY_KEY_URI = "uri";
  
  private static final String TAG = "NetworkingModule";
  
  private static final String USER_AGENT_HEADER_NAME = "user-agent";
  
  private final OkHttpClient mClient;
  
  private final c mCookieHandler;
  
  private final a mCookieJarContainer;
  
  private final String mDefaultUserAgent;
  
  private final List<a> mRequestBodyHandlers = new ArrayList();
  
  private final Set<Integer> mRequestIds;
  
  private final List<b> mResponseHandlers = new ArrayList();
  
  private boolean mShuttingDown;
  
  private final List<c> mUriHandlers = new ArrayList();
  
  public NetworkingModule(ReactApplicationContext paramReactApplicationContext) { this(paramReactApplicationContext, null, g.a(paramReactApplicationContext), null); }
  
  public NetworkingModule(ReactApplicationContext paramReactApplicationContext, String paramString) { this(paramReactApplicationContext, paramString, g.a(paramReactApplicationContext), null); }
  
  NetworkingModule(ReactApplicationContext paramReactApplicationContext, String paramString, OkHttpClient paramOkHttpClient) { this(paramReactApplicationContext, paramString, paramOkHttpClient, null); }
  
  NetworkingModule(ReactApplicationContext paramReactApplicationContext, String paramString, OkHttpClient paramOkHttpClient, List<e> paramList) {
    super(paramReactApplicationContext);
    OkHttpClient okHttpClient = paramOkHttpClient;
    if (paramList != null) {
      OkHttpClient.Builder builder = paramOkHttpClient.newBuilder();
      Iterator iterator = paramList.iterator();
      while (iterator.hasNext())
        builder.addNetworkInterceptor(((e)iterator.next()).a()); 
      okHttpClient = builder.build();
    } 
    this.mClient = okHttpClient;
    this.mCookieHandler = new c(paramReactApplicationContext);
    this.mCookieJarContainer = (a)this.mClient.cookieJar();
    this.mShuttingDown = false;
    this.mDefaultUserAgent = paramString;
    this.mRequestIds = new HashSet();
  }
  
  public NetworkingModule(ReactApplicationContext paramReactApplicationContext, List<e> paramList) { this(paramReactApplicationContext, null, g.a(paramReactApplicationContext), paramList); }
  
  private void addRequest(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mRequestIds : Ljava/util/Set;
    //   6: iload_1
    //   7: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   10: invokeinterface add : (Ljava/lang/Object;)Z
    //   15: pop
    //   16: aload_0
    //   17: monitorexit
    //   18: return
    //   19: astore_2
    //   20: aload_0
    //   21: monitorexit
    //   22: aload_2
    //   23: athrow
    // Exception table:
    //   from	to	target	type
    //   2	16	19	finally }
  
  private void cancelAllRequests() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mRequestIds : Ljava/util/Set;
    //   6: invokeinterface iterator : ()Ljava/util/Iterator;
    //   11: astore_1
    //   12: aload_1
    //   13: invokeinterface hasNext : ()Z
    //   18: ifeq -> 40
    //   21: aload_0
    //   22: aload_1
    //   23: invokeinterface next : ()Ljava/lang/Object;
    //   28: checkcast java/lang/Integer
    //   31: invokevirtual intValue : ()I
    //   34: invokespecial cancelRequest : (I)V
    //   37: goto -> 12
    //   40: aload_0
    //   41: getfield mRequestIds : Ljava/util/Set;
    //   44: invokeinterface clear : ()V
    //   49: aload_0
    //   50: monitorexit
    //   51: return
    //   52: astore_1
    //   53: aload_0
    //   54: monitorexit
    //   55: aload_1
    //   56: athrow
    // Exception table:
    //   from	to	target	type
    //   2	12	52	finally
    //   12	37	52	finally
    //   40	49	52	finally }
  
  private void cancelRequest(int paramInt) { (new Object(this, getReactApplicationContext(), paramInt)).execute(new Void[0]); }
  
  private MultipartBody.Builder constructMultipartBody(ReadableArray paramReadableArray, String paramString, int paramInt) {
    DeviceEventManagerModule.RCTDeviceEventEmitter rCTDeviceEventEmitter = getEventEmitter();
    MultipartBody.Builder builder = new MultipartBody.Builder();
    builder.setType(MediaType.parse(paramString));
    int i = paramReadableArray.size();
    byte b;
    for (b = 0;; b++) {
      if (b < i) {
        ReadableMap readableMap = paramReadableArray.getMap(b);
        Headers headers = extractHeaders(readableMap.getArray("headers"), null);
        if (headers == null) {
          String str = "Missing or invalid header format for FormData part.";
          n.a(rCTDeviceEventEmitter, paramInt, str, null);
          return null;
        } 
        RequestBody requestBody = headers.get("content-type");
        if (requestBody != null) {
          MediaType mediaType = MediaType.parse(requestBody);
          headers = headers.newBuilder().removeAll("content-type").build();
        } else {
          requestBody = null;
        } 
        if (readableMap.hasKey("string")) {
          requestBody = RequestBody.create(requestBody, readableMap.getString("string"));
        } else if (readableMap.hasKey("uri")) {
          if (requestBody == null) {
            String str1 = "Binary FormData part needs a content-type header.";
            n.a(rCTDeviceEventEmitter, paramInt, str1, null);
            return null;
          } 
          String str = readableMap.getString("uri");
          InputStream inputStream = m.a(getReactApplicationContext(), str);
          if (inputStream == null) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Could not retrieve file for uri ");
            stringBuilder.append(str);
            String str1 = stringBuilder.toString();
            n.a(rCTDeviceEventEmitter, paramInt, str1, null);
            return null;
          } 
          requestBody = m.a(requestBody, inputStream);
        } else {
          n.a(rCTDeviceEventEmitter, paramInt, "Unrecognized FormData part.", null);
          b++;
        } 
        builder.addPart(headers, requestBody);
      } else {
        break;
      } 
    } 
    return builder;
  }
  
  private Headers extractHeaders(ReadableArray paramReadableArray, ReadableMap paramReadableMap) {
    if (paramReadableArray == null)
      return null; 
    Headers.Builder builder = new Headers.Builder();
    int i = paramReadableArray.size();
    byte b2 = 0;
    byte b1 = 0;
    while (b1 < i) {
      ReadableArray readableArray = paramReadableArray.getArray(b1);
      if (readableArray != null) {
        if (readableArray.size() != 2)
          return null; 
        String str1 = d.a(readableArray.getString(0));
        String str2 = d.b(readableArray.getString(1));
        if (str1 != null) {
          if (str2 == null)
            return null; 
          builder.add(str1, str2);
          b1++;
          continue;
        } 
      } 
      return null;
    } 
    if (builder.get("user-agent") == null) {
      String str = this.mDefaultUserAgent;
      if (str != null)
        builder.add("user-agent", str); 
    } 
    b1 = b2;
    if (paramReadableMap != null) {
      b1 = b2;
      if (paramReadableMap.hasKey("string"))
        b1 = 1; 
    } 
    if (b1 == 0)
      builder.removeAll("content-encoding"); 
    return builder.build();
  }
  
  private DeviceEventManagerModule.RCTDeviceEventEmitter getEventEmitter() { return (DeviceEventManagerModule.RCTDeviceEventEmitter)getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class); }
  
  private void readWithProgress(DeviceEventManagerModule.RCTDeviceEventEmitter paramRCTDeviceEventEmitter, int paramInt, ResponseBody paramResponseBody) {
    Charset charset;
    long l2;
    long l1 = -1L;
    try {
      charset = (j)paramResponseBody;
      l2 = charset.a();
      try {
        long l = charset.contentLength();
        l1 = l;
      } catch (ClassCastException null) {}
    } catch (ClassCastException null) {
      l2 = -1L;
    } 
    if (paramResponseBody.contentType() == null) {
      charset = g.a;
    } else {
      charset = paramResponseBody.contentType().charset(g.a);
    } 
    k k = new k(charset);
    inputStream = paramResponseBody.byteStream();
    try {
      byte[] arrayOfByte = new byte[8192];
      while (true) {
        int i = inputStream.read(arrayOfByte);
        if (i != -1) {
          n.a(paramRCTDeviceEventEmitter, paramInt, k.a(arrayOfByte, i), l2, l1);
          continue;
        } 
        break;
      } 
      return;
    } finally {
      inputStream.close();
    } 
  }
  
  private void removeRequest(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mRequestIds : Ljava/util/Set;
    //   6: iload_1
    //   7: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   10: invokeinterface remove : (Ljava/lang/Object;)Z
    //   15: pop
    //   16: aload_0
    //   17: monitorexit
    //   18: return
    //   19: astore_2
    //   20: aload_0
    //   21: monitorexit
    //   22: aload_2
    //   23: athrow
    // Exception table:
    //   from	to	target	type
    //   2	16	19	finally }
  
  private static boolean shouldDispatch(long paramLong1, long paramLong2) { return (paramLong2 + 100000000L < paramLong1); }
  
  private static WritableMap translateHeaders(Headers paramHeaders) {
    WritableMap writableMap = Arguments.createMap();
    for (byte b = 0; b < paramHeaders.size(); b++) {
      String str1;
      String str2 = paramHeaders.name(b);
      if (writableMap.hasKey(str2)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(writableMap.getString(str2));
        stringBuilder.append(", ");
        stringBuilder.append(paramHeaders.value(b));
        str1 = stringBuilder.toString();
      } else {
        str1 = paramHeaders.value(b);
      } 
      writableMap.putString(str2, str1);
    } 
    return writableMap;
  }
  
  private RequestBody wrapRequestBodyWithProgressEmitter(RequestBody paramRequestBody, DeviceEventManagerModule.RCTDeviceEventEmitter paramRCTDeviceEventEmitter, int paramInt) { return (paramRequestBody == null) ? null : m.a(paramRequestBody, new Object(this, paramRCTDeviceEventEmitter, paramInt)); }
  
  @ReactMethod
  public void abortRequest(int paramInt) {
    cancelRequest(paramInt);
    removeRequest(paramInt);
  }
  
  public void addRequestBodyHandler(a parama) { this.mRequestBodyHandlers.add(parama); }
  
  public void addResponseHandler(b paramb) { this.mResponseHandlers.add(paramb); }
  
  public void addUriHandler(c paramc) { this.mUriHandlers.add(paramc); }
  
  @ReactMethod
  public void clearCookies(Callback paramCallback) { this.mCookieHandler.a(paramCallback); }
  
  public String getName() { return "Networking"; }
  
  public void initialize() { this.mCookieJarContainer.a(new JavaNetCookieJar(this.mCookieHandler)); }
  
  public void onCatalystInstanceDestroy() {
    this.mShuttingDown = true;
    cancelAllRequests();
    this.mCookieHandler.a();
    this.mCookieJarContainer.a();
    this.mRequestBodyHandlers.clear();
    this.mResponseHandlers.clear();
    this.mUriHandlers.clear();
  }
  
  public void removeRequestBodyHandler(a parama) { this.mRequestBodyHandlers.remove(parama); }
  
  public void removeResponseHandler(b paramb) { this.mResponseHandlers.remove(paramb); }
  
  public void removeUriHandler(c paramc) { this.mUriHandlers.remove(paramc); }
  
  @ReactMethod
  public void sendRequest(String paramString1, String paramString2, int paramInt1, ReadableArray paramReadableArray, ReadableMap paramReadableMap, String paramString3, boolean paramBoolean1, int paramInt2, boolean paramBoolean2) {
    try {
      sendRequestInternal(paramString1, paramString2, paramInt1, paramReadableArray, paramReadableMap, paramString3, paramBoolean1, paramInt2, paramBoolean2);
      return;
    } catch (Throwable paramString1) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Failed to send url request: ");
      stringBuilder.append(paramString2);
      a.c("NetworkingModule", stringBuilder.toString(), paramString1);
      n.a(getEventEmitter(), paramInt1, paramString1.getMessage(), paramString1);
      return;
    } 
  }
  
  public void sendRequestInternal(String paramString1, String paramString2, int paramInt1, ReadableArray paramReadableArray, ReadableMap paramReadableMap, String paramString3, boolean paramBoolean1, int paramInt2, boolean paramBoolean2) { // Byte code:
    //   0: aload_0
    //   1: invokespecial getEventEmitter : ()Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;
    //   4: astore #10
    //   6: aload_2
    //   7: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   10: astore #11
    //   12: aload_0
    //   13: getfield mUriHandlers : Ljava/util/List;
    //   16: invokeinterface iterator : ()Ljava/util/Iterator;
    //   21: astore #12
    //   23: aload #12
    //   25: invokeinterface hasNext : ()Z
    //   30: ifeq -> 81
    //   33: aload #12
    //   35: invokeinterface next : ()Ljava/lang/Object;
    //   40: checkcast com/facebook/react/modules/network/NetworkingModule$c
    //   43: astore #13
    //   45: aload #13
    //   47: aload #11
    //   49: aload #6
    //   51: invokeinterface a : (Landroid/net/Uri;Ljava/lang/String;)Z
    //   56: ifeq -> 23
    //   59: aload #10
    //   61: iload_3
    //   62: aload #13
    //   64: aload #11
    //   66: invokeinterface a : (Landroid/net/Uri;)Lcom/facebook/react/bridge/WritableMap;
    //   71: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILcom/facebook/react/bridge/WritableMap;)V
    //   74: aload #10
    //   76: iload_3
    //   77: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;I)V
    //   80: return
    //   81: new okhttp3/Request$Builder
    //   84: dup
    //   85: invokespecial <init> : ()V
    //   88: aload_2
    //   89: invokevirtual url : (Ljava/lang/String;)Lokhttp3/Request$Builder;
    //   92: astore #11
    //   94: iload_3
    //   95: ifeq -> 108
    //   98: aload #11
    //   100: iload_3
    //   101: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   104: invokevirtual tag : (Ljava/lang/Object;)Lokhttp3/Request$Builder;
    //   107: pop
    //   108: aload_0
    //   109: getfield mClient : Lokhttp3/OkHttpClient;
    //   112: invokevirtual newBuilder : ()Lokhttp3/OkHttpClient$Builder;
    //   115: astore_2
    //   116: iload #9
    //   118: ifne -> 129
    //   121: aload_2
    //   122: getstatic okhttp3/CookieJar.NO_COOKIES : Lokhttp3/CookieJar;
    //   125: invokevirtual cookieJar : (Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;
    //   128: pop
    //   129: iload #7
    //   131: ifeq -> 152
    //   134: aload_2
    //   135: new com/facebook/react/modules/network/NetworkingModule$1
    //   138: dup
    //   139: aload_0
    //   140: aload #6
    //   142: aload #10
    //   144: iload_3
    //   145: invokespecial <init> : (Lcom/facebook/react/modules/network/NetworkingModule;Ljava/lang/String;Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;I)V
    //   148: invokevirtual addNetworkInterceptor : (Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;
    //   151: pop
    //   152: iload #8
    //   154: aload_0
    //   155: getfield mClient : Lokhttp3/OkHttpClient;
    //   158: invokevirtual connectTimeoutMillis : ()I
    //   161: if_icmpeq -> 175
    //   164: aload_2
    //   165: iload #8
    //   167: i2l
    //   168: getstatic java/util/concurrent/TimeUnit.MILLISECONDS : Ljava/util/concurrent/TimeUnit;
    //   171: invokevirtual connectTimeout : (JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;
    //   174: pop
    //   175: aload_2
    //   176: invokevirtual build : ()Lokhttp3/OkHttpClient;
    //   179: astore #12
    //   181: aload_0
    //   182: aload #4
    //   184: aload #5
    //   186: invokespecial extractHeaders : (Lcom/facebook/react/bridge/ReadableArray;Lcom/facebook/react/bridge/ReadableMap;)Lokhttp3/Headers;
    //   189: astore_2
    //   190: aload_2
    //   191: ifnonnull -> 205
    //   194: aload #10
    //   196: iload_3
    //   197: ldc_w 'Unrecognized headers format'
    //   200: aconst_null
    //   201: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   204: return
    //   205: aload_2
    //   206: ldc 'content-type'
    //   208: invokevirtual get : (Ljava/lang/String;)Ljava/lang/String;
    //   211: astore #4
    //   213: aload_2
    //   214: ldc 'content-encoding'
    //   216: invokevirtual get : (Ljava/lang/String;)Ljava/lang/String;
    //   219: astore #13
    //   221: aload #11
    //   223: aload_2
    //   224: invokevirtual headers : (Lokhttp3/Headers;)Lokhttp3/Request$Builder;
    //   227: pop
    //   228: aload #5
    //   230: ifnull -> 279
    //   233: aload_0
    //   234: getfield mRequestBodyHandlers : Ljava/util/List;
    //   237: invokeinterface iterator : ()Ljava/util/Iterator;
    //   242: astore #14
    //   244: aload #14
    //   246: invokeinterface hasNext : ()Z
    //   251: ifeq -> 279
    //   254: aload #14
    //   256: invokeinterface next : ()Ljava/lang/Object;
    //   261: checkcast com/facebook/react/modules/network/NetworkingModule$a
    //   264: astore_2
    //   265: aload_2
    //   266: aload #5
    //   268: invokeinterface a : (Lcom/facebook/react/bridge/ReadableMap;)Z
    //   273: ifeq -> 244
    //   276: goto -> 281
    //   279: aconst_null
    //   280: astore_2
    //   281: aload #5
    //   283: ifnull -> 659
    //   286: aload_1
    //   287: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   290: ldc_w 'get'
    //   293: invokevirtual equals : (Ljava/lang/Object;)Z
    //   296: ifne -> 659
    //   299: aload_1
    //   300: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   303: ldc_w 'head'
    //   306: invokevirtual equals : (Ljava/lang/Object;)Z
    //   309: ifeq -> 315
    //   312: goto -> 659
    //   315: aload_2
    //   316: ifnull -> 333
    //   319: aload_2
    //   320: aload #5
    //   322: aload #4
    //   324: invokeinterface a : (Lcom/facebook/react/bridge/ReadableMap;Ljava/lang/String;)Lokhttp3/RequestBody;
    //   329: astore_2
    //   330: goto -> 664
    //   333: aload #5
    //   335: ldc 'string'
    //   337: invokeinterface hasKey : (Ljava/lang/String;)Z
    //   342: ifeq -> 451
    //   345: aload #4
    //   347: ifnonnull -> 361
    //   350: aload #10
    //   352: iload_3
    //   353: ldc_w 'Payload is set but no content-type header specified'
    //   356: aconst_null
    //   357: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   360: return
    //   361: aload #5
    //   363: ldc 'string'
    //   365: invokeinterface getString : (Ljava/lang/String;)Ljava/lang/String;
    //   370: astore #5
    //   372: aload #4
    //   374: invokestatic parse : (Ljava/lang/String;)Lokhttp3/MediaType;
    //   377: astore #4
    //   379: aload #13
    //   381: invokestatic a : (Ljava/lang/String;)Z
    //   384: ifeq -> 415
    //   387: aload #4
    //   389: aload #5
    //   391: invokestatic a : (Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;
    //   394: astore #4
    //   396: aload #4
    //   398: astore_2
    //   399: aload #4
    //   401: ifnonnull -> 664
    //   404: aload #10
    //   406: iload_3
    //   407: ldc_w 'Failed to gzip request body'
    //   410: aconst_null
    //   411: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   414: return
    //   415: aload #4
    //   417: ifnonnull -> 427
    //   420: getstatic com/facebook/react/common/g.a : Ljava/nio/charset/Charset;
    //   423: astore_2
    //   424: goto -> 436
    //   427: aload #4
    //   429: getstatic com/facebook/react/common/g.a : Ljava/nio/charset/Charset;
    //   432: invokevirtual charset : (Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;
    //   435: astore_2
    //   436: aload #4
    //   438: aload #5
    //   440: aload_2
    //   441: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   444: invokestatic create : (Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;
    //   447: astore_2
    //   448: goto -> 664
    //   451: aload #5
    //   453: ldc 'base64'
    //   455: invokeinterface hasKey : (Ljava/lang/String;)Z
    //   460: ifeq -> 505
    //   463: aload #4
    //   465: ifnonnull -> 479
    //   468: aload #10
    //   470: iload_3
    //   471: ldc_w 'Payload is set but no content-type header specified'
    //   474: aconst_null
    //   475: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   478: return
    //   479: aload #5
    //   481: ldc 'base64'
    //   483: invokeinterface getString : (Ljava/lang/String;)Ljava/lang/String;
    //   488: astore_2
    //   489: aload #4
    //   491: invokestatic parse : (Ljava/lang/String;)Lokhttp3/MediaType;
    //   494: aload_2
    //   495: invokestatic b : (Ljava/lang/String;)Lb/f;
    //   498: invokestatic create : (Lokhttp3/MediaType;Lb/f;)Lokhttp3/RequestBody;
    //   501: astore_2
    //   502: goto -> 664
    //   505: aload #5
    //   507: ldc 'uri'
    //   509: invokeinterface hasKey : (Ljava/lang/String;)Z
    //   514: ifeq -> 606
    //   517: aload #4
    //   519: ifnonnull -> 533
    //   522: aload #10
    //   524: iload_3
    //   525: ldc_w 'Payload is set but no content-type header specified'
    //   528: aconst_null
    //   529: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   532: return
    //   533: aload #5
    //   535: ldc 'uri'
    //   537: invokeinterface getString : (Ljava/lang/String;)Ljava/lang/String;
    //   542: astore_2
    //   543: aload_0
    //   544: invokevirtual getReactApplicationContext : ()Lcom/facebook/react/bridge/ReactApplicationContext;
    //   547: aload_2
    //   548: invokestatic a : (Landroid/content/Context;Ljava/lang/String;)Ljava/io/InputStream;
    //   551: astore #5
    //   553: aload #5
    //   555: ifnonnull -> 592
    //   558: new java/lang/StringBuilder
    //   561: dup
    //   562: invokespecial <init> : ()V
    //   565: astore_1
    //   566: aload_1
    //   567: ldc_w 'Could not retrieve file for uri '
    //   570: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   573: pop
    //   574: aload_1
    //   575: aload_2
    //   576: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   579: pop
    //   580: aload #10
    //   582: iload_3
    //   583: aload_1
    //   584: invokevirtual toString : ()Ljava/lang/String;
    //   587: aconst_null
    //   588: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   591: return
    //   592: aload #4
    //   594: invokestatic parse : (Ljava/lang/String;)Lokhttp3/MediaType;
    //   597: aload #5
    //   599: invokestatic a : (Lokhttp3/MediaType;Ljava/io/InputStream;)Lokhttp3/RequestBody;
    //   602: astore_2
    //   603: goto -> 664
    //   606: aload #5
    //   608: ldc 'formData'
    //   610: invokeinterface hasKey : (Ljava/lang/String;)Z
    //   615: ifeq -> 659
    //   618: aload #4
    //   620: astore_2
    //   621: aload #4
    //   623: ifnonnull -> 630
    //   626: ldc_w 'multipart/form-data'
    //   629: astore_2
    //   630: aload_0
    //   631: aload #5
    //   633: ldc 'formData'
    //   635: invokeinterface getArray : (Ljava/lang/String;)Lcom/facebook/react/bridge/ReadableArray;
    //   640: aload_2
    //   641: iload_3
    //   642: invokespecial constructMultipartBody : (Lcom/facebook/react/bridge/ReadableArray;Ljava/lang/String;I)Lokhttp3/MultipartBody$Builder;
    //   645: astore_2
    //   646: aload_2
    //   647: ifnonnull -> 651
    //   650: return
    //   651: aload_2
    //   652: invokevirtual build : ()Lokhttp3/MultipartBody;
    //   655: astore_2
    //   656: goto -> 664
    //   659: aload_1
    //   660: invokestatic b : (Ljava/lang/String;)Lokhttp3/RequestBody;
    //   663: astore_2
    //   664: aload #11
    //   666: aload_1
    //   667: aload_0
    //   668: aload_2
    //   669: aload #10
    //   671: iload_3
    //   672: invokespecial wrapRequestBodyWithProgressEmitter : (Lokhttp3/RequestBody;Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;I)Lokhttp3/RequestBody;
    //   675: invokevirtual method : (Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;
    //   678: pop
    //   679: aload_0
    //   680: iload_3
    //   681: invokespecial addRequest : (I)V
    //   684: aload #12
    //   686: aload #11
    //   688: invokevirtual build : ()Lokhttp3/Request;
    //   691: invokevirtual newCall : (Lokhttp3/Request;)Lokhttp3/Call;
    //   694: new com/facebook/react/modules/network/NetworkingModule$2
    //   697: dup
    //   698: aload_0
    //   699: iload_3
    //   700: aload #10
    //   702: aload #6
    //   704: iload #7
    //   706: invokespecial <init> : (Lcom/facebook/react/modules/network/NetworkingModule;ILcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;Ljava/lang/String;Z)V
    //   709: invokeinterface enqueue : (Lokhttp3/Callback;)V
    //   714: return
    //   715: astore_1
    //   716: aload #10
    //   718: iload_3
    //   719: aload_1
    //   720: invokevirtual getMessage : ()Ljava/lang/String;
    //   723: aconst_null
    //   724: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   727: return
    //   728: astore_1
    //   729: aload #10
    //   731: iload_3
    //   732: aload_1
    //   733: invokevirtual getMessage : ()Ljava/lang/String;
    //   736: aload_1
    //   737: invokestatic a : (Lcom/facebook/react/modules/core/DeviceEventManagerModule$RCTDeviceEventEmitter;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   740: return
    // Exception table:
    //   from	to	target	type
    //   6	23	728	java/io/IOException
    //   23	80	728	java/io/IOException
    //   81	94	715	java/lang/Exception }
}
