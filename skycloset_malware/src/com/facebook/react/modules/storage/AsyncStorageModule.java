package com.facebook.react.modules.storage;

import android.os.AsyncTask;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.module.a.a;
import java.util.concurrent.Executor;

@a(a = "AsyncSQLiteDBStorage")
public final class AsyncStorageModule extends ReactContextBaseJavaModule {
  private static final int MAX_SQL_KEYS = 999;
  
  public static final String NAME = "AsyncSQLiteDBStorage";
  
  private final a executor;
  
  private c mReactDatabaseSupplier;
  
  private boolean mShuttingDown = false;
  
  public AsyncStorageModule(ReactApplicationContext paramReactApplicationContext) { this(paramReactApplicationContext, AsyncTask.THREAD_POOL_EXECUTOR); }
  
  AsyncStorageModule(ReactApplicationContext paramReactApplicationContext, Executor paramExecutor) {
    super(paramReactApplicationContext);
    this.executor = new a(this, paramExecutor);
    this.mReactDatabaseSupplier = c.a(paramReactApplicationContext);
  }
  
  private boolean ensureDatabase() { return (!this.mShuttingDown && this.mReactDatabaseSupplier.a()); }
  
  @ReactMethod
  public void clear(Callback paramCallback) { (new Object(this, getReactApplicationContext(), paramCallback)).executeOnExecutor(this.executor, new Void[0]); }
  
  public void clearSensitiveData() { this.mReactDatabaseSupplier.c(); }
  
  @ReactMethod
  public void getAllKeys(Callback paramCallback) { (new Object(this, getReactApplicationContext(), paramCallback)).executeOnExecutor(this.executor, new Void[0]); }
  
  public String getName() { return "AsyncSQLiteDBStorage"; }
  
  public void initialize() {
    super.initialize();
    this.mShuttingDown = false;
  }
  
  @ReactMethod
  public void multiGet(ReadableArray paramReadableArray, Callback paramCallback) {
    if (paramReadableArray == null) {
      paramCallback.invoke(new Object[] { b.a(null), null });
      return;
    } 
    (new Object(this, getReactApplicationContext(), paramCallback, paramReadableArray)).executeOnExecutor(this.executor, new Void[0]);
  }
  
  @ReactMethod
  public void multiMerge(ReadableArray paramReadableArray, Callback paramCallback) { (new Object(this, getReactApplicationContext(), paramCallback, paramReadableArray)).executeOnExecutor(this.executor, new Void[0]); }
  
  @ReactMethod
  public void multiRemove(ReadableArray paramReadableArray, Callback paramCallback) {
    if (paramReadableArray.size() == 0) {
      paramCallback.invoke(new Object[] { b.a(null) });
      return;
    } 
    (new Object(this, getReactApplicationContext(), paramCallback, paramReadableArray)).executeOnExecutor(this.executor, new Void[0]);
  }
  
  @ReactMethod
  public void multiSet(ReadableArray paramReadableArray, Callback paramCallback) {
    if (paramReadableArray.size() == 0) {
      paramCallback.invoke(new Object[] { b.a(null) });
      return;
    } 
    (new Object(this, getReactApplicationContext(), paramCallback, paramReadableArray)).executeOnExecutor(this.executor, new Void[0]);
  }
  
  public void onCatalystInstanceDestroy() { this.mShuttingDown = true; }
}
