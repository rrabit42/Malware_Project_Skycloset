package com.facebook.react.modules.appstate;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import java.util.HashMap;
import java.util.Map;

@a(a = "AppState")
public class AppStateModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
  public static final String APP_STATE_ACTIVE = "active";
  
  public static final String APP_STATE_BACKGROUND = "background";
  
  private static final String INITIAL_STATE = "initialAppState";
  
  protected static final String NAME = "AppState";
  
  private String mAppState;
  
  public AppStateModule(ReactApplicationContext paramReactApplicationContext) {
    super(paramReactApplicationContext);
    paramReactApplicationContext.addLifecycleEventListener(this);
    if (paramReactApplicationContext.getLifecycleState() == LifecycleState.c) {
      str = "active";
    } else {
      str = "background";
    } 
    this.mAppState = str;
  }
  
  private WritableMap createAppStateEventMap() {
    WritableMap writableMap = Arguments.createMap();
    writableMap.putString("app_state", this.mAppState);
    return writableMap;
  }
  
  private void sendAppStateChangeEvent() { ((DeviceEventManagerModule.RCTDeviceEventEmitter)getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("appStateDidChange", createAppStateEventMap()); }
  
  public Map<String, Object> getConstants() {
    HashMap hashMap = new HashMap();
    hashMap.put("initialAppState", this.mAppState);
    return hashMap;
  }
  
  @ReactMethod
  public void getCurrentAppState(Callback paramCallback1, Callback paramCallback2) { paramCallback1.invoke(new Object[] { createAppStateEventMap() }); }
  
  public String getName() { return "AppState"; }
  
  public void onHostDestroy() {}
  
  public void onHostPause() {
    this.mAppState = "background";
    sendAppStateChangeEvent();
  }
  
  public void onHostResume() {
    this.mAppState = "active";
    sendAppStateChangeEvent();
  }
}
