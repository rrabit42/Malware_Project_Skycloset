package com.facebook.react.modules.intent;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.module.a.a;

@a(a = "IntentAndroid")
public class IntentModule extends ReactContextBaseJavaModule {
  public static final String NAME = "IntentAndroid";
  
  public IntentModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  @ReactMethod
  public void canOpenURL(String paramString, Promise paramPromise) {
    if (paramString == null || paramString.isEmpty()) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid URL: ");
      stringBuilder.append(paramString);
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
    try {
      boolean bool;
      Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(paramString));
      intent.addFlags(268435456);
      if (intent.resolveActivity(getReactApplicationContext().getPackageManager()) != null) {
        bool = true;
      } else {
        bool = false;
      } 
      paramPromise.resolve(Boolean.valueOf(bool));
      return;
    } catch (Exception exception) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Could not check if URL '");
      stringBuilder.append(paramString);
      stringBuilder.append("' can be opened: ");
      stringBuilder.append(exception.getMessage());
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
  }
  
  @ReactMethod
  public void getInitialURL(Promise paramPromise) {
    try {
      Activity activity = getCurrentActivity();
      Intent intent = null;
      String str = intent;
      if (activity != null) {
        str = activity.getIntent();
        String str1 = str.getAction();
        Uri uri = str.getData();
        str = intent;
        if ("android.intent.action.VIEW".equals(str1)) {
          str = intent;
          if (uri != null)
            str = uri.toString(); 
        } 
      } 
      paramPromise.resolve(str);
      return;
    } catch (Exception exception) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Could not get the initial URL : ");
      stringBuilder.append(exception.getMessage());
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
  }
  
  public String getName() { return "IntentAndroid"; }
  
  @ReactMethod
  public void openURL(String paramString, Promise paramPromise) {
    if (paramString == null || paramString.isEmpty()) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid URL: ");
      stringBuilder.append(paramString);
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
    try {
      Activity activity = getCurrentActivity();
      Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(paramString).normalizeScheme());
      String str2 = getReactApplicationContext().getPackageName();
      String str1 = intent.resolveActivity(getReactApplicationContext().getPackageManager());
      if (str1 != null) {
        String str = str1.getPackageName();
      } else {
        str1 = "";
      } 
      if (activity == null || !str2.equals(str1))
        intent.addFlags(268435456); 
      if (activity != null) {
        activity.startActivity(intent);
      } else {
        getReactApplicationContext().startActivity(intent);
      } 
      paramPromise.resolve(Boolean.valueOf(true));
      return;
    } catch (Exception exception) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Could not open URL '");
      stringBuilder.append(paramString);
      stringBuilder.append("': ");
      stringBuilder.append(exception.getMessage());
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
  }
  
  @ReactMethod
  public void sendIntent(String paramString, ReadableArray paramReadableArray, Promise paramPromise) {
    StringBuilder stringBuilder;
    if (paramString == null || paramString.isEmpty()) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid Action: ");
      stringBuilder.append(paramString);
      stringBuilder.append(".");
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
    Intent intent = new Intent(paramString);
    if (intent.resolveActivity(getReactApplicationContext().getPackageManager()) == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Could not launch Intent with action ");
      stringBuilder.append(paramString);
      stringBuilder.append(".");
      paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
      return;
    } 
    if (stringBuilder != null) {
      byte b;
      for (b = 0; b < stringBuilder.size(); b++) {
        ReadableMap readableMap = stringBuilder.getMap(b);
        paramString = readableMap.keySetIterator().nextKey();
        ReadableType readableType = readableMap.getType(paramString);
        switch (null.a[readableType.ordinal()]) {
          default:
            stringBuilder = new StringBuilder();
            stringBuilder.append("Extra type for ");
            stringBuilder.append(paramString);
            stringBuilder.append(" not supported.");
            paramPromise.reject(new JSApplicationIllegalArgumentException(stringBuilder.toString()));
            return;
          case 3:
            intent.putExtra(paramString, readableMap.getBoolean(paramString));
            break;
          case 2:
            intent.putExtra(paramString, Double.valueOf(readableMap.getDouble(paramString)));
            break;
          case 1:
            intent.putExtra(paramString, readableMap.getString(paramString));
            break;
        } 
      } 
    } 
    getReactApplicationContext().startActivity(intent);
  }
}
