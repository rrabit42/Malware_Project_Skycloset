package com.facebook.react;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.support.v4.f.r;
import android.util.Log;
import android.view.View;
import com.facebook.common.e.a;
import com.facebook.d.b.c;
import com.facebook.d.c.a;
import com.facebook.i.a.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.CatalystInstanceImpl;
import com.facebook.react.bridge.JSBundleLoader;
import com.facebook.react.bridge.JSIModulePackage;
import com.facebook.react.bridge.JavaScriptExecutor;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.bridge.NativeDeltaClient;
import com.facebook.react.bridge.NativeModuleCallExceptionHandler;
import com.facebook.react.bridge.NativeModuleRegistry;
import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.UIManager;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.bridge.queue.ReactQueueConfigurationSpec;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.devsupport.a;
import com.facebook.react.devsupport.a.a;
import com.facebook.react.devsupport.a.b;
import com.facebook.react.devsupport.d;
import com.facebook.react.devsupport.e;
import com.facebook.react.modules.appregistry.AppRegistry;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.modules.core.b;
import com.facebook.react.modules.core.e;
import com.facebook.react.modules.debug.a.a;
import com.facebook.react.modules.fabric.ReactFabric;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.uimanager.ak;
import com.facebook.react.uimanager.al;
import com.facebook.react.uimanager.c;
import com.facebook.soloader.SoLoader;
import com.facebook.systrace.a;
import com.facebook.systrace.b;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class k {
  private static final String a = "k";
  
  private final Set<r> b = Collections.synchronizedSet(new HashSet());
  
  private a d;
  
  private final JavaScriptExecutorFactory f;
  
  private final JSBundleLoader g;
  
  private final String h;
  
  private final List<o> i;
  
  private final b j;
  
  private final boolean k;
  
  private final NotThreadSafeBridgeIdleDebugListener l;
  
  private final Object m = new Object();
  
  private final Context o;
  
  private b p;
  
  private Activity q;
  
  private final Collection<b> r = Collections.synchronizedSet(new HashSet());
  
  private final d u;
  
  private final NativeModuleCallExceptionHandler v;
  
  private final JSIModulePackage w;
  
  private List<ViewManager> x;
  
  static  {
  
  }
  
  k(Context paramContext, Activity paramActivity, b paramb, JavaScriptExecutorFactory paramJavaScriptExecutorFactory, JSBundleLoader paramJSBundleLoader, String paramString, List<o> paramList, boolean paramBoolean1, NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener, LifecycleState paramLifecycleState, ak paramak, NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler, e parame, boolean paramBoolean2, a parama, int paramInt1, int paramInt2, JSIModulePackage paramJSIModulePackage, Map<String, Object> paramMap) {
    Log.d("ReactNative", "ReactInstanceManager.ctor()");
    a(paramContext);
    c.a(paramContext);
    this.o = paramContext;
    this.q = paramActivity;
    this.p = paramb;
    this.f = paramJavaScriptExecutorFactory;
    this.g = paramJSBundleLoader;
    this.h = paramString;
    this.i = new ArrayList();
    this.k = paramBoolean1;
    a.a(0L, "ReactInstanceManager.initDevSupportManager");
    this.j = a.a(paramContext, k(), this.h, paramBoolean1, parame, parama, paramInt1, paramMap);
    a.b(0L);
    this.l = paramNotThreadSafeBridgeIdleDebugListener;
    this.c = paramLifecycleState;
    this.u = new d(paramContext);
    this.v = paramNativeModuleCallExceptionHandler;
    synchronized (this.i) {
      c.a().a(a.c, "RNCore: Use Split Packages");
      this.i.add(new a(this, new Object(this), paramak, paramBoolean2, paramInt2));
      if (this.k)
        this.i.add(new b()); 
      this.i.addAll(paramList);
      this.w = paramJSIModulePackage;
      e.a();
      if (this.k)
        this.j.c(); 
      return;
    } 
  }
  
  private NativeModuleRegistry a(ReactApplicationContext paramReactApplicationContext, List<o> paramList, boolean paramBoolean) { // Byte code:
    //   0: new com/facebook/react/e
    //   3: dup
    //   4: aload_1
    //   5: aload_0
    //   6: invokespecial <init> : (Lcom/facebook/react/bridge/ReactApplicationContext;Lcom/facebook/react/k;)V
    //   9: astore #4
    //   11: getstatic com/facebook/react/bridge/ReactMarkerConstants.PROCESS_PACKAGES_START : Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   14: invokestatic logMarker : (Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   17: aload_0
    //   18: getfield i : Ljava/util/List;
    //   21: astore_1
    //   22: aload_1
    //   23: monitorenter
    //   24: aload_2
    //   25: invokeinterface iterator : ()Ljava/util/Iterator;
    //   30: astore_2
    //   31: aload_2
    //   32: invokeinterface hasNext : ()Z
    //   37: ifeq -> 117
    //   40: aload_2
    //   41: invokeinterface next : ()Ljava/lang/Object;
    //   46: checkcast com/facebook/react/o
    //   49: astore #5
    //   51: iload_3
    //   52: ifeq -> 72
    //   55: aload_0
    //   56: getfield i : Ljava/util/List;
    //   59: aload #5
    //   61: invokeinterface contains : (Ljava/lang/Object;)Z
    //   66: ifeq -> 72
    //   69: goto -> 31
    //   72: lconst_0
    //   73: ldc_w 'createAndProcessCustomReactPackage'
    //   76: invokestatic a : (JLjava/lang/String;)V
    //   79: iload_3
    //   80: ifeq -> 95
    //   83: aload_0
    //   84: getfield i : Ljava/util/List;
    //   87: aload #5
    //   89: invokeinterface add : (Ljava/lang/Object;)Z
    //   94: pop
    //   95: aload_0
    //   96: aload #5
    //   98: aload #4
    //   100: invokespecial a : (Lcom/facebook/react/o;Lcom/facebook/react/e;)V
    //   103: lconst_0
    //   104: invokestatic b : (J)V
    //   107: goto -> 31
    //   110: astore_2
    //   111: lconst_0
    //   112: invokestatic b : (J)V
    //   115: aload_2
    //   116: athrow
    //   117: aload_1
    //   118: monitorexit
    //   119: getstatic com/facebook/react/bridge/ReactMarkerConstants.PROCESS_PACKAGES_END : Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   122: invokestatic logMarker : (Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   125: getstatic com/facebook/react/bridge/ReactMarkerConstants.BUILD_NATIVE_MODULE_REGISTRY_START : Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   128: invokestatic logMarker : (Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   131: lconst_0
    //   132: ldc_w 'buildNativeModuleRegistry'
    //   135: invokestatic a : (JLjava/lang/String;)V
    //   138: aload #4
    //   140: invokevirtual a : ()Lcom/facebook/react/bridge/NativeModuleRegistry;
    //   143: astore_1
    //   144: lconst_0
    //   145: invokestatic b : (J)V
    //   148: getstatic com/facebook/react/bridge/ReactMarkerConstants.BUILD_NATIVE_MODULE_REGISTRY_END : Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   151: invokestatic logMarker : (Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   154: aload_1
    //   155: areturn
    //   156: astore_1
    //   157: lconst_0
    //   158: invokestatic b : (J)V
    //   161: getstatic com/facebook/react/bridge/ReactMarkerConstants.BUILD_NATIVE_MODULE_REGISTRY_END : Lcom/facebook/react/bridge/ReactMarkerConstants;
    //   164: invokestatic logMarker : (Lcom/facebook/react/bridge/ReactMarkerConstants;)V
    //   167: aload_1
    //   168: athrow
    //   169: astore_2
    //   170: aload_1
    //   171: monitorexit
    //   172: aload_2
    //   173: athrow
    // Exception table:
    //   from	to	target	type
    //   24	31	169	finally
    //   31	51	169	finally
    //   55	69	169	finally
    //   72	79	169	finally
    //   83	95	110	finally
    //   95	103	110	finally
    //   103	107	169	finally
    //   111	117	169	finally
    //   117	119	169	finally
    //   138	144	156	finally
    //   170	172	169	finally }
  
  private ReactApplicationContext a(JavaScriptExecutor paramJavaScriptExecutor, JSBundleLoader paramJSBundleLoader) {
    Log.d("ReactNative", "ReactInstanceManager.createReactContext()");
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_REACT_CONTEXT_START, paramJavaScriptExecutor.getName());
    reactApplicationContext = new ReactApplicationContext(this.o);
    b b1 = this.v;
    if (b1 == null)
      b1 = this.j; 
    reactApplicationContext.setNativeModuleCallExceptionHandler(b1);
    NativeModuleRegistry nativeModuleRegistry = a(reactApplicationContext, this.i, false);
    null = (new CatalystInstanceImpl.Builder()).setReactQueueConfigurationSpec(ReactQueueConfigurationSpec.createDefault()).setJSExecutor(paramJavaScriptExecutor).setRegistry(nativeModuleRegistry).setJSBundleLoader(paramJSBundleLoader).setNativeModuleCallExceptionHandler(b1);
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_START);
    a.a(0L, "createCatalystInstance");
    try {
      catalystInstanceImpl = null.build();
      a.b(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_END);
      JSIModulePackage jSIModulePackage = this.w;
      if (jSIModulePackage != null)
        catalystInstanceImpl.addJSIModules(jSIModulePackage.getJSIModules(reactApplicationContext, catalystInstanceImpl.getJavaScriptContextHolder())); 
      NotThreadSafeBridgeIdleDebugListener notThreadSafeBridgeIdleDebugListener = this.l;
      if (notThreadSafeBridgeIdleDebugListener != null)
        catalystInstanceImpl.addBridgeIdleDebugListener(notThreadSafeBridgeIdleDebugListener); 
      if (a.a(0L))
        catalystInstanceImpl.setGlobalVariable("__RCTProfileIsProfiling", "true"); 
      ReactMarker.logMarker(ReactMarkerConstants.PRE_RUN_JS_BUNDLE_START);
      a.a(0L, "runJSBundle");
      catalystInstanceImpl.runJSBundle();
      return reactApplicationContext;
    } finally {
      a.b(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_CATALYST_INSTANCE_END);
    } 
  }
  
  public static l a() { return new l(); }
  
  private static void a(Context paramContext) { SoLoader.a(paramContext, false); }
  
  private void a(JavaScriptExecutorFactory paramJavaScriptExecutorFactory, JSBundleLoader paramJSBundleLoader) {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackground()");
    UiThreadUtil.assertOnUiThread();
    a a1 = new a(this, paramJavaScriptExecutorFactory, paramJSBundleLoader);
    if (this.e == null) {
      a(a1);
      return;
    } 
    this.d = a1;
  }
  
  private void a(NativeDeltaClient paramNativeDeltaClient) {
    JSBundleLoader jSBundleLoader;
    Log.d("ReactNative", "ReactInstanceManager.onJSBundleLoadedFromServer()");
    if (paramNativeDeltaClient == null) {
      jSBundleLoader = JSBundleLoader.createCachedBundleFromNetworkLoader(this.j.f(), this.j.g());
    } else {
      jSBundleLoader = JSBundleLoader.createDeltaFromNetworkLoader(this.j.f(), jSBundleLoader);
    } 
    a(this.f, jSBundleLoader);
  }
  
  private void a(ReactContext paramReactContext) {
    Log.d("ReactNative", "ReactInstanceManager.tearDownReactContext()");
    UiThreadUtil.assertOnUiThread();
    if (this.c == LifecycleState.c)
      paramReactContext.onHostPause(); 
    synchronized (this.b) {
      for (r r1 : this.b) {
        r1.removeAllViews();
        r1.setId(-1);
      } 
      paramReactContext.destroy();
      this.j.b(paramReactContext);
      this.u.b(paramReactContext.getCatalystInstance());
      return;
    } 
  }
  
  private void a(a parama) {
    Log.d("ReactNative", "ReactInstanceManager.runCreateReactContextOnNewThread()");
    UiThreadUtil.assertOnUiThread();
    synchronized (this.b) {
      synchronized (this.m) {
        if (this.n != null) {
          a(this.n);
          this.n = null;
        } 
        this.e = new Thread(null, new Object(this, parama), "create_react_context");
        ReactMarker.logMarker(ReactMarkerConstants.REACT_CONTEXT_THREAD_START);
        this.e.start();
        return;
      } 
    } 
  }
  
  private void a(o paramo, e parame) {
    b.a(0L, "processPackage").a("className", paramo.getClass().getSimpleName()).a();
    boolean bool = paramo instanceof q;
    if (bool)
      ((q)paramo).b(); 
    parame.a(paramo);
    if (bool)
      ((q)paramo).c(); 
    b.a(0L).a();
  }
  
  private void a(r paramr, CatalystInstance paramCatalystInstance) {
    Log.d("ReactNative", "ReactInstanceManager.detachViewFromInstance()");
    UiThreadUtil.assertOnUiThread();
    if (paramr.getUIManagerType() == 2) {
      ((ReactFabric)paramCatalystInstance.getJSModule(ReactFabric.class)).unmountComponentAtNode(paramr.getId());
      return;
    } 
    ((AppRegistry)paramCatalystInstance.getJSModule(AppRegistry.class)).unmountApplicationComponentAtRootTag(paramr.getId());
  }
  
  private void a(boolean paramBoolean) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual j : ()Lcom/facebook/react/bridge/ReactContext;
    //   6: astore_2
    //   7: aload_2
    //   8: ifnull -> 43
    //   11: iload_1
    //   12: ifne -> 35
    //   15: aload_0
    //   16: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   19: getstatic com/facebook/react/common/LifecycleState.b : Lcom/facebook/react/common/LifecycleState;
    //   22: if_acmpeq -> 35
    //   25: aload_0
    //   26: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   29: getstatic com/facebook/react/common/LifecycleState.a : Lcom/facebook/react/common/LifecycleState;
    //   32: if_acmpne -> 43
    //   35: aload_2
    //   36: aload_0
    //   37: getfield q : Landroid/app/Activity;
    //   40: invokevirtual onHostResume : (Landroid/app/Activity;)V
    //   43: aload_0
    //   44: getstatic com/facebook/react/common/LifecycleState.c : Lcom/facebook/react/common/LifecycleState;
    //   47: putfield c : Lcom/facebook/react/common/LifecycleState;
    //   50: aload_0
    //   51: monitorexit
    //   52: return
    //   53: astore_2
    //   54: aload_0
    //   55: monitorexit
    //   56: aload_2
    //   57: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	53	finally
    //   15	35	53	finally
    //   35	43	53	finally
    //   43	50	53	finally }
  
  private void b(ReactApplicationContext paramReactApplicationContext) {
    Log.d("ReactNative", "ReactInstanceManager.setupReactContext()");
    ReactMarker.logMarker(ReactMarkerConstants.PRE_SETUP_REACT_CONTEXT_END);
    ReactMarker.logMarker(ReactMarkerConstants.SETUP_REACT_CONTEXT_START);
    a.a(0L, "setupReactContext");
    synchronized (this.b) {
      synchronized (this.m) {
        this.n = (ReactContext)a.a(paramReactApplicationContext);
        null = (CatalystInstance)a.a(paramReactApplicationContext.getCatalystInstance());
        null.initialize();
        this.j.a(paramReactApplicationContext);
        this.u.a(null);
        q();
        ReactMarker.logMarker(ReactMarkerConstants.ATTACH_MEASURED_ROOT_VIEWS_START);
        null = this.b.iterator();
        while (null.hasNext())
          c((r)null.next()); 
        ReactMarker.logMarker(ReactMarkerConstants.ATTACH_MEASURED_ROOT_VIEWS_END);
        null = new b[this.r.size()];
        UiThreadUtil.runOnUiThread(new Object(this, (b[])this.r.toArray(null), paramReactApplicationContext));
        a.b(0L);
        ReactMarker.logMarker(ReactMarkerConstants.SETUP_REACT_CONTEXT_END);
        paramReactApplicationContext.runOnJSQueueThread(new Object(this));
        paramReactApplicationContext.runOnNativeModulesQueueThread(new Object(this));
        return;
      } 
    } 
  }
  
  private void c(r paramr) {
    Log.d("ReactNative", "ReactInstanceManager.attachRootViewToInstance()");
    a.a(0L, "attachRootViewToInstance");
    UIManager uIManager = al.a(this.n, paramr.getUIManagerType());
    WritableMap writableMap = paramr.getAppProperties();
    if (writableMap == null) {
      writableMap = new WritableNativeMap();
    } else {
      writableMap = Arguments.fromBundle(writableMap);
    } 
    int i1 = uIManager.addRootView(paramr, writableMap, paramr.getInitialUITemplate());
    paramr.setRootViewTag(i1);
    paramr.c();
    a.a(0L, "pre_rootView.onAttachedToReactInstance", i1);
    UiThreadUtil.runOnUiThread(new Object(this, i1, paramr));
    a.b(0L);
  }
  
  private d k() { return new Object(this); }
  
  private void l() {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackgroundInner()");
    c.a().a(a.c, "RNCore: recreateReactContextInBackground");
    UiThreadUtil.assertOnUiThread();
    if (this.k && this.h != null) {
      a a1 = this.j.e();
      if (this.j.h() && !a1.b()) {
        a(null);
        return;
      } 
      if (!a.a(0L)) {
        if (this.g == null) {
          this.j.i();
          return;
        } 
        this.j.a(new Object(this, a1));
        return;
      } 
    } 
    m();
  }
  
  private void m() {
    Log.d("ReactNative", "ReactInstanceManager.recreateReactContextInBackgroundFromBundleLoader()");
    c.a().a(a.c, "RNCore: load from BundleLoader");
    a(this.f, this.g);
  }
  
  private void n() {
    UiThreadUtil.assertOnUiThread();
    b b1 = this.p;
    if (b1 != null)
      b1.m(); 
  }
  
  private void o() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual j : ()Lcom/facebook/react/bridge/ReactContext;
    //   6: astore_1
    //   7: aload_1
    //   8: ifnull -> 49
    //   11: aload_0
    //   12: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   15: getstatic com/facebook/react/common/LifecycleState.a : Lcom/facebook/react/common/LifecycleState;
    //   18: if_acmpne -> 36
    //   21: aload_1
    //   22: aload_0
    //   23: getfield q : Landroid/app/Activity;
    //   26: invokevirtual onHostResume : (Landroid/app/Activity;)V
    //   29: aload_1
    //   30: invokevirtual onHostPause : ()V
    //   33: goto -> 49
    //   36: aload_0
    //   37: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   40: getstatic com/facebook/react/common/LifecycleState.c : Lcom/facebook/react/common/LifecycleState;
    //   43: if_acmpne -> 49
    //   46: goto -> 29
    //   49: aload_0
    //   50: getstatic com/facebook/react/common/LifecycleState.b : Lcom/facebook/react/common/LifecycleState;
    //   53: putfield c : Lcom/facebook/react/common/LifecycleState;
    //   56: aload_0
    //   57: monitorexit
    //   58: return
    //   59: astore_1
    //   60: aload_0
    //   61: monitorexit
    //   62: aload_1
    //   63: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	59	finally
    //   11	29	59	finally
    //   29	33	59	finally
    //   36	46	59	finally
    //   49	56	59	finally }
  
  private void p() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual j : ()Lcom/facebook/react/bridge/ReactContext;
    //   6: astore_1
    //   7: aload_1
    //   8: ifnull -> 46
    //   11: aload_0
    //   12: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   15: getstatic com/facebook/react/common/LifecycleState.c : Lcom/facebook/react/common/LifecycleState;
    //   18: if_acmpne -> 32
    //   21: aload_1
    //   22: invokevirtual onHostPause : ()V
    //   25: aload_0
    //   26: getstatic com/facebook/react/common/LifecycleState.b : Lcom/facebook/react/common/LifecycleState;
    //   29: putfield c : Lcom/facebook/react/common/LifecycleState;
    //   32: aload_0
    //   33: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   36: getstatic com/facebook/react/common/LifecycleState.b : Lcom/facebook/react/common/LifecycleState;
    //   39: if_acmpne -> 46
    //   42: aload_1
    //   43: invokevirtual onHostDestroy : ()V
    //   46: aload_0
    //   47: getstatic com/facebook/react/common/LifecycleState.a : Lcom/facebook/react/common/LifecycleState;
    //   50: putfield c : Lcom/facebook/react/common/LifecycleState;
    //   53: aload_0
    //   54: monitorexit
    //   55: return
    //   56: astore_1
    //   57: aload_0
    //   58: monitorexit
    //   59: aload_1
    //   60: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	56	finally
    //   11	32	56	finally
    //   32	46	56	finally
    //   46	53	56	finally }
  
  private void q() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield c : Lcom/facebook/react/common/LifecycleState;
    //   6: getstatic com/facebook/react/common/LifecycleState.c : Lcom/facebook/react/common/LifecycleState;
    //   9: if_acmpne -> 17
    //   12: aload_0
    //   13: iconst_1
    //   14: invokespecial a : (Z)V
    //   17: aload_0
    //   18: monitorexit
    //   19: return
    //   20: astore_1
    //   21: aload_0
    //   22: monitorexit
    //   23: aload_1
    //   24: athrow
    // Exception table:
    //   from	to	target	type
    //   2	17	20	finally }
  
  public ViewManager a(String paramString) {
    synchronized (this.m) {
      ReactApplicationContext reactApplicationContext = (ReactApplicationContext)j();
      if (reactApplicationContext == null || !reactApplicationContext.hasActiveCatalystInstance())
        return null; 
      synchronized (this.i) {
        for (o o1 : this.i) {
          if (o1 instanceof t) {
            ViewManager viewManager = ((t)o1).a(reactApplicationContext, paramString);
            if (viewManager != null)
              return viewManager; 
          } 
        } 
        return null;
      } 
    } 
  }
  
  public List<ViewManager> a(ReactApplicationContext paramReactApplicationContext) {
    ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_START);
    a.a(0L, "createAllViewManagers");
    try {
      if (this.x == null)
        synchronized (this.i) {
          if (this.x == null) {
            this.x = new ArrayList();
            for (o o1 : this.i)
              this.x.addAll(o1.b(paramReactApplicationContext)); 
            return this.x;
          } 
        }  
      return this.x;
    } finally {
      a.b(0L);
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_VIEW_MANAGERS_END);
    } 
  }
  
  public void a(Activity paramActivity) {
    boolean bool;
    a.a(this.q);
    if (paramActivity == this.q) {
      bool = true;
    } else {
      bool = false;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Pausing an activity that is not the current activity, this is incorrect! Current activity: ");
    stringBuilder.append(this.q.getClass().getSimpleName());
    stringBuilder.append(" Paused activity: ");
    stringBuilder.append(paramActivity.getClass().getSimpleName());
    a.a(bool, stringBuilder.toString());
    f();
  }
  
  public void a(Activity paramActivity, int paramInt1, int paramInt2, Intent paramIntent) {
    ReactContext reactContext = j();
    if (reactContext != null)
      reactContext.onActivityResult(paramActivity, paramInt1, paramInt2, paramIntent); 
  }
  
  public void a(Activity paramActivity, b paramb) {
    UiThreadUtil.assertOnUiThread();
    this.p = paramb;
    b(paramActivity);
  }
  
  public void a(Intent paramIntent) {
    UiThreadUtil.assertOnUiThread();
    ReactContext reactContext = j();
    if (reactContext == null) {
      a.c("ReactNative", "Instance detached from instance manager");
      return;
    } 
    String str = paramIntent.getAction();
    Uri uri = paramIntent.getData();
    if ("android.intent.action.VIEW".equals(str) && uri != null)
      ((DeviceEventManagerModule)reactContext.getNativeModule(DeviceEventManagerModule.class)).emitNewIntentReceived(uri); 
    reactContext.onNewIntent(this.q, paramIntent);
  }
  
  public void a(r paramr) {
    UiThreadUtil.assertOnUiThread();
    this.b.add(paramr);
    paramr.removeAllViews();
    paramr.setId(-1);
    ReactContext reactContext = j();
    if (this.e == null && reactContext != null)
      c(paramr); 
  }
  
  public b b() { return this.j; }
  
  public void b(Activity paramActivity) {
    UiThreadUtil.assertOnUiThread();
    this.q = paramActivity;
    if (this.k) {
      View view = this.q.getWindow().getDecorView();
      if (!r.u(view)) {
        view.addOnAttachStateChangeListener(new Object(this, view));
      } else {
        this.j.a(true);
      } 
    } 
    a(false);
  }
  
  public void b(r paramr) {
    UiThreadUtil.assertOnUiThread();
    synchronized (this.b) {
      if (this.b.contains(paramr)) {
        ReactContext reactContext = j();
        this.b.remove(paramr);
        if (reactContext != null && reactContext.hasActiveCatalystInstance())
          a(paramr, reactContext.getCatalystInstance()); 
      } 
      return;
    } 
  }
  
  public void c() {
    Log.d("ReactNative", "ReactInstanceManager.createReactContextInBackground()");
    a.a(this.s ^ true, "createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground");
    this.s = true;
    l();
  }
  
  public void c(Activity paramActivity) {
    if (paramActivity == this.q)
      g(); 
  }
  
  public boolean d() { return this.s; }
  
  public void e() {
    UiThreadUtil.assertOnUiThread();
    ReactContext reactContext = this.n;
    if (reactContext == null) {
      a.c("ReactNative", "Instance detached from instance manager");
      n();
      return;
    } 
    ((DeviceEventManagerModule)reactContext.getNativeModule(DeviceEventManagerModule.class)).emitHardwareBackPressed();
  }
  
  public void f() {
    UiThreadUtil.assertOnUiThread();
    this.p = null;
    if (this.k)
      this.j.a(false); 
    o();
  }
  
  public void g() {
    UiThreadUtil.assertOnUiThread();
    if (this.k)
      this.j.a(false); 
    p();
    this.q = null;
  }
  
  public void h() {
    UiThreadUtil.assertOnUiThread();
    this.j.b();
  }
  
  public List<String> i() {
    a.a(0L, "ReactInstanceManager.getViewManagerNames");
    synchronized (this.m) {
      null = (ReactApplicationContext)j();
      if (null == null || !null.hasActiveCatalystInstance())
        return null; 
      synchronized (this.i) {
        HashSet hashSet = new HashSet();
        for (o o1 : this.i) {
          b.a(0L, "ReactInstanceManager.getViewManagerName").a("Package", o1.getClass().getSimpleName()).a();
          if (o1 instanceof t) {
            List list = ((t)o1).a(null);
            if (list != null)
              hashSet.addAll(list); 
          } 
          b.a(0L).a();
        } 
        a.b(0L);
        return new ArrayList(hashSet);
      } 
    } 
  }
  
  public ReactContext j() {
    synchronized (this.m) {
      return this.n;
    } 
  }
}
