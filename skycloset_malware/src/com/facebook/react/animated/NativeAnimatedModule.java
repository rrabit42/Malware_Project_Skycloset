package com.facebook.react.animated;

import com.facebook.i.a.a;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.module.a.a;
import com.facebook.react.modules.core.e;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ao;
import com.facebook.react.uimanager.e;
import java.util.ArrayList;

@a(a = "NativeAnimatedModule")
public class NativeAnimatedModule extends ReactContextBaseJavaModule implements LifecycleEventListener, ao {
  public static final String NAME = "NativeAnimatedModule";
  
  private final e mAnimatedFrameCallback;
  
  private l mNodesManager;
  
  private ArrayList<a> mOperations = new ArrayList();
  
  private ArrayList<a> mPreOperations = new ArrayList();
  
  private final e mReactChoreographer = e.b();
  
  public NativeAnimatedModule(ReactApplicationContext paramReactApplicationContext) {
    super(paramReactApplicationContext);
    this.mAnimatedFrameCallback = new Object(this, paramReactApplicationContext);
  }
  
  private void clearFrameCallback() { ((e)a.a(this.mReactChoreographer)).b(e.a.c, this.mAnimatedFrameCallback); }
  
  private void enqueueFrameCallback() { ((e)a.a(this.mReactChoreographer)).a(e.a.c, this.mAnimatedFrameCallback); }
  
  private l getNodesManager() {
    if (this.mNodesManager == null)
      this.mNodesManager = new l((UIManagerModule)getReactApplicationContext().getNativeModule(UIManagerModule.class)); 
    return this.mNodesManager;
  }
  
  @ReactMethod
  public void addAnimatedEventToView(int paramInt, String paramString, ReadableMap paramReadableMap) { this.mOperations.add(new Object(this, paramInt, paramString, paramReadableMap)); }
  
  @ReactMethod
  public void connectAnimatedNodeToView(int paramInt1, int paramInt2) { this.mOperations.add(new Object(this, paramInt1, paramInt2)); }
  
  @ReactMethod
  public void connectAnimatedNodes(int paramInt1, int paramInt2) { this.mOperations.add(new Object(this, paramInt1, paramInt2)); }
  
  @ReactMethod
  public void createAnimatedNode(int paramInt, ReadableMap paramReadableMap) { this.mOperations.add(new Object(this, paramInt, paramReadableMap)); }
  
  @ReactMethod
  public void disconnectAnimatedNodeFromView(int paramInt1, int paramInt2) {
    this.mPreOperations.add(new Object(this, paramInt1, paramInt2));
    this.mOperations.add(new Object(this, paramInt1, paramInt2));
  }
  
  @ReactMethod
  public void disconnectAnimatedNodes(int paramInt1, int paramInt2) { this.mOperations.add(new Object(this, paramInt1, paramInt2)); }
  
  @ReactMethod
  public void dropAnimatedNode(int paramInt) { this.mOperations.add(new Object(this, paramInt)); }
  
  @ReactMethod
  public void extractAnimatedNodeOffset(int paramInt) { this.mOperations.add(new Object(this, paramInt)); }
  
  @ReactMethod
  public void flattenAnimatedNodeOffset(int paramInt) { this.mOperations.add(new Object(this, paramInt)); }
  
  public String getName() { return "NativeAnimatedModule"; }
  
  public void initialize() {
    ReactApplicationContext reactApplicationContext = getReactApplicationContext();
    UIManagerModule uIManagerModule = (UIManagerModule)reactApplicationContext.getNativeModule(UIManagerModule.class);
    reactApplicationContext.addLifecycleEventListener(this);
    uIManagerModule.addUIManagerListener(this);
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause() { clearFrameCallback(); }
  
  public void onHostResume() { enqueueFrameCallback(); }
  
  @ReactMethod
  public void removeAnimatedEventFromView(int paramInt1, String paramString, int paramInt2) { this.mOperations.add(new Object(this, paramInt1, paramString, paramInt2)); }
  
  @ReactMethod
  public void setAnimatedNodeOffset(int paramInt, double paramDouble) { this.mOperations.add(new Object(this, paramInt, paramDouble)); }
  
  @ReactMethod
  public void setAnimatedNodeValue(int paramInt, double paramDouble) { this.mOperations.add(new Object(this, paramInt, paramDouble)); }
  
  public void setNodesManager(l paraml) { this.mNodesManager = paraml; }
  
  @ReactMethod
  public void startAnimatingNode(int paramInt1, int paramInt2, ReadableMap paramReadableMap, Callback paramCallback) { this.mOperations.add(new Object(this, paramInt1, paramInt2, paramReadableMap, paramCallback)); }
  
  @ReactMethod
  public void startListeningToAnimatedNodeValue(int paramInt) {
    Object object = new Object(this, paramInt);
    this.mOperations.add(new Object(this, paramInt, object));
  }
  
  @ReactMethod
  public void stopAnimation(int paramInt) { this.mOperations.add(new Object(this, paramInt)); }
  
  @ReactMethod
  public void stopListeningToAnimatedNodeValue(int paramInt) { this.mOperations.add(new Object(this, paramInt)); }
  
  public void willDispatchViewUpdates(UIManagerModule paramUIManagerModule) {
    if (this.mOperations.isEmpty() && this.mPreOperations.isEmpty())
      return; 
    ArrayList arrayList1 = this.mPreOperations;
    ArrayList arrayList2 = this.mOperations;
    this.mPreOperations = new ArrayList();
    this.mOperations = new ArrayList();
    paramUIManagerModule.prependUIBlock(new Object(this, arrayList1));
    paramUIManagerModule.addUIBlock(new Object(this, arrayList2));
  }
}
