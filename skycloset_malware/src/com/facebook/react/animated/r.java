package com.facebook.react.animated;

import com.facebook.react.bridge.JavaOnlyArray;
import com.facebook.react.bridge.JavaOnlyMap;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import java.util.ArrayList;
import java.util.List;

class r extends b {
  private final l e;
  
  private final List<c> f;
  
  r(ReadableMap paramReadableMap, l paraml) {
    ReadableArray readableArray = paramReadableMap.getArray("transforms");
    this.f = new ArrayList(readableArray.size());
    for (byte b1 = 0; b1 < readableArray.size(); b1++) {
      b b2;
      ReadableMap readableMap = readableArray.getMap(b1);
      String str = readableMap.getString("property");
      if (readableMap.getString("type").equals("animated")) {
        b2 = new a(this, null);
        b2.c = str;
        b2.a = readableMap.getInt("nodeTag");
      } else {
        b2 = new b(this, null);
        b2.c = str;
        b2.a = readableMap.getDouble("value");
      } 
      this.f.add(b2);
    } 
    this.e = paraml;
  }
  
  public void a(JavaOnlyMap paramJavaOnlyMap) {
    StringBuilder stringBuilder;
    ArrayList arrayList = new ArrayList(this.f.size());
    for (c c : this.f) {
      double d;
      if (c instanceof a) {
        int i = ((a)c).a;
        b b1 = this.e.a(i);
        if (b1 != null) {
          if (b1 instanceof s) {
            d = ((s)b1).b();
          } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("Unsupported type of node used as a transform child node ");
            stringBuilder.append(b1.getClass());
            throw new IllegalArgumentException(stringBuilder.toString());
          } 
        } else {
          throw new IllegalArgumentException("Mapped style node does not exists");
        } 
      } else {
        d = ((b)c).a;
      } 
      arrayList.add(JavaOnlyMap.of(new Object[] { c.c, Double.valueOf(d) }));
    } 
    stringBuilder.putArray("transform", JavaOnlyArray.from(arrayList));
  }
}
