package com.facebook.react.animated;

import android.util.SparseArray;
import com.facebook.common.e.a;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.aj;
import com.facebook.react.uimanager.events.c;
import com.facebook.react.uimanager.events.e;
import com.facebook.react.uimanager.f;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

class l implements e {
  private final SparseArray<b> a = new SparseArray();
  
  private final SparseArray<d> b = new SparseArray();
  
  private final SparseArray<b> c = new SparseArray();
  
  private final Map<String, List<EventAnimationDriver>> d = new HashMap();
  
  private final UIManagerModule.a e;
  
  private final aj f;
  
  private int g = 0;
  
  private final List<b> h = new LinkedList();
  
  public l(UIManagerModule paramUIManagerModule) {
    this.f = paramUIManagerModule.getUIImplementation();
    paramUIManagerModule.getEventDispatcher().a(this);
    this.e = paramUIManagerModule.getDirectEventNamesResolver();
  }
  
  private void a(b paramb) {
    for (byte b1 = 0; b1 < this.b.size(); b1 = b2 + 1) {
      d d1 = (d)this.b.valueAt(b1);
      byte b2 = b1;
      if (paramb.equals(d1.b)) {
        if (d1.c != null) {
          WritableMap writableMap = Arguments.createMap();
          writableMap.putBoolean("finished", false);
          d1.c.invoke(new Object[] { writableMap });
        } 
        this.b.removeAt(b1);
        b2 = b1 - 1;
      } 
    } 
  }
  
  private void a(List<b> paramList) {
    int k;
    int i = ++this.g;
    if (i == 0)
      this.g = i + 1; 
    ArrayDeque arrayDeque = new ArrayDeque();
    iterator2 = paramList.iterator();
    int j = 0;
    while (true) {
      i = j;
      if (iterator2.hasNext()) {
        b b1 = (b)iterator2.next();
        i = b1.c;
        k = this.g;
        if (i != k) {
          b1.c = k;
          j++;
          arrayDeque.add(b1);
        } 
        continue;
      } 
      break;
    } 
    while (!arrayDeque.isEmpty()) {
      b b1 = (b)arrayDeque.poll();
      if (b1.a != null) {
        j = 0;
        while (j < b1.a.size()) {
          b b2 = (b)b1.a.get(j);
          b2.b++;
          int m = b2.c;
          int n = this.g;
          k = i;
          if (m != n) {
            b2.c = n;
            k = i + 1;
            arrayDeque.add(b2);
          } 
          j++;
          i = k;
        } 
      } 
    } 
    j = ++this.g;
    if (j == 0)
      this.g = j + 1; 
    Iterator iterator1 = paramList.iterator();
    j = 0;
    while (true) {
      k = j;
      if (iterator1.hasNext()) {
        b b1 = (b)iterator1.next();
        if (b1.b == 0) {
          k = b1.c;
          int m = this.g;
          if (k != m) {
            b1.c = m;
            j++;
            arrayDeque.add(b1);
          } 
        } 
        continue;
      } 
      break;
    } 
    while (!arrayDeque.isEmpty()) {
      b b1 = (b)arrayDeque.poll();
      b1.a();
      if (b1 instanceof m)
        try {
          ((m)b1).c();
        } catch (f iterator2) {
          a.c("ReactNative", "Native animation workaround, frame lost as result of race condition", iterator2);
        }  
      if (b1 instanceof s)
        ((s)b1).e(); 
      if (b1.a != null) {
        j = k;
        k = 0;
        while (k < b1.a.size()) {
          b b2 = (b)b1.a.get(k);
          b2.b--;
          int m = j;
          if (b2.c != this.g) {
            m = j;
            if (b2.b == 0) {
              b2.c = this.g;
              m = j + 1;
              arrayDeque.add(b2);
            } 
          } 
          k++;
          j = m;
        } 
        k = j;
      } 
    } 
    if (i == k)
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Looks like animated nodes graph has cycles, there are ");
    stringBuilder.append(i);
    stringBuilder.append(" but toposort visited only ");
    stringBuilder.append(k);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  private void b(c paramc) {
    if (!this.d.isEmpty()) {
      String str = this.e.a(paramc.b());
      Map map = this.d;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(paramc.c());
      stringBuilder.append(str);
      List list = (List)map.get(stringBuilder.toString());
      if (list != null) {
        for (EventAnimationDriver eventAnimationDriver : list) {
          a(eventAnimationDriver.mValueNode);
          paramc.a(eventAnimationDriver);
          this.h.add(eventAnimationDriver.mValueNode);
        } 
        a(this.h);
        this.h.clear();
      } 
    } 
  }
  
  b a(int paramInt) { return (b)this.a.get(paramInt); }
  
  public void a(int paramInt, double paramDouble) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      a(b1);
      ((s)b1).e = paramDouble;
      this.c.put(paramInt, b1);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, int paramInt2) {
    b b1 = (b)this.a.get(paramInt1);
    if (b1 != null) {
      b b2 = (b)this.a.get(paramInt2);
      if (b2 != null) {
        b1.a(b2);
        this.c.put(paramInt2, b2);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node with tag ");
      stringBuilder1.append(paramInt2);
      stringBuilder1.append(" does not exists");
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, int paramInt2, ReadableMap paramReadableMap, Callback paramCallback) {
    b b1 = (b)this.a.get(paramInt2);
    if (b1 != null) {
      if (b1 instanceof s) {
        StringBuilder stringBuilder2;
        d d1 = (d)this.b.get(paramInt1);
        if (d1 != null) {
          d1.a(paramReadableMap);
          return;
        } 
        String str = paramReadableMap.getString("type");
        if ("frames".equals(str)) {
          stringBuilder2 = new h(paramReadableMap);
        } else {
          n n;
          if ("spring".equals(str)) {
            n = new n(stringBuilder2);
          } else if ("decay".equals(str)) {
            e e1 = new e(n);
          } else {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Unsupported animation type: ");
            stringBuilder2.append(str);
            throw new JSApplicationIllegalArgumentException(stringBuilder2.toString());
          } 
        } 
        stringBuilder2.d = paramInt1;
        stringBuilder2.c = paramCallback;
        stringBuilder2.b = (s)b1;
        this.b.put(paramInt1, stringBuilder2);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node should be of type ");
      stringBuilder1.append(s.class.getName());
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt2);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt, c paramc) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      ((s)b1).a(paramc);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt, ReadableMap paramReadableMap) {
    if (this.a.get(paramInt) == null) {
      StringBuilder stringBuilder1;
      String str = paramReadableMap.getString("type");
      if ("style".equals(str)) {
        stringBuilder1 = new o(paramReadableMap, this);
      } else {
        s s;
        if ("value".equals(str)) {
          s = new s(stringBuilder1);
        } else {
          m m;
          if ("props".equals(str)) {
            m = new m(s, this, this.f);
          } else {
            i i;
            if ("interpolation".equals(str)) {
              i = new i(m);
            } else {
              a a1;
              if ("addition".equals(str)) {
                a1 = new a(i, this);
              } else {
                p p;
                if ("subtraction".equals(str)) {
                  p = new p(a1, this);
                } else {
                  g g1;
                  if ("division".equals(str)) {
                    g1 = new g(p, this);
                  } else {
                    k k;
                    if ("multiplication".equals(str)) {
                      k = new k(g1, this);
                    } else {
                      j j;
                      if ("modulus".equals(str)) {
                        j = new j(k, this);
                      } else {
                        f f1;
                        if ("diffclamp".equals(str)) {
                          f1 = new f(j, this);
                        } else {
                          r r;
                          if ("transform".equals(str)) {
                            r = new r(f1, this);
                          } else if ("tracking".equals(str)) {
                            q q = new q(r, this);
                          } else {
                            stringBuilder1 = new StringBuilder();
                            stringBuilder1.append("Unsupported node type: ");
                            stringBuilder1.append(str);
                            throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
                          } 
                        } 
                      } 
                    } 
                  } 
                } 
              } 
            } 
          } 
        } 
      } 
      stringBuilder1.d = paramInt;
      this.a.put(paramInt, stringBuilder1);
      this.c.put(paramInt, stringBuilder1);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" already exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, String paramString, int paramInt2) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramInt1);
    stringBuilder.append(paramString);
    String str = stringBuilder.toString();
    if (this.d.containsKey(str)) {
      Map map = (List)this.d.get(str);
      if (map.size() == 1) {
        map = this.d;
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append(paramInt1);
        stringBuilder1.append(paramString);
        map.remove(stringBuilder1.toString());
        return;
      } 
      ListIterator listIterator = map.listIterator();
      while (listIterator.hasNext()) {
        if (((EventAnimationDriver)listIterator.next()).mValueNode.d == paramInt2) {
          listIterator.remove();
          break;
        } 
      } 
    } 
  }
  
  public void a(int paramInt, String paramString, ReadableMap paramReadableMap) {
    int i = paramReadableMap.getInt("animatedValueTag");
    b b1 = (b)this.a.get(i);
    if (b1 != null) {
      if (b1 instanceof s) {
        ReadableArray readableArray = paramReadableMap.getArray("nativeEventPath");
        ArrayList arrayList2 = new ArrayList(readableArray.size());
        for (i = 0; i < readableArray.size(); i++)
          arrayList2.add(readableArray.getString(i)); 
        EventAnimationDriver eventAnimationDriver = new EventAnimationDriver(arrayList2, (s)b1);
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append(paramInt);
        stringBuilder2.append(paramString);
        paramString = stringBuilder2.toString();
        if (this.d.containsKey(paramString)) {
          ((List)this.d.get(paramString)).add(eventAnimationDriver);
          return;
        } 
        ArrayList arrayList1 = new ArrayList(1);
        arrayList1.add(eventAnimationDriver);
        this.d.put(paramString, arrayList1);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node connected to event should beof type ");
      stringBuilder1.append(s.class.getName());
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(i);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(long paramLong) {
    UiThreadUtil.assertOnUiThread();
    int i;
    for (i = 0; i < this.c.size(); i++) {
      b b2 = (b)this.c.valueAt(i);
      this.h.add(b2);
    } 
    this.c.clear();
    i = 0;
    byte b1 = i;
    while (i < this.b.size()) {
      d d1 = (d)this.b.valueAt(i);
      d1.a(paramLong);
      s s = d1.b;
      this.h.add(s);
      if (d1.a)
        b1 = 1; 
      i++;
    } 
    a(this.h);
    this.h.clear();
    if (b1 != 0)
      for (i = this.b.size() - 1; i >= 0; i--) {
        d d1 = (d)this.b.valueAt(i);
        if (d1.a) {
          if (d1.c != null) {
            WritableMap writableMap = Arguments.createMap();
            writableMap.putBoolean("finished", true);
            d1.c.invoke(new Object[] { writableMap });
          } 
          this.b.removeAt(i);
        } 
      }  
  }
  
  public void a(c paramc) {
    if (UiThreadUtil.isOnUiThread()) {
      b(paramc);
      return;
    } 
    UiThreadUtil.runOnUiThread(new Object(this, paramc));
  }
  
  public boolean a() { return (this.b.size() > 0 || this.c.size() > 0); }
  
  public void b(int paramInt) {
    this.a.remove(paramInt);
    this.c.remove(paramInt);
  }
  
  public void b(int paramInt, double paramDouble) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      ((s)b1).f = paramDouble;
      this.c.put(paramInt, b1);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void b(int paramInt1, int paramInt2) {
    b b1 = (b)this.a.get(paramInt1);
    if (b1 != null) {
      b b2 = (b)this.a.get(paramInt2);
      if (b2 != null) {
        b1.b(b2);
        this.c.put(paramInt2, b2);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node with tag ");
      stringBuilder1.append(paramInt2);
      stringBuilder1.append(" does not exists");
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void c(int paramInt) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      ((s)b1).a(null);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void c(int paramInt1, int paramInt2) {
    b b1 = (b)this.a.get(paramInt1);
    if (b1 != null) {
      if (b1 instanceof m) {
        ((m)b1).a(paramInt2);
        this.c.put(paramInt1, b1);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node connected to view should beof type ");
      stringBuilder1.append(m.class.getName());
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void d(int paramInt) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      ((s)b1).c();
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void d(int paramInt1, int paramInt2) {
    b b1 = (b)this.a.get(paramInt1);
    if (b1 != null) {
      if (b1 instanceof m) {
        ((m)b1).b(paramInt2);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Animated node connected to view should beof type ");
      stringBuilder1.append(m.class.getName());
      throw new JSApplicationIllegalArgumentException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void e(int paramInt) {
    b b1 = (b)this.a.get(paramInt);
    if (b1 != null && b1 instanceof s) {
      ((s)b1).d();
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node with tag ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" does not exists or is not a 'value' node");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void e(int paramInt1, int paramInt2) {
    b b1 = (b)this.a.get(paramInt1);
    if (b1 == null)
      return; 
    if (b1 instanceof m) {
      ((m)b1).b();
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Animated node connected to view should beof type ");
    stringBuilder.append(m.class.getName());
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void f(int paramInt) {
    for (byte b1 = 0; b1 < this.b.size(); b1++) {
      d d1 = (d)this.b.valueAt(b1);
      if (d1.d == paramInt) {
        if (d1.c != null) {
          WritableMap writableMap = Arguments.createMap();
          writableMap.putBoolean("finished", false);
          d1.c.invoke(new Object[] { writableMap });
        } 
        this.b.removeAt(b1);
        return;
      } 
    } 
  }
}
