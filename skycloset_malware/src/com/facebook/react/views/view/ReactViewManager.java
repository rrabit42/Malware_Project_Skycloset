package com.facebook.react.views.view;

import android.annotation.TargetApi;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.view.View;
import android.view.ViewGroup;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.o;
import com.facebook.react.uimanager.p;
import com.facebook.yoga.a;
import java.util.Locale;
import java.util.Map;

@a(a = "RCTView")
public class ReactViewManager extends ViewGroupManager<f> {
  private static final int CMD_HOTSPOT_UPDATE = 1;
  
  private static final int CMD_SET_PRESSED = 2;
  
  public static final String REACT_CLASS = "RCTView";
  
  private static final int[] SPACING_TYPES = { 8, 0, 2, 1, 3, 4, 5 };
  
  public void addView(f paramf, View paramView, int paramInt) {
    if (paramf.getRemoveClippedSubviews()) {
      paramf.a(paramView, paramInt);
      return;
    } 
    paramf.addView(paramView, paramInt);
  }
  
  public f createViewInstance(af paramaf) { return new f(paramaf); }
  
  public View getChildAt(f paramf, int paramInt) { return paramf.getRemoveClippedSubviews() ? paramf.b(paramInt) : paramf.getChildAt(paramInt); }
  
  public int getChildCount(f paramf) { return paramf.getRemoveClippedSubviews() ? paramf.getAllChildrenCount() : paramf.getChildCount(); }
  
  public Map<String, Integer> getCommandsMap() { return e.a("hotspotUpdate", Integer.valueOf(1), "setPressed", Integer.valueOf(2)); }
  
  public String getName() { return "RCTView"; }
  
  public void receiveCommand(f paramf, int paramInt, ReadableArray paramReadableArray) {
    switch (paramInt) {
      default:
        return;
      case 2:
        if (paramReadableArray != null && paramReadableArray.size() == 1) {
          paramf.setPressed(paramReadableArray.getBoolean(0));
          return;
        } 
        throw new JSApplicationIllegalArgumentException("Illegal number of arguments for 'setPressed' command");
      case 1:
        break;
    } 
    if (paramReadableArray != null && paramReadableArray.size() == 2) {
      if (Build.VERSION.SDK_INT >= 21) {
        paramf.drawableHotspotChanged(o.a(paramReadableArray.getDouble(0)), o.a(paramReadableArray.getDouble(1)));
        return;
      } 
    } else {
      throw new JSApplicationIllegalArgumentException("Illegal number of arguments for 'updateHotspot' command");
    } 
  }
  
  public void removeAllViews(f paramf) {
    if (paramf.getRemoveClippedSubviews()) {
      paramf.c();
      return;
    } 
    paramf.removeAllViews();
  }
  
  public void removeViewAt(f paramf, int paramInt) {
    if (paramf.getRemoveClippedSubviews()) {
      View view = getChildAt(paramf, paramInt);
      if (view.getParent() != null)
        paramf.removeView(view); 
      paramf.a(view);
      return;
    } 
    paramf.removeViewAt(paramInt);
  }
  
  @a(a = "accessible")
  public void setAccessible(f paramf, boolean paramBoolean) { paramf.setFocusable(paramBoolean); }
  
  @a(a = "backfaceVisibility")
  public void setBackfaceVisibility(f paramf, String paramString) { paramf.setBackfaceVisibility(paramString); }
  
  @b(a = {"borderColor", "borderLeftColor", "borderRightColor", "borderTopColor", "borderBottomColor", "borderStartColor", "borderEndColor"}, b = "Color")
  public void setBorderColor(f paramf, int paramInt, Integer paramInteger) {
    float f1;
    float f2 = NaNF;
    if (paramInteger == null) {
      f1 = NaNF;
    } else {
      f1 = (paramInteger.intValue() & 0xFFFFFF);
    } 
    if (paramInteger != null)
      f2 = (paramInteger.intValue() >>> 24); 
    paramf.a(SPACING_TYPES[paramInt], f1, f2);
  }
  
  @b(a = {"borderRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius", "borderTopStartRadius", "borderTopEndRadius", "borderBottomStartRadius", "borderBottomEndRadius"}, c = NaNF)
  public void setBorderRadius(f paramf, int paramInt, float paramFloat) {
    float f1 = paramFloat;
    if (!a.a(paramFloat)) {
      f1 = paramFloat;
      if (paramFloat < 0.0F)
        f1 = NaNF; 
    } 
    paramFloat = f1;
    if (!a.a(f1))
      paramFloat = o.a(f1); 
    if (paramInt == 0) {
      paramf.setBorderRadius(paramFloat);
      return;
    } 
    paramf.a(paramFloat, paramInt - 1);
  }
  
  @a(a = "borderStyle")
  public void setBorderStyle(f paramf, String paramString) { paramf.setBorderStyle(paramString); }
  
  @b(a = {"borderWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth", "borderStartWidth", "borderEndWidth"}, c = NaNF)
  public void setBorderWidth(f paramf, int paramInt, float paramFloat) {
    float f1 = paramFloat;
    if (!a.a(paramFloat)) {
      f1 = paramFloat;
      if (paramFloat < 0.0F)
        f1 = NaNF; 
    } 
    paramFloat = f1;
    if (!a.a(f1))
      paramFloat = o.a(f1); 
    paramf.a(SPACING_TYPES[paramInt], paramFloat);
  }
  
  @a(a = "collapsable")
  public void setCollapsable(f paramf, boolean paramBoolean) {}
  
  @a(a = "hitSlop")
  public void setHitSlop(f paramf, ReadableMap paramReadableMap) {
    byte b3;
    byte b2;
    byte b1;
    if (paramReadableMap == null) {
      paramf.setHitSlopRect(null);
      return;
    } 
    boolean bool = paramReadableMap.hasKey("left");
    int i = 0;
    if (bool) {
      b1 = (int)o.a(paramReadableMap.getDouble("left"));
    } else {
      b1 = 0;
    } 
    if (paramReadableMap.hasKey("top")) {
      b2 = (int)o.a(paramReadableMap.getDouble("top"));
    } else {
      b2 = 0;
    } 
    if (paramReadableMap.hasKey("right")) {
      b3 = (int)o.a(paramReadableMap.getDouble("right"));
    } else {
      b3 = 0;
    } 
    if (paramReadableMap.hasKey("bottom"))
      i = (int)o.a(paramReadableMap.getDouble("bottom")); 
    paramf.setHitSlopRect(new Rect(b1, b2, b3, i));
  }
  
  @a(a = "nativeBackgroundAndroid")
  public void setNativeBackground(f paramf, ReadableMap paramReadableMap) {
    Drawable drawable;
    if (paramReadableMap == null) {
      paramReadableMap = null;
    } else {
      drawable = c.a(paramf.getContext(), paramReadableMap);
    } 
    paramf.setTranslucentBackgroundDrawable(drawable);
  }
  
  @a(a = "nativeForegroundAndroid")
  @TargetApi(23)
  public void setNativeForeground(f paramf, ReadableMap paramReadableMap) {
    Drawable drawable;
    if (paramReadableMap == null) {
      paramReadableMap = null;
    } else {
      drawable = c.a(paramf.getContext(), paramReadableMap);
    } 
    paramf.setForeground(drawable);
  }
  
  @a(a = "needsOffscreenAlphaCompositing")
  public void setNeedsOffscreenAlphaCompositing(f paramf, boolean paramBoolean) { paramf.setNeedsOffscreenAlphaCompositing(paramBoolean); }
  
  public void setOpacity(f paramf, float paramFloat) { paramf.setOpacityIfPossible(paramFloat); }
  
  @a(a = "overflow")
  public void setOverflow(f paramf, String paramString) { paramf.setOverflow(paramString); }
  
  @a(a = "pointerEvents")
  public void setPointerEvents(f paramf, String paramString) {
    p p;
    if (paramString == null) {
      p = p.d;
    } else {
      p = p.valueOf(p.toUpperCase(Locale.US).replace("-", "_"));
    } 
    paramf.setPointerEvents(p);
  }
  
  @a(a = "removeClippedSubviews")
  public void setRemoveClippedSubviews(f paramf, boolean paramBoolean) { paramf.setRemoveClippedSubviews(paramBoolean); }
  
  @a(a = "hasTVPreferredFocus")
  public void setTVPreferredFocus(f paramf, boolean paramBoolean) {
    if (paramBoolean) {
      paramf.setFocusable(true);
      paramf.setFocusableInTouchMode(true);
      paramf.requestFocus();
    } 
  }
  
  public void setTransform(f paramf, ReadableArray paramReadableArray) {
    super.setTransform(paramf, paramReadableArray);
    paramf.d();
  }
}
