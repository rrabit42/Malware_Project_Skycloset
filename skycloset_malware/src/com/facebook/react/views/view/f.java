package com.facebook.react.views.view;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.os.Build;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewStructure;
import android.view.animation.Animation;
import com.facebook.common.e.a;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.e.b;
import com.facebook.react.e.c;
import com.facebook.react.e.d;
import com.facebook.react.uimanager.aa;
import com.facebook.react.uimanager.ab;
import com.facebook.react.uimanager.ac;
import com.facebook.react.uimanager.ar;
import com.facebook.react.uimanager.f;
import com.facebook.react.uimanager.j;
import com.facebook.react.uimanager.p;
import com.facebook.react.uimanager.q;
import com.facebook.react.uimanager.r;
import com.facebook.react.uimanager.u;

public class f extends ViewGroup implements c, d, aa, q, u {
  private static final ViewGroup.LayoutParams a = new ViewGroup.LayoutParams(0, 0);
  
  private static final Rect b = new Rect();
  
  private boolean c = false;
  
  private View[] d = null;
  
  private int e;
  
  private Rect f;
  
  private Rect g;
  
  private String h;
  
  private p i = p.d;
  
  private a j;
  
  private d k;
  
  private b l;
  
  private boolean m = false;
  
  private final ar n;
  
  private Path o;
  
  private int p;
  
  private float q = 1.0F;
  
  private String r = "visible";
  
  public f(Context paramContext) {
    super(paramContext);
    setClipChildren(false);
    this.n = new ar(this);
  }
  
  private void a(Canvas paramCanvas) { // Byte code:
    //   0: aload_0
    //   1: getfield h : Ljava/lang/String;
    //   4: astore #18
    //   6: aload #18
    //   8: ifnull -> 952
    //   11: iconst_m1
    //   12: istore #16
    //   14: aload #18
    //   16: invokevirtual hashCode : ()I
    //   19: istore #17
    //   21: iload #17
    //   23: ldc -1217487446
    //   25: if_icmpeq -> 54
    //   28: iload #17
    //   30: ldc 466743410
    //   32: if_icmpeq -> 38
    //   35: goto -> 67
    //   38: aload #18
    //   40: ldc 'visible'
    //   42: invokevirtual equals : (Ljava/lang/Object;)Z
    //   45: ifeq -> 67
    //   48: iconst_0
    //   49: istore #16
    //   51: goto -> 67
    //   54: aload #18
    //   56: ldc 'hidden'
    //   58: invokevirtual equals : (Ljava/lang/Object;)Z
    //   61: ifeq -> 67
    //   64: iconst_1
    //   65: istore #16
    //   67: iload #16
    //   69: tableswitch default -> 92, 0 -> 939, 1 -> 93
    //   92: return
    //   93: aload_0
    //   94: invokevirtual getWidth : ()I
    //   97: i2f
    //   98: fstore #9
    //   100: aload_0
    //   101: invokevirtual getHeight : ()I
    //   104: i2f
    //   105: fstore #8
    //   107: aload_0
    //   108: getfield k : Lcom/facebook/react/views/view/d;
    //   111: astore #18
    //   113: aload #18
    //   115: ifnull -> 903
    //   118: aload #18
    //   120: invokevirtual f : ()Landroid/graphics/RectF;
    //   123: astore #18
    //   125: aload #18
    //   127: getfield top : F
    //   130: fconst_0
    //   131: fcmpl
    //   132: ifgt -> 178
    //   135: aload #18
    //   137: getfield left : F
    //   140: fconst_0
    //   141: fcmpl
    //   142: ifgt -> 178
    //   145: aload #18
    //   147: getfield bottom : F
    //   150: fconst_0
    //   151: fcmpl
    //   152: ifgt -> 178
    //   155: aload #18
    //   157: getfield right : F
    //   160: fconst_0
    //   161: fcmpl
    //   162: ifle -> 168
    //   165: goto -> 178
    //   168: fconst_0
    //   169: fstore #7
    //   171: fload #7
    //   173: fstore #6
    //   175: goto -> 216
    //   178: aload #18
    //   180: getfield left : F
    //   183: fconst_0
    //   184: fadd
    //   185: fstore #7
    //   187: aload #18
    //   189: getfield top : F
    //   192: fconst_0
    //   193: fadd
    //   194: fstore #6
    //   196: fload #9
    //   198: aload #18
    //   200: getfield right : F
    //   203: fsub
    //   204: fstore #9
    //   206: fload #8
    //   208: aload #18
    //   210: getfield bottom : F
    //   213: fsub
    //   214: fstore #8
    //   216: aload_0
    //   217: getfield k : Lcom/facebook/react/views/view/d;
    //   220: invokevirtual b : ()F
    //   223: fstore_2
    //   224: aload_0
    //   225: getfield k : Lcom/facebook/react/views/view/d;
    //   228: fload_2
    //   229: getstatic com/facebook/react/views/view/d$a.a : Lcom/facebook/react/views/view/d$a;
    //   232: invokevirtual a : (FLcom/facebook/react/views/view/d$a;)F
    //   235: fstore_3
    //   236: aload_0
    //   237: getfield k : Lcom/facebook/react/views/view/d;
    //   240: fload_2
    //   241: getstatic com/facebook/react/views/view/d$a.b : Lcom/facebook/react/views/view/d$a;
    //   244: invokevirtual a : (FLcom/facebook/react/views/view/d$a;)F
    //   247: fstore #11
    //   249: aload_0
    //   250: getfield k : Lcom/facebook/react/views/view/d;
    //   253: fload_2
    //   254: getstatic com/facebook/react/views/view/d$a.d : Lcom/facebook/react/views/view/d$a;
    //   257: invokevirtual a : (FLcom/facebook/react/views/view/d$a;)F
    //   260: fstore #10
    //   262: aload_0
    //   263: getfield k : Lcom/facebook/react/views/view/d;
    //   266: fload_2
    //   267: getstatic com/facebook/react/views/view/d$a.c : Lcom/facebook/react/views/view/d$a;
    //   270: invokevirtual a : (FLcom/facebook/react/views/view/d$a;)F
    //   273: fstore #5
    //   275: getstatic android/os/Build$VERSION.SDK_INT : I
    //   278: bipush #17
    //   280: if_icmplt -> 638
    //   283: aload_0
    //   284: getfield p : I
    //   287: iconst_1
    //   288: if_icmpne -> 297
    //   291: iconst_1
    //   292: istore #16
    //   294: goto -> 300
    //   297: iconst_0
    //   298: istore #16
    //   300: aload_0
    //   301: getfield k : Lcom/facebook/react/views/view/d;
    //   304: getstatic com/facebook/react/views/view/d$a.e : Lcom/facebook/react/views/view/d$a;
    //   307: invokevirtual a : (Lcom/facebook/react/views/view/d$a;)F
    //   310: fstore #15
    //   312: aload_0
    //   313: getfield k : Lcom/facebook/react/views/view/d;
    //   316: getstatic com/facebook/react/views/view/d$a.f : Lcom/facebook/react/views/view/d$a;
    //   319: invokevirtual a : (Lcom/facebook/react/views/view/d$a;)F
    //   322: fstore_2
    //   323: aload_0
    //   324: getfield k : Lcom/facebook/react/views/view/d;
    //   327: getstatic com/facebook/react/views/view/d$a.g : Lcom/facebook/react/views/view/d$a;
    //   330: invokevirtual a : (Lcom/facebook/react/views/view/d$a;)F
    //   333: fstore #12
    //   335: aload_0
    //   336: getfield k : Lcom/facebook/react/views/view/d;
    //   339: astore #19
    //   341: aload #19
    //   343: getstatic com/facebook/react/views/view/d$a.h : Lcom/facebook/react/views/view/d$a;
    //   346: invokevirtual a : (Lcom/facebook/react/views/view/d$a;)F
    //   349: fstore #13
    //   351: invokestatic a : ()Lcom/facebook/react/modules/i18nmanager/a;
    //   354: astore #19
    //   356: aload #19
    //   358: aload_0
    //   359: invokevirtual getContext : ()Landroid/content/Context;
    //   362: invokevirtual b : (Landroid/content/Context;)Z
    //   365: ifeq -> 496
    //   368: fload #15
    //   370: invokestatic a : (F)Z
    //   373: ifeq -> 379
    //   376: goto -> 382
    //   379: fload #15
    //   381: fstore_3
    //   382: fload_2
    //   383: fstore #4
    //   385: fload_2
    //   386: invokestatic a : (F)Z
    //   389: ifeq -> 396
    //   392: fload #11
    //   394: fstore #4
    //   396: fload #12
    //   398: fstore_2
    //   399: fload #12
    //   401: invokestatic a : (F)Z
    //   404: ifeq -> 410
    //   407: fload #10
    //   409: fstore_2
    //   410: fload #13
    //   412: invokestatic a : (F)Z
    //   415: ifeq -> 421
    //   418: goto -> 425
    //   421: fload #13
    //   423: fstore #5
    //   425: iload #16
    //   427: ifeq -> 437
    //   430: fload #4
    //   432: fstore #10
    //   434: goto -> 440
    //   437: fload_3
    //   438: fstore #10
    //   440: iload #16
    //   442: ifeq -> 448
    //   445: goto -> 451
    //   448: fload #4
    //   450: fstore_3
    //   451: iload #16
    //   453: ifeq -> 463
    //   456: fload #5
    //   458: fstore #11
    //   460: goto -> 466
    //   463: fload_2
    //   464: fstore #11
    //   466: iload #16
    //   468: ifeq -> 482
    //   471: fload #10
    //   473: fstore #4
    //   475: fload #11
    //   477: fstore #10
    //   479: goto -> 622
    //   482: fload #5
    //   484: fstore_2
    //   485: fload #10
    //   487: fstore #4
    //   489: fload #11
    //   491: fstore #10
    //   493: goto -> 622
    //   496: iload #16
    //   498: ifeq -> 507
    //   501: fload_2
    //   502: fstore #14
    //   504: goto -> 511
    //   507: fload #15
    //   509: fstore #14
    //   511: fload_2
    //   512: fstore #4
    //   514: iload #16
    //   516: ifeq -> 523
    //   519: fload #15
    //   521: fstore #4
    //   523: iload #16
    //   525: ifeq -> 535
    //   528: fload #13
    //   530: fstore #15
    //   532: goto -> 539
    //   535: fload #12
    //   537: fstore #15
    //   539: iload #16
    //   541: ifeq -> 548
    //   544: fload #12
    //   546: fstore #13
    //   548: fload #14
    //   550: invokestatic a : (F)Z
    //   553: ifne -> 562
    //   556: fload #14
    //   558: fstore_2
    //   559: goto -> 564
    //   562: fload_3
    //   563: fstore_2
    //   564: fload #11
    //   566: fstore_3
    //   567: fload #4
    //   569: invokestatic a : (F)Z
    //   572: ifne -> 578
    //   575: fload #4
    //   577: fstore_3
    //   578: fload #10
    //   580: fstore #4
    //   582: fload #15
    //   584: invokestatic a : (F)Z
    //   587: ifne -> 594
    //   590: fload #15
    //   592: fstore #4
    //   594: fload_2
    //   595: fstore #12
    //   597: fload_3
    //   598: fstore #11
    //   600: fload #4
    //   602: fstore #10
    //   604: fload #13
    //   606: invokestatic a : (F)Z
    //   609: ifne -> 632
    //   612: fload #4
    //   614: fstore #10
    //   616: fload_2
    //   617: fstore #4
    //   619: fload #13
    //   621: fstore_2
    //   622: fload_2
    //   623: fstore #5
    //   625: fload_3
    //   626: fstore #11
    //   628: fload #4
    //   630: fstore #12
    //   632: fload #12
    //   634: fstore_3
    //   635: goto -> 638
    //   638: fload_3
    //   639: fconst_0
    //   640: fcmpl
    //   641: ifgt -> 674
    //   644: fload #11
    //   646: fconst_0
    //   647: fcmpl
    //   648: ifgt -> 674
    //   651: fload #5
    //   653: fconst_0
    //   654: fcmpl
    //   655: ifgt -> 674
    //   658: fload #10
    //   660: fconst_0
    //   661: fcmpl
    //   662: ifle -> 668
    //   665: goto -> 674
    //   668: iconst_0
    //   669: istore #16
    //   671: goto -> 913
    //   674: aload_0
    //   675: getfield o : Landroid/graphics/Path;
    //   678: ifnonnull -> 692
    //   681: aload_0
    //   682: new android/graphics/Path
    //   685: dup
    //   686: invokespecial <init> : ()V
    //   689: putfield o : Landroid/graphics/Path;
    //   692: aload_0
    //   693: getfield o : Landroid/graphics/Path;
    //   696: invokevirtual rewind : ()V
    //   699: aload_0
    //   700: getfield o : Landroid/graphics/Path;
    //   703: astore #19
    //   705: new android/graphics/RectF
    //   708: dup
    //   709: fload #7
    //   711: fload #6
    //   713: fload #9
    //   715: fload #8
    //   717: invokespecial <init> : (FFFF)V
    //   720: astore #20
    //   722: fload_3
    //   723: aload #18
    //   725: getfield left : F
    //   728: fsub
    //   729: fconst_0
    //   730: invokestatic max : (FF)F
    //   733: fstore_2
    //   734: fload_3
    //   735: aload #18
    //   737: getfield top : F
    //   740: fsub
    //   741: fconst_0
    //   742: invokestatic max : (FF)F
    //   745: fstore_3
    //   746: iconst_1
    //   747: istore #16
    //   749: fload #11
    //   751: aload #18
    //   753: getfield right : F
    //   756: fsub
    //   757: fconst_0
    //   758: invokestatic max : (FF)F
    //   761: fstore #4
    //   763: fload #11
    //   765: aload #18
    //   767: getfield top : F
    //   770: fsub
    //   771: fconst_0
    //   772: invokestatic max : (FF)F
    //   775: fstore #11
    //   777: fload #5
    //   779: aload #18
    //   781: getfield right : F
    //   784: fsub
    //   785: fconst_0
    //   786: invokestatic max : (FF)F
    //   789: fstore #12
    //   791: fload #5
    //   793: aload #18
    //   795: getfield bottom : F
    //   798: fsub
    //   799: fconst_0
    //   800: invokestatic max : (FF)F
    //   803: fstore #5
    //   805: fload #10
    //   807: aload #18
    //   809: getfield left : F
    //   812: fsub
    //   813: fconst_0
    //   814: invokestatic max : (FF)F
    //   817: fstore #13
    //   819: fload #10
    //   821: aload #18
    //   823: getfield bottom : F
    //   826: fsub
    //   827: fconst_0
    //   828: invokestatic max : (FF)F
    //   831: fstore #10
    //   833: getstatic android/graphics/Path$Direction.CW : Landroid/graphics/Path$Direction;
    //   836: astore #18
    //   838: aload #19
    //   840: aload #20
    //   842: bipush #8
    //   844: newarray float
    //   846: dup
    //   847: iconst_0
    //   848: fload_2
    //   849: fastore
    //   850: dup
    //   851: iconst_1
    //   852: fload_3
    //   853: fastore
    //   854: dup
    //   855: iconst_2
    //   856: fload #4
    //   858: fastore
    //   859: dup
    //   860: iconst_3
    //   861: fload #11
    //   863: fastore
    //   864: dup
    //   865: iconst_4
    //   866: fload #12
    //   868: fastore
    //   869: dup
    //   870: iconst_5
    //   871: fload #5
    //   873: fastore
    //   874: dup
    //   875: bipush #6
    //   877: fload #13
    //   879: fastore
    //   880: dup
    //   881: bipush #7
    //   883: fload #10
    //   885: fastore
    //   886: aload #18
    //   888: invokevirtual addRoundRect : (Landroid/graphics/RectF;[FLandroid/graphics/Path$Direction;)V
    //   891: aload_1
    //   892: aload_0
    //   893: getfield o : Landroid/graphics/Path;
    //   896: invokevirtual clipPath : (Landroid/graphics/Path;)Z
    //   899: pop
    //   900: goto -> 913
    //   903: fconst_0
    //   904: fstore #7
    //   906: fload #7
    //   908: fstore #6
    //   910: iconst_0
    //   911: istore #16
    //   913: iload #16
    //   915: ifne -> 952
    //   918: aload_1
    //   919: new android/graphics/RectF
    //   922: dup
    //   923: fload #7
    //   925: fload #6
    //   927: fload #9
    //   929: fload #8
    //   931: invokespecial <init> : (FFFF)V
    //   934: invokevirtual clipRect : (Landroid/graphics/RectF;)Z
    //   937: pop
    //   938: return
    //   939: aload_0
    //   940: getfield o : Landroid/graphics/Path;
    //   943: astore_1
    //   944: aload_1
    //   945: ifnull -> 952
    //   948: aload_1
    //   949: invokevirtual rewind : ()V
    //   952: return }
  
  private void a(Rect paramRect, int paramInt1, int paramInt2) {
    boolean bool;
    View view = (View[])a.a(this.d)[paramInt1];
    b.set(view.getLeft(), view.getTop(), view.getRight(), view.getBottom());
    boolean bool1 = paramRect.intersects(b.left, b.top, b.right, b.bottom);
    Animation animation = view.getAnimation();
    int i1 = 1;
    if (animation != null && !animation.hasEnded()) {
      bool = true;
    } else {
      bool = false;
    } 
    if (!bool1 && view.getParent() != null && !bool) {
      removeViewsInLayout(paramInt1 - paramInt2, 1);
      paramInt1 = i1;
    } else if (bool1 && view.getParent() == null) {
      addViewInLayout(view, paramInt1 - paramInt2, a, true);
      invalidate();
      paramInt1 = i1;
    } else if (bool1) {
      paramInt1 = i1;
    } else {
      paramInt1 = 0;
    } 
    if (paramInt1 != 0 && view instanceof q) {
      q q1 = (q)view;
      if (q1.getRemoveClippedSubviews())
        q1.a(); 
    } 
  }
  
  private void a(Drawable paramDrawable) { super.setBackground(paramDrawable); }
  
  private void b(Rect paramRect) {
    a.a(this.d);
    byte b1 = 0;
    for (byte b2 = 0; b1 < this.e; b2 = b3) {
      a(paramRect, b1, b2);
      byte b3 = b2;
      if (this.d[b1].getParent() == null)
        b3 = b2 + 1; 
      b1++;
    } 
  }
  
  private void b(View paramView) {
    if (this.c) {
      boolean bool;
      if (getParent() == null)
        return; 
      a.a(this.f);
      a.a(this.d);
      b.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
      boolean bool1 = this.f.intersects(b.left, b.top, b.right, b.bottom);
      ViewParent viewParent = paramView.getParent();
      byte b1 = 0;
      if (viewParent != null) {
        bool = true;
      } else {
        bool = false;
      } 
      if (bool1 != bool)
        for (byte b2 = 0; b1 < this.e; b2 = b3) {
          View[] arrayOfView = this.d;
          if (arrayOfView[b1] == paramView) {
            a(this.f, b1, b2);
            return;
          } 
          byte b3 = b2;
          if (arrayOfView[b1].getParent() == null)
            b3 = b2 + 1; 
          b1++;
        }  
    } 
  }
  
  private void b(View paramView, int paramInt) {
    View[] arrayOfView = (View[])a.a(this.d);
    int i1 = this.e;
    int i2 = arrayOfView.length;
    if (paramInt == i1) {
      View[] arrayOfView1 = arrayOfView;
      if (i2 == i1) {
        this.d = new View[i2 + 12];
        System.arraycopy(arrayOfView, 0, this.d, 0, i2);
        arrayOfView1 = this.d;
      } 
      paramInt = this.e;
      this.e = paramInt + 1;
      arrayOfView1[paramInt] = paramView;
      return;
    } 
    if (paramInt < i1) {
      if (i2 == i1) {
        this.d = new View[i2 + 12];
        System.arraycopy(arrayOfView, 0, this.d, 0, paramInt);
        System.arraycopy(arrayOfView, paramInt, this.d, paramInt + 1, i1 - paramInt);
        arrayOfView = this.d;
      } else {
        System.arraycopy(arrayOfView, paramInt, arrayOfView, paramInt + 1, i1 - paramInt);
      } 
      arrayOfView[paramInt] = paramView;
      this.e++;
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("index=");
    stringBuilder.append(paramInt);
    stringBuilder.append(" count=");
    stringBuilder.append(i1);
    throw new IndexOutOfBoundsException(stringBuilder.toString());
  }
  
  private int c(View paramView) {
    int i1 = this.e;
    View[] arrayOfView = (View[])a.a(this.d);
    for (byte b1 = 0; b1 < i1; b1++) {
      if (arrayOfView[b1] == paramView)
        return b1; 
    } 
    return -1;
  }
  
  private void c(int paramInt) {
    View[] arrayOfView = (View[])a.a(this.d);
    int i1 = this.e;
    if (paramInt == i1 - 1) {
      paramInt = i1 - 1;
      this.e = paramInt;
      arrayOfView[paramInt] = null;
      return;
    } 
    if (paramInt >= 0 && paramInt < i1) {
      System.arraycopy(arrayOfView, paramInt + 1, arrayOfView, paramInt, i1 - paramInt - 1);
      paramInt = this.e - 1;
      this.e = paramInt;
      arrayOfView[paramInt] = null;
      return;
    } 
    throw new IndexOutOfBoundsException();
  }
  
  private d getOrCreateReactViewBackground() { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
  
  public int a(int paramInt) {
    int i1 = paramInt;
    if (this.n.a())
      i1 = this.n.a(getChildCount(), paramInt); 
    return i1;
  }
  
  public void a() {
    if (!this.c)
      return; 
    a.a(this.f);
    a.a(this.d);
    r.a(this, this.f);
    b(this.f);
  }
  
  public void a(float paramFloat, int paramInt) {
    d d1 = getOrCreateReactViewBackground();
    d1.a(paramFloat, paramInt);
    if (Build.VERSION.SDK_INT < 18) {
      if (d1.a()) {
        paramInt = 1;
      } else {
        paramInt = 2;
      } 
      if (paramInt != getLayerType())
        setLayerType(paramInt, null); 
    } 
  }
  
  public void a(int paramInt, float paramFloat) { getOrCreateReactViewBackground().a(paramInt, paramFloat); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2) { getOrCreateReactViewBackground().a(paramInt, paramFloat1, paramFloat2); }
  
  public void a(Rect paramRect) { paramRect.set(this.f); }
  
  void a(View paramView) {
    a.a(this.c);
    a.a(this.f);
    a.a(this.d);
    paramView.removeOnLayoutChangeListener(this.j);
    int i1 = c(paramView);
    if (this.d[i1].getParent() != null) {
      byte b1 = 0;
      int i2;
      for (i2 = 0; b1 < i1; i2 = b2) {
        byte b2 = i2;
        if (this.d[b1].getParent() == null)
          b2 = i2 + true; 
        b1++;
      } 
      removeViewsInLayout(i1 - i2, 1);
    } 
    c(i1);
  }
  
  void a(View paramView, int paramInt) { a(paramView, paramInt, a); }
  
  void a(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) {
    a.a(this.c);
    a.a(this.f);
    a.a(this.d);
    b(paramView, paramInt);
    byte b1 = 0;
    byte b2;
    for (b2 = 0; b1 < paramInt; b2 = b3) {
      byte b3 = b2;
      if (this.d[b1].getParent() == null)
        b3 = b2 + true; 
      b1++;
    } 
    a(this.f, paramInt, b2);
    paramView.addOnLayoutChangeListener(this.j);
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) {
    this.n.a(paramView);
    setChildrenDrawingOrderEnabled(this.n.a());
    super.addView(paramView, paramInt, paramLayoutParams);
  }
  
  View b(int paramInt) { return (View[])a.a(this.d)[paramInt]; }
  
  public void b() {
    this.n.b();
    setChildrenDrawingOrderEnabled(this.n.a());
    invalidate();
  }
  
  void c() {
    a.a(this.c);
    a.a(this.d);
    for (byte b1 = 0; b1 < this.e; b1++)
      this.d[b1].removeOnLayoutChangeListener(this.j); 
    removeAllViewsInLayout();
    this.e = 0;
  }
  
  public void d() { // Byte code:
    //   0: aload_0
    //   1: getfield r : Ljava/lang/String;
    //   4: ldc 'visible'
    //   6: invokevirtual equals : (Ljava/lang/Object;)Z
    //   9: ifeq -> 23
    //   12: aload_0
    //   13: getfield q : F
    //   16: fstore_1
    //   17: aload_0
    //   18: fload_1
    //   19: invokevirtual setAlpha : (F)V
    //   22: return
    //   23: aload_0
    //   24: invokevirtual getRotationX : ()F
    //   27: fstore_1
    //   28: aload_0
    //   29: invokevirtual getRotationY : ()F
    //   32: fstore_2
    //   33: fload_1
    //   34: ldc_w -90.0
    //   37: fcmpl
    //   38: iflt -> 70
    //   41: fload_1
    //   42: ldc_w 90.0
    //   45: fcmpg
    //   46: ifge -> 70
    //   49: fload_2
    //   50: ldc_w -90.0
    //   53: fcmpl
    //   54: iflt -> 70
    //   57: fload_2
    //   58: ldc_w 90.0
    //   61: fcmpg
    //   62: ifge -> 70
    //   65: iconst_1
    //   66: istore_3
    //   67: goto -> 72
    //   70: iconst_0
    //   71: istore_3
    //   72: iload_3
    //   73: ifeq -> 79
    //   76: goto -> 12
    //   79: fconst_0
    //   80: fstore_1
    //   81: goto -> 17 }
  
  protected void dispatchDraw(Canvas paramCanvas) {
    try {
      a(paramCanvas);
      super.dispatchDraw(paramCanvas);
      return;
    } catch (NullPointerException paramCanvas) {
      a.c("ReactNative", "NullPointerException when executing ViewGroup.dispatchDraw method", paramCanvas);
      return;
    } catch (StackOverflowError paramCanvas) {
      ab ab = ac.a(this);
      if (ab != null) {
        ab.a(paramCanvas);
        return;
      } 
      if (getContext() instanceof ReactContext) {
        ((ReactContext)getContext()).handleException(new f("StackOverflowException", this, paramCanvas));
        return;
      } 
      throw paramCanvas;
    } 
  }
  
  @TargetApi(23)
  public void dispatchProvideStructure(ViewStructure paramViewStructure) {
    try {
      super.dispatchProvideStructure(paramViewStructure);
      return;
    } catch (NullPointerException paramViewStructure) {
      a.c("ReactNative", "NullPointerException when executing dispatchProvideStructure", paramViewStructure);
      return;
    } 
  }
  
  protected void dispatchSetPressed(boolean paramBoolean) {}
  
  int getAllChildrenCount() { return this.e; }
  
  public int getBackgroundColor() { return (getBackground() != null) ? ((d)getBackground()).d() : 0; }
  
  protected int getChildDrawingOrder(int paramInt1, int paramInt2) { return this.n.a(paramInt1, paramInt2); }
  
  public Rect getHitSlopRect() { return this.g; }
  
  public String getOverflow() { return this.h; }
  
  public p getPointerEvents() { return this.i; }
  
  public boolean getRemoveClippedSubviews() { return this.c; }
  
  public boolean hasOverlappingRendering() { return this.m; }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.c)
      a(); 
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) {
    b b1 = this.l;
    return (b1 != null && b1.a(this, paramMotionEvent)) ? true : ((this.i != p.a) ? ((this.i == p.c) ? true : super.onInterceptTouchEvent(paramMotionEvent)) : true);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    j.a(paramInt1, paramInt2);
    setMeasuredDimension(View.MeasureSpec.getSize(paramInt1), View.MeasureSpec.getSize(paramInt2));
  }
  
  public void onRtlPropertiesChanged(int paramInt) {
    if (Build.VERSION.SDK_INT >= 17) {
      d d1 = this.k;
      if (d1 != null)
        d1.b(this.p); 
    } 
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.c)
      a(); 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) { return !(this.i == p.a || this.i == p.b); }
  
  public void removeView(View paramView) {
    this.n.b(paramView);
    setChildrenDrawingOrderEnabled(this.n.a());
    super.removeView(paramView);
  }
  
  public void removeViewAt(int paramInt) {
    this.n.b(getChildAt(paramInt));
    setChildrenDrawingOrderEnabled(this.n.a());
    super.removeViewAt(paramInt);
  }
  
  @SuppressLint({"MissingSuperCall"})
  public void requestLayout() {}
  
  public void setBackfaceVisibility(String paramString) {
    this.r = paramString;
    d();
  }
  
  public void setBackground(Drawable paramDrawable) { throw new UnsupportedOperationException("This method is not supported for ReactViewGroup instances"); }
  
  public void setBackgroundColor(int paramInt) {
    if (paramInt == 0 && this.k == null)
      return; 
    getOrCreateReactViewBackground().a(paramInt);
  }
  
  public void setBorderRadius(float paramFloat) {
    d d1 = getOrCreateReactViewBackground();
    d1.a(paramFloat);
    if (Build.VERSION.SDK_INT < 18) {
      byte b1;
      if (d1.a()) {
        b1 = 1;
      } else {
        b1 = 2;
      } 
      if (b1 != getLayerType())
        setLayerType(b1, null); 
    } 
  }
  
  public void setBorderStyle(String paramString) { getOrCreateReactViewBackground().a(paramString); }
  
  public void setHitSlopRect(Rect paramRect) { this.g = paramRect; }
  
  public void setNeedsOffscreenAlphaCompositing(boolean paramBoolean) { this.m = paramBoolean; }
  
  public void setOnInterceptTouchEventListener(b paramb) { this.l = paramb; }
  
  public void setOpacityIfPossible(float paramFloat) {
    this.q = paramFloat;
    d();
  }
  
  public void setOverflow(String paramString) {
    this.h = paramString;
    invalidate();
  }
  
  void setPointerEvents(p paramp) { this.i = paramp; }
  
  public void setRemoveClippedSubviews(boolean paramBoolean) {
    if (paramBoolean == this.c)
      return; 
    this.c = paramBoolean;
    byte b1 = 0;
    if (paramBoolean) {
      this.f = new Rect();
      r.a(this, this.f);
      this.e = getChildCount();
      this.d = new View[Math.max(12, this.e)];
      this.j = new a(this, null);
      while (b1 < this.e) {
        View view = getChildAt(b1);
        this.d[b1] = view;
        view.addOnLayoutChangeListener(this.j);
        b1++;
      } 
      a();
      return;
    } 
    a.a(this.f);
    a.a(this.d);
    a.a(this.j);
    for (b1 = 0; b1 < this.e; b1++)
      this.d[b1].removeOnLayoutChangeListener(this.j); 
    getDrawingRect(this.f);
    b(this.f);
    this.d = null;
    this.f = null;
    this.e = 0;
    this.j = null;
  }
  
  public void setTranslucentBackgroundDrawable(Drawable paramDrawable) {
    a(null);
    d d1 = this.k;
    if (d1 != null && paramDrawable != null) {
      a(new LayerDrawable(new Drawable[] { d1, paramDrawable }));
      return;
    } 
    if (paramDrawable != null)
      a(paramDrawable); 
  }
}
