package com.facebook.react.views.modal;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewStructure;
import android.view.accessibility.AccessibilityEvent;
import android.widget.FrameLayout;
import com.facebook.i.a.a;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.f;
import com.facebook.react.views.a.a;
import java.util.ArrayList;

public class c extends ViewGroup implements LifecycleEventListener {
  private a a;
  
  private Dialog b;
  
  private boolean c;
  
  private String d;
  
  private boolean e;
  
  private boolean f;
  
  private DialogInterface.OnShowListener g;
  
  private b h;
  
  public c(Context paramContext) {
    super(paramContext);
    ((ReactContext)paramContext).addLifecycleEventListener(this);
    this.a = new a(paramContext);
  }
  
  private void c() {
    Dialog dialog = this.b;
    if (dialog != null) {
      if (dialog.isShowing()) {
        Activity activity = (Activity)a.a(this.b.getContext(), Activity.class);
        if (activity == null || !activity.isFinishing())
          this.b.dismiss(); 
      } 
      this.b = null;
      ((ViewGroup)this.a.getParent()).removeViewAt(0);
    } 
  }
  
  private void d() {
    a.a(this.b, "mDialog must exist when we call updateProperties");
    Activity activity = getCurrentActivity();
    if (activity != null)
      if (((activity.getWindow().getAttributes()).flags & 0x400) != 0) {
        this.b.getWindow().addFlags(1024);
      } else {
        this.b.getWindow().clearFlags(1024);
      }  
    if (this.c) {
      this.b.getWindow().clearFlags(2);
      return;
    } 
    this.b.getWindow().setDimAmount(0.5F);
    this.b.getWindow().setFlags(2, 2);
  }
  
  private View getContentView() {
    FrameLayout frameLayout = new FrameLayout(getContext());
    frameLayout.addView(this.a);
    frameLayout.setFitsSystemWindows(true);
    return frameLayout;
  }
  
  private Activity getCurrentActivity() { return ((ReactContext)getContext()).getCurrentActivity(); }
  
  public void a() {
    ((ReactContext)getContext()).removeLifecycleEventListener(this);
    c();
  }
  
  public void addChildrenForAccessibility(ArrayList<View> paramArrayList) {}
  
  public void addView(View paramView, int paramInt) { this.a.addView(paramView, paramInt); }
  
  protected void b() {
    Activity activity1;
    if (this.b != null)
      if (this.f) {
        c();
      } else {
        d();
        return;
      }  
    this.f = false;
    int i = f.c.Theme_FullScreenDialog;
    if (this.d.equals("fade")) {
      i = f.c.Theme_FullScreenDialogAnimatedFade;
    } else if (this.d.equals("slide")) {
      i = f.c.Theme_FullScreenDialogAnimatedSlide;
    } 
    Activity activity2 = getCurrentActivity();
    if (activity2 == null) {
      activity1 = getContext();
    } else {
      activity1 = activity2;
    } 
    this.b = new Dialog(activity1, i);
    this.b.setContentView(getContentView());
    d();
    this.b.setOnShowListener(this.g);
    this.b.setOnKeyListener(new Object(this));
    this.b.getWindow().setSoftInputMode(16);
    if (this.e)
      this.b.getWindow().addFlags(16777216); 
    if (activity2 != null && !activity2.isFinishing())
      this.b.show(); 
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent) { return false; }
  
  @TargetApi(23)
  public void dispatchProvideStructure(ViewStructure paramViewStructure) { this.a.dispatchProvideStructure(paramViewStructure); }
  
  public View getChildAt(int paramInt) { return this.a.getChildAt(paramInt); }
  
  public int getChildCount() { return this.a.getChildCount(); }
  
  public Dialog getDialog() { return this.b; }
  
  public void onHostDestroy() { a(); }
  
  public void onHostPause() {}
  
  public void onHostResume() { b(); }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {}
  
  public void removeView(View paramView) { this.a.removeView(paramView); }
  
  public void removeViewAt(int paramInt) {
    View view = getChildAt(paramInt);
    this.a.removeView(view);
  }
  
  protected void setAnimationType(String paramString) {
    this.d = paramString;
    this.f = true;
  }
  
  protected void setHardwareAccelerated(boolean paramBoolean) {
    this.e = paramBoolean;
    this.f = true;
  }
  
  protected void setOnRequestCloseListener(b paramb) { this.h = paramb; }
  
  protected void setOnShowListener(DialogInterface.OnShowListener paramOnShowListener) { this.g = paramOnShowListener; }
  
  protected void setTransparent(boolean paramBoolean) { this.c = paramBoolean; }
}
