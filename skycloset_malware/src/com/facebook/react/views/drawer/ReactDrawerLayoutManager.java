package com.facebook.react.views.drawer;

import android.os.Build;
import android.view.View;
import android.view.ViewGroup;
import com.facebook.common.e.a;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.o;
import java.util.Map;

@a(a = "AndroidDrawerLayout")
public class ReactDrawerLayoutManager extends ViewGroupManager<a> {
  public static final int CLOSE_DRAWER = 2;
  
  public static final int OPEN_DRAWER = 1;
  
  protected static final String REACT_CLASS = "AndroidDrawerLayout";
  
  protected void addEventEmitters(af paramaf, a parama) { parama.setDrawerListener(new a(parama, ((UIManagerModule)paramaf.getNativeModule(UIManagerModule.class)).getEventDispatcher())); }
  
  public void addView(a parama, View paramView, int paramInt) {
    if (getChildCount(parama) < 2) {
      if (paramInt == 0 || paramInt == 1) {
        parama.addView(paramView, paramInt);
        parama.g();
        return;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("The only valid indices for drawer's child are 0 or 1. Got ");
      stringBuilder.append(paramInt);
      stringBuilder.append(" instead.");
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    throw new JSApplicationIllegalArgumentException("The Drawer cannot have more than two children");
  }
  
  protected a createViewInstance(af paramaf) { return new a(paramaf); }
  
  public Map<String, Integer> getCommandsMap() { return e.a("openDrawer", Integer.valueOf(1), "closeDrawer", Integer.valueOf(2)); }
  
  @a(a = "drawerWidth", d = NaNF)
  public void getDrawerWidth(a parama, float paramFloat) {
    int i;
    if (Float.isNaN(paramFloat)) {
      i = -1;
    } else {
      i = Math.round(o.a(paramFloat));
    } 
    parama.h(i);
  }
  
  public Map getExportedCustomDirectEventTypeConstants() { return e.a("topDrawerSlide", e.a("registrationName", "onDrawerSlide"), "topDrawerOpened", e.a("registrationName", "onDrawerOpen"), "topDrawerClosed", e.a("registrationName", "onDrawerClose"), "topDrawerStateChanged", e.a("registrationName", "onDrawerStateChanged")); }
  
  public Map getExportedViewConstants() { return e.a("DrawerPosition", e.a("Left", Integer.valueOf(8388611), "Right", Integer.valueOf(8388613))); }
  
  public String getName() { return "AndroidDrawerLayout"; }
  
  public boolean needsCustomLayoutForChildren() { return true; }
  
  public void receiveCommand(a parama, int paramInt, ReadableArray paramReadableArray) {
    switch (paramInt) {
      default:
        return;
      case 2:
        parama.f();
        return;
      case 1:
        break;
    } 
    parama.e();
  }
  
  @a(a = "drawerLockMode")
  public void setDrawerLockMode(a parama, String paramString) {
    byte b;
    StringBuilder stringBuilder;
    if (paramString == null || "unlocked".equals(paramString)) {
      b = 0;
    } else if ("locked-closed".equals(paramString)) {
      b = 1;
    } else if ("locked-open".equals(paramString)) {
      b = 2;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Unknown drawerLockMode ");
      stringBuilder.append(paramString);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.setDrawerLockMode(b);
  }
  
  @a(a = "drawerPosition", e = 8388611)
  public void setDrawerPosition(a parama, int paramInt) {
    if (8388611 == paramInt || 8388613 == paramInt) {
      parama.g(paramInt);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unknown drawerPosition ");
    stringBuilder.append(paramInt);
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  public void setElevation(a parama, float paramFloat) {
    if (Build.VERSION.SDK_INT >= 21)
      try {
        a.class.getMethod("setDrawerElevation", new Class[] { float.class }).invoke(parama, new Object[] { Float.valueOf(o.a(paramFloat)) });
        return;
      } catch (Exception parama) {
        a.b("ReactNative", "setDrawerElevation is not available in this version of the support lib.", parama);
      }  
  }
}
