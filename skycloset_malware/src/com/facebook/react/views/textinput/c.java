package com.facebook.react.views.textinput;

import android.content.Context;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.text.Editable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.method.KeyListener;
import android.text.method.QwertyKeyListener;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.views.text.q;
import com.facebook.react.views.text.w;
import com.facebook.react.views.text.x;
import com.facebook.react.views.view.e;
import java.util.ArrayList;

public class c extends EditText {
  private static final KeyListener w = QwertyKeyListener.getInstanceForFullKeyboard();
  
  private final InputMethodManager a;
  
  private boolean b;
  
  private boolean c;
  
  private int d;
  
  private int e;
  
  private int f;
  
  private int g;
  
  private ArrayList<TextWatcher> h;
  
  private b i;
  
  private int j;
  
  private boolean k;
  
  private Boolean l;
  
  private boolean m;
  
  private String n;
  
  private p o;
  
  private a p;
  
  private o q;
  
  private final a r;
  
  private boolean s = false;
  
  private boolean t = false;
  
  private w u;
  
  private e v;
  
  public c(Context paramContext) {
    super(paramContext);
    setFocusableInTouchMode(false);
    this.v = new e(this);
    this.a = (InputMethodManager)a.a(getContext().getSystemService("input_method"));
    this.d = getGravity() & 0x800007;
    this.e = getGravity() & 0x70;
    this.f = 0;
    this.g = 0;
    this.b = false;
    this.c = false;
    this.l = null;
    this.m = false;
    this.h = null;
    this.i = null;
    this.j = getInputType();
    this.r = new a();
    this.q = null;
    this.u = new w();
    e();
  }
  
  private void a(SpannableStringBuilder paramSpannableStringBuilder) {
    Editable editable = getText();
    int i1 = length();
    byte b1 = 0;
    Object[] arrayOfObject = editable.getSpans(0, i1, Object.class);
    while (b1 < arrayOfObject.length) {
      if (arrayOfObject[b1] instanceof com.facebook.react.views.text.l)
        getText().removeSpan(arrayOfObject[b1]); 
      if ((getText().getSpanFlags(arrayOfObject[b1]) & 0x21) == 33) {
        Object object = arrayOfObject[b1];
        i1 = getText().getSpanStart(arrayOfObject[b1]);
        int i2 = getText().getSpanEnd(arrayOfObject[b1]);
        int i3 = getText().getSpanFlags(arrayOfObject[b1]);
        getText().removeSpan(arrayOfObject[b1]);
        if (a(getText(), paramSpannableStringBuilder, i1, i2))
          paramSpannableStringBuilder.setSpan(object, i1, i2, i3); 
      } 
      b1++;
    } 
  }
  
  private static boolean a(Editable paramEditable, SpannableStringBuilder paramSpannableStringBuilder, int paramInt1, int paramInt2) {
    if (paramInt1 <= paramSpannableStringBuilder.length()) {
      if (paramInt2 > paramSpannableStringBuilder.length())
        return false; 
      while (paramInt1 < paramInt2) {
        if (paramEditable.charAt(paramInt1) != paramSpannableStringBuilder.charAt(paramInt1))
          return false; 
        paramInt1++;
      } 
      return true;
    } 
    return false;
  }
  
  private boolean g() { return this.a.showSoftInput(this, 0); }
  
  private b getTextWatcherDelegator() {
    if (this.i == null)
      this.i = new b(this, null); 
    return this.i;
  }
  
  private void h() { this.a.hideSoftInputFromWindow(getWindowToken(), 0); }
  
  private boolean i() { return ((getInputType() & 0x20000) != 0); }
  
  private boolean j() { return ((getInputType() & 0x90) != 0); }
  
  private void k() {
    a a1 = this.p;
    if (a1 != null)
      a1.a(); 
    l();
  }
  
  private void l() {
    UIManagerModule uIManagerModule = (UIManagerModule)((ReactContext)getContext()).getNativeModule(UIManagerModule.class);
    k k1 = new k(this);
    uIManagerModule.setViewLocalData(getId(), k1);
  }
  
  private void m() {
    String str = this.n;
    byte b1 = 4;
    if (str != null) {
      byte b2;
      switch (str.hashCode()) {
        default:
          b2 = -1;
          break;
        case 3526536:
          if (str.equals("send")) {
            b2 = 5;
            break;
          } 
        case 3387192:
          if (str.equals("none")) {
            b2 = 2;
            break;
          } 
        case 3377907:
          if (str.equals("next")) {
            b2 = 1;
            break;
          } 
        case 3089282:
          if (str.equals("done")) {
            b2 = 6;
            break;
          } 
        case 3304:
          if (str.equals("go")) {
            b2 = 0;
            break;
          } 
        case -906336856:
          if (str.equals("search")) {
            b2 = 4;
            break;
          } 
        case -1273775369:
          if (str.equals("previous")) {
            b2 = 3;
            break;
          } 
      } 
      switch (b2) {
        default:
          b1 = 6;
          break;
        case 4:
          b1 = 3;
          break;
        case 3:
          b1 = 7;
          break;
        case 2:
          b1 = 1;
          break;
        case 1:
          b1 = 5;
          break;
        case 0:
          b1 = 2;
          break;
        case 6:
          b1 = 6;
          break;
        case 5:
          break;
      } 
      if (this.m) {
        setImeOptions(0x2000000 | b1);
        return;
      } 
      setImeOptions(b1);
      return;
    } 
  }
  
  void a() {
    if (getInputType() != this.j) {
      int i1 = getSelectionStart();
      int i2 = getSelectionEnd();
      setInputType(this.j);
      setSelection(i1, i2);
    } 
  }
  
  public void a(float paramFloat, int paramInt) { this.v.a(paramFloat, paramInt); }
  
  public void a(int paramInt, float paramFloat) { this.v.a(paramInt, paramFloat); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2) { this.v.a(paramInt, paramFloat1, paramFloat2); }
  
  public void a(q paramq) {
    if (j() && TextUtils.equals(getText(), paramq.a()))
      return; 
    this.g = paramq.b();
    if (this.g < this.f)
      return; 
    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(paramq.a());
    a(spannableStringBuilder);
    this.k = paramq.c();
    this.b = true;
    getText().replace(0, length(), spannableStringBuilder);
    this.b = false;
    if (Build.VERSION.SDK_INT >= 23 && getBreakStrategy() != paramq.i())
      setBreakStrategy(paramq.i()); 
  }
  
  public void addTextChangedListener(TextWatcher paramTextWatcher) {
    if (this.h == null) {
      this.h = new ArrayList();
      super.addTextChangedListener(getTextWatcherDelegator());
    } 
    this.h.add(paramTextWatcher);
  }
  
  public void b() {
    this.c = true;
    requestFocus();
    this.c = false;
  }
  
  void c() { clearFocus(); }
  
  public void clearFocus() {
    setFocusableInTouchMode(false);
    super.clearFocus();
    h();
  }
  
  public int d() {
    int i1 = this.f + 1;
    this.f = i1;
    return i1;
  }
  
  protected void e() {
    setTextSize(0, this.u.h());
    if (Build.VERSION.SDK_INT >= 21) {
      float f1 = this.u.j();
      if (!Float.isNaN(f1))
        setLetterSpacing(f1); 
    } 
  }
  
  public boolean getBlurOnSubmit() {
    Boolean bool = this.l;
    return (bool == null) ? (i() ^ true) : bool.booleanValue();
  }
  
  public boolean getDisableFullscreenUI() { return this.m; }
  
  public String getReturnKeyType() { return this.n; }
  
  int getStagedInputType() { return this.j; }
  
  public void invalidateDrawable(Drawable paramDrawable) {
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        if (arrayOfx[b1].a() == paramDrawable)
          invalidate(); 
        b1++;
      } 
    } 
    super.invalidateDrawable(paramDrawable);
  }
  
  public boolean isLayoutRequested() { return false; }
  
  public void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        arrayOfx[b1].d();
        b1++;
      } 
    } 
  }
  
  public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo) {
    ReactContext reactContext = (ReactContext)getContext();
    InputConnection inputConnection = super.onCreateInputConnection(paramEditorInfo);
    d d1 = inputConnection;
    if (inputConnection != null) {
      d1 = inputConnection;
      if (this.t)
        d1 = new d(inputConnection, reactContext, this); 
    } 
    if (i() && getBlurOnSubmit())
      paramEditorInfo.imeOptions &= 0xBFFFFFFF; 
    return d1;
  }
  
  public void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        arrayOfx[b1].b();
        b1++;
      } 
    } 
  }
  
  public void onFinishTemporaryDetach() {
    super.onFinishTemporaryDetach();
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        arrayOfx[b1].e();
        b1++;
      } 
    } 
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect) {
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    if (paramBoolean) {
      p p1 = this.o;
      if (p1 != null)
        p1.a(getSelectionStart(), getSelectionEnd()); 
    } 
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent) {
    if (paramInt == 66 && !i()) {
      h();
      return true;
    } 
    return super.onKeyUp(paramInt, paramKeyEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { k(); }
  
  protected void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    o o1 = this.q;
    if (o1 != null)
      o1.a(paramInt1, paramInt2, paramInt3, paramInt4); 
  }
  
  protected void onSelectionChanged(int paramInt1, int paramInt2) {
    super.onSelectionChanged(paramInt1, paramInt2);
    if (this.o != null && hasFocus())
      this.o.a(paramInt1, paramInt2); 
  }
  
  public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        arrayOfx[b1].c();
        b1++;
      } 
    } 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    int i1 = paramMotionEvent.getAction();
    if (i1 != 0) {
      if (i1 == 2 && this.s) {
        if (!canScrollVertically(-1) && !canScrollVertically(1) && !canScrollHorizontally(-1) && !canScrollHorizontally(1))
          getParent().requestDisallowInterceptTouchEvent(false); 
        this.s = false;
      } 
    } else {
      this.s = true;
      getParent().requestDisallowInterceptTouchEvent(true);
    } 
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void removeTextChangedListener(TextWatcher paramTextWatcher) {
    ArrayList arrayList = this.h;
    if (arrayList != null) {
      arrayList.remove(paramTextWatcher);
      if (this.h.isEmpty()) {
        this.h = null;
        super.removeTextChangedListener(getTextWatcherDelegator());
      } 
    } 
  }
  
  public boolean requestFocus(int paramInt, Rect paramRect) {
    if (isFocused())
      return true; 
    if (!this.c)
      return false; 
    setFocusableInTouchMode(true);
    boolean bool = super.requestFocus(paramInt, paramRect);
    g();
    return bool;
  }
  
  public void setAllowFontScaling(boolean paramBoolean) {
    if (this.u.a() != paramBoolean) {
      this.u.a(paramBoolean);
      e();
    } 
  }
  
  public void setBackgroundColor(int paramInt) { this.v.a(paramInt); }
  
  public void setBlurOnSubmit(Boolean paramBoolean) { this.l = paramBoolean; }
  
  public void setBorderRadius(float paramFloat) { this.v.a(paramFloat); }
  
  public void setBorderStyle(String paramString) { this.v.a(paramString); }
  
  public void setContentSizeWatcher(a parama) { this.p = parama; }
  
  public void setDisableFullscreenUI(boolean paramBoolean) {
    this.m = paramBoolean;
    m();
  }
  
  public void setFontSize(float paramFloat) {
    this.u.a(paramFloat);
    e();
  }
  
  void setGravityHorizontal(int paramInt) {
    int i1 = paramInt;
    if (paramInt == 0)
      i1 = this.d; 
    setGravity(i1 | getGravity() & 0xFFFFFFF8 & 0xFF7FFFF8);
  }
  
  void setGravityVertical(int paramInt) {
    int i1 = paramInt;
    if (paramInt == 0)
      i1 = this.e; 
    setGravity(i1 | getGravity() & 0xFFFFFF8F);
  }
  
  public void setInputType(int paramInt) {
    Typeface typeface = getTypeface();
    super.setInputType(paramInt);
    this.j = paramInt;
    setTypeface(typeface);
    this.r.a(paramInt);
    setKeyListener(this.r);
  }
  
  public void setLetterSpacingPt(float paramFloat) {
    this.u.c(paramFloat);
    e();
  }
  
  public void setMaxFontSizeMultiplier(float paramFloat) {
    if (paramFloat != this.u.e()) {
      this.u.d(paramFloat);
      e();
    } 
  }
  
  public void setMostRecentEventCount(int paramInt) { this.g = paramInt; }
  
  public void setOnKeyPress(boolean paramBoolean) { this.t = paramBoolean; }
  
  public void setReturnKeyType(String paramString) {
    this.n = paramString;
    m();
  }
  
  public void setScrollWatcher(o paramo) { this.q = paramo; }
  
  public void setSelection(int paramInt1, int paramInt2) {
    if (this.g < this.f)
      return; 
    super.setSelection(paramInt1, paramInt2);
  }
  
  public void setSelectionWatcher(p paramp) { this.o = paramp; }
  
  void setStagedInputType(int paramInt) { this.j = paramInt; }
  
  protected boolean verifyDrawable(Drawable paramDrawable) {
    if (this.k) {
      Editable editable = getText();
      int i1 = editable.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])editable.getSpans(0, i1, x.class);
      i1 = arrayOfx.length;
      while (b1 < i1) {
        if (arrayOfx[b1].a() == paramDrawable)
          return true; 
        b1++;
      } 
    } 
    return super.verifyDrawable(paramDrawable);
  }
}
