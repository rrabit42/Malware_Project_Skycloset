package com.facebook.react.views.textinput;

import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.v4.a.a;
import android.text.InputFilter;
import android.view.View;
import com.facebook.common.e.a;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.BaseViewManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.h;
import com.facebook.react.uimanager.o;
import com.facebook.react.uimanager.w;
import com.facebook.react.views.b.c;
import com.facebook.react.views.scroll.i;
import com.facebook.react.views.text.d;
import com.facebook.react.views.text.i;
import com.facebook.react.views.text.q;
import com.facebook.react.views.text.x;
import com.facebook.yoga.a;
import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.Map;

@a(a = "AndroidTextInput")
public class ReactTextInputManager extends BaseViewManager<c, h> {
  private static final int BLUR_TEXT_INPUT = 2;
  
  private static final InputFilter[] EMPTY_FILTERS;
  
  private static final int FOCUS_TEXT_INPUT = 1;
  
  private static final int IME_ACTION_ID = 1648;
  
  private static final int INPUT_TYPE_KEYBOARD_DECIMAL_PAD = 8194;
  
  private static final int INPUT_TYPE_KEYBOARD_NUMBERED = 12290;
  
  private static final int INPUT_TYPE_KEYBOARD_NUMBER_PAD = 2;
  
  private static final String KEYBOARD_TYPE_DECIMAL_PAD = "decimal-pad";
  
  private static final String KEYBOARD_TYPE_EMAIL_ADDRESS = "email-address";
  
  private static final int KEYBOARD_TYPE_FLAGS = 12339;
  
  private static final String KEYBOARD_TYPE_NUMBER_PAD = "number-pad";
  
  private static final String KEYBOARD_TYPE_NUMERIC = "numeric";
  
  private static final String KEYBOARD_TYPE_PHONE_PAD = "phone-pad";
  
  private static final String KEYBOARD_TYPE_VISIBLE_PASSWORD = "visible-password";
  
  private static final int PASSWORD_VISIBILITY_FLAG = 16;
  
  protected static final String REACT_CLASS = "AndroidTextInput";
  
  private static final int[] SPACING_TYPES = { 8, 0, 2, 1, 3 };
  
  public static final String TAG = "ReactTextInputManager";
  
  private static final int UNSET = -1;
  
  static  {
    EMPTY_FILTERS = new InputFilter[0];
  }
  
  private static void checkPasswordType(c paramc) {
    if ((paramc.getStagedInputType() & 0x3002) != 0 && (paramc.getStagedInputType() & 0x80) != 0)
      updateStagedInputTypeFlag(paramc, 128, 16); 
  }
  
  private static int parseNumericFontWeight(String paramString) { return (paramString.length() == 3 && paramString.endsWith("00") && paramString.charAt(0) <= '9' && paramString.charAt(0) >= '1') ? ((paramString.charAt(0) - '0') * 'd') : -1; }
  
  private void setCursorColor(c paramc, Integer paramInteger) {
    try {
      Field field2 = android.widget.TextView.class.getDeclaredField("mCursorDrawableRes");
      field2.setAccessible(true);
      int i = field2.getInt(paramc);
      if (i == 0)
        return; 
      Drawable drawable = a.a(paramc.getContext(), i);
      if (paramInteger != null)
        drawable.setColorFilter(paramInteger.intValue(), PorterDuff.Mode.SRC_IN); 
      Field field1 = android.widget.TextView.class.getDeclaredField("mEditor");
      field1.setAccessible(true);
      Object object = field1.get(paramc);
      field1 = object.getClass().getDeclaredField("mCursorDrawable");
      field1.setAccessible(true);
      field1.set(object, new Drawable[] { drawable, drawable });
      return;
    } catch (NoSuchFieldException|IllegalAccessException paramc) {
      return;
    } 
  }
  
  private static void updateStagedInputTypeFlag(c paramc, int paramInt1, int paramInt2) { paramc.setStagedInputType(paramInt1 & paramc.getStagedInputType() | paramInt2); }
  
  protected void addEventEmitters(af paramaf, c paramc) {
    paramc.addTextChangedListener(new d(this, paramaf, paramc));
    paramc.setOnFocusChangeListener(new Object(this, paramaf, paramc));
    paramc.setOnEditorActionListener(new Object(this, paramc, paramaf));
  }
  
  public h createShadowNodeInstance() { return new m(); }
  
  public c createViewInstance(af paramaf) {
    c c = new c(paramaf);
    c.setInputType(c.getInputType() & 0xFFFDFFFF);
    c.setReturnKeyType("done");
    return c;
  }
  
  public Map<String, Integer> getCommandsMap() { return e.a("focusTextInput", Integer.valueOf(1), "blurTextInput", Integer.valueOf(2)); }
  
  public Map<String, Object> getExportedCustomBubblingEventTypeConstants() { return e.c().a("topSubmitEditing", e.a("phasedRegistrationNames", e.a("bubbled", "onSubmitEditing", "captured", "onSubmitEditingCapture"))).a("topEndEditing", e.a("phasedRegistrationNames", e.a("bubbled", "onEndEditing", "captured", "onEndEditingCapture"))).a("topTextInput", e.a("phasedRegistrationNames", e.a("bubbled", "onTextInput", "captured", "onTextInputCapture"))).a("topFocus", e.a("phasedRegistrationNames", e.a("bubbled", "onFocus", "captured", "onFocusCapture"))).a("topBlur", e.a("phasedRegistrationNames", e.a("bubbled", "onBlur", "captured", "onBlurCapture"))).a("topKeyPress", e.a("phasedRegistrationNames", e.a("bubbled", "onKeyPress", "captured", "onKeyPressCapture"))).a(); }
  
  public Map<String, Object> getExportedCustomDirectEventTypeConstants() { return e.c().a(i.a(i.c), e.a("registrationName", "onScroll")).a(); }
  
  public Map getExportedViewConstants() { return e.a("AutoCapitalizationType", e.a("none", Integer.valueOf(0), "characters", Integer.valueOf(4096), "words", Integer.valueOf(8192), "sentences", Integer.valueOf(16384))); }
  
  public String getName() { return "AndroidTextInput"; }
  
  public Class<? extends h> getShadowNodeClass() { return m.class; }
  
  protected void onAfterUpdateTransaction(c paramc) {
    super.onAfterUpdateTransaction(paramc);
    paramc.a();
  }
  
  public void receiveCommand(c paramc, int paramInt, ReadableArray paramReadableArray) {
    switch (paramInt) {
      default:
        return;
      case 2:
        paramc.c();
        return;
      case 1:
        break;
    } 
    paramc.b();
  }
  
  @a(a = "allowFontScaling", f = true)
  public void setAllowFontScaling(c paramc, boolean paramBoolean) { paramc.setAllowFontScaling(paramBoolean); }
  
  @a(a = "autoCapitalize")
  public void setAutoCapitalize(c paramc, int paramInt) { updateStagedInputTypeFlag(paramc, 28672, paramInt); }
  
  @a(a = "autoCorrect")
  public void setAutoCorrect(c paramc, Boolean paramBoolean) {
    byte b;
    if (paramBoolean != null) {
      if (paramBoolean.booleanValue()) {
        b = 32768;
      } else {
        b = 524288;
      } 
    } else {
      b = 0;
    } 
    updateStagedInputTypeFlag(paramc, 557056, b);
  }
  
  @a(a = "blurOnSubmit")
  public void setBlurOnSubmit(c paramc, Boolean paramBoolean) { paramc.setBlurOnSubmit(paramBoolean); }
  
  @b(a = {"borderColor", "borderLeftColor", "borderRightColor", "borderTopColor", "borderBottomColor"}, b = "Color")
  public void setBorderColor(c paramc, int paramInt, Integer paramInteger) {
    float f1;
    float f2 = NaNF;
    if (paramInteger == null) {
      f1 = NaNF;
    } else {
      f1 = (paramInteger.intValue() & 0xFFFFFF);
    } 
    if (paramInteger != null)
      f2 = (paramInteger.intValue() >>> 24); 
    paramc.a(SPACING_TYPES[paramInt], f1, f2);
  }
  
  @b(a = {"borderRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"}, c = NaNF)
  public void setBorderRadius(c paramc, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    if (paramInt == 0) {
      paramc.setBorderRadius(f);
      return;
    } 
    paramc.a(f, paramInt - 1);
  }
  
  @a(a = "borderStyle")
  public void setBorderStyle(c paramc, String paramString) { paramc.setBorderStyle(paramString); }
  
  @b(a = {"borderWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"}, c = NaNF)
  public void setBorderWidth(c paramc, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    paramc.a(SPACING_TYPES[paramInt], f);
  }
  
  @a(a = "caretHidden", f = false)
  public void setCaretHidden(c paramc, boolean paramBoolean) { paramc.setCursorVisible(paramBoolean ^ true); }
  
  @a(a = "color", b = "Color")
  public void setColor(c paramc, Integer paramInteger) {
    if (paramInteger == null) {
      paramc.setTextColor(d.b(paramc.getContext()));
      return;
    } 
    paramc.setTextColor(paramInteger.intValue());
  }
  
  @a(a = "contextMenuHidden", f = false)
  public void setContextMenuHidden(c paramc, boolean paramBoolean) { paramc.setOnLongClickListener(new Object(this, paramBoolean)); }
  
  @a(a = "disableFullscreenUI", f = false)
  public void setDisableFullscreenUI(c paramc, boolean paramBoolean) { paramc.setDisableFullscreenUI(paramBoolean); }
  
  @a(a = "editable", f = true)
  public void setEditable(c paramc, boolean paramBoolean) { paramc.setEnabled(paramBoolean); }
  
  @a(a = "fontFamily")
  public void setFontFamily(c paramc, String paramString) {
    byte b;
    if (paramc.getTypeface() != null) {
      b = paramc.getTypeface().getStyle();
    } else {
      b = 0;
    } 
    paramc.setTypeface(i.a().a(paramString, b, paramc.getContext().getAssets()));
  }
  
  @a(a = "fontSize", d = 14.0F)
  public void setFontSize(c paramc, float paramFloat) { paramc.setFontSize(paramFloat); }
  
  @a(a = "fontStyle")
  public void setFontStyle(c paramc, String paramString) {
    byte b;
    if ("italic".equals(paramString)) {
      b = 2;
    } else if ("normal".equals(paramString)) {
      b = 0;
    } else {
      b = -1;
    } 
    Typeface typeface2 = paramc.getTypeface();
    Typeface typeface1 = typeface2;
    if (typeface2 == null)
      typeface1 = Typeface.DEFAULT; 
    if (b != typeface1.getStyle())
      paramc.setTypeface(typeface1, b); 
  }
  
  @a(a = "fontWeight")
  public void setFontWeight(c paramc, String paramString) { // Byte code:
    //   0: iconst_m1
    //   1: istore #5
    //   3: aload_2
    //   4: ifnull -> 16
    //   7: aload_2
    //   8: invokestatic parseNumericFontWeight : (Ljava/lang/String;)I
    //   11: istore #4
    //   13: goto -> 19
    //   16: iconst_m1
    //   17: istore #4
    //   19: iload #4
    //   21: sipush #500
    //   24: if_icmpge -> 75
    //   27: ldc_w 'bold'
    //   30: aload_2
    //   31: invokevirtual equals : (Ljava/lang/Object;)Z
    //   34: ifeq -> 40
    //   37: goto -> 75
    //   40: ldc_w 'normal'
    //   43: aload_2
    //   44: invokevirtual equals : (Ljava/lang/Object;)Z
    //   47: ifne -> 70
    //   50: iload #5
    //   52: istore_3
    //   53: iload #4
    //   55: iconst_m1
    //   56: if_icmpeq -> 77
    //   59: iload #5
    //   61: istore_3
    //   62: iload #4
    //   64: sipush #500
    //   67: if_icmpge -> 77
    //   70: iconst_0
    //   71: istore_3
    //   72: goto -> 77
    //   75: iconst_1
    //   76: istore_3
    //   77: aload_1
    //   78: invokevirtual getTypeface : ()Landroid/graphics/Typeface;
    //   81: astore #6
    //   83: aload #6
    //   85: astore_2
    //   86: aload #6
    //   88: ifnonnull -> 95
    //   91: getstatic android/graphics/Typeface.DEFAULT : Landroid/graphics/Typeface;
    //   94: astore_2
    //   95: iload_3
    //   96: aload_2
    //   97: invokevirtual getStyle : ()I
    //   100: if_icmpeq -> 109
    //   103: aload_1
    //   104: aload_2
    //   105: iload_3
    //   106: invokevirtual setTypeface : (Landroid/graphics/Typeface;I)V
    //   109: return }
  
  @a(a = "importantForAutofill")
  public void setImportantForAutofill(c paramc, String paramString) {
    if (Build.VERSION.SDK_INT < 26)
      return; 
    byte b = 0;
    if ("no".equals(paramString)) {
      b = 2;
    } else if ("noExcludeDescendants".equals(paramString)) {
      b = 8;
    } else if ("yes".equals(paramString)) {
      b = 1;
    } else if ("yesExcludeDescendants".equals(paramString)) {
      b = 4;
    } 
    paramc.setImportantForAutofill(b);
  }
  
  @a(a = "inlineImageLeft")
  public void setInlineImageLeft(c paramc, String paramString) { paramc.setCompoundDrawablesWithIntrinsicBounds(c.a().a(paramc.getContext(), paramString), 0, 0, 0); }
  
  @a(a = "inlineImagePadding")
  public void setInlineImagePadding(c paramc, int paramInt) { paramc.setCompoundDrawablePadding(paramInt); }
  
  @a(a = "keyboardType")
  public void setKeyboardType(c paramc, String paramString) {
    byte b;
    if ("numeric".equalsIgnoreCase(paramString)) {
      b = 12290;
    } else if ("number-pad".equalsIgnoreCase(paramString)) {
      b = 2;
    } else if ("decimal-pad".equalsIgnoreCase(paramString)) {
      b = 8194;
    } else if ("email-address".equalsIgnoreCase(paramString)) {
      b = 33;
    } else if ("phone-pad".equalsIgnoreCase(paramString)) {
      b = 3;
    } else if ("visible-password".equalsIgnoreCase(paramString)) {
      b = 144;
    } else {
      b = 1;
    } 
    updateStagedInputTypeFlag(paramc, 12339, b);
    checkPasswordType(paramc);
  }
  
  @a(a = "letterSpacing", d = 0.0F)
  public void setLetterSpacing(c paramc, float paramFloat) { paramc.setLetterSpacingPt(paramFloat); }
  
  @a(a = "maxFontSizeMultiplier", d = NaNF)
  public void setMaxFontSizeMultiplier(c paramc, float paramFloat) { paramc.setMaxFontSizeMultiplier(paramFloat); }
  
  @a(a = "maxLength")
  public void setMaxLength(c paramc, Integer paramInteger) {
    InputFilter[] arrayOfInputFilter1;
    InputFilter[] arrayOfInputFilter2 = paramc.getFilters();
    InputFilter[] arrayOfInputFilter3 = EMPTY_FILTERS;
    byte b = 0;
    if (paramInteger == null) {
      arrayOfInputFilter1 = arrayOfInputFilter3;
      if (arrayOfInputFilter2.length > 0) {
        LinkedList linkedList = new LinkedList();
        while (b < arrayOfInputFilter2.length) {
          if (!(arrayOfInputFilter2[b] instanceof InputFilter.LengthFilter))
            linkedList.add(arrayOfInputFilter2[b]); 
          b++;
        } 
        arrayOfInputFilter1 = arrayOfInputFilter3;
        if (!linkedList.isEmpty())
          arrayOfInputFilter1 = (InputFilter[])linkedList.toArray(new InputFilter[linkedList.size()]); 
      } 
    } else if (arrayOfInputFilter2.length > 0) {
      b = 0;
      byte b1 = b;
      while (b < arrayOfInputFilter2.length) {
        if (arrayOfInputFilter2[b] instanceof InputFilter.LengthFilter) {
          arrayOfInputFilter2[b] = new InputFilter.LengthFilter(arrayOfInputFilter1.intValue());
          b1 = 1;
        } 
        b++;
      } 
      if (b1 == 0) {
        arrayOfInputFilter3 = new InputFilter[arrayOfInputFilter2.length + 1];
        System.arraycopy(arrayOfInputFilter2, 0, arrayOfInputFilter3, 0, arrayOfInputFilter2.length);
        arrayOfInputFilter2[arrayOfInputFilter2.length] = new InputFilter.LengthFilter(arrayOfInputFilter1.intValue());
        arrayOfInputFilter1 = arrayOfInputFilter3;
      } else {
        arrayOfInputFilter1 = arrayOfInputFilter2;
      } 
    } else {
      arrayOfInputFilter2 = new InputFilter[1];
      arrayOfInputFilter2[0] = new InputFilter.LengthFilter(arrayOfInputFilter1.intValue());
      arrayOfInputFilter1 = arrayOfInputFilter2;
    } 
    paramc.setFilters(arrayOfInputFilter1);
  }
  
  @a(a = "mostRecentEventCount", e = 0)
  public void setMostRecentEventCount(c paramc, int paramInt) { paramc.setMostRecentEventCount(paramInt); }
  
  @a(a = "multiline", f = false)
  public void setMultiline(c paramc, boolean paramBoolean) {
    int i;
    int j = 0;
    if (paramBoolean) {
      i = 0;
    } else {
      i = 131072;
    } 
    if (paramBoolean)
      j = 131072; 
    updateStagedInputTypeFlag(paramc, i, j);
  }
  
  @a(a = "numberOfLines", e = 1)
  public void setNumLines(c paramc, int paramInt) { paramc.setLines(paramInt); }
  
  @a(a = "onContentSizeChange", f = false)
  public void setOnContentSizeChange(c paramc, boolean paramBoolean) {
    a a;
    if (paramBoolean) {
      a = new a(this, paramc);
    } else {
      a = null;
    } 
    paramc.setContentSizeWatcher(a);
  }
  
  @a(a = "onKeyPress", f = false)
  public void setOnKeyPress(c paramc, boolean paramBoolean) { paramc.setOnKeyPress(paramBoolean); }
  
  @a(a = "onScroll", f = false)
  public void setOnScroll(c paramc, boolean paramBoolean) {
    o o;
    if (paramBoolean) {
      o = new b(this, paramc);
    } else {
      o = null;
    } 
    paramc.setScrollWatcher(o);
  }
  
  @a(a = "onSelectionChange", f = false)
  public void setOnSelectionChange(c paramc, boolean paramBoolean) {
    p p;
    if (paramBoolean) {
      p = new c(this, paramc);
    } else {
      p = null;
    } 
    paramc.setSelectionWatcher(p);
  }
  
  @a(a = "placeholder")
  public void setPlaceholder(c paramc, String paramString) { paramc.setHint(paramString); }
  
  @a(a = "placeholderTextColor", b = "Color")
  public void setPlaceholderTextColor(c paramc, Integer paramInteger) {
    if (paramInteger == null) {
      paramc.setHintTextColor(d.a(paramc.getContext()));
      return;
    } 
    paramc.setHintTextColor(paramInteger.intValue());
  }
  
  @a(a = "returnKeyLabel")
  public void setReturnKeyLabel(c paramc, String paramString) { paramc.setImeActionLabel(paramString, 1648); }
  
  @a(a = "returnKeyType")
  public void setReturnKeyType(c paramc, String paramString) { paramc.setReturnKeyType(paramString); }
  
  @a(a = "secureTextEntry", f = false)
  public void setSecureTextEntry(c paramc, boolean paramBoolean) {
    char c1;
    char c2 = Character.MIN_VALUE;
    if (paramBoolean) {
      c1 = Character.MIN_VALUE;
    } else {
      c1 = '';
    } 
    if (paramBoolean)
      c2 = ''; 
    updateStagedInputTypeFlag(paramc, c1, c2);
    checkPasswordType(paramc);
  }
  
  @a(a = "selectTextOnFocus", f = false)
  public void setSelectTextOnFocus(c paramc, boolean paramBoolean) { paramc.setSelectAllOnFocus(paramBoolean); }
  
  @a(a = "selection")
  public void setSelection(c paramc, ReadableMap paramReadableMap) {
    if (paramReadableMap == null)
      return; 
    if (paramReadableMap.hasKey("start") && paramReadableMap.hasKey("end"))
      paramc.setSelection(paramReadableMap.getInt("start"), paramReadableMap.getInt("end")); 
  }
  
  @a(a = "selectionColor", b = "Color")
  public void setSelectionColor(c paramc, Integer paramInteger) {
    int i;
    if (paramInteger == null) {
      i = d.c(paramc.getContext());
    } else {
      i = paramInteger.intValue();
    } 
    paramc.setHighlightColor(i);
    setCursorColor(paramc, paramInteger);
  }
  
  @a(a = "textAlign")
  public void setTextAlign(c paramc, String paramString) {
    StringBuilder stringBuilder;
    if ("justify".equals(paramString)) {
      if (Build.VERSION.SDK_INT >= 26)
        paramc.setJustificationMode(1); 
    } else {
      if (Build.VERSION.SDK_INT >= 26)
        paramc.setJustificationMode(0); 
      if (paramString == null || "auto".equals(paramString)) {
        paramc.setGravityHorizontal(0);
        return;
      } 
      if (!"left".equals(paramString)) {
        if ("right".equals(paramString)) {
          paramc.setGravityHorizontal(5);
          return;
        } 
        if ("center".equals(paramString)) {
          paramc.setGravityHorizontal(1);
          return;
        } 
        stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid textAlign: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      } 
    } 
    stringBuilder.setGravityHorizontal(3);
  }
  
  @a(a = "textAlignVertical")
  public void setTextAlignVertical(c paramc, String paramString) {
    byte b;
    StringBuilder stringBuilder;
    if (paramString == null || "auto".equals(paramString)) {
      b = 0;
    } else if ("top".equals(paramString)) {
      b = 48;
    } else if ("bottom".equals(paramString)) {
      b = 80;
    } else if ("center".equals(paramString)) {
      b = 16;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textAlignVertical: ");
      stringBuilder.append(paramString);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.setGravityVertical(b);
  }
  
  @a(a = "autoComplete")
  public void setTextContentType(c paramc, String paramString) {
    StringBuilder stringBuilder;
    if (Build.VERSION.SDK_INT < 26)
      return; 
    if (paramString != null) {
      if ("username".equals(paramString)) {
        paramString = "username";
      } else if ("password".equals(paramString)) {
        paramString = "password";
      } else if ("email".equals(paramString)) {
        paramString = "emailAddress";
      } else if ("name".equals(paramString)) {
        paramString = "name";
      } else if ("tel".equals(paramString)) {
        paramString = "phone";
      } else if ("street-address".equals(paramString)) {
        paramString = "postalAddress";
      } else if ("postal-code".equals(paramString)) {
        paramString = "postalCode";
      } else if ("cc-number".equals(paramString)) {
        paramString = "creditCardNumber";
      } else if ("cc-csc".equals(paramString)) {
        paramString = "creditCardSecurityCode";
      } else if ("cc-exp".equals(paramString)) {
        paramString = "creditCardExpirationDate";
      } else if ("cc-exp-month".equals(paramString)) {
        paramString = "creditCardExpirationMonth";
      } else if ("cc-exp-year".equals(paramString)) {
        paramString = "creditCardExpirationYear";
      } else {
        if (!"off".equals(paramString)) {
          stringBuilder = new StringBuilder();
          stringBuilder.append("Invalid autocomplete option: ");
          stringBuilder.append(paramString);
          throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
        } 
        stringBuilder.setImportantForAutofill(2);
      } 
      stringBuilder.setAutofillHints(new String[] { paramString });
      return;
    } 
    stringBuilder.setImportantForAutofill(2);
  }
  
  @a(a = "underlineColorAndroid", b = "Color")
  public void setUnderlineColor(c paramc, Integer paramInteger) {
    Drawable drawable2 = paramc.getBackground();
    drawable1 = drawable2;
    if (drawable2.getConstantState() != null)
      try {
        drawable1 = drawable2.mutate();
      } catch (NullPointerException drawable1) {
        a.c(TAG, "NullPointerException when setting underlineColorAndroid for TextInput", drawable1);
        drawable1 = drawable2;
      }  
    if (paramInteger == null) {
      drawable1.clearColorFilter();
      return;
    } 
    drawable1.setColorFilter(paramInteger.intValue(), PorterDuff.Mode.SRC_IN);
  }
  
  public void updateExtraData(c paramc, Object paramObject) {
    if (paramObject instanceof q) {
      paramObject = (q)paramObject;
      paramc.setPadding((int)paramObject.d(), (int)paramObject.e(), (int)paramObject.f(), (int)paramObject.g());
      if (paramObject.c())
        x.a(paramObject.a(), paramc); 
      paramc.a(paramObject);
    } 
  }
}
