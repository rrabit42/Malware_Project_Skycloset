package com.facebook.react.views.webview;

import android.annotation.TargetApi;
import android.os.Build;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.CookieManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.events.c;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import org.json.JSONException;
import org.json.JSONObject;

@a(a = "RCTWebView")
public class ReactWebViewManager extends SimpleViewManager<WebView> {
  protected static final String BLANK_URL = "about:blank";
  
  protected static final String BRIDGE_NAME = "__REACT_WEB_VIEW_BRIDGE";
  
  public static final int COMMAND_GO_BACK = 1;
  
  public static final int COMMAND_GO_FORWARD = 2;
  
  public static final int COMMAND_INJECT_JAVASCRIPT = 6;
  
  public static final int COMMAND_POST_MESSAGE = 5;
  
  public static final int COMMAND_RELOAD = 3;
  
  public static final int COMMAND_STOP_LOADING = 4;
  
  protected static final String HTML_ENCODING = "UTF-8";
  
  protected static final String HTML_MIME_TYPE = "text/html";
  
  protected static final String HTTP_METHOD_POST = "POST";
  
  private static final String INTENT_URL_PREFIX = "intent://";
  
  public static final String REACT_CLASS = "RCTWebView";
  
  protected WebView.PictureListener mPictureListener;
  
  protected a mWebViewConfig = new Object(this);
  
  public ReactWebViewManager() {}
  
  public ReactWebViewManager(a parama) {}
  
  protected static void dispatchEvent(WebView paramWebView, c paramc) { ((UIManagerModule)((ReactContext)paramWebView.getContext()).getNativeModule(UIManagerModule.class)).getEventDispatcher().a(paramc); }
  
  protected void addEventEmitters(af paramaf, WebView paramWebView) { paramWebView.setWebViewClient(new b()); }
  
  protected a createReactWebViewInstance(af paramaf) { return new a(paramaf); }
  
  @TargetApi(21)
  protected WebView createViewInstance(af paramaf) {
    a a1 = createReactWebViewInstance(paramaf);
    a1.setWebChromeClient(new Object(this));
    paramaf.addLifecycleEventListener(a1);
    this.mWebViewConfig.a(a1);
    WebSettings webSettings = a1.getSettings();
    webSettings.setBuiltInZoomControls(true);
    webSettings.setDisplayZoomControls(false);
    webSettings.setDomStorageEnabled(true);
    webSettings.setAllowFileAccess(false);
    webSettings.setAllowContentAccess(false);
    webSettings.setAllowFileAccessFromFileURLs(false);
    setAllowUniversalAccessFromFileURLs(a1, false);
    setMixedContentMode(a1, "never");
    a1.setLayoutParams(new ViewGroup.LayoutParams(-1, -1));
    setGeolocationEnabled(a1, Boolean.valueOf(false));
    return a1;
  }
  
  public Map<String, Integer> getCommandsMap() { return e.a("goBack", Integer.valueOf(1), "goForward", Integer.valueOf(2), "reload", Integer.valueOf(3), "stopLoading", Integer.valueOf(4), "postMessage", Integer.valueOf(5), "injectJavaScript", Integer.valueOf(6)); }
  
  public String getName() { return "RCTWebView"; }
  
  protected WebView.PictureListener getPictureListener() {
    if (this.mPictureListener == null)
      this.mPictureListener = new Object(this); 
    return this.mPictureListener;
  }
  
  public void onDropViewInstance(WebView paramWebView) {
    super.onDropViewInstance(paramWebView);
    af af = (af)paramWebView.getContext();
    a a1 = (a)paramWebView;
    af.removeLifecycleEventListener(a1);
    a1.c();
  }
  
  public void receiveCommand(WebView paramWebView, int paramInt, ReadableArray paramReadableArray) {
    switch (paramInt) {
      default:
        return;
      case 6:
        ((a)paramWebView).a(paramReadableArray.getString(0));
        return;
      case 5:
        try {
          a a1 = (a)paramWebView;
          JSONObject jSONObject = new JSONObject();
          jSONObject.put("data", paramReadableArray.getString(0));
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("(function () {var event;var data = ");
          stringBuilder.append(jSONObject.toString());
          stringBuilder.append(";try {event = new MessageEvent('message', data);} catch (e) {event = document.createEvent('MessageEvent');event.initMessageEvent('message', true, true, data.data, data.origin, data.lastEventId, data.source);}document.dispatchEvent(event);})();");
          a1.a(stringBuilder.toString());
          return;
        } catch (JSONException paramWebView) {
          throw new RuntimeException(paramWebView);
        } 
      case 4:
        paramWebView.stopLoading();
        return;
      case 3:
        paramWebView.reload();
        return;
      case 2:
        paramWebView.goForward();
        return;
      case 1:
        break;
    } 
    paramWebView.goBack();
  }
  
  @a(a = "allowFileAccess")
  public void setAllowFileAccess(WebView paramWebView, Boolean paramBoolean) {
    boolean bool;
    WebSettings webSettings = paramWebView.getSettings();
    if (paramBoolean != null && paramBoolean.booleanValue()) {
      bool = true;
    } else {
      bool = false;
    } 
    webSettings.setAllowFileAccess(bool);
  }
  
  @a(a = "allowUniversalAccessFromFileURLs")
  public void setAllowUniversalAccessFromFileURLs(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setAllowUniversalAccessFromFileURLs(paramBoolean); }
  
  @a(a = "domStorageEnabled")
  public void setDomStorageEnabled(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setDomStorageEnabled(paramBoolean); }
  
  @a(a = "geolocationEnabled")
  public void setGeolocationEnabled(WebView paramWebView, Boolean paramBoolean) {
    boolean bool;
    WebSettings webSettings = paramWebView.getSettings();
    if (paramBoolean != null && paramBoolean.booleanValue()) {
      bool = true;
    } else {
      bool = false;
    } 
    webSettings.setGeolocationEnabled(bool);
  }
  
  @a(a = "injectedJavaScript")
  public void setInjectedJavaScript(WebView paramWebView, String paramString) { ((a)paramWebView).setInjectedJavaScript(paramString); }
  
  @a(a = "javaScriptEnabled")
  public void setJavaScriptEnabled(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setJavaScriptEnabled(paramBoolean); }
  
  @a(a = "mediaPlaybackRequiresUserAction")
  @TargetApi(17)
  public void setMediaPlaybackRequiresUserAction(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setMediaPlaybackRequiresUserGesture(paramBoolean); }
  
  @a(a = "messagingEnabled")
  public void setMessagingEnabled(WebView paramWebView, boolean paramBoolean) { ((a)paramWebView).setMessagingEnabled(paramBoolean); }
  
  @a(a = "mixedContentMode")
  public void setMixedContentMode(WebView paramWebView, String paramString) {
    if (Build.VERSION.SDK_INT >= 21) {
      byte b;
      WebSettings webSettings;
      if (paramString == null || "never".equals(paramString)) {
        webSettings = paramWebView.getSettings();
        b = 1;
      } else if ("always".equals(paramString)) {
        webSettings = webSettings.getSettings();
        b = 0;
      } else if ("compatibility".equals(paramString)) {
        webSettings = webSettings.getSettings();
        b = 2;
      } else {
        return;
      } 
      webSettings.setMixedContentMode(b);
    } 
  }
  
  @a(a = "onContentSizeChange")
  public void setOnContentSizeChange(WebView paramWebView, boolean paramBoolean) {
    WebView.PictureListener pictureListener;
    if (paramBoolean) {
      pictureListener = getPictureListener();
    } else {
      pictureListener = null;
    } 
    paramWebView.setPictureListener(pictureListener);
  }
  
  @a(a = "originWhitelist")
  public void setOriginWhitelist(WebView paramWebView, ReadableArray paramReadableArray) {
    b b = ((a)paramWebView).getReactWebViewClient();
    if (b != null && paramReadableArray != null) {
      LinkedList linkedList = new LinkedList();
      for (byte b1 = 0; b1 < paramReadableArray.size(); b1++)
        linkedList.add(Pattern.compile(paramReadableArray.getString(b1))); 
      b.a(linkedList);
    } 
  }
  
  @a(a = "saveFormDataDisabled")
  public void setSaveFormDataDisabled(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setSaveFormData(paramBoolean ^ true); }
  
  @a(a = "scalesPageToFit")
  public void setScalesPageToFit(WebView paramWebView, boolean paramBoolean) { paramWebView.getSettings().setUseWideViewPort(paramBoolean ^ true); }
  
  @a(a = "source")
  public void setSource(WebView paramWebView, ReadableMap paramReadableMap) {
    if (paramReadableMap != null) {
      if (paramReadableMap.hasKey("html")) {
        String str = paramReadableMap.getString("html");
        if (paramReadableMap.hasKey("baseUrl")) {
          paramWebView.loadDataWithBaseURL(paramReadableMap.getString("baseUrl"), str, "text/html", "UTF-8", null);
          return;
        } 
        paramWebView.loadData(str, "text/html", "UTF-8");
        return;
      } 
      if (paramReadableMap.hasKey("uri")) {
        byte[] arrayOfByte;
        String str2 = paramReadableMap.getString("uri");
        str1 = paramWebView.getUrl();
        if (str1 != null && str1.equals(str2))
          return; 
        if (paramReadableMap.hasKey("method") && paramReadableMap.getString("method").equalsIgnoreCase("POST")) {
          byte[] arrayOfByte1;
          str1 = null;
          if (paramReadableMap.hasKey("body")) {
            String str = paramReadableMap.getString("body");
            try {
              arrayOfByte1 = str.getBytes("UTF-8");
            } catch (UnsupportedEncodingException str1) {
              arrayOfByte1 = str.getBytes();
            } 
          } 
          arrayOfByte = arrayOfByte1;
          if (arrayOfByte1 == null)
            arrayOfByte = new byte[0]; 
          paramWebView.postUrl(str2, arrayOfByte);
          return;
        } 
        HashMap hashMap = new HashMap();
        if (arrayOfByte.hasKey("headers")) {
          ReadableMap readableMap = arrayOfByte.getMap("headers");
          ReadableMapKeySetIterator readableMapKeySetIterator = readableMap.keySetIterator();
          while (readableMapKeySetIterator.hasNextKey()) {
            String str = readableMapKeySetIterator.nextKey();
            if ("user-agent".equals(str.toLowerCase(Locale.ENGLISH))) {
              if (paramWebView.getSettings() != null)
                paramWebView.getSettings().setUserAgentString(readableMap.getString(str)); 
              continue;
            } 
            hashMap.put(str, readableMap.getString(str));
          } 
        } 
        paramWebView.loadUrl(str2, hashMap);
        return;
      } 
    } 
    paramWebView.loadUrl("about:blank");
  }
  
  @a(a = "thirdPartyCookiesEnabled")
  public void setThirdPartyCookiesEnabled(WebView paramWebView, boolean paramBoolean) {
    if (Build.VERSION.SDK_INT >= 21)
      CookieManager.getInstance().setAcceptThirdPartyCookies(paramWebView, paramBoolean); 
  }
  
  @a(a = "urlPrefixesForDefaultIntent")
  public void setUrlPrefixesForDefaultIntent(WebView paramWebView, ReadableArray paramReadableArray) {
    b b = ((a)paramWebView).getReactWebViewClient();
    if (b != null && paramReadableArray != null)
      b.a(paramReadableArray); 
  }
  
  @a(a = "userAgent")
  public void setUserAgent(WebView paramWebView, String paramString) {
    if (paramString != null)
      paramWebView.getSettings().setUserAgentString(paramString); 
  }
  
  @a(a = "hardwareAccelerationEnabledExperimental", f = true)
  public void sethardwareAccelerationEnabledExperimental(WebView paramWebView, boolean paramBoolean) {
    if (!paramBoolean)
      paramWebView.setLayerType(1, null); 
  }
}
