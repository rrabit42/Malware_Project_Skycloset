package com.facebook.react.views.viewpager;

import android.view.View;
import android.view.ViewGroup;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.o;
import java.util.Map;

@a(a = "AndroidViewPager")
public class ReactViewPagerManager extends ViewGroupManager<d> {
  public static final int COMMAND_SET_PAGE = 1;
  
  public static final int COMMAND_SET_PAGE_WITHOUT_ANIMATION = 2;
  
  public static final String REACT_CLASS = "AndroidViewPager";
  
  public void addView(d paramd, View paramView, int paramInt) { paramd.a(paramView, paramInt); }
  
  protected d createViewInstance(af paramaf) { return new d(paramaf); }
  
  public View getChildAt(d paramd, int paramInt) { return paramd.e(paramInt); }
  
  public int getChildCount(d paramd) { return paramd.getViewCountInAdapter(); }
  
  public Map<String, Integer> getCommandsMap() { return e.a("setPage", Integer.valueOf(1), "setPageWithoutAnimation", Integer.valueOf(2)); }
  
  public Map getExportedCustomDirectEventTypeConstants() { return e.a("topPageScroll", e.a("registrationName", "onPageScroll"), "topPageScrollStateChanged", e.a("registrationName", "onPageScrollStateChanged"), "topPageSelected", e.a("registrationName", "onPageSelected")); }
  
  public String getName() { return "AndroidViewPager"; }
  
  public boolean needsCustomLayoutForChildren() { return true; }
  
  public void receiveCommand(d paramd, int paramInt, ReadableArray paramReadableArray) {
    a.a(paramd);
    a.a(paramReadableArray);
    switch (paramInt) {
      default:
        throw new IllegalArgumentException(String.format("Unsupported command %d received by %s.", new Object[] { Integer.valueOf(paramInt), getClass().getSimpleName() }));
      case 2:
        paramd.b(paramReadableArray.getInt(0), false);
        return;
      case 1:
        break;
    } 
    paramd.b(paramReadableArray.getInt(0), true);
  }
  
  public void removeViewAt(d paramd, int paramInt) { paramd.d(paramInt); }
  
  @a(a = "pageMargin", d = 0.0F)
  public void setPageMargin(d paramd, float paramFloat) { paramd.setPageMargin((int)o.a(paramFloat)); }
  
  @a(a = "peekEnabled", f = false)
  public void setPeekEnabled(d paramd, boolean paramBoolean) { paramd.setClipToPadding(paramBoolean ^ true); }
  
  @a(a = "scrollEnabled", f = true)
  public void setScrollEnabled(d paramd, boolean paramBoolean) { paramd.setScrollEnabled(paramBoolean); }
}
