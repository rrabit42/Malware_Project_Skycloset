package com.facebook.react.views.text;

import android.text.TextUtils;
import android.view.View;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.uimanager.BaseViewManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.react.uimanager.o;
import com.facebook.yoga.a;

public abstract class ReactTextAnchorViewManager<T extends View, C extends h> extends BaseViewManager<T, C> {
  private static final int[] SPACING_TYPES = { 8, 0, 2, 1, 3 };
  
  @b(a = {"borderColor", "borderLeftColor", "borderRightColor", "borderTopColor", "borderBottomColor"}, b = "Color")
  public void setBorderColor(r paramr, int paramInt, Integer paramInteger) {
    float f1;
    float f2 = NaNF;
    if (paramInteger == null) {
      f1 = NaNF;
    } else {
      f1 = (paramInteger.intValue() & 0xFFFFFF);
    } 
    if (paramInteger != null)
      f2 = (paramInteger.intValue() >>> 24); 
    paramr.a(SPACING_TYPES[paramInt], f1, f2);
  }
  
  @b(a = {"borderRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"}, c = NaNF)
  public void setBorderRadius(r paramr, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    if (paramInt == 0) {
      paramr.setBorderRadius(f);
      return;
    } 
    paramr.a(f, paramInt - 1);
  }
  
  @a(a = "borderStyle")
  public void setBorderStyle(r paramr, String paramString) { paramr.setBorderStyle(paramString); }
  
  @b(a = {"borderWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"}, c = NaNF)
  public void setBorderWidth(r paramr, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    paramr.a(SPACING_TYPES[paramInt], f);
  }
  
  @a(a = "disabled", f = false)
  public void setDisabled(r paramr, boolean paramBoolean) { paramr.setEnabled(paramBoolean ^ true); }
  
  @a(a = "ellipsizeMode")
  public void setEllipsizeMode(r paramr, String paramString) {
    TextUtils.TruncateAt truncateAt;
    StringBuilder stringBuilder;
    if (paramString == null || paramString.equals("tail")) {
      truncateAt = TextUtils.TruncateAt.END;
    } else if (truncateAt.equals("head")) {
      truncateAt = TextUtils.TruncateAt.START;
    } else if (truncateAt.equals("middle")) {
      truncateAt = TextUtils.TruncateAt.MIDDLE;
    } else if (truncateAt.equals("clip")) {
      truncateAt = null;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid ellipsizeMode: ");
      stringBuilder.append(truncateAt);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.setEllipsizeLocation(truncateAt);
  }
  
  @a(a = "includeFontPadding", f = true)
  public void setIncludeFontPadding(r paramr, boolean paramBoolean) { paramr.setIncludeFontPadding(paramBoolean); }
  
  @a(a = "numberOfLines", e = 2147483647)
  public void setNumberOfLines(r paramr, int paramInt) { paramr.setNumberOfLines(paramInt); }
  
  @a(a = "selectable")
  public void setSelectable(r paramr, boolean paramBoolean) { paramr.setTextIsSelectable(paramBoolean); }
  
  @a(a = "selectionColor", b = "Color")
  public void setSelectionColor(r paramr, Integer paramInteger) {
    int i;
    if (paramInteger == null) {
      i = d.c(paramr.getContext());
    } else {
      i = paramInteger.intValue();
    } 
    paramr.setHighlightColor(i);
  }
  
  @a(a = "textAlignVertical")
  public void setTextAlignVertical(r paramr, String paramString) {
    byte b;
    StringBuilder stringBuilder;
    if (paramString == null || "auto".equals(paramString)) {
      b = 0;
    } else if ("top".equals(paramString)) {
      b = 48;
    } else if ("bottom".equals(paramString)) {
      b = 80;
    } else if ("center".equals(paramString)) {
      b = 16;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textAlignVertical: ");
      stringBuilder.append(paramString);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.setGravityVertical(b);
  }
}
