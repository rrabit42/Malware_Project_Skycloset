package com.facebook.react.views.text;

import android.content.Context;
import android.os.Build;
import android.text.BoringLayout;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.LruCache;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.uimanager.o;
import com.facebook.react.uimanager.y;
import com.facebook.yoga.YogaMeasureMode;
import com.facebook.yoga.a;
import com.facebook.yoga.b;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class y {
  private static final TextPaint a = new TextPaint(1);
  
  private static final Object b = new Object();
  
  private static LruCache<String, Spannable> c = new LruCache(100);
  
  public static long a(ReactContext paramReactContext, ReadableNativeMap paramReadableNativeMap1, ReadableNativeMap paramReadableNativeMap2, float paramFloat1, YogaMeasureMode paramYogaMeasureMode1, float paramFloat2, YogaMeasureMode paramYogaMeasureMode2) {
    TextPaint textPaint = a;
    Spannable spannable = a(paramReactContext, paramReadableNativeMap1);
    if (spannable != null) {
      int i;
      StaticLayout staticLayout;
      BoringLayout.Metrics metrics = BoringLayout.isBoring(spannable, textPaint);
      if (metrics == null) {
        paramFloat2 = Layout.getDesiredWidth(spannable, textPaint);
      } else {
        paramFloat2 = NaNF;
      } 
      if (paramYogaMeasureMode1 == YogaMeasureMode.a || paramFloat1 < 0.0F) {
        i = 1;
      } else {
        i = 0;
      } 
      if (metrics == null && (i || (!a.a(paramFloat2) && paramFloat2 <= paramFloat1))) {
        i = (int)Math.ceil(paramFloat2);
        if (Build.VERSION.SDK_INT < 23) {
          staticLayout = new StaticLayout(spannable, textPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0F, 0.0F, true);
        } else {
          StaticLayout.Builder builder = StaticLayout.Builder.obtain(staticLayout, 0, staticLayout.length(), textPaint, i);
          staticLayout = builder.setAlignment(Layout.Alignment.ALIGN_NORMAL).setLineSpacing(0.0F, 1.0F).setIncludePad(true).setBreakStrategy(1).setHyphenationFrequency(1).build();
        } 
      } else {
        BoringLayout boringLayout;
        if (metrics != null && (i != 0 || metrics.width <= paramFloat1)) {
          boringLayout = BoringLayout.make(staticLayout, textPaint, metrics.width, Layout.Alignment.ALIGN_NORMAL, 1.0F, 0.0F, metrics, true);
        } else {
          StaticLayout staticLayout1;
          if (Build.VERSION.SDK_INT < 23) {
            staticLayout1 = new StaticLayout(boringLayout, textPaint, (int)paramFloat1, Layout.Alignment.ALIGN_NORMAL, 1.0F, 0.0F, true);
          } else {
            StaticLayout.Builder builder = StaticLayout.Builder.obtain(staticLayout1, 0, staticLayout1.length(), textPaint, (int)paramFloat1);
            staticLayout = builder.setAlignment(Layout.Alignment.ALIGN_NORMAL).setLineSpacing(0.0F, 1.0F).setIncludePad(true).setBreakStrategy(1).setHyphenationFrequency(1).build();
          } 
        } 
      } 
      if (paramReadableNativeMap2.hasKey("maximumNumberOfLines")) {
        i = paramReadableNativeMap2.getInt("maximumNumberOfLines");
      } else {
        i = -1;
      } 
      paramFloat1 = staticLayout.getWidth();
      if (i != -1 && i != 0 && i < staticLayout.getLineCount()) {
        i = staticLayout.getLineBottom(i - 1);
      } else {
        i = staticLayout.getHeight();
      } 
      paramFloat2 = i;
      return b.a(o.b(paramFloat1), o.b(paramFloat2));
    } 
    throw new IllegalStateException("Spannable element has not been prepared in onBeforeLayout");
  }
  
  protected static Spannable a(Context paramContext, ReadableMap paramReadableMap) {
    String str = paramReadableMap.toString();
    synchronized (b) {
      Spannable spannable = (Spannable)c.get(str);
      if (spannable != null)
        return spannable; 
      null = b(paramContext, paramReadableMap);
      synchronized (b) {
        c.put(str, null);
        return null;
      } 
    } 
  }
  
  private static void a(Context paramContext, ReadableArray paramReadableArray, SpannableStringBuilder paramSpannableStringBuilder, List<a> paramList) {
    int i = paramReadableArray.size();
    byte b1;
    for (b1 = 0; b1 < i; b1++) {
      ReadableMap readableMap = paramReadableArray.getMap(b1);
      int j = paramSpannableStringBuilder.length();
      v v = new v(new y(readableMap.getMap("textAttributes")));
      paramSpannableStringBuilder.append(z.a(readableMap.getString("string"), v.p));
      int k = paramSpannableStringBuilder.length();
      if (k >= j) {
        if (v.c)
          paramList.add(new a(j, k, new j(v.e))); 
        if (v.f)
          paramList.add(new a(j, k, new g(v.g))); 
        if (Build.VERSION.SDK_INT >= 21 && !Float.isNaN(v.b))
          paramList.add(new a(j, k, new a(v.b))); 
        paramList.add(new a(j, k, new f(v.i)));
        if (v.x != -1 || v.y != -1 || v.z != null)
          paramList.add(new a(j, k, new c(v.x, v.y, v.z, paramContext.getAssets()))); 
        if (v.u)
          paramList.add(new a(j, k, new s())); 
        if (v.v)
          paramList.add(new a(j, k, new m())); 
        if (v.q != 0.0F || v.r != 0.0F)
          paramList.add(new a(j, k, new u(v.q, v.r, v.s, v.t))); 
        if (!Float.isNaN(v.a()))
          paramList.add(new a(j, k, new b(v.a()))); 
        paramList.add(new a(j, k, new n(readableMap.getInt("reactTag"))));
      } 
    } 
  }
  
  private static Spannable b(Context paramContext, ReadableMap paramReadableMap) {
    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
    ArrayList arrayList = new ArrayList();
    a(paramContext, paramReadableMap.getArray("fragments"), spannableStringBuilder, arrayList);
    Iterator iterator = arrayList.iterator();
    for (byte b1 = 0; iterator.hasNext(); b1++)
      ((a)iterator.next()).a(spannableStringBuilder, b1); 
    return spannableStringBuilder;
  }
}
