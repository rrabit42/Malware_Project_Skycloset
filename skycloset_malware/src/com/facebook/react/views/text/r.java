package com.facebook.react.views.text;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.v7.widget.z;
import android.text.Layout;
import android.text.Spannable;
import android.text.Spanned;
import android.text.TextUtils;
import android.view.ViewGroup;
import com.facebook.common.e.a;
import com.facebook.react.uimanager.s;
import com.facebook.react.views.view.e;

public class r extends z implements s {
  private static final ViewGroup.LayoutParams b = new ViewGroup.LayoutParams(0, 0);
  
  private boolean c;
  
  private int d = getGravity() & 0x800007;
  
  private int e = getGravity() & 0x70;
  
  private int f = 0;
  
  private int g = Integer.MAX_VALUE;
  
  private TextUtils.TruncateAt h = TextUtils.TruncateAt.END;
  
  private e i = new e(this);
  
  private Spannable j;
  
  public r(Context paramContext) { super(paramContext); }
  
  public int a(float paramFloat1, float paramFloat2) {
    charSequence = getText();
    int k = getId();
    int m = (int)paramFloat1;
    int n = (int)paramFloat2;
    Layout layout = getLayout();
    if (layout == null)
      return k; 
    n = layout.getLineForVertical(n);
    int i2 = (int)layout.getLineLeft(n);
    int i3 = (int)layout.getLineRight(n);
    int i1 = k;
    if (charSequence instanceof Spanned) {
      i1 = k;
      if (m >= i2) {
        i1 = k;
        if (m <= i3) {
          Spanned spanned = (Spanned)charSequence;
          paramFloat1 = m;
          try {
            int i4 = layout.getOffsetForHorizontal(n, paramFloat1);
            n[] arrayOfn = (n[])spanned.getSpans(i4, i4, n.class);
            i1 = k;
            if (arrayOfn != null) {
              n = charSequence.length();
              m = 0;
              while (true) {
                i1 = k;
                if (m < arrayOfn.length) {
                  i3 = spanned.getSpanStart(arrayOfn[m]);
                  int i5 = spanned.getSpanEnd(arrayOfn[m]);
                  i2 = n;
                  i1 = k;
                  if (i5 > i4) {
                    i3 = i5 - i3;
                    i2 = n;
                    i1 = k;
                    if (i3 <= n) {
                      i1 = arrayOfn[m].a();
                      i2 = i3;
                    } 
                  } 
                  m++;
                  n = i2;
                  k = i1;
                  continue;
                } 
                break;
              } 
            } 
          } catch (ArrayIndexOutOfBoundsException charSequence) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Crash in HorizontalMeasurementProvider: ");
            stringBuilder.append(charSequence.getMessage());
            a.d("ReactNative", stringBuilder.toString());
            i1 = k;
          } 
        } 
      } 
    } 
    return i1;
  }
  
  public void a() {
    TextUtils.TruncateAt truncateAt;
    if (this.g == Integer.MAX_VALUE) {
      truncateAt = null;
    } else {
      truncateAt = this.h;
    } 
    setEllipsize(truncateAt);
  }
  
  public void a(float paramFloat, int paramInt) { this.i.a(paramFloat, paramInt); }
  
  public void a(int paramInt, float paramFloat) { this.i.a(paramInt, paramFloat); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2) { this.i.a(paramInt, paramFloat1, paramFloat2); }
  
  public Spannable getSpanned() { return this.j; }
  
  public boolean hasOverlappingRendering() { return false; }
  
  public void invalidateDrawable(Drawable paramDrawable) {
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        if (arrayOfx[b1].a() == paramDrawable)
          invalidate(); 
        b1++;
      } 
    } 
    super.invalidateDrawable(paramDrawable);
  }
  
  public void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        arrayOfx[b1].d();
        b1++;
      } 
    } 
  }
  
  public void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        arrayOfx[b1].b();
        b1++;
      } 
    } 
  }
  
  public void onFinishTemporaryDetach() {
    super.onFinishTemporaryDetach();
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        arrayOfx[b1].e();
        b1++;
      } 
    } 
  }
  
  public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        arrayOfx[b1].c();
        b1++;
      } 
    } 
  }
  
  public void setBackgroundColor(int paramInt) { this.i.a(paramInt); }
  
  public void setBorderRadius(float paramFloat) { this.i.a(paramFloat); }
  
  public void setBorderStyle(String paramString) { this.i.a(paramString); }
  
  public void setEllipsizeLocation(TextUtils.TruncateAt paramTruncateAt) { this.h = paramTruncateAt; }
  
  void setGravityHorizontal(int paramInt) {
    int k = paramInt;
    if (paramInt == 0)
      k = this.d; 
    setGravity(k | getGravity() & 0xFFFFFFF8 & 0xFF7FFFF8);
  }
  
  void setGravityVertical(int paramInt) {
    int k = paramInt;
    if (paramInt == 0)
      k = this.e; 
    setGravity(k | getGravity() & 0xFFFFFF8F);
  }
  
  public void setNumberOfLines(int paramInt) {
    int k = paramInt;
    if (paramInt == 0)
      k = Integer.MAX_VALUE; 
    this.g = k;
    paramInt = this.g;
    boolean bool = true;
    if (paramInt != 1)
      bool = false; 
    setSingleLine(bool);
    setMaxLines(this.g);
  }
  
  public void setSpanned(Spannable paramSpannable) { this.j = paramSpannable; }
  
  public void setText(q paramq) {
    this.c = paramq.c();
    if (getLayoutParams() == null)
      setLayoutParams(b); 
    setText(paramq.a());
    setPadding((int)Math.floor(paramq.d()), (int)Math.floor(paramq.e()), (int)Math.floor(paramq.f()), (int)Math.floor(paramq.g()));
    int k = paramq.h();
    if (this.f != k)
      this.f = k; 
    setGravityHorizontal(this.f);
    if (Build.VERSION.SDK_INT >= 23 && getBreakStrategy() != paramq.i())
      setBreakStrategy(paramq.i()); 
    if (Build.VERSION.SDK_INT >= 26 && getJustificationMode() != paramq.j())
      setJustificationMode(paramq.j()); 
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable) {
    if (this.c && getText() instanceof Spanned) {
      Spanned spanned = (Spanned)getText();
      int k = spanned.length();
      byte b1 = 0;
      x[] arrayOfx = (x[])spanned.getSpans(0, k, x.class);
      k = arrayOfx.length;
      while (b1 < k) {
        if (arrayOfx[b1].a() == paramDrawable)
          return true; 
        b1++;
      } 
    } 
    return super.verifyDrawable(paramDrawable);
  }
}
