package com.facebook.react.views.text;

import android.annotation.TargetApi;
import android.graphics.Color;
import android.os.Build;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.f;
import com.facebook.react.uimanager.h;
import com.facebook.react.uimanager.o;
import com.facebook.react.uimanager.x;
import java.util.List;

@TargetApi(23)
public abstract class h extends h {
  protected w a;
  
  protected boolean b = false;
  
  protected int c;
  
  protected boolean d = false;
  
  protected int e;
  
  protected int f = -1;
  
  protected int g = 0;
  
  protected int h;
  
  protected int i;
  
  protected z j;
  
  protected float k;
  
  protected float l;
  
  protected float m;
  
  protected int n;
  
  protected boolean o;
  
  protected boolean p;
  
  protected boolean q;
  
  protected int r;
  
  protected int s;
  
  protected String t;
  
  protected boolean u;
  
  protected float v;
  
  public h() {
    if (Build.VERSION.SDK_INT < 23) {
      i1 = 0;
    } else {
      i1 = 1;
    } 
    this.h = i1;
    int i1 = Build.VERSION.SDK_INT;
    this.i = 0;
    this.j = z.e;
    this.k = 0.0F;
    this.l = 0.0F;
    this.m = 0.0F;
    this.n = 1426063360;
    this.o = false;
    this.p = false;
    this.q = true;
    this.r = -1;
    this.s = -1;
    this.t = null;
    this.u = false;
    this.v = NaNF;
    this.a = new w();
  }
  
  protected static Spannable a(h paramh, String paramString) { // Byte code:
    //   0: new android/text/SpannableStringBuilder
    //   3: dup
    //   4: invokespecial <init> : ()V
    //   7: astore #6
    //   9: new java/util/ArrayList
    //   12: dup
    //   13: invokespecial <init> : ()V
    //   16: astore #7
    //   18: aload_1
    //   19: ifnull -> 39
    //   22: aload #6
    //   24: aload_1
    //   25: aload_0
    //   26: getfield a : Lcom/facebook/react/views/text/w;
    //   29: invokevirtual g : ()Lcom/facebook/react/views/text/z;
    //   32: invokestatic a : (Ljava/lang/String;Lcom/facebook/react/views/text/z;)Ljava/lang/String;
    //   35: invokevirtual append : (Ljava/lang/CharSequence;)Landroid/text/SpannableStringBuilder;
    //   38: pop
    //   39: iconst_0
    //   40: istore #4
    //   42: aload_0
    //   43: aload #6
    //   45: aload #7
    //   47: aconst_null
    //   48: iconst_0
    //   49: invokestatic a : (Lcom/facebook/react/views/text/h;Landroid/text/SpannableStringBuilder;Ljava/util/List;Lcom/facebook/react/views/text/w;I)V
    //   52: aload_0
    //   53: iconst_0
    //   54: putfield u : Z
    //   57: ldc NaN
    //   59: fstore_2
    //   60: aload #7
    //   62: invokeinterface iterator : ()Ljava/util/Iterator;
    //   67: astore_1
    //   68: aload_1
    //   69: invokeinterface hasNext : ()Z
    //   74: ifeq -> 160
    //   77: aload_1
    //   78: invokeinterface next : ()Ljava/lang/Object;
    //   83: checkcast com/facebook/react/views/text/h$a
    //   86: astore #7
    //   88: fload_2
    //   89: fstore_3
    //   90: aload #7
    //   92: getfield c : Lcom/facebook/react/views/text/l;
    //   95: instanceof com/facebook/react/views/text/x
    //   98: ifeq -> 140
    //   101: aload #7
    //   103: getfield c : Lcom/facebook/react/views/text/l;
    //   106: checkcast com/facebook/react/views/text/x
    //   109: invokevirtual f : ()I
    //   112: istore #5
    //   114: aload_0
    //   115: iconst_1
    //   116: putfield u : Z
    //   119: fload_2
    //   120: invokestatic isNaN : (F)Z
    //   123: ifne -> 136
    //   126: fload_2
    //   127: fstore_3
    //   128: iload #5
    //   130: i2f
    //   131: fload_2
    //   132: fcmpl
    //   133: ifle -> 140
    //   136: iload #5
    //   138: i2f
    //   139: fstore_3
    //   140: aload #7
    //   142: aload #6
    //   144: iload #4
    //   146: invokevirtual a : (Landroid/text/SpannableStringBuilder;I)V
    //   149: iload #4
    //   151: iconst_1
    //   152: iadd
    //   153: istore #4
    //   155: fload_3
    //   156: fstore_2
    //   157: goto -> 68
    //   160: aload_0
    //   161: getfield a : Lcom/facebook/react/views/text/w;
    //   164: fload_2
    //   165: invokevirtual e : (F)V
    //   168: aload #6
    //   170: areturn }
  
  private static void a(h paramh, SpannableStringBuilder paramSpannableStringBuilder, List<a> paramList, w paramw, int paramInt) {
    w w1;
    StringBuilder stringBuilder;
    if (paramw != null) {
      w1 = paramw.a(paramh.a);
    } else {
      w1 = paramh.a;
    } 
    int i1 = 0;
    int i2 = paramh.g();
    while (i1 < i2) {
      x x = paramh.g(i1);
      if (x instanceof k) {
        paramSpannableStringBuilder.append(z.a(((k)x).Q(), w1.g()));
      } else if (x instanceof h) {
        a((h)x, paramSpannableStringBuilder, paramList, w1, paramSpannableStringBuilder.length());
      } else if (x instanceof o) {
        paramSpannableStringBuilder.append("I");
        paramList.add(new a(paramSpannableStringBuilder.length() - 1, paramSpannableStringBuilder.length(), ((o)x).Q()));
      } else {
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unexpected view type nested under text node: ");
        stringBuilder.append(x.getClass());
        throw new f(stringBuilder.toString());
      } 
      x.e();
      i1++;
    } 
    i1 = paramSpannableStringBuilder.length();
    if (i1 >= paramInt) {
      if (stringBuilder.b)
        paramList.add(new a(paramInt, i1, new j(stringBuilder.c))); 
      if (stringBuilder.d)
        paramList.add(new a(paramInt, i1, new g(stringBuilder.e))); 
      if (Build.VERSION.SDK_INT >= 21) {
        float f2 = w1.j();
        if (!Float.isNaN(f2) && (paramw == null || paramw.j() != f2))
          paramList.add(new a(paramInt, i1, new a(f2))); 
      } 
      i2 = w1.h();
      if (paramw == null || paramw.h() != i2)
        paramList.add(new a(paramInt, i1, new f(i2))); 
      if (stringBuilder.r != -1 || stringBuilder.s != -1 || stringBuilder.t != null)
        paramList.add(new a(paramInt, i1, new c(stringBuilder.r, stringBuilder.s, stringBuilder.t, stringBuilder.m().getAssets()))); 
      if (stringBuilder.o)
        paramList.add(new a(paramInt, i1, new s())); 
      if (stringBuilder.p)
        paramList.add(new a(paramInt, i1, new m())); 
      if ((stringBuilder.k != 0.0F || stringBuilder.l != 0.0F || stringBuilder.m != 0.0F) && Color.alpha(stringBuilder.n) != 0)
        paramList.add(new a(paramInt, i1, new u(stringBuilder.k, stringBuilder.l, stringBuilder.m, stringBuilder.n))); 
      float f1 = w1.i();
      if (!Float.isNaN(f1) && (paramw == null || paramw.i() != f1))
        paramList.add(new a(paramInt, i1, new b(f1))); 
      paramList.add(new a(paramInt, i1, new n(stringBuilder.j())));
    } 
  }
  
  private static int b(String paramString) { return (paramString.length() == 3 && paramString.endsWith("00") && paramString.charAt(0) <= '9' && paramString.charAt(0) >= '1') ? ((paramString.charAt(0) - '0') * 'd') : -1; }
  
  @a(a = "allowFontScaling", f = true)
  public void setAllowFontScaling(boolean paramBoolean) {
    if (paramBoolean != this.a.a()) {
      this.a.a(paramBoolean);
      D();
    } 
  }
  
  @a(a = "backgroundColor")
  public void setBackgroundColor(Integer paramInteger) {
    if (!b()) {
      boolean bool;
      if (paramInteger != null) {
        bool = true;
      } else {
        bool = false;
      } 
      this.d = bool;
      if (this.d)
        this.e = paramInteger.intValue(); 
      D();
    } 
  }
  
  @a(a = "color")
  public void setColor(Integer paramInteger) {
    boolean bool;
    if (paramInteger != null) {
      bool = true;
    } else {
      bool = false;
    } 
    this.b = bool;
    if (this.b)
      this.c = paramInteger.intValue(); 
    D();
  }
  
  @a(a = "fontFamily")
  public void setFontFamily(String paramString) {
    this.t = paramString;
    D();
  }
  
  @a(a = "fontSize", d = NaNF)
  public void setFontSize(float paramFloat) {
    this.a.a(paramFloat);
    D();
  }
  
  @a(a = "fontStyle")
  public void setFontStyle(String paramString) {
    byte b1;
    if ("italic".equals(paramString)) {
      b1 = 2;
    } else if ("normal".equals(paramString)) {
      b1 = 0;
    } else {
      b1 = -1;
    } 
    if (b1 != this.r) {
      this.r = b1;
      D();
    } 
  }
  
  @a(a = "fontWeight")
  public void setFontWeight(String paramString) { // Byte code:
    //   0: iconst_m1
    //   1: istore #4
    //   3: aload_1
    //   4: ifnull -> 15
    //   7: aload_1
    //   8: invokestatic b : (Ljava/lang/String;)I
    //   11: istore_3
    //   12: goto -> 17
    //   15: iconst_m1
    //   16: istore_3
    //   17: iload_3
    //   18: sipush #500
    //   21: if_icmpge -> 70
    //   24: ldc_w 'bold'
    //   27: aload_1
    //   28: invokevirtual equals : (Ljava/lang/Object;)Z
    //   31: ifeq -> 37
    //   34: goto -> 70
    //   37: ldc_w 'normal'
    //   40: aload_1
    //   41: invokevirtual equals : (Ljava/lang/Object;)Z
    //   44: ifne -> 65
    //   47: iload #4
    //   49: istore_2
    //   50: iload_3
    //   51: iconst_m1
    //   52: if_icmpeq -> 72
    //   55: iload #4
    //   57: istore_2
    //   58: iload_3
    //   59: sipush #500
    //   62: if_icmpge -> 72
    //   65: iconst_0
    //   66: istore_2
    //   67: goto -> 72
    //   70: iconst_1
    //   71: istore_2
    //   72: iload_2
    //   73: aload_0
    //   74: getfield s : I
    //   77: if_icmpeq -> 89
    //   80: aload_0
    //   81: iload_2
    //   82: putfield s : I
    //   85: aload_0
    //   86: invokevirtual D : ()V
    //   89: return }
  
  @a(a = "includeFontPadding", f = true)
  public void setIncludeFontPadding(boolean paramBoolean) { this.q = paramBoolean; }
  
  @a(a = "letterSpacing", d = NaNF)
  public void setLetterSpacing(float paramFloat) {
    this.a.c(paramFloat);
    D();
  }
  
  @a(a = "lineHeight", d = NaNF)
  public void setLineHeight(float paramFloat) {
    this.a.b(paramFloat);
    D();
  }
  
  @a(a = "maxFontSizeMultiplier", d = NaNF)
  public void setMaxFontSizeMultiplier(float paramFloat) {
    if (paramFloat != this.a.e()) {
      this.a.d(paramFloat);
      D();
    } 
  }
  
  @a(a = "numberOfLines", e = -1)
  public void setNumberOfLines(int paramInt) {
    int i1 = paramInt;
    if (paramInt == 0)
      i1 = -1; 
    this.f = i1;
    D();
  }
  
  @a(a = "textAlign")
  public void setTextAlign(String paramString) { // Byte code:
    //   0: ldc_w 'justify'
    //   3: aload_1
    //   4: invokevirtual equals : (Ljava/lang/Object;)Z
    //   7: ifeq -> 31
    //   10: getstatic android/os/Build$VERSION.SDK_INT : I
    //   13: bipush #26
    //   15: if_icmplt -> 23
    //   18: aload_0
    //   19: iconst_1
    //   20: putfield i : I
    //   23: aload_0
    //   24: iconst_3
    //   25: putfield g : I
    //   28: goto -> 149
    //   31: getstatic android/os/Build$VERSION.SDK_INT : I
    //   34: bipush #26
    //   36: if_icmplt -> 44
    //   39: aload_0
    //   40: iconst_0
    //   41: putfield i : I
    //   44: aload_1
    //   45: ifnull -> 144
    //   48: ldc_w 'auto'
    //   51: aload_1
    //   52: invokevirtual equals : (Ljava/lang/Object;)Z
    //   55: ifeq -> 61
    //   58: goto -> 144
    //   61: ldc_w 'left'
    //   64: aload_1
    //   65: invokevirtual equals : (Ljava/lang/Object;)Z
    //   68: ifeq -> 74
    //   71: goto -> 23
    //   74: ldc_w 'right'
    //   77: aload_1
    //   78: invokevirtual equals : (Ljava/lang/Object;)Z
    //   81: ifeq -> 92
    //   84: aload_0
    //   85: iconst_5
    //   86: putfield g : I
    //   89: goto -> 149
    //   92: ldc_w 'center'
    //   95: aload_1
    //   96: invokevirtual equals : (Ljava/lang/Object;)Z
    //   99: ifeq -> 110
    //   102: aload_0
    //   103: iconst_1
    //   104: putfield g : I
    //   107: goto -> 149
    //   110: new java/lang/StringBuilder
    //   113: dup
    //   114: invokespecial <init> : ()V
    //   117: astore_2
    //   118: aload_2
    //   119: ldc_w 'Invalid textAlign: '
    //   122: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: pop
    //   126: aload_2
    //   127: aload_1
    //   128: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   131: pop
    //   132: new com/facebook/react/bridge/JSApplicationIllegalArgumentException
    //   135: dup
    //   136: aload_2
    //   137: invokevirtual toString : ()Ljava/lang/String;
    //   140: invokespecial <init> : (Ljava/lang/String;)V
    //   143: athrow
    //   144: aload_0
    //   145: iconst_0
    //   146: putfield g : I
    //   149: aload_0
    //   150: invokevirtual D : ()V
    //   153: return }
  
  @a(a = "textBreakStrategy")
  public void setTextBreakStrategy(String paramString) {
    byte b1;
    if (Build.VERSION.SDK_INT < 23)
      return; 
    if (paramString == null || "highQuality".equals(paramString)) {
      b1 = 1;
    } else if ("simple".equals(paramString)) {
      b1 = 0;
    } else if ("balanced".equals(paramString)) {
      b1 = 2;
    } else {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textBreakStrategy: ");
      stringBuilder.append(paramString);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    this.h = b1;
    D();
  }
  
  @a(a = "textDecorationLine")
  public void setTextDecorationLine(String paramString) {
    byte b1 = 0;
    this.o = false;
    this.p = false;
    if (paramString != null) {
      String[] arrayOfString = paramString.split(" ");
      int i1 = arrayOfString.length;
      while (b1 < i1) {
        String str = arrayOfString[b1];
        if ("underline".equals(str)) {
          this.o = true;
        } else if ("line-through".equals(str)) {
          this.p = true;
        } 
        b1++;
      } 
    } 
    D();
  }
  
  @a(a = "textShadowColor", b = "Color", e = 1426063360)
  public void setTextShadowColor(int paramInt) {
    if (paramInt != this.n) {
      this.n = paramInt;
      D();
    } 
  }
  
  @a(a = "textShadowOffset")
  public void setTextShadowOffset(ReadableMap paramReadableMap) {
    this.k = 0.0F;
    this.l = 0.0F;
    if (paramReadableMap != null) {
      if (paramReadableMap.hasKey("width") && !paramReadableMap.isNull("width"))
        this.k = o.a(paramReadableMap.getDouble("width")); 
      if (paramReadableMap.hasKey("height") && !paramReadableMap.isNull("height"))
        this.l = o.a(paramReadableMap.getDouble("height")); 
    } 
    D();
  }
  
  @a(a = "textShadowRadius", e = 1)
  public void setTextShadowRadius(float paramFloat) {
    if (paramFloat != this.m) {
      this.m = paramFloat;
      D();
    } 
  }
  
  @a(a = "textTransform")
  public void setTextTransform(String paramString) {
    StringBuilder stringBuilder;
    z z1;
    if (paramString == null) {
      stringBuilder = this.a;
      z1 = z.e;
    } else if ("none".equals(z1)) {
      stringBuilder = this.a;
      z1 = z.a;
    } else if ("uppercase".equals(z1)) {
      stringBuilder = this.a;
      z1 = z.b;
    } else if ("lowercase".equals(z1)) {
      stringBuilder = this.a;
      z1 = z.c;
    } else if ("capitalize".equals(z1)) {
      stringBuilder = this.a;
      z1 = z.d;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textTransform: ");
      stringBuilder.append(z1);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.a(z1);
    D();
  }
}
