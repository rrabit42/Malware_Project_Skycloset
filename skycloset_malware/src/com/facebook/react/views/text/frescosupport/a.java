package com.facebook.react.views.text.frescosupport;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import com.facebook.f.c.b;
import com.facebook.react.bridge.Dynamic;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.views.text.o;
import com.facebook.react.views.text.x;
import java.util.Locale;

public class a extends o {
  private Uri a;
  
  private ReadableMap b;
  
  private final b c;
  
  private final Object d;
  
  private float e = NaNF;
  
  private float f = NaNF;
  
  private int g = 0;
  
  public a(b paramb, Object paramObject) {
    this.c = paramb;
    this.d = paramObject;
  }
  
  private static Uri a(Context paramContext, String paramString) {
    if (paramString == null || paramString.isEmpty())
      return null; 
    paramString = paramString.toLowerCase(Locale.getDefault()).replace("-", "_");
    int i = paramContext.getResources().getIdentifier(paramString, "drawable", paramContext.getPackageName());
    return (new Uri.Builder()).scheme("res").path(String.valueOf(i)).build();
  }
  
  public x Q() {
    Resources resources = m().getResources();
    int i = (int)Math.ceil(this.e);
    return new b(resources, (int)Math.ceil(this.f), i, this.g, R(), S(), T(), U());
  }
  
  public Uri R() { return this.a; }
  
  public ReadableMap S() { return this.b; }
  
  public b T() { return this.c; }
  
  public Object U() { return this.d; }
  
  public boolean a() { return true; }
  
  @a(a = "headers")
  public void setHeaders(ReadableMap paramReadableMap) { this.b = paramReadableMap; }
  
  public void setHeight(Dynamic paramDynamic) {
    if (paramDynamic.getType() == ReadableType.Number) {
      this.f = (float)paramDynamic.asDouble();
      return;
    } 
    throw new JSApplicationIllegalArgumentException("Inline images must not have percentage based height");
  }
  
  @a(a = "src")
  public void setSource(ReadableArray paramReadableArray) { // Byte code:
    //   0: aconst_null
    //   1: astore #4
    //   3: aconst_null
    //   4: astore_2
    //   5: aload_1
    //   6: ifnull -> 39
    //   9: aload_1
    //   10: invokeinterface size : ()I
    //   15: ifne -> 21
    //   18: goto -> 39
    //   21: aload_1
    //   22: iconst_0
    //   23: invokeinterface getMap : (I)Lcom/facebook/react/bridge/ReadableMap;
    //   28: ldc 'uri'
    //   30: invokeinterface getString : (Ljava/lang/String;)Ljava/lang/String;
    //   35: astore_3
    //   36: goto -> 41
    //   39: aconst_null
    //   40: astore_3
    //   41: aload #4
    //   43: astore_1
    //   44: aload_3
    //   45: ifnull -> 84
    //   48: aload_3
    //   49: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   52: astore_1
    //   53: aload_1
    //   54: invokevirtual getScheme : ()Ljava/lang/String;
    //   57: astore #4
    //   59: aload #4
    //   61: ifnonnull -> 67
    //   64: goto -> 69
    //   67: aload_1
    //   68: astore_2
    //   69: aload_2
    //   70: astore_1
    //   71: aload_2
    //   72: ifnonnull -> 84
    //   75: aload_0
    //   76: invokevirtual m : ()Lcom/facebook/react/uimanager/af;
    //   79: aload_3
    //   80: invokestatic a : (Landroid/content/Context;Ljava/lang/String;)Landroid/net/Uri;
    //   83: astore_1
    //   84: aload_1
    //   85: aload_0
    //   86: getfield a : Landroid/net/Uri;
    //   89: if_acmpeq -> 96
    //   92: aload_0
    //   93: invokevirtual D : ()V
    //   96: aload_0
    //   97: aload_1
    //   98: putfield a : Landroid/net/Uri;
    //   101: return
    //   102: astore_1
    //   103: goto -> 69
    //   106: astore_2
    //   107: goto -> 67
    // Exception table:
    //   from	to	target	type
    //   48	53	102	java/lang/Exception
    //   53	59	106	java/lang/Exception }
  
  @a(a = "tintColor")
  public void setTintColor(int paramInt) { this.g = paramInt; }
  
  public void setWidth(Dynamic paramDynamic) {
    if (paramDynamic.getType() == ReadableType.Number) {
      this.e = (float)paramDynamic.asDouble();
      return;
    } 
    throw new JSApplicationIllegalArgumentException("Inline images must not have percentage based width");
  }
}
