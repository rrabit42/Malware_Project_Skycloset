package com.facebook.react.views.text;

import android.os.Build;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.o;
import com.facebook.react.uimanager.y;
import com.facebook.yoga.YogaDirection;

public class v {
  protected boolean A;
  
  protected float B;
  
  private final y C;
  
  protected float a = NaNF;
  
  protected float b = NaNF;
  
  protected boolean c = false;
  
  protected boolean d = true;
  
  protected int e;
  
  protected boolean f = false;
  
  protected int g;
  
  protected int h = -1;
  
  protected int i = -1;
  
  protected float j = -1.0F;
  
  protected float k = -1.0F;
  
  protected float l = NaNF;
  
  protected int m = 0;
  
  protected int n;
  
  protected int o;
  
  protected z p;
  
  protected float q;
  
  protected float r;
  
  protected float s;
  
  protected int t;
  
  protected boolean u;
  
  protected boolean v;
  
  protected boolean w;
  
  protected int x;
  
  protected int y;
  
  protected String z;
  
  public v(y paramy) {
    if (Build.VERSION.SDK_INT < 23) {
      i1 = 0;
    } else {
      i1 = 1;
    } 
    this.n = i1;
    int i1 = Build.VERSION.SDK_INT;
    this.o = 0;
    this.p = z.e;
    this.q = 0.0F;
    this.r = 0.0F;
    this.s = 1.0F;
    this.t = 1426063360;
    this.u = false;
    this.v = false;
    this.w = true;
    this.x = -1;
    this.y = -1;
    Integer integer = null;
    this.z = null;
    this.A = false;
    this.B = NaNF;
    this.C = paramy;
    a(a("numberOfLines", -1));
    a(a("lineHeight", -1.0F));
    b(a("letterSpacing", NaNF));
    a(a("allowFontScaling", true));
    a(h("textAlign"));
    c(a("fontSize", -1.0F));
    if (paramy.a("color")) {
      readableMap = Integer.valueOf(paramy.a("color", 0));
    } else {
      readableMap = null;
    } 
    a(readableMap);
    if (paramy.a("foregroundColor")) {
      readableMap = Integer.valueOf(paramy.a("foregroundColor", 0));
    } else {
      readableMap = null;
    } 
    a(readableMap);
    if (paramy.a("backgroundColor")) {
      readableMap = Integer.valueOf(paramy.a("backgroundColor", 0));
    } else {
      readableMap = null;
    } 
    b(readableMap);
    b(h("fontFamily"));
    c(h("fontWeight"));
    d(h("fontStyle"));
    b(a("includeFontPadding", true));
    e(h("textDecorationLine"));
    f(h("textBreakStrategy"));
    ReadableMap readableMap = integer;
    if (paramy.a("textShadowOffset"))
      readableMap = paramy.e("textShadowOffset"); 
    a(readableMap);
    d(a("textShadowRadius", 1));
    b(a("textShadowColor", 1426063360));
    g(h("textTransform"));
  }
  
  private float a(String paramString, float paramFloat) { return this.C.a(paramString) ? this.C.a(paramString, paramFloat) : paramFloat; }
  
  private int a(String paramString, int paramInt) { return this.C.a(paramString) ? this.C.a(paramString, paramInt) : paramInt; }
  
  private boolean a(String paramString, boolean paramBoolean) { return this.C.a(paramString) ? this.C.a(paramString, paramBoolean) : paramBoolean; }
  
  private YogaDirection g() { return YogaDirection.b; }
  
  private String h(String paramString) { return this.C.a(paramString) ? this.C.c(paramString) : null; }
  
  private static int i(String paramString) { return (paramString.length() == 3 && paramString.endsWith("00") && paramString.charAt(0) <= '9' && paramString.charAt(0) >= '1') ? ((paramString.charAt(0) - '0') * 'd') : -1; }
  
  private float j(String paramString) {
    if (this.C.a("padding"))
      paramString = "padding"; 
    return o.a(a(paramString, 0.0F));
  }
  
  public float a() {
    boolean bool;
    if (!Float.isNaN(this.a) && !Float.isNaN(this.B) && this.B > this.a) {
      bool = true;
    } else {
      bool = false;
    } 
    return bool ? this.B : this.a;
  }
  
  public void a(float paramFloat) {
    this.k = paramFloat;
    if (paramFloat == -1.0F) {
      paramFloat = NaNF;
    } else if (this.d) {
      paramFloat = o.c(paramFloat);
    } else {
      paramFloat = o.a(paramFloat);
    } 
    this.a = paramFloat;
  }
  
  public void a(int paramInt) {
    int i1 = paramInt;
    if (paramInt == 0)
      i1 = -1; 
    this.h = i1;
  }
  
  public void a(ReadableMap paramReadableMap) {
    this.q = 0.0F;
    this.r = 0.0F;
    if (paramReadableMap != null) {
      if (paramReadableMap.hasKey("width") && !paramReadableMap.isNull("width"))
        this.q = o.a(paramReadableMap.getDouble("width")); 
      if (paramReadableMap.hasKey("height") && !paramReadableMap.isNull("height"))
        this.r = o.a(paramReadableMap.getDouble("height")); 
    } 
  }
  
  public void a(Integer paramInteger) {
    boolean bool;
    if (paramInteger != null) {
      bool = true;
    } else {
      bool = false;
    } 
    this.c = bool;
    if (this.c)
      this.e = paramInteger.intValue(); 
  }
  
  public void a(String paramString) {
    if ("justify".equals(paramString)) {
      if (Build.VERSION.SDK_INT >= 26)
        this.o = 1; 
    } else {
      if (Build.VERSION.SDK_INT >= 26)
        this.o = 0; 
      if (paramString == null || "auto".equals(paramString)) {
        this.m = 0;
        return;
      } 
      if (!"left".equals(paramString)) {
        if ("right".equals(paramString)) {
          this.m = 5;
          return;
        } 
        if ("center".equals(paramString)) {
          this.m = 1;
          return;
        } 
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid textAlign: ");
        stringBuilder.append(paramString);
        throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
      } 
    } 
    this.m = 3;
  }
  
  public void a(boolean paramBoolean) {
    if (paramBoolean != this.d) {
      this.d = paramBoolean;
      c(this.j);
      a(this.k);
      b(this.l);
    } 
  }
  
  public int b() {
    int i2 = this.m;
    int i1 = i2;
    if (g() == YogaDirection.c) {
      if (i2 == 5)
        return 3; 
      i1 = i2;
      if (i2 == 3)
        i1 = 5; 
    } 
    return i1;
  }
  
  public void b(float paramFloat) {
    this.l = paramFloat;
    if (this.d) {
      paramFloat = o.c(this.l);
    } else {
      paramFloat = o.a(this.l);
    } 
    this.b = paramFloat;
  }
  
  public void b(int paramInt) {
    if (paramInt != this.t)
      this.t = paramInt; 
  }
  
  public void b(Integer paramInteger) {
    boolean bool;
    if (paramInteger != null) {
      bool = true;
    } else {
      bool = false;
    } 
    this.f = bool;
    if (this.f)
      this.g = paramInteger.intValue(); 
  }
  
  public void b(String paramString) { this.z = paramString; }
  
  public void b(boolean paramBoolean) { this.w = paramBoolean; }
  
  public float c() { return j("paddingBottom"); }
  
  public void c(float paramFloat) {
    this.j = paramFloat;
    float f1 = paramFloat;
    if (paramFloat != -1.0F) {
      if (this.d) {
        paramFloat = o.c(paramFloat);
      } else {
        paramFloat = o.a(paramFloat);
      } 
      f1 = (float)Math.ceil(paramFloat);
    } 
    this.i = (int)f1;
  }
  
  public void c(String paramString) { // Byte code:
    //   0: iconst_m1
    //   1: istore #4
    //   3: aload_1
    //   4: ifnull -> 15
    //   7: aload_1
    //   8: invokestatic i : (Ljava/lang/String;)I
    //   11: istore_3
    //   12: goto -> 17
    //   15: iconst_m1
    //   16: istore_3
    //   17: iload_3
    //   18: sipush #500
    //   21: if_icmpge -> 70
    //   24: ldc_w 'bold'
    //   27: aload_1
    //   28: invokevirtual equals : (Ljava/lang/Object;)Z
    //   31: ifeq -> 37
    //   34: goto -> 70
    //   37: ldc_w 'normal'
    //   40: aload_1
    //   41: invokevirtual equals : (Ljava/lang/Object;)Z
    //   44: ifne -> 65
    //   47: iload #4
    //   49: istore_2
    //   50: iload_3
    //   51: iconst_m1
    //   52: if_icmpeq -> 72
    //   55: iload #4
    //   57: istore_2
    //   58: iload_3
    //   59: sipush #500
    //   62: if_icmpge -> 72
    //   65: iconst_0
    //   66: istore_2
    //   67: goto -> 72
    //   70: iconst_1
    //   71: istore_2
    //   72: iload_2
    //   73: aload_0
    //   74: getfield y : I
    //   77: if_icmpeq -> 85
    //   80: aload_0
    //   81: iload_2
    //   82: putfield y : I
    //   85: return }
  
  public float d() { return j("paddingStart"); }
  
  public void d(float paramFloat) {
    if (paramFloat != this.s)
      this.s = paramFloat; 
  }
  
  public void d(String paramString) {
    byte b1;
    if ("italic".equals(paramString)) {
      b1 = 2;
    } else if ("normal".equals(paramString)) {
      b1 = 0;
    } else {
      b1 = -1;
    } 
    if (b1 != this.x)
      this.x = b1; 
  }
  
  public float e() { return j("paddingEnd"); }
  
  public void e(String paramString) {
    byte b1 = 0;
    this.u = false;
    this.v = false;
    if (paramString != null) {
      String[] arrayOfString = paramString.split(" ");
      int i1 = arrayOfString.length;
      while (b1 < i1) {
        String str = arrayOfString[b1];
        if ("underline".equals(str)) {
          this.u = true;
        } else if ("line-through".equals(str)) {
          this.v = true;
        } 
        b1++;
      } 
    } 
  }
  
  public float f() { return j("paddingTop"); }
  
  public void f(String paramString) {
    byte b1;
    if (Build.VERSION.SDK_INT < 23)
      return; 
    if (paramString == null || "highQuality".equals(paramString)) {
      b1 = 1;
    } else if ("simple".equals(paramString)) {
      b1 = 0;
    } else if ("balanced".equals(paramString)) {
      b1 = 2;
    } else {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textBreakStrategy: ");
      stringBuilder.append(paramString);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    this.n = b1;
  }
  
  public void g(String paramString) {
    z z1;
    if (paramString == null || "none".equals(paramString)) {
      z1 = z.a;
    } else if ("uppercase".equals(z1)) {
      z1 = z.b;
    } else if ("lowercase".equals(z1)) {
      z1 = z.c;
    } else if ("capitalize".equals(z1)) {
      z1 = z.d;
    } else {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid textTransform: ");
      stringBuilder.append(z1);
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    this.p = z1;
  }
}
