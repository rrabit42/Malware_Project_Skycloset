package com.facebook.react.views.art;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.SurfaceTexture;
import android.view.Surface;
import android.view.TextureView;
import com.facebook.common.e.a;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.ap;
import com.facebook.react.uimanager.h;
import com.facebook.react.uimanager.w;

public class d extends h implements TextureView.SurfaceTextureListener {
  private Surface a;
  
  private Integer b;
  
  private void Q() {
    surface = this.a;
    if (surface == null || !surface.isValid()) {
      e(this);
      return;
    } 
    try {
      Canvas canvas = this.a.lockCanvas(null);
      PorterDuff.Mode mode = PorterDuff.Mode.CLEAR;
      byte b1 = 0;
      canvas.drawColor(0, mode);
      if (this.b != null)
        canvas.drawColor(this.b.intValue()); 
      Paint paint = new Paint();
      while (b1 < g()) {
        f f = (f)g(b1);
        f.a(canvas, paint, 1.0F);
        f.e();
        b1++;
      } 
      if (this.a == null)
        return; 
      this.a.unlockCanvasAndPost(canvas);
      return;
    } catch (IllegalArgumentException surface) {
    
    } catch (IllegalStateException surface) {}
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(surface.getClass().getSimpleName());
    stringBuilder.append(" in Surface.unlockCanvasAndPost");
    a.d("ReactNative", stringBuilder.toString());
  }
  
  private void e(w paramw) {
    for (byte b1 = 0; b1 < paramw.g(); b1++) {
      w w1 = paramw.b(b1);
      w1.e();
      e(w1);
    } 
  }
  
  public void a(ap paramap) {
    super.a(paramap);
    Q();
    paramap.a(j(), this);
  }
  
  public boolean a() { return false; }
  
  public boolean b() { return true; }
  
  public void onSurfaceTextureAvailable(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2) {
    this.a = new Surface(paramSurfaceTexture);
    Q();
  }
  
  public boolean onSurfaceTextureDestroyed(SurfaceTexture paramSurfaceTexture) {
    paramSurfaceTexture.release();
    this.a = null;
    return true;
  }
  
  public void onSurfaceTextureSizeChanged(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2) {}
  
  public void onSurfaceTextureUpdated(SurfaceTexture paramSurfaceTexture) {}
  
  @a(a = "backgroundColor", b = "Color")
  public void setBackgroundColor(Integer paramInteger) {
    this.b = paramInteger;
    D();
  }
}
