package com.facebook.react.views.art;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.text.TextUtils;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.a.a;

public class e extends b {
  private ReadableMap d;
  
  private int e = 0;
  
  private void a(Paint paramPaint) {
    Paint.Align align;
    switch (this.e) {
      case 2:
        align = Paint.Align.CENTER;
        paramPaint.setTextAlign(align);
        break;
      case 1:
        align = Paint.Align.RIGHT;
        paramPaint.setTextAlign(align);
        break;
      case 0:
        align = Paint.Align.LEFT;
        paramPaint.setTextAlign(align);
        break;
    } 
    ReadableMap readableMap = this.d;
    if (readableMap != null && readableMap.hasKey("font")) {
      readableMap = this.d.getMap("font");
      if (readableMap != null) {
        boolean bool;
        byte b1;
        float f = 12.0F;
        if (readableMap.hasKey("fontSize"))
          f = (float)readableMap.getDouble("fontSize"); 
        paramPaint.setTextSize(f * this.c);
        boolean bool1 = readableMap.hasKey("fontWeight");
        byte b2 = 1;
        if (bool1 && "bold".equals(readableMap.getString("fontWeight"))) {
          b1 = 1;
        } else {
          b1 = 0;
        } 
        if (readableMap.hasKey("fontStyle") && "italic".equals(readableMap.getString("fontStyle"))) {
          bool = true;
        } else {
          bool = false;
        } 
        if (b1 && bool) {
          b1 = 3;
        } else if (b1 != 0) {
          b1 = b2;
        } else if (bool) {
          b1 = 2;
        } else {
          b1 = 0;
        } 
        paramPaint.setTypeface(Typeface.create(readableMap.getString("fontFamily"), b1));
      } 
    } 
  }
  
  public void a(Canvas paramCanvas, Paint paramPaint, float paramFloat) {
    if (this.d == null)
      return; 
    paramFloat *= this.b;
    if (paramFloat <= 0.01F)
      return; 
    if (!this.d.hasKey("lines"))
      return; 
    ReadableArray readableArray = this.d.getArray("lines");
    if (readableArray != null) {
      if (readableArray.size() == 0)
        return; 
      a(paramCanvas);
      String[] arrayOfString = new String[readableArray.size()];
      byte b1;
      for (b1 = 0; b1 < arrayOfString.length; b1++)
        arrayOfString[b1] = readableArray.getString(b1); 
      String str = TextUtils.join("\n", arrayOfString);
      if (a(paramPaint, paramFloat)) {
        a(paramPaint);
        if (this.a == null) {
          paramCanvas.drawText(str, 0.0F, -paramPaint.ascent(), paramPaint);
        } else {
          paramCanvas.drawTextOnPath(str, this.a, 0.0F, 0.0F, paramPaint);
        } 
      } 
      if (b(paramPaint, paramFloat)) {
        a(paramPaint);
        if (this.a == null) {
          paramCanvas.drawText(str, 0.0F, -paramPaint.ascent(), paramPaint);
        } else {
          paramCanvas.drawTextOnPath(str, this.a, 0.0F, 0.0F, paramPaint);
        } 
      } 
      b(paramCanvas);
      e();
    } 
  }
  
  @a(a = "alignment", e = 0)
  public void setAlignment(int paramInt) { this.e = paramInt; }
  
  @a(a = "frame")
  public void setFrame(ReadableMap paramReadableMap) { this.d = paramReadableMap; }
}
