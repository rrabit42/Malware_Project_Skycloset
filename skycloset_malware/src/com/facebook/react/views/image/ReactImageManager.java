package com.facebook.react.views.image;

import android.graphics.PorterDuff;
import android.view.View;
import com.facebook.f.a.a.c;
import com.facebook.f.c.b;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.o;
import com.facebook.yoga.a;
import java.util.Map;

@a(a = "RCTImageView")
public class ReactImageManager extends SimpleViewManager<f> {
  public static final String REACT_CLASS = "RCTImageView";
  
  private final Object mCallerContext;
  
  private b mDraweeControllerBuilder = null;
  
  private a mGlobalImageLoadListener;
  
  public ReactImageManager() { this.mCallerContext = null; }
  
  public ReactImageManager(b paramb, a parama, Object paramObject) {
    this.mGlobalImageLoadListener = parama;
    this.mCallerContext = paramObject;
  }
  
  public ReactImageManager(b paramb, Object paramObject) { this(paramb, null, paramObject); }
  
  public f createViewInstance(af paramaf) { return new f(paramaf, getDraweeControllerBuilder(), this.mGlobalImageLoadListener, getCallerContext()); }
  
  public Object getCallerContext() { return this.mCallerContext; }
  
  public b getDraweeControllerBuilder() {
    if (this.mDraweeControllerBuilder == null)
      this.mDraweeControllerBuilder = c.a(); 
    return this.mDraweeControllerBuilder;
  }
  
  public Map getExportedCustomDirectEventTypeConstants() { return e.a(b.b(4), e.a("registrationName", "onLoadStart"), b.b(2), e.a("registrationName", "onLoad"), b.b(1), e.a("registrationName", "onError"), b.b(3), e.a("registrationName", "onLoadEnd")); }
  
  public String getName() { return "RCTImageView"; }
  
  protected void onAfterUpdateTransaction(f paramf) {
    super.onAfterUpdateTransaction(paramf);
    paramf.e();
  }
  
  @a(a = "blurRadius")
  public void setBlurRadius(f paramf, float paramFloat) { paramf.setBlurRadius(paramFloat); }
  
  @a(a = "borderColor", b = "Color")
  public void setBorderColor(f paramf, Integer paramInteger) {
    int i;
    if (paramInteger == null) {
      i = 0;
    } else {
      i = paramInteger.intValue();
    } 
    paramf.setBorderColor(i);
  }
  
  @b(a = {"borderRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"}, c = NaNF)
  public void setBorderRadius(f paramf, int paramInt, float paramFloat) {
    float f1 = paramFloat;
    if (!a.a(paramFloat))
      f1 = o.a(paramFloat); 
    if (paramInt == 0) {
      paramf.setBorderRadius(f1);
      return;
    } 
    paramf.a(f1, paramInt - 1);
  }
  
  @a(a = "borderWidth")
  public void setBorderWidth(f paramf, float paramFloat) { paramf.setBorderWidth(paramFloat); }
  
  @a(a = "defaultSrc")
  public void setDefaultSource(f paramf, String paramString) { paramf.setDefaultSource(paramString); }
  
  @a(a = "fadeDuration")
  public void setFadeDuration(f paramf, int paramInt) { paramf.setFadeDuration(paramInt); }
  
  @a(a = "headers")
  public void setHeaders(f paramf, ReadableMap paramReadableMap) { paramf.setHeaders(paramReadableMap); }
  
  @a(a = "shouldNotifyLoadEvents")
  public void setLoadHandlersRegistered(f paramf, boolean paramBoolean) { paramf.setShouldNotifyLoadEvents(paramBoolean); }
  
  @a(a = "loadingIndicatorSrc")
  public void setLoadingIndicatorSource(f paramf, String paramString) { paramf.setLoadingIndicatorSource(paramString); }
  
  @a(a = "overlayColor", b = "Color")
  public void setOverlayColor(f paramf, Integer paramInteger) {
    int i;
    if (paramInteger == null) {
      i = 0;
    } else {
      i = paramInteger.intValue();
    } 
    paramf.setOverlayColor(i);
  }
  
  @a(a = "progressiveRenderingEnabled")
  public void setProgressiveRenderingEnabled(f paramf, boolean paramBoolean) { paramf.setProgressiveRenderingEnabled(paramBoolean); }
  
  @a(a = "resizeMethod")
  public void setResizeMethod(f paramf, String paramString) {
    c c;
    StringBuilder stringBuilder;
    if (paramString == null || "auto".equals(paramString)) {
      c = c.a;
    } else if ("resize".equals(c)) {
      c = c.b;
    } else if ("scale".equals(c)) {
      c = c.c;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Invalid resize method: '");
      stringBuilder.append(c);
      stringBuilder.append("'");
      throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
    } 
    stringBuilder.setResizeMethod(c);
  }
  
  @a(a = "resizeMode")
  public void setResizeMode(f paramf, String paramString) {
    paramf.setScaleType(d.a(paramString));
    paramf.setTileMode(d.b(paramString));
  }
  
  @a(a = "src")
  public void setSource(f paramf, ReadableArray paramReadableArray) { paramf.setSource(paramReadableArray); }
  
  @a(a = "tintColor", b = "Color")
  public void setTintColor(f paramf, Integer paramInteger) {
    if (paramInteger == null) {
      paramf.clearColorFilter();
      return;
    } 
    paramf.setColorFilter(paramInteger.intValue(), PorterDuff.Mode.SRC_IN);
  }
}
