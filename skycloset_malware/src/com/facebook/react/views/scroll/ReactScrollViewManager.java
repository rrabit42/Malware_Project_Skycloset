package com.facebook.react.views.scroll;

import android.support.v4.f.r;
import android.util.DisplayMetrics;
import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.a.b;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.c;
import com.facebook.react.uimanager.o;
import com.facebook.yoga.a;
import java.util.ArrayList;
import java.util.Map;

@a(a = "RCTScrollView")
public class ReactScrollViewManager extends ViewGroupManager<e> implements f.a<e> {
  public static final String REACT_CLASS = "RCTScrollView";
  
  private static final int[] SPACING_TYPES = { 8, 0, 2, 1, 3 };
  
  private a mFpsListener = null;
  
  public ReactScrollViewManager() { this(null); }
  
  public ReactScrollViewManager(a parama) { this.mFpsListener = parama; }
  
  public static Map<String, Object> createExportedCustomDirectEventTypeConstants() { return e.c().a(i.a(i.c), e.a("registrationName", "onScroll")).a(i.a(i.a), e.a("registrationName", "onScrollBeginDrag")).a(i.a(i.b), e.a("registrationName", "onScrollEndDrag")).a(i.a(i.d), e.a("registrationName", "onMomentumScrollBegin")).a(i.a(i.e), e.a("registrationName", "onMomentumScrollEnd")).a(); }
  
  public e createViewInstance(af paramaf) { return new e(paramaf, this.mFpsListener); }
  
  public void flashScrollIndicators(e parame) { parame.b(); }
  
  public Map<String, Integer> getCommandsMap() { return f.a(); }
  
  public Map<String, Object> getExportedCustomDirectEventTypeConstants() { return createExportedCustomDirectEventTypeConstants(); }
  
  public String getName() { return "RCTScrollView"; }
  
  public void receiveCommand(e parame, int paramInt, ReadableArray paramReadableArray) { f.a(this, parame, paramInt, paramReadableArray); }
  
  public void scrollTo(e parame, f.b paramb) {
    if (paramb.c) {
      parame.smoothScrollTo(paramb.a, paramb.b);
      return;
    } 
    parame.scrollTo(paramb.a, paramb.b);
  }
  
  public void scrollToEnd(e parame, f.c paramc) {
    int i = parame.getChildAt(0).getHeight() + parame.getPaddingBottom();
    if (paramc.a) {
      parame.smoothScrollTo(parame.getScrollX(), i);
      return;
    } 
    parame.scrollTo(parame.getScrollX(), i);
  }
  
  @b(a = {"borderColor", "borderLeftColor", "borderRightColor", "borderTopColor", "borderBottomColor"}, b = "Color")
  public void setBorderColor(e parame, int paramInt, Integer paramInteger) {
    float f1;
    float f2 = NaNF;
    if (paramInteger == null) {
      f1 = NaNF;
    } else {
      f1 = (paramInteger.intValue() & 0xFFFFFF);
    } 
    if (paramInteger != null)
      f2 = (paramInteger.intValue() >>> 24); 
    parame.a(SPACING_TYPES[paramInt], f1, f2);
  }
  
  @b(a = {"borderRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"}, c = NaNF)
  public void setBorderRadius(e parame, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    if (paramInt == 0) {
      parame.setBorderRadius(f);
      return;
    } 
    parame.a(f, paramInt - 1);
  }
  
  @a(a = "borderStyle")
  public void setBorderStyle(e parame, String paramString) { parame.setBorderStyle(paramString); }
  
  @b(a = {"borderWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"}, c = NaNF)
  public void setBorderWidth(e parame, int paramInt, float paramFloat) {
    float f = paramFloat;
    if (!a.a(paramFloat))
      f = o.a(paramFloat); 
    parame.a(SPACING_TYPES[paramInt], f);
  }
  
  @a(a = "endFillColor", b = "Color", e = 0)
  public void setBottomFillColor(e parame, int paramInt) { parame.setEndFillColor(paramInt); }
  
  @a(a = "decelerationRate")
  public void setDecelerationRate(e parame, float paramFloat) { parame.setDecelerationRate(paramFloat); }
  
  @a(a = "nestedScrollEnabled")
  public void setNestedScrollEnabled(e parame, boolean paramBoolean) { r.a(parame, paramBoolean); }
  
  @a(a = "overScrollMode")
  public void setOverScrollMode(e parame, String paramString) { parame.setOverScrollMode(g.a(paramString)); }
  
  @a(a = "overflow")
  public void setOverflow(e parame, String paramString) { parame.setOverflow(paramString); }
  
  @a(a = "pagingEnabled")
  public void setPagingEnabled(e parame, boolean paramBoolean) { parame.setPagingEnabled(paramBoolean); }
  
  @a(a = "persistentScrollbar")
  public void setPersistentScrollbar(e parame, boolean paramBoolean) { parame.setScrollbarFadingEnabled(paramBoolean ^ true); }
  
  @a(a = "removeClippedSubviews")
  public void setRemoveClippedSubviews(e parame, boolean paramBoolean) { parame.setRemoveClippedSubviews(paramBoolean); }
  
  @a(a = "scrollEnabled", f = true)
  public void setScrollEnabled(e parame, boolean paramBoolean) { parame.setScrollEnabled(paramBoolean); }
  
  @a(a = "scrollPerfTag")
  public void setScrollPerfTag(e parame, String paramString) { parame.setScrollPerfTag(paramString); }
  
  @a(a = "sendMomentumEvents")
  public void setSendMomentumEvents(e parame, boolean paramBoolean) { parame.setSendMomentumEvents(paramBoolean); }
  
  @a(a = "showsVerticalScrollIndicator")
  public void setShowsVerticalScrollIndicator(e parame, boolean paramBoolean) { parame.setVerticalScrollBarEnabled(paramBoolean); }
  
  @a(a = "snapToEnd")
  public void setSnapToEnd(e parame, boolean paramBoolean) { parame.setSnapToEnd(paramBoolean); }
  
  @a(a = "snapToInterval")
  public void setSnapToInterval(e parame, float paramFloat) { parame.setSnapInterval((int)(paramFloat * (c.b()).density)); }
  
  @a(a = "snapToOffsets")
  public void setSnapToOffsets(e parame, ReadableArray paramReadableArray) {
    DisplayMetrics displayMetrics = c.b();
    ArrayList arrayList = new ArrayList();
    for (byte b = 0; b < paramReadableArray.size(); b++)
      arrayList.add(Integer.valueOf((int)(paramReadableArray.getDouble(b) * displayMetrics.density))); 
    parame.setSnapOffsets(arrayList);
  }
  
  @a(a = "snapToStart")
  public void setSnapToStart(e parame, boolean paramBoolean) { parame.setSnapToStart(paramBoolean); }
}
