package com.facebook.react.views.scroll;

import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.support.v4.f.r;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.OverScroller;
import android.widget.ScrollView;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.uimanager.events.f;
import com.facebook.react.uimanager.j;
import com.facebook.react.uimanager.q;
import com.facebook.react.uimanager.r;
import com.facebook.react.views.view.e;
import java.lang.reflect.Field;
import java.util.List;

public class e extends ScrollView implements View.OnLayoutChangeListener, ViewGroup.OnHierarchyChangeListener, q {
  private static Field a;
  
  private static boolean b;
  
  private final b c = new b();
  
  private final OverScroller d;
  
  private final j e = new j();
  
  private final Rect f = new Rect();
  
  private boolean g;
  
  private Rect h;
  
  private String i = "hidden";
  
  private boolean j;
  
  private boolean k = false;
  
  private Runnable l;
  
  private boolean m;
  
  private boolean n = true;
  
  private boolean o;
  
  private a p = null;
  
  private String q;
  
  private Drawable r;
  
  private int s = 0;
  
  private int t = 0;
  
  private float u = 0.985F;
  
  private List<Integer> v;
  
  private boolean w = true;
  
  private boolean x = true;
  
  private View y;
  
  private e z;
  
  static  {
  
  }
  
  public e(ReactContext paramReactContext, a parama) {
    super(paramReactContext);
    this.p = parama;
    this.z = new e(this);
    this.d = getOverScrollerFromParent();
    setOnHierarchyChangeListener(this);
    setScrollBarStyle(33554432);
  }
  
  private int a(int paramInt) {
    OverScroller overScroller = new OverScroller(getContext());
    overScroller.setFriction(1.0F - this.u);
    int i1 = getMaxScrollY();
    int i2 = getHeight();
    int i3 = getPaddingBottom();
    int i4 = getPaddingTop();
    overScroller.fling(getScrollX(), getScrollY(), 0, paramInt, 0, 0, 0, i1, 0, (i2 - i3 - i4) / 2);
    return overScroller.getFinalY();
  }
  
  private void a(int paramInt1, int paramInt2) {
    if (!this.o && !this.k && !e())
      return; 
    if (this.l != null)
      return; 
    if (this.o) {
      c();
      g.a(this, paramInt1, paramInt2);
    } 
    this.g = false;
    this.l = new Object(this);
    r.a(this, this.l, 20L);
  }
  
  private void b(int paramInt) {
    int i2;
    int i1;
    double d2 = getSnapInterval();
    double d1 = getScrollY();
    double d3 = a(paramInt);
    double d4 = d1 / d2;
    int i3 = (int)Math.floor(d4);
    int i5 = (int)Math.ceil(d4);
    int i4 = (int)Math.round(d4);
    int i6 = (int)Math.round(d3 / d2);
    if (paramInt > 0 && i5 == i3) {
      i2 = i5 + 1;
      i1 = i3;
    } else {
      i1 = i3;
      i2 = i5;
      if (paramInt < 0) {
        i1 = i3;
        i2 = i5;
        if (i3 == i5) {
          i1 = i3 - 1;
          i2 = i5;
        } 
      } 
    } 
    if (paramInt > 0 && i4 < i2 && i6 > i1) {
      i3 = i2;
    } else {
      i3 = i4;
      if (paramInt < 0) {
        i3 = i4;
        if (i4 > i1) {
          i3 = i4;
          if (i6 < i2)
            i3 = i1; 
        } 
      } 
    } 
    d2 = i3 * d2;
    if (d2 != d1) {
      this.g = true;
      smoothScrollTo(getScrollX(), (int)d2);
    } 
  }
  
  private void c() {
    if (e()) {
      a.a(this.p);
      a.a(this.q);
      this.p.a(this.q);
    } 
  }
  
  private void c(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getChildCount : ()I
    //   4: ifgt -> 8
    //   7: return
    //   8: aload_0
    //   9: getfield t : I
    //   12: ifne -> 28
    //   15: aload_0
    //   16: getfield v : Ljava/util/List;
    //   19: ifnonnull -> 28
    //   22: aload_0
    //   23: iload_1
    //   24: invokespecial b : (I)V
    //   27: return
    //   28: aload_0
    //   29: invokespecial getMaxScrollY : ()I
    //   32: istore #11
    //   34: aload_0
    //   35: iload_1
    //   36: invokespecial a : (I)I
    //   39: istore #14
    //   41: aload_0
    //   42: invokevirtual getHeight : ()I
    //   45: istore #17
    //   47: aload_0
    //   48: invokevirtual getPaddingBottom : ()I
    //   51: istore #18
    //   53: aload_0
    //   54: invokevirtual getPaddingTop : ()I
    //   57: istore #19
    //   59: aload_0
    //   60: getfield v : Ljava/util/List;
    //   63: astore #20
    //   65: iconst_0
    //   66: istore #13
    //   68: aload #20
    //   70: ifnull -> 255
    //   73: aload #20
    //   75: iconst_0
    //   76: invokeinterface get : (I)Ljava/lang/Object;
    //   81: checkcast java/lang/Integer
    //   84: invokevirtual intValue : ()I
    //   87: istore #15
    //   89: aload_0
    //   90: getfield v : Ljava/util/List;
    //   93: astore #20
    //   95: aload #20
    //   97: aload #20
    //   99: invokeinterface size : ()I
    //   104: iconst_1
    //   105: isub
    //   106: invokeinterface get : (I)Ljava/lang/Object;
    //   111: checkcast java/lang/Integer
    //   114: invokevirtual intValue : ()I
    //   117: istore #16
    //   119: iload #11
    //   121: istore #7
    //   123: iconst_0
    //   124: istore #8
    //   126: iload #8
    //   128: istore #6
    //   130: iload #8
    //   132: aload_0
    //   133: getfield v : Ljava/util/List;
    //   136: invokeinterface size : ()I
    //   141: if_icmpge -> 244
    //   144: aload_0
    //   145: getfield v : Ljava/util/List;
    //   148: iload #8
    //   150: invokeinterface get : (I)Ljava/lang/Object;
    //   155: checkcast java/lang/Integer
    //   158: invokevirtual intValue : ()I
    //   161: istore #10
    //   163: iload #6
    //   165: istore #9
    //   167: iload #10
    //   169: iload #14
    //   171: if_icmpgt -> 195
    //   174: iload #6
    //   176: istore #9
    //   178: iload #14
    //   180: iload #10
    //   182: isub
    //   183: iload #14
    //   185: iload #6
    //   187: isub
    //   188: if_icmpge -> 195
    //   191: iload #10
    //   193: istore #9
    //   195: iload #7
    //   197: istore #12
    //   199: iload #10
    //   201: iload #14
    //   203: if_icmplt -> 227
    //   206: iload #7
    //   208: istore #12
    //   210: iload #10
    //   212: iload #14
    //   214: isub
    //   215: iload #7
    //   217: iload #14
    //   219: isub
    //   220: if_icmpge -> 227
    //   223: iload #10
    //   225: istore #12
    //   227: iload #8
    //   229: iconst_1
    //   230: iadd
    //   231: istore #8
    //   233: iload #9
    //   235: istore #6
    //   237: iload #12
    //   239: istore #7
    //   241: goto -> 130
    //   244: iload #16
    //   246: istore #8
    //   248: iload #15
    //   250: istore #9
    //   252: goto -> 300
    //   255: aload_0
    //   256: invokespecial getSnapInterval : ()I
    //   259: i2d
    //   260: dstore_2
    //   261: iload #14
    //   263: i2d
    //   264: dload_2
    //   265: ddiv
    //   266: dstore #4
    //   268: dload #4
    //   270: invokestatic floor : (D)D
    //   273: dload_2
    //   274: dmul
    //   275: d2i
    //   276: istore #6
    //   278: dload #4
    //   280: invokestatic ceil : (D)D
    //   283: dload_2
    //   284: dmul
    //   285: d2i
    //   286: iload #11
    //   288: invokestatic min : (II)I
    //   291: istore #7
    //   293: iload #11
    //   295: istore #8
    //   297: iconst_0
    //   298: istore #9
    //   300: iload #14
    //   302: iload #6
    //   304: isub
    //   305: istore #12
    //   307: iload #7
    //   309: iload #14
    //   311: isub
    //   312: istore #15
    //   314: iload #12
    //   316: iload #15
    //   318: if_icmpge -> 328
    //   321: iload #6
    //   323: istore #10
    //   325: goto -> 332
    //   328: iload #7
    //   330: istore #10
    //   332: aload_0
    //   333: getfield x : Z
    //   336: ifne -> 365
    //   339: iload #14
    //   341: iload #8
    //   343: if_icmplt -> 365
    //   346: aload_0
    //   347: invokevirtual getScrollY : ()I
    //   350: iload #8
    //   352: if_icmplt -> 358
    //   355: goto -> 388
    //   358: iload #8
    //   360: istore #6
    //   362: goto -> 446
    //   365: aload_0
    //   366: getfield w : Z
    //   369: ifne -> 402
    //   372: iload #14
    //   374: iload #9
    //   376: if_icmpgt -> 402
    //   379: aload_0
    //   380: invokevirtual getScrollY : ()I
    //   383: iload #9
    //   385: if_icmpgt -> 395
    //   388: iload #14
    //   390: istore #6
    //   392: goto -> 446
    //   395: iload #9
    //   397: istore #6
    //   399: goto -> 446
    //   402: iload_1
    //   403: ifle -> 424
    //   406: iload_1
    //   407: iload #15
    //   409: i2d
    //   410: ldc2_w 10.0
    //   413: dmul
    //   414: d2i
    //   415: iadd
    //   416: istore_1
    //   417: iload #7
    //   419: istore #6
    //   421: goto -> 446
    //   424: iload_1
    //   425: ifge -> 442
    //   428: iload_1
    //   429: iload #12
    //   431: i2d
    //   432: ldc2_w 10.0
    //   435: dmul
    //   436: d2i
    //   437: isub
    //   438: istore_1
    //   439: goto -> 446
    //   442: iload #10
    //   444: istore #6
    //   446: iconst_0
    //   447: iload #6
    //   449: invokestatic max : (II)I
    //   452: iload #11
    //   454: invokestatic min : (II)I
    //   457: istore #7
    //   459: aload_0
    //   460: getfield d : Landroid/widget/OverScroller;
    //   463: astore #20
    //   465: aload #20
    //   467: ifnull -> 555
    //   470: aload_0
    //   471: iconst_1
    //   472: putfield g : Z
    //   475: aload_0
    //   476: invokevirtual getScrollX : ()I
    //   479: istore #8
    //   481: aload_0
    //   482: invokevirtual getScrollY : ()I
    //   485: istore #9
    //   487: iload_1
    //   488: ifeq -> 494
    //   491: goto -> 502
    //   494: iload #7
    //   496: aload_0
    //   497: invokevirtual getScrollY : ()I
    //   500: isub
    //   501: istore_1
    //   502: iload #7
    //   504: ifeq -> 518
    //   507: iload #13
    //   509: istore #6
    //   511: iload #7
    //   513: iload #11
    //   515: if_icmpne -> 530
    //   518: iload #17
    //   520: iload #18
    //   522: isub
    //   523: iload #19
    //   525: isub
    //   526: iconst_2
    //   527: idiv
    //   528: istore #6
    //   530: aload #20
    //   532: iload #8
    //   534: iload #9
    //   536: iconst_0
    //   537: iload_1
    //   538: iconst_0
    //   539: iconst_0
    //   540: iload #7
    //   542: iload #7
    //   544: iconst_0
    //   545: iload #6
    //   547: invokevirtual fling : (IIIIIIIIII)V
    //   550: aload_0
    //   551: invokevirtual postInvalidateOnAnimation : ()V
    //   554: return
    //   555: aload_0
    //   556: aload_0
    //   557: invokevirtual getScrollX : ()I
    //   560: iload #7
    //   562: invokevirtual smoothScrollTo : (II)V
    //   565: return }
  
  private void d() {
    if (e()) {
      a.a(this.p);
      a.a(this.q);
      this.p.b(this.q);
    } 
  }
  
  private boolean e() {
    if (this.p != null) {
      String str = this.q;
      if (str != null && !str.isEmpty())
        return true; 
    } 
    return false;
  }
  
  private int getMaxScrollY() { return Math.max(0, this.y.getHeight() - getHeight() - getPaddingBottom() - getPaddingTop()); }
  
  private OverScroller getOverScrollerFromParent() {
    if (!b) {
      b = true;
      try {
        a = ScrollView.class.getDeclaredField("mScroller");
        a.setAccessible(true);
      } catch (NoSuchFieldException noSuchFieldException) {
        Log.w("ReactNative", "Failed to get mScroller field for ScrollView! This app will exhibit the bounce-back scrolling bug :(");
      } 
    } 
    field = a;
    if (field != null)
      try {
        Object object = field.get(this);
        if (object instanceof OverScroller)
          return (OverScroller)object; 
        Log.w("ReactNative", "Failed to cast mScroller field in ScrollView (probably due to OEM changes to AOSP)! This app will exhibit the bounce-back scrolling bug :(");
        return null;
      } catch (IllegalAccessException field) {
        throw new RuntimeException("Failed to get mScroller from ScrollView!", field);
      }  
    return null;
  }
  
  private int getSnapInterval() {
    int i1 = this.t;
    return (i1 != 0) ? i1 : getHeight();
  }
  
  public void a() {
    if (!this.m)
      return; 
    a.a(this.h);
    r.a(this, this.h);
    View view = getChildAt(0);
    if (view instanceof q)
      ((q)view).a(); 
  }
  
  public void a(float paramFloat, int paramInt) { this.z.a(paramFloat, paramInt); }
  
  public void a(int paramInt, float paramFloat) { this.z.a(paramInt, paramFloat); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2) { this.z.a(paramInt, paramFloat1, paramFloat2); }
  
  public void a(Rect paramRect) { paramRect.set((Rect)a.a(this.h)); }
  
  public void b() { awakenScrollBars(); }
  
  public void draw(Canvas paramCanvas) {
    int i1 = this.s;
    byte b1 = 0;
    if (i1 != 0) {
      View view = getChildAt(0);
      if (this.r != null && view != null && view.getBottom() < getHeight()) {
        this.r.setBounds(0, view.getBottom(), getWidth(), getHeight());
        this.r.draw(paramCanvas);
      } 
    } 
    getDrawingRect(this.f);
    String str = this.i;
    if (str.hashCode() != 466743410 || !str.equals("visible"))
      b1 = -1; 
    if (b1 != 0)
      paramCanvas.clipRect(this.f); 
    super.draw(paramCanvas);
  }
  
  public void fling(int paramInt) {
    paramInt = (int)(Math.abs(paramInt) * Math.signum(this.c.b()));
    if (this.k) {
      c(paramInt);
    } else if (this.d != null) {
      int i1 = getHeight();
      int i2 = getPaddingBottom();
      int i3 = getPaddingTop();
      this.d.fling(getScrollX(), getScrollY(), 0, paramInt, 0, 0, 0, 2147483647, 0, (i1 - i2 - i3) / 2);
      r.b(this);
    } else {
      super.fling(paramInt);
    } 
    a(0, paramInt);
  }
  
  public boolean getRemoveClippedSubviews() { return this.m; }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.m)
      a(); 
  }
  
  public void onChildViewAdded(View paramView1, View paramView2) {
    this.y = paramView2;
    this.y.addOnLayoutChangeListener(this);
  }
  
  public void onChildViewRemoved(View paramView1, View paramView2) {
    this.y.removeOnLayoutChangeListener(this);
    this.y = null;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) {
    if (!this.n)
      return false; 
    try {
      if (super.onInterceptTouchEvent(paramMotionEvent)) {
        f.a(this, paramMotionEvent);
        g.a(this);
        this.j = true;
        c();
        return true;
      } 
    } catch (IllegalArgumentException paramMotionEvent) {
      Log.w("ReactNative", "Error intercepting touch event.", paramMotionEvent);
    } 
    return false;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { scrollTo(getScrollX(), getScrollY()); }
  
  public void onLayoutChange(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8) {
    if (this.y == null)
      return; 
    paramInt1 = getScrollY();
    paramInt2 = getMaxScrollY();
    if (paramInt1 > paramInt2)
      scrollTo(getScrollX(), paramInt2); 
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    j.a(paramInt1, paramInt2);
    setMeasuredDimension(View.MeasureSpec.getSize(paramInt1), View.MeasureSpec.getSize(paramInt2));
  }
  
  protected void onOverScrolled(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2) {
    OverScroller overScroller = this.d;
    int i1 = paramInt2;
    if (overScroller != null) {
      i1 = paramInt2;
      if (!overScroller.isFinished()) {
        i1 = paramInt2;
        if (this.d.getCurrY() != this.d.getFinalY()) {
          int i2 = getMaxScrollY();
          i1 = paramInt2;
          if (paramInt2 >= i2) {
            this.d.abortAnimation();
            i1 = i2;
          } 
        } 
      } 
    } 
    super.onOverScrolled(paramInt1, i1, paramBoolean1, paramBoolean2);
  }
  
  protected void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    this.g = true;
    if (this.c.a(paramInt1, paramInt2)) {
      if (this.m)
        a(); 
      g.a(this, this.c.a(), this.c.b());
    } 
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.m)
      a(); 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    if (!this.n)
      return false; 
    this.e.a(paramMotionEvent);
    if ((paramMotionEvent.getAction() & 0xFF) == 1 && this.j) {
      float f1 = this.e.a();
      float f2 = this.e.b();
      g.b(this, f1, f2);
      this.j = false;
      a(Math.round(f1), Math.round(f2));
    } 
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setBackgroundColor(int paramInt) { this.z.a(paramInt); }
  
  public void setBorderRadius(float paramFloat) { this.z.a(paramFloat); }
  
  public void setBorderStyle(String paramString) { this.z.a(paramString); }
  
  public void setDecelerationRate(float paramFloat) {
    this.u = paramFloat;
    OverScroller overScroller = this.d;
    if (overScroller != null)
      overScroller.setFriction(1.0F - this.u); 
  }
  
  public void setEndFillColor(int paramInt) {
    if (paramInt != this.s) {
      this.s = paramInt;
      this.r = new ColorDrawable(this.s);
    } 
  }
  
  public void setOverflow(String paramString) {
    this.i = paramString;
    invalidate();
  }
  
  public void setPagingEnabled(boolean paramBoolean) { this.k = paramBoolean; }
  
  public void setRemoveClippedSubviews(boolean paramBoolean) {
    if (paramBoolean && this.h == null)
      this.h = new Rect(); 
    this.m = paramBoolean;
    a();
  }
  
  public void setScrollEnabled(boolean paramBoolean) { this.n = paramBoolean; }
  
  public void setScrollPerfTag(String paramString) { this.q = paramString; }
  
  public void setSendMomentumEvents(boolean paramBoolean) { this.o = paramBoolean; }
  
  public void setSnapInterval(int paramInt) { this.t = paramInt; }
  
  public void setSnapOffsets(List<Integer> paramList) { this.v = paramList; }
  
  public void setSnapToEnd(boolean paramBoolean) { this.x = paramBoolean; }
  
  public void setSnapToStart(boolean paramBoolean) { this.w = paramBoolean; }
}
