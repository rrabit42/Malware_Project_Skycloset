package com.facebook.react.views.scroll;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.support.v4.f.r;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.HorizontalScrollView;
import android.widget.OverScroller;
import com.facebook.i.a.a;
import com.facebook.react.uimanager.events.f;
import com.facebook.react.uimanager.j;
import com.facebook.react.uimanager.q;
import com.facebook.react.uimanager.r;
import com.facebook.react.views.view.e;
import java.lang.reflect.Field;
import java.util.List;

public class d extends HorizontalScrollView implements q {
  private static Field a;
  
  private static boolean b;
  
  private final b c = new b();
  
  private final OverScroller d;
  
  private final j e = new j();
  
  private final Rect f = new Rect();
  
  private boolean g;
  
  private Rect h;
  
  private String i = "hidden";
  
  private boolean j;
  
  private boolean k = false;
  
  private Runnable l;
  
  private boolean m;
  
  private boolean n = true;
  
  private boolean o;
  
  private a p = null;
  
  private String q;
  
  private Drawable r;
  
  private int s = 0;
  
  private int t = 0;
  
  private float u = 0.985F;
  
  private List<Integer> v;
  
  private boolean w = true;
  
  private boolean x = true;
  
  private e y = new e(this);
  
  static  {
  
  }
  
  public d(Context paramContext, a parama) {
    super(paramContext);
    this.p = parama;
    this.d = getOverScrollerFromParent();
  }
  
  private int a(int paramInt) {
    OverScroller overScroller = new OverScroller(getContext());
    overScroller.setFriction(1.0F - this.u);
    int i1 = Math.max(0, computeHorizontalScrollRange() - getWidth());
    int i2 = getWidth();
    int i3 = r.f(this);
    int i4 = r.g(this);
    overScroller.fling(getScrollX(), getScrollY(), paramInt, 0, 0, i1, 0, 0, (i2 - i3 - i4) / 2, 0);
    return overScroller.getFinalX();
  }
  
  private void a(int paramInt1, int paramInt2) {
    if (!this.o && !this.k && !e())
      return; 
    if (this.l != null)
      return; 
    if (this.o)
      g.a(this, paramInt1, paramInt2); 
    this.g = false;
    this.l = new Object(this);
    r.a(this, this.l, 20L);
  }
  
  private void b(int paramInt) {
    int i2;
    int i1;
    double d2 = getSnapInterval();
    double d1 = getScrollX();
    double d3 = a(paramInt);
    double d4 = d1 / d2;
    int i3 = (int)Math.floor(d4);
    int i5 = (int)Math.ceil(d4);
    int i4 = (int)Math.round(d4);
    int i6 = (int)Math.round(d3 / d2);
    if (paramInt > 0 && i5 == i3) {
      i2 = i5 + 1;
      i1 = i3;
    } else {
      i1 = i3;
      i2 = i5;
      if (paramInt < 0) {
        i1 = i3;
        i2 = i5;
        if (i3 == i5) {
          i1 = i3 - 1;
          i2 = i5;
        } 
      } 
    } 
    if (paramInt > 0 && i4 < i2 && i6 > i1) {
      i3 = i2;
    } else {
      i3 = i4;
      if (paramInt < 0) {
        i3 = i4;
        if (i4 > i1) {
          i3 = i4;
          if (i6 < i2)
            i3 = i1; 
        } 
      } 
    } 
    d2 = i3 * d2;
    if (d2 != d1) {
      this.g = true;
      smoothScrollTo((int)d2, getScrollY());
    } 
  }
  
  private void c() {
    if (e()) {
      a.a(this.p);
      a.a(this.q);
      this.p.a(this.q);
    } 
  }
  
  private void c(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getChildCount : ()I
    //   4: ifgt -> 8
    //   7: return
    //   8: aload_0
    //   9: getfield t : I
    //   12: ifne -> 28
    //   15: aload_0
    //   16: getfield v : Ljava/util/List;
    //   19: ifnonnull -> 28
    //   22: aload_0
    //   23: iload_1
    //   24: invokespecial b : (I)V
    //   27: return
    //   28: aload_0
    //   29: invokevirtual computeHorizontalScrollRange : ()I
    //   32: istore #6
    //   34: aload_0
    //   35: invokevirtual getWidth : ()I
    //   38: istore #7
    //   40: iconst_0
    //   41: istore #15
    //   43: iconst_0
    //   44: iload #6
    //   46: iload #7
    //   48: isub
    //   49: invokestatic max : (II)I
    //   52: istore #12
    //   54: aload_0
    //   55: iload_1
    //   56: invokespecial a : (I)I
    //   59: istore #7
    //   61: aload_0
    //   62: invokevirtual getWidth : ()I
    //   65: istore #18
    //   67: aload_0
    //   68: invokestatic f : (Landroid/view/View;)I
    //   71: istore #19
    //   73: aload_0
    //   74: invokestatic g : (Landroid/view/View;)I
    //   77: istore #20
    //   79: invokestatic getDefault : ()Ljava/util/Locale;
    //   82: invokestatic a : (Ljava/util/Locale;)I
    //   85: iconst_1
    //   86: if_icmpne -> 95
    //   89: iconst_1
    //   90: istore #13
    //   92: goto -> 98
    //   95: iconst_0
    //   96: istore #13
    //   98: iload #13
    //   100: ifeq -> 117
    //   103: iload #12
    //   105: iload #7
    //   107: isub
    //   108: istore #7
    //   110: iload_1
    //   111: ineg
    //   112: istore #8
    //   114: goto -> 120
    //   117: iload_1
    //   118: istore #8
    //   120: aload_0
    //   121: getfield v : Ljava/util/List;
    //   124: astore #22
    //   126: aload #22
    //   128: ifnull -> 308
    //   131: aload #22
    //   133: iconst_0
    //   134: invokeinterface get : (I)Ljava/lang/Object;
    //   139: checkcast java/lang/Integer
    //   142: invokevirtual intValue : ()I
    //   145: istore #17
    //   147: aload_0
    //   148: getfield v : Ljava/util/List;
    //   151: astore #22
    //   153: aload #22
    //   155: aload #22
    //   157: invokeinterface size : ()I
    //   162: iconst_1
    //   163: isub
    //   164: invokeinterface get : (I)Ljava/lang/Object;
    //   169: checkcast java/lang/Integer
    //   172: invokevirtual intValue : ()I
    //   175: istore #16
    //   177: iload #12
    //   179: istore_1
    //   180: iconst_0
    //   181: istore #9
    //   183: iload #9
    //   185: istore #6
    //   187: iload #9
    //   189: aload_0
    //   190: getfield v : Ljava/util/List;
    //   193: invokeinterface size : ()I
    //   198: if_icmpge -> 297
    //   201: aload_0
    //   202: getfield v : Ljava/util/List;
    //   205: iload #9
    //   207: invokeinterface get : (I)Ljava/lang/Object;
    //   212: checkcast java/lang/Integer
    //   215: invokevirtual intValue : ()I
    //   218: istore #11
    //   220: iload #6
    //   222: istore #10
    //   224: iload #11
    //   226: iload #7
    //   228: if_icmpgt -> 252
    //   231: iload #6
    //   233: istore #10
    //   235: iload #7
    //   237: iload #11
    //   239: isub
    //   240: iload #7
    //   242: iload #6
    //   244: isub
    //   245: if_icmpge -> 252
    //   248: iload #11
    //   250: istore #10
    //   252: iload_1
    //   253: istore #14
    //   255: iload #11
    //   257: iload #7
    //   259: if_icmplt -> 281
    //   262: iload_1
    //   263: istore #14
    //   265: iload #11
    //   267: iload #7
    //   269: isub
    //   270: iload_1
    //   271: iload #7
    //   273: isub
    //   274: if_icmpge -> 281
    //   277: iload #11
    //   279: istore #14
    //   281: iload #9
    //   283: iconst_1
    //   284: iadd
    //   285: istore #9
    //   287: iload #10
    //   289: istore #6
    //   291: iload #14
    //   293: istore_1
    //   294: goto -> 187
    //   297: iload #17
    //   299: istore #10
    //   301: iload #16
    //   303: istore #9
    //   305: goto -> 352
    //   308: aload_0
    //   309: invokespecial getSnapInterval : ()I
    //   312: i2d
    //   313: dstore_2
    //   314: iload #7
    //   316: i2d
    //   317: dload_2
    //   318: ddiv
    //   319: dstore #4
    //   321: dload #4
    //   323: invokestatic floor : (D)D
    //   326: dload_2
    //   327: dmul
    //   328: d2i
    //   329: istore #6
    //   331: dload #4
    //   333: invokestatic ceil : (D)D
    //   336: dload_2
    //   337: dmul
    //   338: d2i
    //   339: iload #12
    //   341: invokestatic min : (II)I
    //   344: istore_1
    //   345: iload #12
    //   347: istore #9
    //   349: iconst_0
    //   350: istore #10
    //   352: iload #7
    //   354: iload #6
    //   356: isub
    //   357: istore #17
    //   359: iload_1
    //   360: iload #7
    //   362: isub
    //   363: istore #21
    //   365: iload #17
    //   367: iload #21
    //   369: if_icmpge -> 379
    //   372: iload #6
    //   374: istore #11
    //   376: goto -> 382
    //   379: iload_1
    //   380: istore #11
    //   382: aload_0
    //   383: invokevirtual getScrollX : ()I
    //   386: istore #16
    //   388: iload #16
    //   390: istore #14
    //   392: iload #13
    //   394: ifeq -> 404
    //   397: iload #12
    //   399: iload #16
    //   401: isub
    //   402: istore #14
    //   404: aload_0
    //   405: getfield x : Z
    //   408: ifne -> 438
    //   411: iload #7
    //   413: iload #9
    //   415: if_icmplt -> 438
    //   418: iload #14
    //   420: iload #9
    //   422: if_icmplt -> 428
    //   425: goto -> 459
    //   428: iload #9
    //   430: istore_1
    //   431: iload #8
    //   433: istore #7
    //   435: goto -> 528
    //   438: aload_0
    //   439: getfield w : Z
    //   442: ifne -> 479
    //   445: iload #7
    //   447: iload #10
    //   449: if_icmpgt -> 479
    //   452: iload #14
    //   454: iload #10
    //   456: if_icmpgt -> 469
    //   459: iload #7
    //   461: istore_1
    //   462: iload #8
    //   464: istore #7
    //   466: goto -> 528
    //   469: iload #10
    //   471: istore_1
    //   472: iload #8
    //   474: istore #7
    //   476: goto -> 528
    //   479: iload #8
    //   481: ifle -> 500
    //   484: iload #8
    //   486: iload #21
    //   488: i2d
    //   489: ldc2_w 10.0
    //   492: dmul
    //   493: d2i
    //   494: iadd
    //   495: istore #7
    //   497: goto -> 528
    //   500: iload #8
    //   502: istore #7
    //   504: iload #11
    //   506: istore_1
    //   507: iload #8
    //   509: ifge -> 528
    //   512: iload #8
    //   514: iload #17
    //   516: i2d
    //   517: ldc2_w 10.0
    //   520: dmul
    //   521: d2i
    //   522: isub
    //   523: istore #7
    //   525: iload #6
    //   527: istore_1
    //   528: iconst_0
    //   529: iload_1
    //   530: invokestatic max : (II)I
    //   533: iload #12
    //   535: invokestatic min : (II)I
    //   538: istore #8
    //   540: iload #8
    //   542: istore #6
    //   544: iload #7
    //   546: istore_1
    //   547: iload #13
    //   549: ifeq -> 563
    //   552: iload #12
    //   554: iload #8
    //   556: isub
    //   557: istore #6
    //   559: iload #7
    //   561: ineg
    //   562: istore_1
    //   563: aload_0
    //   564: getfield d : Landroid/widget/OverScroller;
    //   567: astore #22
    //   569: aload #22
    //   571: ifnull -> 659
    //   574: aload_0
    //   575: iconst_1
    //   576: putfield g : Z
    //   579: aload_0
    //   580: invokevirtual getScrollX : ()I
    //   583: istore #8
    //   585: aload_0
    //   586: invokevirtual getScrollY : ()I
    //   589: istore #9
    //   591: iload_1
    //   592: ifeq -> 598
    //   595: goto -> 606
    //   598: iload #6
    //   600: aload_0
    //   601: invokevirtual getScrollX : ()I
    //   604: isub
    //   605: istore_1
    //   606: iload #6
    //   608: ifeq -> 622
    //   611: iload #15
    //   613: istore #7
    //   615: iload #6
    //   617: iload #12
    //   619: if_icmpne -> 634
    //   622: iload #18
    //   624: iload #19
    //   626: isub
    //   627: iload #20
    //   629: isub
    //   630: iconst_2
    //   631: idiv
    //   632: istore #7
    //   634: aload #22
    //   636: iload #8
    //   638: iload #9
    //   640: iload_1
    //   641: iconst_0
    //   642: iload #6
    //   644: iload #6
    //   646: iconst_0
    //   647: iconst_0
    //   648: iload #7
    //   650: iconst_0
    //   651: invokevirtual fling : (IIIIIIIIII)V
    //   654: aload_0
    //   655: invokevirtual postInvalidateOnAnimation : ()V
    //   658: return
    //   659: aload_0
    //   660: iload #6
    //   662: aload_0
    //   663: invokevirtual getScrollY : ()I
    //   666: invokevirtual smoothScrollTo : (II)V
    //   669: return }
  
  private void d() {
    if (e()) {
      a.a(this.p);
      a.a(this.q);
      this.p.b(this.q);
    } 
  }
  
  private boolean e() {
    if (this.p != null) {
      String str = this.q;
      if (str != null && !str.isEmpty())
        return true; 
    } 
    return false;
  }
  
  private OverScroller getOverScrollerFromParent() {
    if (!b) {
      b = true;
      try {
        a = HorizontalScrollView.class.getDeclaredField("mScroller");
        a.setAccessible(true);
      } catch (NoSuchFieldException noSuchFieldException) {
        Log.w("ReactNative", "Failed to get mScroller field for HorizontalScrollView! This app will exhibit the bounce-back scrolling bug :(");
      } 
    } 
    field = a;
    if (field != null)
      try {
        Object object = field.get(this);
        if (object instanceof OverScroller)
          return (OverScroller)object; 
        Log.w("ReactNative", "Failed to cast mScroller field in HorizontalScrollView (probably due to OEM changes to AOSP)! This app will exhibit the bounce-back scrolling bug :(");
        return null;
      } catch (IllegalAccessException field) {
        throw new RuntimeException("Failed to get mScroller from HorizontalScrollView!", field);
      }  
    return null;
  }
  
  private int getSnapInterval() {
    int i1 = this.t;
    return (i1 != 0) ? i1 : getWidth();
  }
  
  public void a() {
    if (!this.m)
      return; 
    a.a(this.h);
    r.a(this, this.h);
    View view = getChildAt(0);
    if (view instanceof q)
      ((q)view).a(); 
  }
  
  public void a(float paramFloat, int paramInt) { this.y.a(paramFloat, paramInt); }
  
  public void a(int paramInt, float paramFloat) { this.y.a(paramInt, paramFloat); }
  
  public void a(int paramInt, float paramFloat1, float paramFloat2) { this.y.a(paramInt, paramFloat1, paramFloat2); }
  
  public void a(Rect paramRect) { paramRect.set((Rect)a.a(this.h)); }
  
  public void b() { awakenScrollBars(); }
  
  public void draw(Canvas paramCanvas) {
    if (this.s != 0) {
      View view = getChildAt(0);
      if (this.r != null && view != null && view.getRight() < getWidth()) {
        this.r.setBounds(view.getRight(), 0, getWidth(), getHeight());
        this.r.draw(paramCanvas);
      } 
    } 
    super.draw(paramCanvas);
  }
  
  public void fling(int paramInt) {
    paramInt = (int)(Math.abs(paramInt) * Math.signum(this.c.a()));
    if (this.k) {
      c(paramInt);
    } else if (this.d != null) {
      int i1 = getWidth();
      int i2 = r.f(this);
      int i3 = r.g(this);
      this.d.fling(getScrollX(), getScrollY(), paramInt, 0, 0, 2147483647, 0, 0, (i1 - i2 - i3) / 2, 0);
      r.b(this);
    } else {
      super.fling(paramInt);
    } 
    a(paramInt, 0);
  }
  
  public boolean getRemoveClippedSubviews() { return this.m; }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.m)
      a(); 
  }
  
  protected void onDraw(Canvas paramCanvas) {
    byte b1;
    getDrawingRect(this.f);
    String str = this.i;
    if (str.hashCode() == 466743410 && str.equals("visible")) {
      b1 = 0;
    } else {
      b1 = -1;
    } 
    if (b1 != 0)
      paramCanvas.clipRect(this.f); 
    super.onDraw(paramCanvas);
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) {
    if (!this.n)
      return false; 
    try {
      if (super.onInterceptTouchEvent(paramMotionEvent)) {
        f.a(this, paramMotionEvent);
        g.a(this);
        this.j = true;
        c();
        return true;
      } 
    } catch (IllegalArgumentException paramMotionEvent) {
      Log.w("ReactNative", "Error intercepting touch event.", paramMotionEvent);
    } 
    return false;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { scrollTo(getScrollX(), getScrollY()); }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    j.a(paramInt1, paramInt2);
    setMeasuredDimension(View.MeasureSpec.getSize(paramInt1), View.MeasureSpec.getSize(paramInt2));
  }
  
  protected void onOverScrolled(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2) {
    OverScroller overScroller = this.d;
    int i1 = paramInt1;
    if (overScroller != null) {
      i1 = paramInt1;
      if (!overScroller.isFinished()) {
        i1 = paramInt1;
        if (this.d.getCurrX() != this.d.getFinalX()) {
          int i2 = computeHorizontalScrollRange() - getWidth();
          i1 = paramInt1;
          if (paramInt1 >= i2) {
            this.d.abortAnimation();
            i1 = i2;
          } 
        } 
      } 
    } 
    super.onOverScrolled(i1, paramInt2, paramBoolean1, paramBoolean2);
  }
  
  protected void onScrollChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onScrollChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    this.g = true;
    if (this.c.a(paramInt1, paramInt2)) {
      if (this.m)
        a(); 
      g.a(this, this.c.a(), this.c.b());
    } 
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.m)
      a(); 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    if (!this.n)
      return false; 
    this.e.a(paramMotionEvent);
    if ((paramMotionEvent.getAction() & 0xFF) == 1 && this.j) {
      float f1 = this.e.a();
      float f2 = this.e.b();
      g.b(this, f1, f2);
      this.j = false;
      a(Math.round(f1), Math.round(f2));
    } 
    return super.onTouchEvent(paramMotionEvent);
  }
  
  public void setBackgroundColor(int paramInt) { this.y.a(paramInt); }
  
  public void setBorderRadius(float paramFloat) { this.y.a(paramFloat); }
  
  public void setBorderStyle(String paramString) { this.y.a(paramString); }
  
  public void setDecelerationRate(float paramFloat) {
    this.u = paramFloat;
    OverScroller overScroller = this.d;
    if (overScroller != null)
      overScroller.setFriction(1.0F - this.u); 
  }
  
  public void setEndFillColor(int paramInt) {
    if (paramInt != this.s) {
      this.s = paramInt;
      this.r = new ColorDrawable(this.s);
    } 
  }
  
  public void setOverflow(String paramString) {
    this.i = paramString;
    invalidate();
  }
  
  public void setPagingEnabled(boolean paramBoolean) { this.k = paramBoolean; }
  
  public void setRemoveClippedSubviews(boolean paramBoolean) {
    if (paramBoolean && this.h == null)
      this.h = new Rect(); 
    this.m = paramBoolean;
    a();
  }
  
  public void setScrollEnabled(boolean paramBoolean) { this.n = paramBoolean; }
  
  public void setScrollPerfTag(String paramString) { this.q = paramString; }
  
  public void setSendMomentumEvents(boolean paramBoolean) { this.o = paramBoolean; }
  
  public void setSnapInterval(int paramInt) { this.t = paramInt; }
  
  public void setSnapOffsets(List<Integer> paramList) { this.v = paramList; }
  
  public void setSnapToEnd(boolean paramBoolean) { this.x = paramBoolean; }
  
  public void setSnapToStart(boolean paramBoolean) { this.w = paramBoolean; }
}
