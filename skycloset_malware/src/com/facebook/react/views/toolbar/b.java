package com.facebook.react.views.toolbar;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import com.facebook.f.a.a.c;
import com.facebook.f.a.a.e;
import com.facebook.f.e.q;
import com.facebook.f.f.a;
import com.facebook.f.f.b;
import com.facebook.f.i.b;
import com.facebook.f.i.e;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.o;

public class b extends Toolbar {
  private final b e;
  
  private final b f;
  
  private final b g;
  
  private final e<a> h = new e();
  
  private b i;
  
  private b j;
  
  private b k;
  
  private final Runnable l = new Object(this);
  
  public b(Context paramContext) {
    super(paramContext);
    this.g = (this.f = (this.e = b.a(o(), paramContext)).a(o(), paramContext)).a(o(), paramContext);
    this.i = new Object(this, this.e);
    this.j = new Object(this, this.f);
    this.k = new Object(this, this.g);
  }
  
  private int a(String paramString) { return getResources().getIdentifier(paramString, "drawable", getContext().getPackageName()); }
  
  private c a(ReadableMap paramReadableMap) { return (paramReadableMap.hasKey("width") && paramReadableMap.hasKey("height")) ? new c(Math.round(o.a(paramReadableMap.getInt("width"))), Math.round(o.a(paramReadableMap.getInt("height")))) : null; }
  
  private void a(MenuItem paramMenuItem, ReadableMap paramReadableMap) {
    b b1 = b.a(o(), getContext());
    a a = new a(this, paramMenuItem, b1);
    a.a(a(paramReadableMap));
    a(paramReadableMap, a, b1);
    this.h.a(b1);
  }
  
  private void a(ReadableMap paramReadableMap, b paramb, b paramb1) {
    String str;
    if (paramReadableMap != null) {
      str = paramReadableMap.getString("uri");
    } else {
      str = null;
    } 
    if (str == null) {
      paramb.a(null);
      paramb.a(null);
      return;
    } 
    if (str.startsWith("http://") || str.startsWith("https://") || str.startsWith("file://")) {
      paramb.a(a(paramReadableMap));
      paramb1.a(((e)((e)c.a().a(Uri.parse(str)).a(paramb)).b(paramb1.d())).j());
      paramb1.f().setVisible(true, true);
      return;
    } 
    paramb.a(b(str));
  }
  
  private Drawable b(String paramString) { return (a(paramString) != 0) ? getResources().getDrawable(a(paramString)) : null; }
  
  private void m() {
    this.e.c();
    this.f.c();
    this.g.c();
    this.h.b();
  }
  
  private void n() {
    this.e.b();
    this.f.b();
    this.g.b();
    this.h.a();
  }
  
  private a o() { return (new b(getResources())).a(q.b.c).a(0).r(); }
  
  public void onAttachedToWindow() {
    super.onAttachedToWindow();
    n();
  }
  
  public void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    m();
  }
  
  public void onFinishTemporaryDetach() {
    super.onFinishTemporaryDetach();
    n();
  }
  
  public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    m();
  }
  
  public void requestLayout() {
    super.requestLayout();
    post(this.l);
  }
  
  void setActions(ReadableArray paramReadableArray) {
    Menu menu = getMenu();
    menu.clear();
    this.h.c();
    if (paramReadableArray != null)
      for (byte b1 = 0; b1 < paramReadableArray.size(); b1++) {
        byte b2;
        ReadableMap readableMap = paramReadableArray.getMap(b1);
        MenuItem menuItem = menu.add(0, 0, b1, readableMap.getString("title"));
        if (readableMap.hasKey("icon"))
          a(menuItem, readableMap.getMap("icon")); 
        if (readableMap.hasKey("show")) {
          b2 = readableMap.getInt("show");
        } else {
          b2 = 0;
        } 
        byte b3 = b2;
        if (readableMap.hasKey("showWithText")) {
          b3 = b2;
          if (readableMap.getBoolean("showWithText"))
            b3 = b2 | 0x4; 
        } 
        menuItem.setShowAsAction(b3);
      }  
  }
  
  void setLogoSource(ReadableMap paramReadableMap) { a(paramReadableMap, this.i, this.e); }
  
  void setNavIconSource(ReadableMap paramReadableMap) { a(paramReadableMap, this.j, this.f); }
  
  void setOverflowIconSource(ReadableMap paramReadableMap) { a(paramReadableMap, this.k, this.g); }
}
