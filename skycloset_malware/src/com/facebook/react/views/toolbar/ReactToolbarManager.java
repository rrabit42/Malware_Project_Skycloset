package com.facebook.react.views.toolbar;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.common.e;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.a.a;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.events.d;
import com.facebook.react.uimanager.o;
import java.util.Map;

public class ReactToolbarManager extends ViewGroupManager<b> {
  private static final int COMMAND_DISMISS_POPUP_MENUS = 1;
  
  private static final String REACT_CLASS = "ToolbarAndroid";
  
  private static int[] getDefaultColors(Context paramContext) {
    theme = paramContext.getTheme();
    typedArray = null;
    context2 = null;
    try {
    
    } finally {
      Context context = null;
      context2 = null;
      paramContext = context2;
      context1 = paramContext;
      context3 = paramContext;
    } 
    recycleQuietly(context3);
    recycleQuietly(typedArray);
    recycleQuietly(context1);
    recycleQuietly(context2);
    throw paramContext;
  }
  
  private int[] getDefaultContentInsets(Context paramContext) {
    theme = paramContext.getTheme();
    typedArray1 = null;
    typedArray2 = null;
    try {
      object = theme.obtainStyledAttributes(new int[] { getIdentifier(paramContext, "toolbarStyle") });
      typedArray1 = typedArray2;
    } finally {
      object = null;
    } 
    recycleQuietly(paramContext);
    recycleQuietly(typedArray1);
    throw object;
  }
  
  private static int getIdentifier(Context paramContext, String paramString) { return paramContext.getResources().getIdentifier(paramString, "attr", paramContext.getPackageName()); }
  
  private static void recycleQuietly(TypedArray paramTypedArray) {
    if (paramTypedArray != null)
      paramTypedArray.recycle(); 
  }
  
  protected void addEventEmitters(af paramaf, b paramb) {
    d d = ((UIManagerModule)paramaf.getNativeModule(UIManagerModule.class)).getEventDispatcher();
    paramb.setNavigationOnClickListener(new Object(this, d, paramb));
    paramb.setOnMenuItemClickListener(new Object(this, d, paramb));
  }
  
  protected b createViewInstance(af paramaf) { return new b(paramaf); }
  
  public Map<String, Integer> getCommandsMap() { return e.a("dismissPopupMenus", Integer.valueOf(1)); }
  
  public Map<String, Object> getExportedViewConstants() { return e.a("ShowAsAction", e.a("never", Integer.valueOf(0), "always", Integer.valueOf(2), "ifRoom", Integer.valueOf(1))); }
  
  public String getName() { return "ToolbarAndroid"; }
  
  public boolean needsCustomLayoutForChildren() { return true; }
  
  public void receiveCommand(b paramb, int paramInt, ReadableArray paramReadableArray) {
    if (paramInt == 1) {
      paramb.f();
      return;
    } 
    throw new IllegalArgumentException(String.format("Unsupported command %d received by %s.", new Object[] { Integer.valueOf(paramInt), getClass().getSimpleName() }));
  }
  
  @a(a = "nativeActions")
  public void setActions(b paramb, ReadableArray paramReadableArray) { paramb.setActions(paramReadableArray); }
  
  @a(a = "contentInsetEnd", d = NaNF)
  public void setContentInsetEnd(b paramb, float paramFloat) {
    int i;
    if (Float.isNaN(paramFloat)) {
      i = getDefaultContentInsets(paramb.getContext())[1];
    } else {
      i = Math.round(o.a(paramFloat));
    } 
    paramb.a(paramb.getContentInsetStart(), i);
  }
  
  @a(a = "contentInsetStart", d = NaNF)
  public void setContentInsetStart(b paramb, float paramFloat) {
    int i;
    if (Float.isNaN(paramFloat)) {
      i = getDefaultContentInsets(paramb.getContext())[0];
    } else {
      i = Math.round(o.a(paramFloat));
    } 
    paramb.a(i, paramb.getContentInsetEnd());
  }
  
  @a(a = "logo")
  public void setLogo(b paramb, ReadableMap paramReadableMap) { paramb.setLogoSource(paramReadableMap); }
  
  @a(a = "navIcon")
  public void setNavIcon(b paramb, ReadableMap paramReadableMap) { paramb.setNavIconSource(paramReadableMap); }
  
  @a(a = "overflowIcon")
  public void setOverflowIcon(b paramb, ReadableMap paramReadableMap) { paramb.setOverflowIconSource(paramReadableMap); }
  
  @a(a = "rtl")
  public void setRtl(b paramb, boolean paramBoolean) { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
  
  @a(a = "subtitle")
  public void setSubtitle(b paramb, String paramString) { paramb.setSubtitle(paramString); }
  
  @a(a = "subtitleColor", b = "Color")
  public void setSubtitleColor(b paramb, Integer paramInteger) {
    int i;
    int[] arrayOfInt = getDefaultColors(paramb.getContext());
    if (paramInteger != null) {
      i = paramInteger.intValue();
    } else {
      i = arrayOfInt[1];
    } 
    paramb.setSubtitleTextColor(i);
  }
  
  @a(a = "title")
  public void setTitle(b paramb, String paramString) { paramb.setTitle(paramString); }
  
  @a(a = "titleColor", b = "Color")
  public void setTitleColor(b paramb, Integer paramInteger) {
    int i;
    int[] arrayOfInt = getDefaultColors(paramb.getContext());
    if (paramInteger != null) {
      i = paramInteger.intValue();
    } else {
      i = arrayOfInt[0];
    } 
    paramb.setTitleTextColor(i);
  }
}
