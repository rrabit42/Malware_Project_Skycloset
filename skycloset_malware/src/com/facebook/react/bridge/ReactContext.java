package com.facebook.react.bridge;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import com.facebook.i.a.a;
import com.facebook.react.bridge.queue.MessageQueueThread;
import com.facebook.react.bridge.queue.ReactQueueConfiguration;
import com.facebook.react.common.LifecycleState;
import java.lang.ref.WeakReference;
import java.util.concurrent.CopyOnWriteArraySet;

public class ReactContext extends ContextWrapper {
  private static final String EARLY_JS_ACCESS_EXCEPTION_MESSAGE = "Tried to access a JS module before the React instance was fully set up. Calls to ReactContext#getJSModule should only happen once initialize() has been called on your native module.";
  
  private final CopyOnWriteArraySet<ActivityEventListener> mActivityEventListeners = new CopyOnWriteArraySet();
  
  private CatalystInstance mCatalystInstance;
  
  private WeakReference<Activity> mCurrentActivity;
  
  private LayoutInflater mInflater;
  
  private MessageQueueThread mJSMessageQueueThread;
  
  private final CopyOnWriteArraySet<LifecycleEventListener> mLifecycleEventListeners = new CopyOnWriteArraySet();
  
  private LifecycleState mLifecycleState = LifecycleState.a;
  
  private NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler;
  
  private MessageQueueThread mNativeModulesMessageQueueThread;
  
  private MessageQueueThread mUiMessageQueueThread;
  
  public ReactContext(Context paramContext) { super(paramContext); }
  
  public void addActivityEventListener(ActivityEventListener paramActivityEventListener) { this.mActivityEventListeners.add(paramActivityEventListener); }
  
  public void addLifecycleEventListener(LifecycleEventListener paramLifecycleEventListener) {
    this.mLifecycleEventListeners.add(paramLifecycleEventListener);
    if (hasActiveCatalystInstance())
      switch (null.$SwitchMap$com$facebook$react$common$LifecycleState[this.mLifecycleState.ordinal()]) {
        default:
          throw new RuntimeException("Unhandled lifecycle state.");
        case 3:
          runOnUiQueueThread(new Object(this, paramLifecycleEventListener));
          break;
        case 1:
        case 2:
          break;
      }  
  }
  
  public void assertOnJSQueueThread() { ((MessageQueueThread)a.a(this.mJSMessageQueueThread)).assertIsOnThread(); }
  
  public void assertOnNativeModulesQueueThread() { ((MessageQueueThread)a.a(this.mNativeModulesMessageQueueThread)).assertIsOnThread(); }
  
  public void assertOnNativeModulesQueueThread(String paramString) { ((MessageQueueThread)a.a(this.mNativeModulesMessageQueueThread)).assertIsOnThread(paramString); }
  
  public void assertOnUiQueueThread() { ((MessageQueueThread)a.a(this.mUiMessageQueueThread)).assertIsOnThread(); }
  
  public void destroy() {
    UiThreadUtil.assertOnUiThread();
    CatalystInstance catalystInstance = this.mCatalystInstance;
    if (catalystInstance != null)
      catalystInstance.destroy(); 
  }
  
  public CatalystInstance getCatalystInstance() { return (CatalystInstance)a.a(this.mCatalystInstance); }
  
  public Activity getCurrentActivity() {
    WeakReference weakReference = this.mCurrentActivity;
    return (weakReference == null) ? null : (Activity)weakReference.get();
  }
  
  public <T extends JavaScriptModule> T getJSModule(Class<T> paramClass) {
    CatalystInstance catalystInstance = this.mCatalystInstance;
    if (catalystInstance != null)
      return (T)catalystInstance.getJSModule(paramClass); 
    throw new RuntimeException("Tried to access a JS module before the React instance was fully set up. Calls to ReactContext#getJSModule should only happen once initialize() has been called on your native module.");
  }
  
  public JavaScriptContextHolder getJavaScriptContextHolder() { return this.mCatalystInstance.getJavaScriptContextHolder(); }
  
  public LifecycleState getLifecycleState() { return this.mLifecycleState; }
  
  public <T extends NativeModule> T getNativeModule(Class<T> paramClass) {
    CatalystInstance catalystInstance = this.mCatalystInstance;
    if (catalystInstance != null)
      return (T)catalystInstance.getNativeModule(paramClass); 
    throw new RuntimeException("Trying to call native module before CatalystInstance has been set!");
  }
  
  public Object getSystemService(String paramString) {
    if ("layout_inflater".equals(paramString)) {
      if (this.mInflater == null)
        this.mInflater = LayoutInflater.from(getBaseContext()).cloneInContext(this); 
      return this.mInflater;
    } 
    return getBaseContext().getSystemService(paramString);
  }
  
  public void handleException(Exception paramException) {
    CatalystInstance catalystInstance = this.mCatalystInstance;
    if (catalystInstance != null && !catalystInstance.isDestroyed()) {
      NativeModuleCallExceptionHandler nativeModuleCallExceptionHandler = this.mNativeModuleCallExceptionHandler;
      if (nativeModuleCallExceptionHandler != null) {
        nativeModuleCallExceptionHandler.handleException(paramException);
        return;
      } 
    } 
    throw new RuntimeException(paramException);
  }
  
  public boolean hasActiveCatalystInstance() {
    CatalystInstance catalystInstance = this.mCatalystInstance;
    return (catalystInstance != null && !catalystInstance.isDestroyed());
  }
  
  public boolean hasCurrentActivity() {
    WeakReference weakReference = this.mCurrentActivity;
    return (weakReference != null && weakReference.get() != null);
  }
  
  public <T extends NativeModule> boolean hasNativeModule(Class<T> paramClass) {
    CatalystInstance catalystInstance = this.mCatalystInstance;
    if (catalystInstance != null)
      return catalystInstance.hasNativeModule(paramClass); 
    throw new RuntimeException("Trying to call native module before CatalystInstance has been set!");
  }
  
  public void initializeWithInstance(CatalystInstance paramCatalystInstance) {
    if (paramCatalystInstance != null) {
      if (this.mCatalystInstance == null) {
        this.mCatalystInstance = paramCatalystInstance;
        ReactQueueConfiguration reactQueueConfiguration = paramCatalystInstance.getReactQueueConfiguration();
        this.mUiMessageQueueThread = reactQueueConfiguration.getUIQueueThread();
        this.mNativeModulesMessageQueueThread = reactQueueConfiguration.getNativeModulesQueueThread();
        this.mJSMessageQueueThread = reactQueueConfiguration.getJSQueueThread();
        return;
      } 
      throw new IllegalStateException("ReactContext has been already initialized");
    } 
    throw new IllegalArgumentException("CatalystInstance cannot be null.");
  }
  
  public boolean isOnJSQueueThread() { return ((MessageQueueThread)a.a(this.mJSMessageQueueThread)).isOnThread(); }
  
  public boolean isOnNativeModulesQueueThread() { return ((MessageQueueThread)a.a(this.mNativeModulesMessageQueueThread)).isOnThread(); }
  
  public boolean isOnUiQueueThread() { return ((MessageQueueThread)a.a(this.mUiMessageQueueThread)).isOnThread(); }
  
  public void onActivityResult(Activity paramActivity, int paramInt1, int paramInt2, Intent paramIntent) {
    for (ActivityEventListener activityEventListener : this.mActivityEventListeners) {
      try {
        activityEventListener.onActivityResult(paramActivity, paramInt1, paramInt2, paramIntent);
      } catch (RuntimeException activityEventListener) {
        handleException(activityEventListener);
      } 
    } 
  }
  
  public void onHostDestroy() {
    UiThreadUtil.assertOnUiThread();
    this.mLifecycleState = LifecycleState.a;
    for (LifecycleEventListener lifecycleEventListener : this.mLifecycleEventListeners) {
      try {
        lifecycleEventListener.onHostDestroy();
      } catch (RuntimeException lifecycleEventListener) {
        handleException(lifecycleEventListener);
      } 
    } 
    this.mCurrentActivity = null;
  }
  
  public void onHostPause() {
    this.mLifecycleState = LifecycleState.b;
    ReactMarker.logMarker(ReactMarkerConstants.ON_HOST_PAUSE_START);
    for (LifecycleEventListener lifecycleEventListener : this.mLifecycleEventListeners) {
      try {
        lifecycleEventListener.onHostPause();
      } catch (RuntimeException lifecycleEventListener) {
        handleException(lifecycleEventListener);
      } 
    } 
    ReactMarker.logMarker(ReactMarkerConstants.ON_HOST_PAUSE_END);
  }
  
  public void onHostResume(Activity paramActivity) {
    this.mLifecycleState = LifecycleState.c;
    this.mCurrentActivity = new WeakReference(paramActivity);
    ReactMarker.logMarker(ReactMarkerConstants.ON_HOST_RESUME_START);
    for (LifecycleEventListener lifecycleEventListener : this.mLifecycleEventListeners) {
      try {
        lifecycleEventListener.onHostResume();
      } catch (RuntimeException lifecycleEventListener) {
        handleException(lifecycleEventListener);
      } 
    } 
    ReactMarker.logMarker(ReactMarkerConstants.ON_HOST_RESUME_END);
  }
  
  public void onNewIntent(Activity paramActivity, Intent paramIntent) {
    UiThreadUtil.assertOnUiThread();
    this.mCurrentActivity = new WeakReference(paramActivity);
    for (ActivityEventListener activityEventListener : this.mActivityEventListeners) {
      try {
        activityEventListener.onNewIntent(paramIntent);
      } catch (RuntimeException activityEventListener) {
        handleException(activityEventListener);
      } 
    } 
  }
  
  public void removeActivityEventListener(ActivityEventListener paramActivityEventListener) { this.mActivityEventListeners.remove(paramActivityEventListener); }
  
  public void removeLifecycleEventListener(LifecycleEventListener paramLifecycleEventListener) { this.mLifecycleEventListeners.remove(paramLifecycleEventListener); }
  
  public void resetPerfStats() {
    MessageQueueThread messageQueueThread = this.mNativeModulesMessageQueueThread;
    if (messageQueueThread != null)
      messageQueueThread.resetPerfStats(); 
    messageQueueThread = this.mJSMessageQueueThread;
    if (messageQueueThread != null)
      messageQueueThread.resetPerfStats(); 
  }
  
  public void runOnJSQueueThread(Runnable paramRunnable) { ((MessageQueueThread)a.a(this.mJSMessageQueueThread)).runOnQueue(paramRunnable); }
  
  public void runOnNativeModulesQueueThread(Runnable paramRunnable) { ((MessageQueueThread)a.a(this.mNativeModulesMessageQueueThread)).runOnQueue(paramRunnable); }
  
  public void runOnUiQueueThread(Runnable paramRunnable) { ((MessageQueueThread)a.a(this.mUiMessageQueueThread)).runOnQueue(paramRunnable); }
  
  public void setNativeModuleCallExceptionHandler(NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler) { this.mNativeModuleCallExceptionHandler = paramNativeModuleCallExceptionHandler; }
  
  public boolean startActivityForResult(Intent paramIntent, int paramInt, Bundle paramBundle) {
    Activity activity = getCurrentActivity();
    a.a(activity);
    activity.startActivityForResult(paramIntent, paramInt, paramBundle);
    return true;
  }
}
