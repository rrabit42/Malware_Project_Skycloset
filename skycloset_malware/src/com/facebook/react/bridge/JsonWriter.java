package com.facebook.react.bridge;

import java.io.Closeable;
import java.io.Writer;
import java.util.ArrayDeque;
import java.util.Deque;

public class JsonWriter implements Closeable {
  private final Deque<Scope> mScopes;
  
  private final Writer mWriter;
  
  public JsonWriter(Writer paramWriter) {
    this.mWriter = paramWriter;
    this.mScopes = new ArrayDeque();
  }
  
  private void beforeName() {
    StringBuilder stringBuilder;
    Scope scope = (Scope)this.mScopes.peek();
    switch (null.$SwitchMap$com$facebook$react$bridge$JsonWriter$Scope[scope.ordinal()]) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unknown scope: ");
        stringBuilder.append(scope);
        throw new IllegalStateException(stringBuilder.toString());
      case 4:
        this.mWriter.write(44);
        return;
      case 2:
        replace(Scope.OBJECT);
        return;
      case 1:
      case 3:
        break;
    } 
    throw new IllegalStateException("name not allowed in array");
  }
  
  private void beforeValue() {
    StringBuilder stringBuilder;
    Scope scope = (Scope)this.mScopes.peek();
    switch (null.$SwitchMap$com$facebook$react$bridge$JsonWriter$Scope[scope.ordinal()]) {
      default:
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unknown scope: ");
        stringBuilder.append(scope);
        throw new IllegalStateException(stringBuilder.toString());
      case 3:
        this.mWriter.write(44);
        return;
      case 2:
        throw new IllegalArgumentException(Scope.EMPTY_OBJECT.name());
      case 1:
        replace(Scope.ARRAY);
        break;
      case 4:
        break;
    } 
  }
  
  private void close(char paramChar) {
    this.mScopes.pop();
    this.mWriter.write(paramChar);
  }
  
  private void open(Scope paramScope, char paramChar) {
    this.mScopes.push(paramScope);
    this.mWriter.write(paramChar);
  }
  
  private void replace(Scope paramScope) {
    this.mScopes.pop();
    this.mScopes.push(paramScope);
  }
  
  private void string(String paramString) {
    this.mWriter.write(34);
    int i = paramString.length();
    for (byte b = 0; b < i; b++) {
      String str;
      Writer writer2;
      Object[] arrayOfObject;
      Writer writer1;
      char c = paramString.charAt(b);
      switch (c) {
        default:
        
        case ' ':
        case ' ':
          writer2 = this.mWriter;
          arrayOfObject = new Object[1];
          arrayOfObject[0] = Integer.valueOf(c);
          writer2.write(String.format("\\u%04x", arrayOfObject));
          break;
        case '"':
        case '\\':
          this.mWriter.write(92);
          this.mWriter.write(c);
          break;
        case '\r':
          writer1 = this.mWriter;
          str = "\\r";
          writer1.write(str);
          break;
        case '\f':
          writer1 = this.mWriter;
          str = "\\f";
          writer1.write(str);
          break;
        case '\n':
          writer1 = this.mWriter;
          str = "\\n";
          writer1.write(str);
          break;
        case '\t':
          writer1 = this.mWriter;
          str = "\\t";
          writer1.write(str);
          break;
        case '\b':
          writer1 = this.mWriter;
          str = "\\b";
          writer1.write(str);
          break;
      } 
      continue;
    } 
    this.mWriter.write(34);
  }
  
  public JsonWriter beginArray() {
    open(Scope.EMPTY_ARRAY, '[');
    return this;
  }
  
  public JsonWriter beginObject() {
    open(Scope.EMPTY_OBJECT, '{');
    return this;
  }
  
  public void close() { this.mWriter.close(); }
  
  public JsonWriter endArray() {
    close(']');
    return this;
  }
  
  public JsonWriter endObject() {
    close('}');
    return this;
  }
  
  public JsonWriter name(String paramString) {
    if (paramString != null) {
      beforeName();
      string(paramString);
      this.mWriter.write(58);
      return this;
    } 
    throw new NullPointerException("name can not be null");
  }
  
  public JsonWriter nullValue() {
    beforeValue();
    this.mWriter.write("null");
    return this;
  }
  
  public JsonWriter rawValue(String paramString) {
    beforeValue();
    this.mWriter.write(paramString);
    return this;
  }
  
  public JsonWriter value(double paramDouble) {
    beforeValue();
    this.mWriter.append(Double.toString(paramDouble));
    return this;
  }
  
  public JsonWriter value(long paramLong) {
    beforeValue();
    this.mWriter.write(Long.toString(paramLong));
    return this;
  }
  
  public JsonWriter value(Number paramNumber) {
    if (paramNumber == null)
      return nullValue(); 
    beforeValue();
    this.mWriter.append(paramNumber.toString());
    return this;
  }
  
  public JsonWriter value(String paramString) {
    if (paramString == null)
      return nullValue(); 
    beforeValue();
    string(paramString);
    return this;
  }
  
  public JsonWriter value(boolean paramBoolean) {
    String str;
    beforeValue();
    Writer writer = this.mWriter;
    if (paramBoolean) {
      str = "true";
    } else {
      str = "false";
    } 
    writer.write(str);
    return this;
  }
}
