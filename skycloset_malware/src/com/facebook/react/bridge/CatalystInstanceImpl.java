package com.facebook.react.bridge;

import android.content.res.AssetManager;
import android.util.Log;
import com.facebook.common.e.a;
import com.facebook.i.a.a;
import com.facebook.j.a.a;
import com.facebook.jni.HybridData;
import com.facebook.react.bridge.queue.MessageQueueThread;
import com.facebook.react.bridge.queue.ReactQueueConfiguration;
import com.facebook.react.bridge.queue.ReactQueueConfigurationImpl;
import com.facebook.react.bridge.queue.ReactQueueConfigurationSpec;
import com.facebook.react.module.a.a;
import com.facebook.systrace.TraceListener;
import com.facebook.systrace.a;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

@a
public class CatalystInstanceImpl implements CatalystInstance {
  private static final AtomicInteger sNextInstanceIdForTrace;
  
  private final CopyOnWriteArrayList<NotThreadSafeBridgeIdleDebugListener> mBridgeIdleListeners;
  
  private final HybridData mHybridData;
  
  private boolean mInitialized;
  
  private boolean mJSBundleHasLoaded;
  
  private final JSBundleLoader mJSBundleLoader;
  
  private final ArrayList<PendingJSCall> mJSCallsPendingInit;
  
  private final Object mJSCallsPendingInitLock;
  
  private final JSIModuleRegistry mJSIModuleRegistry;
  
  private final JavaScriptModuleRegistry mJSModuleRegistry;
  
  private JavaScriptContextHolder mJavaScriptContextHolder;
  
  private final String mJsPendingCallsTitleForTrace;
  
  private final NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler;
  
  private final NativeModuleRegistry mNativeModuleRegistry;
  
  private final MessageQueueThread mNativeModulesQueueThread;
  
  private final AtomicInteger mPendingJSCalls = new AtomicInteger(0);
  
  private final ReactQueueConfigurationImpl mReactQueueConfiguration;
  
  private String mSourceURL;
  
  private final TraceListener mTraceListener;
  
  static  {
    ReactBridge.staticInit();
    sNextInstanceIdForTrace = new AtomicInteger(1);
  }
  
  private CatalystInstanceImpl(ReactQueueConfigurationSpec paramReactQueueConfigurationSpec, JavaScriptExecutor paramJavaScriptExecutor, NativeModuleRegistry paramNativeModuleRegistry, JSBundleLoader paramJSBundleLoader, NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("pending_js_calls_instance");
    stringBuilder.append(sNextInstanceIdForTrace.getAndIncrement());
    this.mJsPendingCallsTitleForTrace = stringBuilder.toString();
    this.mDestroyed = false;
    this.mJSCallsPendingInit = new ArrayList();
    this.mJSCallsPendingInitLock = new Object();
    this.mJSIModuleRegistry = new JSIModuleRegistry();
    this.mInitialized = false;
    this.mAcceptCalls = false;
    Log.d("ReactNative", "Initializing React Xplat Bridge.");
    a.a(0L, "createCatalystInstanceImpl");
    this.mHybridData = initHybrid();
    this.mReactQueueConfiguration = ReactQueueConfigurationImpl.create(paramReactQueueConfigurationSpec, new NativeExceptionHandler(this, null));
    this.mBridgeIdleListeners = new CopyOnWriteArrayList();
    this.mNativeModuleRegistry = paramNativeModuleRegistry;
    this.mJSModuleRegistry = new JavaScriptModuleRegistry();
    this.mJSBundleLoader = paramJSBundleLoader;
    this.mNativeModuleCallExceptionHandler = paramNativeModuleCallExceptionHandler;
    this.mNativeModulesQueueThread = this.mReactQueueConfiguration.getNativeModulesQueueThread();
    this.mTraceListener = new JSProfilerTraceListener(this);
    a.b(0L);
    Log.d("ReactNative", "Initializing React Xplat Bridge before initializeBridge");
    a.a(0L, "initializeCxxBridge");
    initializeBridge(new BridgeCallback(this), paramJavaScriptExecutor, this.mReactQueueConfiguration.getJSQueueThread(), this.mNativeModulesQueueThread, this.mNativeModuleRegistry.getJavaModules(this), this.mNativeModuleRegistry.getCxxModules());
    Log.d("ReactNative", "Initializing React Xplat Bridge after initializeBridge");
    a.b(0L);
    this.mJavaScriptContextHolder = new JavaScriptContextHolder(getJavaScriptContext());
  }
  
  private void decrementPendingJSCalls() {
    boolean bool;
    int i = this.mPendingJSCalls.decrementAndGet();
    if (i == 0) {
      bool = true;
    } else {
      bool = false;
    } 
    a.c(0L, this.mJsPendingCallsTitleForTrace, i);
    if (bool && !this.mBridgeIdleListeners.isEmpty())
      this.mNativeModulesQueueThread.runOnQueue(new Object(this)); 
  }
  
  private native long getJavaScriptContext();
  
  private <T extends NativeModule> String getNameFromAnnotation(Class<T> paramClass) {
    a a = (a)paramClass.getAnnotation(a.class);
    if (a != null)
      return a.a(); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Could not find @ReactModule annotation in ");
    stringBuilder.append(paramClass.getCanonicalName());
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  private void incrementPendingJSCalls() {
    boolean bool;
    int i = this.mPendingJSCalls.getAndIncrement();
    if (i == 0) {
      bool = true;
    } else {
      bool = false;
    } 
    a.c(0L, this.mJsPendingCallsTitleForTrace, i + 1);
    if (bool && !this.mBridgeIdleListeners.isEmpty())
      this.mNativeModulesQueueThread.runOnQueue(new Object(this)); 
  }
  
  private static native HybridData initHybrid();
  
  private native void initializeBridge(ReactCallback paramReactCallback, JavaScriptExecutor paramJavaScriptExecutor, MessageQueueThread paramMessageQueueThread1, MessageQueueThread paramMessageQueueThread2, Collection<JavaModuleWrapper> paramCollection1, Collection<ModuleHolder> paramCollection2);
  
  private native void jniCallJSCallback(int paramInt, NativeArray paramNativeArray);
  
  private native void jniCallJSFunction(String paramString1, String paramString2, NativeArray paramNativeArray);
  
  private native void jniExtendNativeModules(Collection<JavaModuleWrapper> paramCollection1, Collection<ModuleHolder> paramCollection2);
  
  private native void jniHandleMemoryPressure(int paramInt);
  
  private native void jniLoadScriptFromAssets(AssetManager paramAssetManager, String paramString, boolean paramBoolean);
  
  private native void jniLoadScriptFromDeltaBundle(String paramString, NativeDeltaClient paramNativeDeltaClient, boolean paramBoolean);
  
  private native void jniLoadScriptFromFile(String paramString1, String paramString2, boolean paramBoolean);
  
  private native void jniRegisterSegment(int paramInt, String paramString);
  
  private native void jniSetSourceURL(String paramString);
  
  private void onNativeException(Exception paramException) {
    this.mNativeModuleCallExceptionHandler.handleException(paramException);
    this.mReactQueueConfiguration.getUIQueueThread().runOnQueue(new Object(this));
  }
  
  public void addBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener) { this.mBridgeIdleListeners.add(paramNotThreadSafeBridgeIdleDebugListener); }
  
  public void addJSIModules(List<JSIModuleSpec> paramList) { this.mJSIModuleRegistry.registerModules(paramList); }
  
  public void callFunction(PendingJSCall paramPendingJSCall) {
    String str;
    if (this.mDestroyed) {
      str = paramPendingJSCall.toString();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Calling JS function after bridge has been destroyed: ");
      stringBuilder.append(str);
      a.c("ReactNative", stringBuilder.toString());
      return;
    } 
    if (!this.mAcceptCalls)
      synchronized (this.mJSCallsPendingInitLock) {
        if (!this.mAcceptCalls) {
          this.mJSCallsPendingInit.add(str);
          return;
        } 
      }  
    str.call(this);
  }
  
  public void callFunction(String paramString1, String paramString2, NativeArray paramNativeArray) { callFunction(new PendingJSCall(paramString1, paramString2, paramNativeArray)); }
  
  public void destroy() {
    Log.d("ReactNative", "CatalystInstanceImpl.destroy() start");
    UiThreadUtil.assertOnUiThread();
    if (this.mDestroyed)
      return; 
    ReactMarker.logMarker(ReactMarkerConstants.DESTROY_CATALYST_INSTANCE_START);
    this.mDestroyed = true;
    this.mNativeModulesQueueThread.runOnQueue(new Object(this));
    a.b(this.mTraceListener);
  }
  
  public void extendNativeModules(NativeModuleRegistry paramNativeModuleRegistry) {
    this.mNativeModuleRegistry.registerModules(paramNativeModuleRegistry);
    jniExtendNativeModules(paramNativeModuleRegistry.getJavaModules(this), paramNativeModuleRegistry.getCxxModules());
  }
  
  public <T extends JSIModule> T getJSIModule(Class<T> paramClass) { return (T)this.mJSIModuleRegistry.getModule(paramClass); }
  
  public <T extends JavaScriptModule> T getJSModule(Class<T> paramClass) { return (T)this.mJSModuleRegistry.getJavaScriptModule(this, paramClass); }
  
  public JavaScriptContextHolder getJavaScriptContextHolder() { return this.mJavaScriptContextHolder; }
  
  public <T extends NativeModule> T getNativeModule(Class<T> paramClass) { return (T)this.mNativeModuleRegistry.getModule(getNameFromAnnotation(paramClass)); }
  
  public NativeModule getNativeModule(String paramString) { return this.mNativeModuleRegistry.getModule(paramString); }
  
  public Collection<NativeModule> getNativeModules() { return this.mNativeModuleRegistry.getAllModules(); }
  
  public ReactQueueConfiguration getReactQueueConfiguration() { return this.mReactQueueConfiguration; }
  
  public String getSourceURL() { return this.mSourceURL; }
  
  public void handleMemoryPressure(int paramInt) {
    if (this.mDestroyed)
      return; 
    jniHandleMemoryPressure(paramInt);
  }
  
  public <T extends NativeModule> boolean hasNativeModule(Class<T> paramClass) { return this.mNativeModuleRegistry.hasModule(getNameFromAnnotation(paramClass)); }
  
  public boolean hasRunJSBundle() {
    synchronized (this.mJSCallsPendingInitLock) {
      if (this.mJSBundleHasLoaded && this.mAcceptCalls)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  public void initialize() {
    Log.d("ReactNative", "CatalystInstanceImpl.initialize()");
    a.a(this.mInitialized ^ true, "This catalyst instance has already been initialized");
    a.a(this.mAcceptCalls, "RunJSBundle hasn't completed.");
    this.mInitialized = true;
    this.mNativeModulesQueueThread.runOnQueue(new Object(this));
  }
  
  public void invokeCallback(int paramInt, NativeArrayInterface paramNativeArrayInterface) {
    if (this.mDestroyed) {
      a.c("ReactNative", "Invoking JS callback after bridge has been destroyed.");
      return;
    } 
    jniCallJSCallback(paramInt, (NativeArray)paramNativeArrayInterface);
  }
  
  public boolean isDestroyed() { return this.mDestroyed; }
  
  public void loadScriptFromAssets(AssetManager paramAssetManager, String paramString, boolean paramBoolean) {
    this.mSourceURL = paramString;
    jniLoadScriptFromAssets(paramAssetManager, paramString, paramBoolean);
  }
  
  public void loadScriptFromDeltaBundle(String paramString, NativeDeltaClient paramNativeDeltaClient, boolean paramBoolean) {
    this.mSourceURL = paramString;
    jniLoadScriptFromDeltaBundle(paramString, paramNativeDeltaClient, paramBoolean);
  }
  
  public void loadScriptFromFile(String paramString1, String paramString2, boolean paramBoolean) {
    this.mSourceURL = paramString2;
    jniLoadScriptFromFile(paramString1, paramString2, paramBoolean);
  }
  
  public void registerSegment(int paramInt, String paramString) { jniRegisterSegment(paramInt, paramString); }
  
  public void removeBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener) { this.mBridgeIdleListeners.remove(paramNotThreadSafeBridgeIdleDebugListener); }
  
  public void runJSBundle() {
    Log.d("ReactNative", "CatalystInstanceImpl.runJSBundle()");
    a.a(this.mJSBundleHasLoaded ^ true, "JS bundle was already loaded!");
    this.mJSBundleLoader.loadScript(this);
    synchronized (this.mJSCallsPendingInitLock) {
      this.mAcceptCalls = true;
      Iterator iterator = this.mJSCallsPendingInit.iterator();
      while (iterator.hasNext())
        ((PendingJSCall)iterator.next()).call(this); 
      this.mJSCallsPendingInit.clear();
      this.mJSBundleHasLoaded = true;
      a.a(this.mTraceListener);
      return;
    } 
  }
  
  public native void setGlobalVariable(String paramString1, String paramString2);
  
  public void setSourceURLs(String paramString1, String paramString2) {
    this.mSourceURL = paramString1;
    jniSetSourceURL(paramString2);
  }
}
