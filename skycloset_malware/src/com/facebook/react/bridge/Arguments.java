package com.facebook.react.bridge;

import android.os.Bundle;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Arguments {
  private static void addEntry(WritableNativeMap paramWritableNativeMap, String paramString, Object paramObject) {
    paramObject = makeNativeObject(paramObject);
    if (paramObject == null) {
      paramWritableNativeMap.putNull(paramString);
      return;
    } 
    if (paramObject instanceof Boolean) {
      paramWritableNativeMap.putBoolean(paramString, ((Boolean)paramObject).booleanValue());
      return;
    } 
    if (paramObject instanceof Integer) {
      paramWritableNativeMap.putInt(paramString, ((Integer)paramObject).intValue());
      return;
    } 
    if (paramObject instanceof Number) {
      paramWritableNativeMap.putDouble(paramString, ((Number)paramObject).doubleValue());
      return;
    } 
    if (paramObject instanceof String) {
      paramWritableNativeMap.putString(paramString, (String)paramObject);
      return;
    } 
    if (paramObject instanceof WritableNativeArray) {
      paramWritableNativeMap.putArray(paramString, (WritableNativeArray)paramObject);
      return;
    } 
    if (paramObject instanceof WritableNativeMap) {
      paramWritableNativeMap.putMap(paramString, (WritableNativeMap)paramObject);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Could not convert ");
    stringBuilder.append(paramObject.getClass());
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public static WritableArray createArray() { return new WritableNativeArray(); }
  
  public static WritableMap createMap() { return new WritableNativeMap(); }
  
  public static WritableArray fromArray(Object paramObject) {
    String[] arrayOfString;
    StringBuilder stringBuilder = createArray();
    boolean bool = paramObject instanceof String[];
    int j = 0;
    int k = 0;
    int m = 0;
    int n = 0;
    int i1 = 0;
    int i = 0;
    if (bool) {
      arrayOfString = (String[])paramObject;
      j = arrayOfString.length;
      while (i < j) {
        stringBuilder.pushString(arrayOfString[i]);
        i++;
      } 
    } else {
      Bundle[] arrayOfBundle;
      if (arrayOfString instanceof Bundle[]) {
        arrayOfBundle = (Bundle[])arrayOfString;
        k = arrayOfBundle.length;
        for (i = j; i < k; i++)
          stringBuilder.pushMap(fromBundle(arrayOfBundle[i])); 
      } else {
        int[] arrayOfInt;
        if (arrayOfBundle instanceof int[]) {
          arrayOfInt = (int[])arrayOfBundle;
          j = arrayOfInt.length;
          for (i = k; i < j; i++)
            stringBuilder.pushInt(arrayOfInt[i]); 
        } else {
          float[] arrayOfFloat;
          if (arrayOfInt instanceof float[]) {
            arrayOfFloat = (float[])arrayOfInt;
            j = arrayOfFloat.length;
            for (i = m; i < j; i++)
              stringBuilder.pushDouble(arrayOfFloat[i]); 
          } else {
            double[] arrayOfDouble;
            if (arrayOfFloat instanceof double[]) {
              arrayOfDouble = (double[])arrayOfFloat;
              j = arrayOfDouble.length;
              for (i = n; i < j; i++)
                stringBuilder.pushDouble(arrayOfDouble[i]); 
            } else {
              boolean[] arrayOfBoolean;
              if (arrayOfDouble instanceof boolean[]) {
                arrayOfBoolean = (boolean[])arrayOfDouble;
                j = arrayOfBoolean.length;
                for (i = i1; i < j; i++)
                  stringBuilder.pushBoolean(arrayOfBoolean[i]); 
                return stringBuilder;
              } 
              stringBuilder = new StringBuilder();
              stringBuilder.append("Unknown array type ");
              stringBuilder.append(arrayOfBoolean.getClass());
              throw new IllegalArgumentException(stringBuilder.toString());
            } 
          } 
        } 
      } 
    } 
    return stringBuilder;
  }
  
  public static WritableMap fromBundle(Bundle paramBundle) {
    WritableMap writableMap = createMap();
    for (String str : paramBundle.keySet()) {
      Object object = paramBundle.get(str);
      if (object == null) {
        writableMap.putNull(str);
        continue;
      } 
      if (object.getClass().isArray()) {
        object = fromArray(object);
      } else {
        if (object instanceof String) {
          writableMap.putString(str, (String)object);
          continue;
        } 
        if (object instanceof Number) {
          if (object instanceof Integer) {
            writableMap.putInt(str, ((Integer)object).intValue());
            continue;
          } 
          writableMap.putDouble(str, ((Number)object).doubleValue());
          continue;
        } 
        if (object instanceof Boolean) {
          writableMap.putBoolean(str, ((Boolean)object).booleanValue());
          continue;
        } 
        if (object instanceof Bundle) {
          writableMap.putMap(str, fromBundle((Bundle)object));
          continue;
        } 
        if (object instanceof List) {
          object = fromList((List)object);
        } else {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Could not convert ");
          stringBuilder.append(object.getClass());
          throw new IllegalArgumentException(stringBuilder.toString());
        } 
      } 
      writableMap.putArray(str, object);
    } 
    return writableMap;
  }
  
  public static WritableNativeArray fromJavaArgs(Object[] paramArrayOfObject) {
    WritableNativeArray writableNativeArray = new WritableNativeArray();
    for (byte b = 0;; b++) {
      if (b < paramArrayOfObject.length) {
        Object object = paramArrayOfObject[b];
        if (object == null) {
          writableNativeArray.pushNull();
        } else {
          Class clazz = object.getClass();
          if (clazz == Boolean.class) {
            writableNativeArray.pushBoolean(((Boolean)object).booleanValue());
          } else {
            double d;
            if (clazz == Integer.class) {
              d = ((Integer)object).doubleValue();
            } else if (clazz == Double.class) {
              d = ((Double)object).doubleValue();
            } else if (clazz == Float.class) {
              d = ((Float)object).doubleValue();
            } else {
              if (clazz == String.class) {
                writableNativeArray.pushString(object.toString());
              } else if (clazz == WritableNativeMap.class) {
                writableNativeArray.pushMap((WritableNativeMap)object);
              } else if (clazz == WritableNativeArray.class) {
                writableNativeArray.pushArray((WritableNativeArray)object);
              } else {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Cannot convert argument of type ");
                stringBuilder.append(clazz);
                throw new RuntimeException(stringBuilder.toString());
              } 
              b++;
            } 
            writableNativeArray.pushDouble(d);
          } 
        } 
      } else {
        break;
      } 
    } 
    return writableNativeArray;
  }
  
  public static WritableArray fromList(List paramList) {
    StringBuilder stringBuilder = createArray();
    for (Object object : paramList) {
      if (object == null) {
        stringBuilder.pushNull();
        continue;
      } 
      if (object.getClass().isArray()) {
        object = fromArray(object);
      } else {
        if (object instanceof Bundle) {
          stringBuilder.pushMap(fromBundle((Bundle)object));
          continue;
        } 
        if (object instanceof List) {
          object = fromList((List)object);
        } else {
          if (object instanceof String) {
            stringBuilder.pushString((String)object);
            continue;
          } 
          if (object instanceof Integer) {
            stringBuilder.pushInt(((Integer)object).intValue());
            continue;
          } 
          if (object instanceof Number) {
            stringBuilder.pushDouble(((Number)object).doubleValue());
            continue;
          } 
          if (object instanceof Boolean) {
            stringBuilder.pushBoolean(((Boolean)object).booleanValue());
            continue;
          } 
          stringBuilder = new StringBuilder();
          stringBuilder.append("Unknown value type ");
          stringBuilder.append(object.getClass());
          throw new IllegalArgumentException(stringBuilder.toString());
        } 
      } 
      stringBuilder.pushArray(object);
    } 
    return stringBuilder;
  }
  
  public static <T> WritableNativeArray makeNativeArray(Object paramObject) { return (paramObject == null) ? new WritableNativeArray() : makeNativeArray(new Object(paramObject)); }
  
  public static WritableNativeArray makeNativeArray(List paramList) {
    StringBuilder stringBuilder = new WritableNativeArray();
    if (paramList == null)
      return stringBuilder; 
    Iterator iterator = paramList.iterator();
    while (iterator.hasNext()) {
      Object object = makeNativeObject(iterator.next());
      if (object == null) {
        stringBuilder.pushNull();
        continue;
      } 
      if (object instanceof Boolean) {
        stringBuilder.pushBoolean(((Boolean)object).booleanValue());
        continue;
      } 
      if (object instanceof Integer) {
        stringBuilder.pushInt(((Integer)object).intValue());
        continue;
      } 
      if (object instanceof Double) {
        stringBuilder.pushDouble(((Double)object).doubleValue());
        continue;
      } 
      if (object instanceof String) {
        stringBuilder.pushString((String)object);
        continue;
      } 
      if (object instanceof WritableNativeArray) {
        stringBuilder.pushArray((WritableNativeArray)object);
        continue;
      } 
      if (object instanceof WritableNativeMap) {
        stringBuilder.pushMap((WritableNativeMap)object);
        continue;
      } 
      stringBuilder = new StringBuilder();
      stringBuilder.append("Could not convert ");
      stringBuilder.append(object.getClass());
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    return stringBuilder;
  }
  
  public static WritableNativeMap makeNativeMap(Bundle paramBundle) {
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    if (paramBundle == null)
      return writableNativeMap; 
    for (String str : paramBundle.keySet())
      addEntry(writableNativeMap, str, paramBundle.get(str)); 
    return writableNativeMap;
  }
  
  public static WritableNativeMap makeNativeMap(Map<String, Object> paramMap) {
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    if (paramMap == null)
      return writableNativeMap; 
    for (Map.Entry entry : paramMap.entrySet())
      addEntry(writableNativeMap, (String)entry.getKey(), entry.getValue()); 
    return writableNativeMap;
  }
  
  private static Object makeNativeObject(Object paramObject) {
    if (paramObject == null)
      return null; 
    if (paramObject instanceof Float || paramObject instanceof Long || paramObject instanceof Byte || paramObject instanceof Short)
      return Double.valueOf(((Number)paramObject).doubleValue()); 
    if (paramObject.getClass().isArray())
      return makeNativeArray(paramObject); 
    if (paramObject instanceof List)
      return makeNativeArray((List)paramObject); 
    if (paramObject instanceof Map)
      return makeNativeMap((Map)paramObject); 
    Object object = paramObject;
    if (paramObject instanceof Bundle)
      object = makeNativeMap((Bundle)paramObject); 
    return object;
  }
  
  public static Bundle toBundle(ReadableMap paramReadableMap) {
    if (paramReadableMap == null)
      return null; 
    ReadableMapKeySetIterator readableMapKeySetIterator = paramReadableMap.keySetIterator();
    Bundle bundle = new Bundle();
    while (readableMapKeySetIterator.hasNextKey()) {
      StringBuilder stringBuilder;
      String str = readableMapKeySetIterator.nextKey();
      ReadableType readableType = paramReadableMap.getType(str);
      switch (null.$SwitchMap$com$facebook$react$bridge$ReadableType[readableType.ordinal()]) {
        default:
          stringBuilder = new StringBuilder();
          stringBuilder.append("Could not convert object with key: ");
          stringBuilder.append(str);
          stringBuilder.append(".");
          throw new IllegalArgumentException(stringBuilder.toString());
        case 6:
          bundle.putSerializable(str, toList(stringBuilder.getArray(str)));
          continue;
        case 5:
          bundle.putBundle(str, toBundle(stringBuilder.getMap(str)));
          continue;
        case 4:
          bundle.putString(str, stringBuilder.getString(str));
          continue;
        case 3:
          bundle.putDouble(str, stringBuilder.getDouble(str));
          continue;
        case 2:
          bundle.putBoolean(str, stringBuilder.getBoolean(str));
          continue;
        case 1:
          break;
      } 
      bundle.putString(str, null);
    } 
    return bundle;
  }
  
  public static ArrayList toList(ReadableArray paramReadableArray) {
    if (paramReadableArray == null)
      return null; 
    ArrayList arrayList = new ArrayList();
    for (byte b = 0; b < paramReadableArray.size(); b++) {
      ArrayList arrayList1;
      Double double;
      Bundle bundle;
      Boolean bool;
      double d;
      switch (null.$SwitchMap$com$facebook$react$bridge$ReadableType[paramReadableArray.getType(b).ordinal()]) {
        default:
          throw new IllegalArgumentException("Could not convert object in array.");
        case 6:
          arrayList1 = toList(paramReadableArray.getArray(b));
          arrayList.add(arrayList1);
          break;
        case 5:
          bundle = toBundle(paramReadableArray.getMap(b));
          arrayList.add(bundle);
          break;
        case 4:
          double = paramReadableArray.getString(b);
          arrayList.add(double);
          break;
        case 3:
          d = paramReadableArray.getDouble(b);
          if (d == Math.rint(d)) {
            Integer integer = Integer.valueOf((int)d);
          } else {
            double = Double.valueOf(d);
          } 
          arrayList.add(double);
          break;
        case 2:
          bool = Boolean.valueOf(paramReadableArray.getBoolean(b));
          arrayList.add(bool);
          break;
        case 1:
          arrayList.add(null);
          break;
      } 
    } 
    return arrayList;
  }
}
