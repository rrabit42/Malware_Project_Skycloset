package com.facebook.react.bridge;

import com.facebook.i.a.a;
import com.facebook.j.a.a;
import com.facebook.jni.HybridData;
import com.facebook.react.b.a;
import java.util.ArrayList;
import java.util.HashMap;

@a
public class ReadableNativeMap extends NativeMap implements ReadableMap {
  private static int mJniCallCounter;
  
  private String[] mKeys;
  
  private HashMap<String, Object> mLocalMap;
  
  private HashMap<String, ReadableType> mLocalTypeMap;
  
  static  {
    ReactBridge.staticInit();
  }
  
  protected ReadableNativeMap(HybridData paramHybridData) { super(paramHybridData); }
  
  private void checkInstance(String paramString, Object paramObject, Class paramClass) {
    if (paramObject != null) {
      if (paramClass.isInstance(paramObject))
        return; 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Value for ");
      stringBuilder.append(paramString);
      stringBuilder.append(" cannot be cast from ");
      stringBuilder.append(paramObject.getClass().getSimpleName());
      stringBuilder.append(" to ");
      stringBuilder.append(paramClass.getSimpleName());
      throw new ClassCastException(stringBuilder.toString());
    } 
  }
  
  private native ReadableNativeArray getArrayNative(String paramString);
  
  private native boolean getBooleanNative(String paramString);
  
  private native double getDoubleNative(String paramString);
  
  private native int getIntNative(String paramString);
  
  public static int getJNIPassCounter() { return mJniCallCounter; }
  
  private HashMap<String, Object> getLocalMap() { // Byte code:
    //   0: aload_0
    //   1: getfield mLocalMap : Ljava/util/HashMap;
    //   4: astore_3
    //   5: aload_3
    //   6: ifnull -> 11
    //   9: aload_3
    //   10: areturn
    //   11: aload_0
    //   12: monitorenter
    //   13: aload_0
    //   14: getfield mKeys : [Ljava/lang/String;
    //   17: ifnonnull -> 42
    //   20: aload_0
    //   21: aload_0
    //   22: invokespecial importKeys : ()[Ljava/lang/String;
    //   25: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   28: checkcast [Ljava/lang/String;
    //   31: putfield mKeys : [Ljava/lang/String;
    //   34: getstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   37: iconst_1
    //   38: iadd
    //   39: putstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   42: aload_0
    //   43: getfield mLocalMap : Ljava/util/HashMap;
    //   46: ifnonnull -> 117
    //   49: aload_0
    //   50: invokespecial importValues : ()[Ljava/lang/Object;
    //   53: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   56: checkcast [Ljava/lang/Object;
    //   59: astore_3
    //   60: getstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   63: iconst_1
    //   64: iadd
    //   65: putstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   68: aload_0
    //   69: getfield mKeys : [Ljava/lang/String;
    //   72: arraylength
    //   73: istore_2
    //   74: aload_0
    //   75: new java/util/HashMap
    //   78: dup
    //   79: iload_2
    //   80: invokespecial <init> : (I)V
    //   83: putfield mLocalMap : Ljava/util/HashMap;
    //   86: iconst_0
    //   87: istore_1
    //   88: iload_1
    //   89: iload_2
    //   90: if_icmpge -> 117
    //   93: aload_0
    //   94: getfield mLocalMap : Ljava/util/HashMap;
    //   97: aload_0
    //   98: getfield mKeys : [Ljava/lang/String;
    //   101: iload_1
    //   102: aaload
    //   103: aload_3
    //   104: iload_1
    //   105: aaload
    //   106: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   109: pop
    //   110: iload_1
    //   111: iconst_1
    //   112: iadd
    //   113: istore_1
    //   114: goto -> 88
    //   117: aload_0
    //   118: monitorexit
    //   119: aload_0
    //   120: getfield mLocalMap : Ljava/util/HashMap;
    //   123: areturn
    //   124: astore_3
    //   125: aload_0
    //   126: monitorexit
    //   127: aload_3
    //   128: athrow
    // Exception table:
    //   from	to	target	type
    //   13	42	124	finally
    //   42	86	124	finally
    //   93	110	124	finally
    //   117	119	124	finally
    //   125	127	124	finally }
  
  private HashMap<String, ReadableType> getLocalTypeMap() { // Byte code:
    //   0: aload_0
    //   1: getfield mLocalTypeMap : Ljava/util/HashMap;
    //   4: astore_3
    //   5: aload_3
    //   6: ifnull -> 11
    //   9: aload_3
    //   10: areturn
    //   11: aload_0
    //   12: monitorenter
    //   13: aload_0
    //   14: getfield mKeys : [Ljava/lang/String;
    //   17: ifnonnull -> 42
    //   20: aload_0
    //   21: aload_0
    //   22: invokespecial importKeys : ()[Ljava/lang/String;
    //   25: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   28: checkcast [Ljava/lang/String;
    //   31: putfield mKeys : [Ljava/lang/String;
    //   34: getstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   37: iconst_1
    //   38: iadd
    //   39: putstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   42: aload_0
    //   43: getfield mLocalTypeMap : Ljava/util/HashMap;
    //   46: ifnonnull -> 120
    //   49: aload_0
    //   50: invokespecial importTypes : ()[Ljava/lang/Object;
    //   53: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   56: checkcast [Ljava/lang/Object;
    //   59: astore_3
    //   60: getstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   63: iconst_1
    //   64: iadd
    //   65: putstatic com/facebook/react/bridge/ReadableNativeMap.mJniCallCounter : I
    //   68: aload_0
    //   69: getfield mKeys : [Ljava/lang/String;
    //   72: arraylength
    //   73: istore_2
    //   74: aload_0
    //   75: new java/util/HashMap
    //   78: dup
    //   79: iload_2
    //   80: invokespecial <init> : (I)V
    //   83: putfield mLocalTypeMap : Ljava/util/HashMap;
    //   86: iconst_0
    //   87: istore_1
    //   88: iload_1
    //   89: iload_2
    //   90: if_icmpge -> 120
    //   93: aload_0
    //   94: getfield mLocalTypeMap : Ljava/util/HashMap;
    //   97: aload_0
    //   98: getfield mKeys : [Ljava/lang/String;
    //   101: iload_1
    //   102: aaload
    //   103: aload_3
    //   104: iload_1
    //   105: aaload
    //   106: checkcast com/facebook/react/bridge/ReadableType
    //   109: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   112: pop
    //   113: iload_1
    //   114: iconst_1
    //   115: iadd
    //   116: istore_1
    //   117: goto -> 88
    //   120: aload_0
    //   121: monitorexit
    //   122: aload_0
    //   123: getfield mLocalTypeMap : Ljava/util/HashMap;
    //   126: areturn
    //   127: astore_3
    //   128: aload_0
    //   129: monitorexit
    //   130: aload_3
    //   131: athrow
    // Exception table:
    //   from	to	target	type
    //   13	42	127	finally
    //   42	86	127	finally
    //   93	113	127	finally
    //   120	122	127	finally
    //   128	130	127	finally }
  
  private native ReadableNativeMap getMapNative(String paramString);
  
  private Object getNullableValue(String paramString) {
    if (hasKey(paramString))
      return getLocalMap().get(paramString); 
    throw new NoSuchKeyException(paramString);
  }
  
  private <T> T getNullableValue(String paramString, Class<T> paramClass) {
    Object object = getNullableValue(paramString);
    checkInstance(paramString, object, paramClass);
    return (T)object;
  }
  
  private native String getStringNative(String paramString);
  
  private native ReadableType getTypeNative(String paramString);
  
  private Object getValue(String paramString) {
    if (hasKey(paramString) && !isNull(paramString))
      return a.a(getLocalMap().get(paramString)); 
    throw new NoSuchKeyException(paramString);
  }
  
  private <T> T getValue(String paramString, Class<T> paramClass) {
    Object object = getValue(paramString);
    checkInstance(paramString, object, paramClass);
    return (T)object;
  }
  
  private native boolean hasKeyNative(String paramString);
  
  private native String[] importKeys();
  
  private native Object[] importTypes();
  
  private native Object[] importValues();
  
  private native boolean isNullNative(String paramString);
  
  public static void setUseNativeAccessor(boolean paramBoolean) { a.c = paramBoolean; }
  
  public ReadableArray getArray(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getArrayNative(paramString);
    } 
    return (ReadableArray)getNullableValue(paramString, ReadableArray.class);
  }
  
  public boolean getBoolean(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getBooleanNative(paramString);
    } 
    return ((Boolean)getValue(paramString, Boolean.class)).booleanValue();
  }
  
  public double getDouble(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getDoubleNative(paramString);
    } 
    return ((Double)getValue(paramString, Double.class)).doubleValue();
  }
  
  public Dynamic getDynamic(String paramString) { return DynamicFromMap.create(this, paramString); }
  
  public int getInt(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getIntNative(paramString);
    } 
    return ((Double)getValue(paramString, Double.class)).intValue();
  }
  
  public ReadableNativeMap getMap(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getMapNative(paramString);
    } 
    return (ReadableNativeMap)getNullableValue(paramString, ReadableNativeMap.class);
  }
  
  public String getString(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getStringNative(paramString);
    } 
    return (String)getNullableValue(paramString, String.class);
  }
  
  public ReadableType getType(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return getTypeNative(paramString);
    } 
    if (getLocalTypeMap().containsKey(paramString))
      return (ReadableType)a.a(getLocalTypeMap().get(paramString)); 
    throw new NoSuchKeyException(paramString);
  }
  
  public boolean hasKey(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return hasKeyNative(paramString);
    } 
    return getLocalMap().containsKey(paramString);
  }
  
  public boolean isNull(String paramString) {
    if (a.c) {
      mJniCallCounter++;
      return isNullNative(paramString);
    } 
    if (getLocalMap().containsKey(paramString))
      return (getLocalMap().get(paramString) == null); 
    throw new NoSuchKeyException(paramString);
  }
  
  public ReadableMapKeySetIterator keySetIterator() { return new ReadableNativeMapKeySetIterator(this); }
  
  public HashMap<String, Object> toHashMap() {
    if (a.c) {
      ReadableMapKeySetIterator readableMapKeySetIterator = keySetIterator();
      HashMap hashMap1 = new HashMap();
      while (readableMapKeySetIterator.hasNextKey()) {
        Double double;
        Boolean bool;
        HashMap hashMap2;
        String str1;
        ArrayList arrayList;
        StringBuilder stringBuilder;
        mJniCallCounter++;
        String str2 = readableMapKeySetIterator.nextKey();
        mJniCallCounter++;
        switch (null.$SwitchMap$com$facebook$react$bridge$ReadableType[getType(str2).ordinal()]) {
          default:
            stringBuilder = new StringBuilder();
            stringBuilder.append("Could not convert object with key: ");
            stringBuilder.append(str2);
            stringBuilder.append(".");
            throw new IllegalArgumentException(stringBuilder.toString());
          case 6:
            arrayList = ((ReadableArray)a.a(getArray(str2))).toArrayList();
            break;
          case 5:
            hashMap2 = ((ReadableNativeMap)a.a(getMap(str2))).toHashMap();
            break;
          case 4:
            str1 = getString(str2);
            break;
          case 3:
            double = Double.valueOf(getDouble(str2));
            break;
          case 2:
            bool = Boolean.valueOf(getBoolean(str2));
            break;
          case 1:
            bool = null;
            break;
        } 
        hashMap1.put(str2, bool);
      } 
      return hashMap1;
    } 
    HashMap hashMap = new HashMap(getLocalMap());
    for (String str : hashMap.keySet()) {
      ArrayList arrayList;
      HashMap hashMap1;
      StringBuilder stringBuilder;
      switch (null.$SwitchMap$com$facebook$react$bridge$ReadableType[getType(str).ordinal()]) {
        case 1:
        case 2:
        case 3:
        case 4:
          continue;
        default:
          stringBuilder = new StringBuilder();
          stringBuilder.append("Could not convert object with key: ");
          stringBuilder.append(str);
          stringBuilder.append(".");
          throw new IllegalArgumentException(stringBuilder.toString());
        case 6:
          arrayList = ((ReadableArray)a.a(getArray(str))).toArrayList();
          break;
        case 5:
          hashMap1 = ((ReadableNativeMap)a.a(getMap(str))).toHashMap();
          break;
      } 
      hashMap.put(str, hashMap1);
    } 
    return hashMap;
  }
}
