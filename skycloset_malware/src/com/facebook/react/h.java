package com.facebook.react;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.KeyEvent;
import com.facebook.i.a.a;
import com.facebook.react.bridge.Callback;
import com.facebook.react.devsupport.c;
import com.facebook.react.modules.core.b;
import com.facebook.react.modules.core.d;

public class h {
  private final Activity a;
  
  private final String b;
  
  private r c;
  
  private c d;
  
  private d e;
  
  private Callback f;
  
  public h(g paramg, String paramString) {
    this.a = paramg;
    this.b = paramString;
  }
  
  protected Bundle a() { return null; }
  
  public void a(int paramInt1, int paramInt2, Intent paramIntent) {
    if (c().b())
      c().a().a(i(), paramInt1, paramInt2, paramIntent); 
  }
  
  public void a(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt) { this.f = new Object(this, paramInt, paramArrayOfString, paramArrayOfInt); }
  
  protected void a(Bundle paramBundle) {
    String str = this.b;
    if (str != null)
      a(str); 
    this.d = new c();
  }
  
  protected void a(String paramString) {
    if (this.c == null) {
      this.c = b();
      this.c.a(c().a(), paramString, a());
      i().setContentView(this.c);
      return;
    } 
    throw new IllegalStateException("Cannot loadApp while app is already running.");
  }
  
  @TargetApi(23)
  public void a(String[] paramArrayOfString, int paramInt, d paramd) {
    this.e = paramd;
    i().requestPermissions(paramArrayOfString, paramInt);
  }
  
  public boolean a(int paramInt, KeyEvent paramKeyEvent) {
    if (c().b() && c().k() && paramInt == 90) {
      paramKeyEvent.startTracking();
      return true;
    } 
    return false;
  }
  
  public boolean a(Intent paramIntent) {
    if (c().b()) {
      c().a().a(paramIntent);
      return true;
    } 
    return false;
  }
  
  protected r b() { return new r(h()); }
  
  public boolean b(int paramInt, KeyEvent paramKeyEvent) {
    if (c().b() && c().k()) {
      if (paramInt == 82) {
        c().a().h();
        return true;
      } 
      if (((c)a.a(this.d)).a(paramInt, i().getCurrentFocus())) {
        c().a().b().i();
        return true;
      } 
    } 
    return false;
  }
  
  protected n c() { return ((j)i().getApplication()).a(); }
  
  public boolean c(int paramInt, KeyEvent paramKeyEvent) {
    if (c().b() && c().k() && paramInt == 90) {
      c().a().h();
      return true;
    } 
    return false;
  }
  
  protected void d() {
    if (c().b())
      c().a().a(i()); 
  }
  
  protected void e() {
    if (c().b())
      c().a().a(i(), (b)i()); 
    Callback callback = this.f;
    if (callback != null) {
      callback.invoke(new Object[0]);
      this.f = null;
    } 
  }
  
  protected void f() {
    r r1 = this.c;
    if (r1 != null) {
      r1.a();
      this.c = null;
    } 
    if (c().b())
      c().a().c(i()); 
  }
  
  public boolean g() {
    if (c().b()) {
      c().a().e();
      return true;
    } 
    return false;
  }
  
  protected Context h() { return (Context)a.a(this.a); }
  
  protected Activity i() { return (Activity)h(); }
}
