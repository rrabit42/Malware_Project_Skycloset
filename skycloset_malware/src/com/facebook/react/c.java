package com.facebook.react;

import com.facebook.react.bridge.ModuleHolder;
import com.facebook.react.bridge.ModuleSpec;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.module.model.a;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.systrace.b;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public abstract class c implements o {
  public static a a(c paramc) {
    try {
      StringBuilder stringBuilder2 = new StringBuilder();
      stringBuilder2.append(paramc.getClass().getCanonicalName());
      stringBuilder2.append("$$ReactModuleInfoProvider");
      clazz = Class.forName(stringBuilder2.toString());
      if (clazz != null)
        try {
          return (a)clazz.newInstance();
        } catch (InstantiationException clazz) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Unable to instantiate ReactModuleInfoProvider for ");
          stringBuilder.append(paramc.getClass());
          throw new RuntimeException(stringBuilder.toString(), clazz);
        } catch (IllegalAccessException clazz) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Unable to instantiate ReactModuleInfoProvider for ");
          stringBuilder.append(paramc.getClass());
          throw new RuntimeException(stringBuilder.toString(), clazz);
        }  
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("ReactModuleInfoProvider class for ");
      stringBuilder1.append(paramc.getClass().getCanonicalName());
      stringBuilder1.append(" not found.");
      throw new RuntimeException(stringBuilder1.toString());
    } catch (ClassNotFoundException paramc) {
      return new Object();
    } 
  }
  
  public abstract a a();
  
  public final List<NativeModule> a(ReactApplicationContext paramReactApplicationContext) {
    arrayList = new ArrayList();
    for (ModuleSpec moduleSpec : c(paramReactApplicationContext)) {
      b.a(0L, "createNativeModule").a("module", moduleSpec.getType()).a();
      ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_START, moduleSpec.getName());
      try {
        nativeModule = (NativeModule)moduleSpec.getProvider().b();
        ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_END);
      } finally {
        ReactMarker.logMarker(ReactMarkerConstants.CREATE_MODULE_END);
        b.a(0L).a();
      } 
    } 
    return arrayList;
  }
  
  public List<ViewManager> b(ReactApplicationContext paramReactApplicationContext) {
    List list = e(paramReactApplicationContext);
    if (list == null || list.isEmpty())
      return Collections.emptyList(); 
    ArrayList arrayList = new ArrayList();
    Iterator iterator = list.iterator();
    while (iterator.hasNext())
      arrayList.add((ViewManager)((ModuleSpec)iterator.next()).getProvider().b()); 
    return arrayList;
  }
  
  protected abstract List<ModuleSpec> c(ReactApplicationContext paramReactApplicationContext);
  
  Iterable<ModuleHolder> d(ReactApplicationContext paramReactApplicationContext) {
    Map map = a().a();
    return new Object(this, c(paramReactApplicationContext), map);
  }
  
  public List<ModuleSpec> e(ReactApplicationContext paramReactApplicationContext) { return Collections.emptyList(); }
}
