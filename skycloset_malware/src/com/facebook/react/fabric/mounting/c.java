package com.facebook.react.fabric.mounting;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import com.facebook.i.a.a;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.SoftAssertions;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.fabric.jsi.EventEmitterWrapper;
import com.facebook.react.uimanager.RootViewManager;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.uimanager.af;
import com.facebook.react.uimanager.at;
import com.facebook.react.uimanager.common.SizeMonitoringFrameLayout;
import com.facebook.react.uimanager.f;
import com.facebook.react.uimanager.y;
import com.facebook.yoga.YogaMeasureMode;
import java.util.concurrent.ConcurrentHashMap;

public class c {
  private final ConcurrentHashMap<Integer, a> a;
  
  private final at b;
  
  private final RootViewManager c;
  
  private final a d;
  
  private static ViewGroupManager<ViewGroup> a(a parama) {
    if (parama.d != null)
      return (ViewGroupManager)parama.d; 
    throw new IllegalStateException("Unable to find ViewManager");
  }
  
  private void a(View paramView) {
    UiThreadUtil.assertOnUiThread();
    int i = paramView.getId();
    a a1 = d(i);
    ViewManager viewManager = a1.d;
    if (!a1.c && viewManager != null)
      viewManager.onDropViewInstance(paramView); 
    if (paramView instanceof ViewGroup && viewManager instanceof ViewGroupManager) {
      ViewGroup viewGroup = (ViewGroup)paramView;
      ViewGroupManager viewGroupManager = a(a1);
      for (int j = viewGroupManager.getChildCount(viewGroup) - 1; j >= 0; j--) {
        View view = viewGroupManager.getChildAt(viewGroup, j);
        if (this.a.get(Integer.valueOf(view.getId())) != null)
          a(view); 
        viewGroupManager.removeViewAt(viewGroup, j);
      } 
    } 
    this.a.remove(Integer.valueOf(i));
    Context context = paramView.getContext();
    this.d.a((af)context, ((ViewManager)a.a(viewManager)).getName(), paramView);
  }
  
  private a d(int paramInt) {
    a a1 = (a)this.a.get(Integer.valueOf(paramInt));
    if (a1 != null)
      return a1; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find viewState for tag ");
    stringBuilder.append(paramInt);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public long a(ReactContext paramReactContext, String paramString, ReadableNativeMap paramReadableNativeMap1, ReadableNativeMap paramReadableNativeMap2, float paramFloat1, YogaMeasureMode paramYogaMeasureMode1, float paramFloat2, YogaMeasureMode paramYogaMeasureMode2) { return this.b.a(paramString).measure(paramReactContext, paramReadableNativeMap1, paramReadableNativeMap2, paramFloat1, paramYogaMeasureMode1, paramFloat2, paramYogaMeasureMode2); }
  
  public void a(int paramInt) {
    UiThreadUtil.assertOnUiThread();
    a a1 = (a)this.a.get(Integer.valueOf(paramInt));
    if (a1 == null || !a1.c) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("View with tag ");
      stringBuilder.append(paramInt);
      stringBuilder.append(" is not registered as a root view");
      SoftAssertions.assertUnreachable(stringBuilder.toString());
    } 
    if (a1.a != null)
      a(a1.a); 
  }
  
  public void a(int paramInt1, int paramInt2) {
    UiThreadUtil.assertOnUiThread();
    a a1 = d(paramInt1);
    ViewGroup viewGroup = (ViewGroup)a1.a;
    if (viewGroup != null) {
      a(a1).removeViewAt(viewGroup, paramInt2);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find view for tag ");
    stringBuilder.append(paramInt1);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3) {
    UiThreadUtil.assertOnUiThread();
    a a1 = d(paramInt1);
    ViewGroup viewGroup = (ViewGroup)a1.a;
    View view = (d(paramInt2)).a;
    if (view != null) {
      a(a1).addView(viewGroup, view, paramInt3);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find view for tag ");
    stringBuilder.append(paramInt2);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5) {
    UiThreadUtil.assertOnUiThread();
    a a1 = d(paramInt1);
    if (a1.c)
      return; 
    View view = a1.a;
    if (view != null) {
      view.measure(View.MeasureSpec.makeMeasureSpec(paramInt4, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt5, 1073741824));
      ViewParent viewParent = view.getParent();
      if (viewParent instanceof com.facebook.react.uimanager.ab)
        viewParent.requestLayout(); 
      view.layout(paramInt2, paramInt3, paramInt4 + paramInt2, paramInt5 + paramInt3);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find View for tag: ");
    stringBuilder.append(paramInt1);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public void a(int paramInt1, int paramInt2, ReadableArray paramReadableArray) {
    a a1 = d(paramInt1);
    if (a1.d != null) {
      if (a1.a != null) {
        a1.d.receiveCommand(a1.a, paramInt2, paramReadableArray);
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Unable to find viewState view for tag ");
      stringBuilder1.append(paramInt1);
      throw new IllegalStateException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find viewState manager for tag ");
    stringBuilder.append(paramInt1);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public void a(int paramInt, ReadableMap paramReadableMap) {
    if (paramReadableMap == null)
      return; 
    UiThreadUtil.assertOnUiThread();
    a a1 = d(paramInt);
    a1.e = new y(paramReadableMap);
    View view = a1.a;
    if (view != null) {
      ((ViewManager)a.a(a1.d)).updateProperties(view, a1.e);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unable to find view for tag ");
    stringBuilder.append(paramInt);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public void a(int paramInt, EventEmitterWrapper paramEventEmitterWrapper) {
    UiThreadUtil.assertOnUiThread();
    (d(paramInt)).g = paramEventEmitterWrapper;
  }
  
  public void a(int paramInt, SizeMonitoringFrameLayout paramSizeMonitoringFrameLayout) {
    if (paramSizeMonitoringFrameLayout.getId() == -1) {
      this.a.put(Integer.valueOf(paramInt), new a(paramInt, paramSizeMonitoringFrameLayout, this.c, true, null));
      paramSizeMonitoringFrameLayout.setId(paramInt);
      return;
    } 
    throw new f("Trying to add a root view with an explicit id already set. React Native uses the id field to track react tags and will overwrite this field. If that is fine, explicitly overwrite the id field to View.NO_ID before calling addRootView.");
  }
  
  public void a(af paramaf, String paramString) { this.d.a(paramaf, paramString); }
  
  public void a(af paramaf, String paramString, int paramInt, boolean paramBoolean) {
    af af1;
    UiThreadUtil.assertOnUiThread();
    if (!paramBoolean) {
      ViewManager viewManager = this.b.a(paramString);
      View view = this.d.a(paramString, paramaf);
      view.setId(paramInt);
      af1 = viewManager;
    } else {
      paramaf = null;
      af1 = paramaf;
    } 
    this.a.put(Integer.valueOf(paramInt), new a(paramInt, paramaf, af1, null));
  }
  
  public void b(int paramInt) {
    UiThreadUtil.assertOnUiThread();
    View view = (d(paramInt)).a;
    if (view != null) {
      a(view);
      return;
    } 
    this.a.remove(Integer.valueOf(paramInt));
  }
  
  public void b(int paramInt, ReadableMap paramReadableMap) {
    UiThreadUtil.assertOnUiThread();
    a a1 = d(paramInt);
    if (a1.e != null) {
      if (a1.f != null && paramReadableMap.hasKey("hash") && a1.f.getDouble("hash") == paramReadableMap.getDouble("hash") && a1.f.toString().equals(paramReadableMap.toString()))
        return; 
      a1.f = paramReadableMap;
      ViewManager viewManager = a1.d;
      if (viewManager != null) {
        Object object = viewManager.updateLocalData(a1.a, a1.e, new y(a1.f));
        if (object != null)
          viewManager.updateExtraData(a1.a, object); 
        return;
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Unable to find ViewManager for tag: ");
      stringBuilder1.append(paramInt);
      throw new IllegalStateException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Can not update local data to view without props: ");
    stringBuilder.append(paramInt);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public EventEmitterWrapper c(int paramInt) {
    a a1 = (a)this.a.get(Integer.valueOf(paramInt));
    return (a1 == null) ? null : a1.g;
  }
}
