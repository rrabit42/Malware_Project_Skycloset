package com.facebook.react.fabric;

import android.util.Pair;
import com.facebook.common.e.a;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.uimanager.events.RCTEventEmitter;
import com.facebook.systrace.a;
import java.util.HashSet;

public class FabricEventEmitter implements RCTEventEmitter {
  private static final String TAG = "FabricEventEmitter";
  
  private final a mUIManager;
  
  static  {
  
  }
  
  public FabricEventEmitter(a parama) { this.mUIManager = parama; }
  
  private WritableArray copyWritableArray(WritableArray paramWritableArray) {
    WritableNativeArray writableNativeArray = new WritableNativeArray();
    for (byte b = 0; b < paramWritableArray.size(); b++)
      writableNativeArray.pushMap(getWritableMap(paramWritableArray.getMap(b))); 
    return writableNativeArray;
  }
  
  private WritableMap getWritableMap(ReadableMap paramReadableMap) {
    WritableNativeMap writableNativeMap = new WritableNativeMap();
    writableNativeMap.merge(paramReadableMap);
    return writableNativeMap;
  }
  
  private Pair<WritableArray, WritableArray> removeTouchesAtIndices(WritableArray paramWritableArray1, WritableArray paramWritableArray2) {
    int i;
    WritableNativeArray writableNativeArray1 = new WritableNativeArray();
    WritableNativeArray writableNativeArray2 = new WritableNativeArray();
    HashSet hashSet = new HashSet();
    boolean bool = false;
    byte b = 0;
    while (true) {
      i = bool;
      if (b < paramWritableArray2.size()) {
        i = paramWritableArray2.getInt(b);
        writableNativeArray1.pushMap(getWritableMap(paramWritableArray1.getMap(i)));
        hashSet.add(Integer.valueOf(i));
        b++;
        continue;
      } 
      break;
    } 
    while (i < paramWritableArray1.size()) {
      if (!hashSet.contains(Integer.valueOf(i)))
        writableNativeArray2.pushMap(getWritableMap(paramWritableArray1.getMap(i))); 
      i++;
    } 
    return new Pair(writableNativeArray1, writableNativeArray2);
  }
  
  private Pair<WritableArray, WritableArray> touchSubsequence(WritableArray paramWritableArray1, WritableArray paramWritableArray2) {
    WritableNativeArray writableNativeArray = new WritableNativeArray();
    for (byte b = 0; b < paramWritableArray2.size(); b++)
      writableNativeArray.pushMap(getWritableMap(paramWritableArray1.getMap(paramWritableArray2.getInt(b)))); 
    return new Pair(writableNativeArray, paramWritableArray1);
  }
  
  public void receiveEvent(int paramInt, String paramString, WritableMap paramWritableMap) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("FabricEventEmitter.receiveEvent('");
    stringBuilder.append(paramString);
    stringBuilder.append("')");
    a.a(0L, stringBuilder.toString());
    this.mUIManager.a(paramInt, paramString, paramWritableMap);
    a.b(0L);
  }
  
  public void receiveTouches(String paramString, WritableArray paramWritableArray1, WritableArray paramWritableArray2) {
    Pair pair;
    if ("topTouchEnd".equalsIgnoreCase(paramString) || "topTouchCancel".equalsIgnoreCase(paramString)) {
      pair = removeTouchesAtIndices(paramWritableArray1, paramWritableArray2);
    } else {
      pair = touchSubsequence(pair, paramWritableArray2);
    } 
    paramWritableArray2 = (WritableArray)pair.first;
    WritableArray writableArray = (WritableArray)pair.second;
    byte b;
    for (b = 0; b < paramWritableArray2.size(); b++) {
      WritableMap writableMap = getWritableMap(paramWritableArray2.getMap(b));
      writableMap.putArray("changedTouches", copyWritableArray(paramWritableArray2));
      writableMap.putArray("touches", copyWritableArray(writableArray));
      int j = writableMap.getInt("target");
      int i = j;
      if (j < 1) {
        a.d(TAG, "A view is reporting that a touch occurred on tag zero.");
        i = 0;
      } 
      receiveEvent(i, paramString, writableMap);
    } 
  }
}
