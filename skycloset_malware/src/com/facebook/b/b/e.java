package com.facebook.b.b;

import android.content.Context;
import com.facebook.a.a;
import com.facebook.b.a.a;
import com.facebook.b.a.c;
import com.facebook.b.a.d;
import com.facebook.b.a.e;
import com.facebook.b.a.j;
import com.facebook.common.a.a;
import com.facebook.common.a.b;
import com.facebook.common.e.a;
import com.facebook.common.i.a;
import com.facebook.common.time.a;
import com.facebook.common.time.c;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;

public class e implements i, a {
  private static final Class<?> b = e.class;
  
  private static final long c = TimeUnit.HOURS.toMillis(2L);
  
  private static final long d = TimeUnit.MINUTES.toMillis(30L);
  
  final Set<String> a;
  
  private final long e;
  
  private final long f;
  
  private final CountDownLatch g;
  
  private long h;
  
  private final c i;
  
  private long j;
  
  private final long k;
  
  private final a l;
  
  private final d m;
  
  private final h n;
  
  private final a o;
  
  private final boolean p;
  
  private final a q;
  
  private final a r;
  
  private final Object s = new Object();
  
  private boolean t;
  
  public e(d paramd, h paramh, b paramb, c paramc, a parama, b paramb1, Context paramContext, Executor paramExecutor, boolean paramBoolean) {
    this.e = paramb.b;
    this.f = paramb.c;
    this.h = paramb.c;
    this.l = a.a();
    this.m = paramd;
    this.n = paramh;
    this.j = -1L;
    this.i = paramc;
    this.k = paramb.a;
    this.o = parama;
    this.q = new a();
    if (paramb1 != null)
      paramb1.a(this); 
    this.r = c.b();
    this.p = paramBoolean;
    this.a = new HashSet();
    if (this.p) {
      this.g = new CountDownLatch(1);
      paramExecutor.execute(new Object(this));
      return;
    } 
    this.g = new CountDownLatch(0);
  }
  
  private a a(d.b paramb, d paramd, String paramString) {
    synchronized (this.s) {
      a a1 = paramb.a(paramd);
      this.a.add(paramString);
      this.q.b(a1.b(), 1L);
      return a1;
    } 
  }
  
  private d.b a(String paramString, d paramd) {
    b();
    return this.m.a(paramString, paramd);
  }
  
  private Collection<d.a> a(Collection<d.a> paramCollection) {
    long l1 = this.r.a();
    long l2 = c;
    ArrayList arrayList1 = new ArrayList(paramCollection.size());
    ArrayList arrayList2 = new ArrayList(paramCollection.size());
    for (d.a a1 : paramCollection) {
      if (a1.b() > l1 + l2) {
        arrayList1.add(a1);
        continue;
      } 
      arrayList2.add(a1);
    } 
    Collections.sort(arrayList2, this.n.a());
    arrayList1.addAll(arrayList2);
    return arrayList1;
  }
  
  private void a(long paramLong, c.a parama) {
    try {
      Collection collection = a(this.m.e());
      long l2 = this.q.c();
      byte b1 = 0;
      Iterator iterator = collection.iterator();
      long l1 = 0L;
      while (iterator.hasNext()) {
        d.a a1 = (d.a)iterator.next();
        if (l1 > l2 - paramLong)
          break; 
        long l3 = this.m.a(a1);
        this.a.remove(a1.a());
        if (l3 > 0L) {
          b1++;
          l1 += l3;
          j j1 = j.a().a(a1.a()).a(parama).a(l3).b(l2 - l1).c(paramLong);
          this.i.g(j1);
          j1.b();
        } 
      } 
      this.q.b(-l1, -b1);
      this.m.b();
      return;
    } catch (IOException parama) {
      a a1 = this.o;
      a.a a2 = a.a.o;
      Class clazz = b;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("evictAboveSize: ");
      stringBuilder.append(parama.getMessage());
      a1.a(a2, clazz, stringBuilder.toString(), parama);
      throw parama;
    } 
  }
  
  private void b() {
    synchronized (this.s) {
      boolean bool = d();
      c();
      long l1 = this.q.c();
      if (l1 > this.h && !bool) {
        this.q.b();
        d();
      } 
      if (l1 > this.h)
        a(this.h * 9L / 10L, c.a.a); 
      return;
    } 
  }
  
  private void c() {
    a.a a1;
    long l1;
    if (this.m.a()) {
      a1 = a.a.b;
    } else {
      a1 = a.a.a;
    } 
    if (this.l.a(a1, this.f - this.q.c())) {
      l1 = this.e;
    } else {
      l1 = this.f;
    } 
    this.h = l1;
  }
  
  private boolean d() {
    long l1 = this.r.a();
    if (this.q.a()) {
      long l2 = this.j;
      if (l2 != -1L && l1 - l2 <= d)
        return false; 
    } 
    return e();
  }
  
  private boolean e() {
    long l2 = this.r.a();
    long l1 = c + l2;
    if (this.p && this.a.isEmpty()) {
      collection = this.a;
    } else if (this.p) {
      collection = new HashSet();
    } else {
      collection = null;
    } 
    try {
      Iterator iterator = this.m.e().iterator();
      long l4 = -1L;
      byte b2 = 0;
      byte b1 = 0;
      long l3 = 0L;
      byte b4 = 0;
      byte b3 = 0;
      while (true) {
        long l5;
        byte b7;
        byte b6;
        byte b5;
        if (iterator.hasNext()) {
          d.a a1 = (d.a)iterator.next();
          b7 = b3 + true;
          l5 = l3 + a1.d();
          if (a1.b() > l1) {
            b5 = b2 + true;
            b6 = (int)(b1 + a1.d());
            l3 = Math.max(a1.b() - l2, l4);
            b3 = 1;
          } else {
            l3 = l4;
            b3 = b4;
            b5 = b2;
            b6 = b1;
            if (this.p) {
              collection.add(a1.a());
              l3 = l4;
              b3 = b4;
              b5 = b2;
              b6 = b1;
            } 
          } 
        } else {
          if (b4 != 0) {
            a a1 = this.o;
            a.a a2 = a.a.d;
            Class clazz = b;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Future timestamp found in ");
            stringBuilder.append(b2);
            stringBuilder.append(" files , with a total size of ");
            stringBuilder.append(b1);
            stringBuilder.append(" bytes, and a maximum time delta of ");
            stringBuilder.append(l4);
            stringBuilder.append("ms");
            a1.a(a2, clazz, stringBuilder.toString(), null);
          } 
          l1 = this.q.d();
          l4 = b3;
          if (l1 != l4 || this.q.c() != l3) {
            if (this.p && this.a != collection) {
              this.a.clear();
              this.a.addAll(collection);
            } 
            this.q.a(l3, l4);
          } 
          this.j = l2;
          return true;
        } 
        l4 = l3;
        b4 = b3;
        b3 = b7;
        l3 = l5;
        b2 = b5;
        b1 = b6;
      } 
    } catch (IOException collection) {
      a a1 = this.o;
      a.a a2 = a.a.p;
      Class clazz = b;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("calcFileCacheSize: ");
      stringBuilder.append(collection.getMessage());
      a1.a(a2, clazz, stringBuilder.toString(), collection);
      return false;
    } 
  }
  
  public a a(d paramd) {
    j j1 = j.a().a(paramd);
    try {
      synchronized (this.s) {
        List list = e.a(paramd);
        byte b1 = 0;
        String str = null;
        a a1 = str;
        while (true) {
          if (b1 < list.size()) {
            str = (String)list.get(b1);
            j1.a(str);
            a1 = this.m.b(str, paramd);
            if (a1 == null) {
              b1++;
              continue;
            } 
          } 
          if (a1 == null) {
            this.i.b(j1);
            this.a.remove(str);
          } else {
            this.i.a(j1);
            this.a.add(str);
          } 
          j1.b();
          return a1;
        } 
      } 
    } catch (IOException paramd) {
      this.o.a(a.a.p, b, "getResource", paramd);
      j1.a(paramd);
      this.i.e(j1);
      j1.b();
      return null;
    } finally {}
    j1.b();
    throw paramd;
  }
  
  public a a(d paramd, j paramj) {
    j1 = j.a().a(paramd);
    this.i.c(j1);
    synchronized (this.s) {
      String str = e.b(paramd);
      j1.a(str);
      try {
        null = a(str, paramd);
        try {
          null.a(paramj, paramd);
          a1 = a(null, paramd, str);
          j1.a(a1.b()).b(this.q.c());
          this.i.d(j1);
          if (!null.a())
            a.c(b, "Failed to delete temp file"); 
          return a1;
        } finally {
          if (!null.a())
            a.c(b, "Failed to delete temp file"); 
        } 
      } catch (IOException paramd) {
        j1.a(paramd);
        this.i.f(j1);
        a.b(b, "Failed inserting a file into the cache", paramd);
        throw paramd;
      } finally {}
      j1.b();
      throw paramd;
    } 
  }
  
  public void a() {
    Object object = this.s;
    /* monitor enter ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
    try {
      this.m.c();
      this.a.clear();
      this.i.a();
    } catch (IOException iOException) {
      a a1 = this.o;
      a.a a2 = a.a.o;
      Class clazz = b;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("clearAll: ");
      stringBuilder.append(iOException.getMessage());
      a1.a(a2, clazz, stringBuilder.toString(), iOException);
    } finally {
      d d1;
    } 
    this.q.b();
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
  }
  
  public void b(d paramd) {
    Object object = this.s;
    /* monitor enter ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
    try {
      List list = e.a(paramd);
      for (byte b1 = 0; b1 < list.size(); b1++) {
        String str = (String)list.get(b1);
        this.m.b(str);
        this.a.remove(str);
      } 
    } catch (IOException paramd) {
      a a1 = this.o;
      a.a a2 = a.a.n;
      Class clazz = b;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("delete: ");
      stringBuilder.append(paramd.getMessage());
      a1.a(a2, clazz, stringBuilder.toString(), paramd);
    } finally {}
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=null} */
  }
  
  public boolean c(d paramd) {
    synchronized (this.s) {
      List list = e.a(paramd);
      for (byte b1 = 0;; b1++) {
        if (b1 < list.size()) {
          String str = (String)list.get(b1);
          if (this.a.contains(str))
            return true; 
        } else {
          return false;
        } 
      } 
    } 
  }
  
  public boolean d(d paramd) {
    synchronized (this.s) {
      if (c(paramd))
        return true; 
      try {
        List list = e.a(paramd);
        for (byte b1 = 0;; b1++) {
          if (b1 < list.size()) {
            String str = (String)list.get(b1);
            if (this.m.c(str, paramd)) {
              this.a.add(str);
              return true;
            } 
          } else {
            return false;
          } 
        } 
      } catch (IOException paramd) {}
      return false;
    } 
  }
}
