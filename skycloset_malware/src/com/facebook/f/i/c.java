package com.facebook.f.i;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import com.facebook.common.d.h;
import com.facebook.f.h.a;
import com.facebook.f.h.b;

public class c<DH extends b> extends ImageView {
  private static boolean f;
  
  private final a.a a = new a.a();
  
  private float b = 0.0F;
  
  private b<DH> c;
  
  private boolean d = false;
  
  private boolean e = false;
  
  static  {
  
  }
  
  public c(Context paramContext) {
    super(paramContext);
    a(paramContext);
  }
  
  private void a(Context paramContext) {
    if (this.d)
      return; 
    boolean bool = true;
    this.d = true;
    this.c = b.a(null, paramContext);
    if (Build.VERSION.SDK_INT >= 21) {
      ColorStateList colorStateList = getImageTintList();
      if (colorStateList == null)
        return; 
      setColorFilter(colorStateList.getDefaultColor());
    } 
    if (!f || (paramContext.getApplicationInfo()).targetSdkVersion < 24)
      bool = false; 
    this.e = bool;
  }
  
  private void e() {
    if (this.e) {
      Drawable drawable = getDrawable();
      if (drawable != null) {
        boolean bool;
        if (getVisibility() == 0) {
          bool = true;
        } else {
          bool = false;
        } 
        drawable.setVisible(bool, false);
      } 
    } 
  }
  
  public static void setGlobalLegacyVisibilityHandlingEnabled(boolean paramBoolean) { f = paramBoolean; }
  
  protected void a() { c(); }
  
  protected void b() { d(); }
  
  protected void c() { this.c.b(); }
  
  protected void d() { this.c.c(); }
  
  public float getAspectRatio() { return this.b; }
  
  public a getController() { return this.c.d(); }
  
  public DH getHierarchy() { return (DH)this.c.e(); }
  
  public Drawable getTopLevelDrawable() { return this.c.f(); }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    e();
    a();
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    e();
    b();
  }
  
  public void onFinishTemporaryDetach() {
    super.onFinishTemporaryDetach();
    e();
    a();
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    a.a a1 = this.a;
    a1.a = paramInt1;
    a1.b = paramInt2;
    a.a(a1, this.b, getLayoutParams(), getPaddingLeft() + getPaddingRight(), getPaddingTop() + getPaddingBottom());
    super.onMeasure(this.a.a, this.a.b);
  }
  
  public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    e();
    b();
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) { return this.c.a(paramMotionEvent) ? true : super.onTouchEvent(paramMotionEvent); }
  
  protected void onVisibilityChanged(View paramView, int paramInt) {
    super.onVisibilityChanged(paramView, paramInt);
    e();
  }
  
  public void setAspectRatio(float paramFloat) {
    if (paramFloat == this.b)
      return; 
    this.b = paramFloat;
    requestLayout();
  }
  
  public void setController(a parama) {
    this.c.a(parama);
    super.setImageDrawable(this.c.f());
  }
  
  public void setHierarchy(DH paramDH) {
    this.c.a(paramDH);
    super.setImageDrawable(this.c.f());
  }
  
  @Deprecated
  public void setImageBitmap(Bitmap paramBitmap) {
    a(getContext());
    this.c.a(null);
    super.setImageBitmap(paramBitmap);
  }
  
  @Deprecated
  public void setImageDrawable(Drawable paramDrawable) {
    a(getContext());
    this.c.a(null);
    super.setImageDrawable(paramDrawable);
  }
  
  @Deprecated
  public void setImageResource(int paramInt) {
    a(getContext());
    this.c.a(null);
    super.setImageResource(paramInt);
  }
  
  @Deprecated
  public void setImageURI(Uri paramUri) {
    a(getContext());
    this.c.a(null);
    super.setImageURI(paramUri);
  }
  
  public void setLegacyVisibilityHandlingEnabled(boolean paramBoolean) { this.e = paramBoolean; }
  
  public String toString() {
    h.a a1 = h.a(this);
    String str = this.c;
    if (str != null) {
      String str1 = str.toString();
    } else {
      str = "<no holder set>";
    } 
    return a1.a("holder", str).toString();
  }
}
