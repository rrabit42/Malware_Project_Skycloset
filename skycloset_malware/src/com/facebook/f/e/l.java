package com.facebook.f.e;

import android.annotation.TargetApi;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import com.facebook.common.d.i;
import java.util.Arrays;

public class l extends Drawable implements j {
  final float[] a = new float[8];
  
  float[] b;
  
  final Paint c = new Paint(1);
  
  final Path d = new Path();
  
  final Path e = new Path();
  
  private final float[] f = new float[8];
  
  private boolean g = false;
  
  private float h = 0.0F;
  
  private float i = 0.0F;
  
  private int j = 0;
  
  private boolean k = false;
  
  private int l = 0;
  
  private final RectF m = new RectF();
  
  private int n = 255;
  
  public l(int paramInt) { a(paramInt); }
  
  @TargetApi(11)
  public static l a(ColorDrawable paramColorDrawable) { return new l(paramColorDrawable.getColor()); }
  
  private void a() {
    this.d.reset();
    this.e.reset();
    this.m.set(getBounds());
    RectF rectF = this.m;
    float f1 = this.h;
    rectF.inset(f1 / 2.0F, f1 / 2.0F);
    boolean bool = this.g;
    byte b1 = 0;
    if (bool) {
      f1 = Math.min(this.m.width(), this.m.height()) / 2.0F;
      this.e.addCircle(this.m.centerX(), this.m.centerY(), f1, Path.Direction.CW);
    } else {
      float[] arrayOfFloat;
      byte b2 = 0;
      while (true) {
        arrayOfFloat = this.a;
        if (b2 < arrayOfFloat.length) {
          arrayOfFloat[b2] = this.f[b2] + this.i - this.h / 2.0F;
          b2++;
          continue;
        } 
        break;
      } 
      this.e.addRoundRect(this.m, arrayOfFloat, Path.Direction.CW);
    } 
    rectF = this.m;
    f1 = this.h;
    rectF.inset(-f1 / 2.0F, -f1 / 2.0F);
    float f2 = this.i;
    if (this.k) {
      f1 = this.h;
    } else {
      f1 = 0.0F;
    } 
    f1 = f2 + f1;
    this.m.inset(f1, f1);
    if (this.g) {
      f2 = Math.min(this.m.width(), this.m.height()) / 2.0F;
      this.d.addCircle(this.m.centerX(), this.m.centerY(), f2, Path.Direction.CW);
    } else if (this.k) {
      float[] arrayOfFloat;
      byte b2 = b1;
      if (this.b == null) {
        this.b = new float[8];
        b2 = b1;
      } 
      while (true) {
        arrayOfFloat = this.b;
        if (b2 < arrayOfFloat.length) {
          arrayOfFloat[b2] = this.f[b2] - this.h;
          b2++;
          continue;
        } 
        break;
      } 
      this.d.addRoundRect(this.m, arrayOfFloat, Path.Direction.CW);
    } else {
      this.d.addRoundRect(this.m, this.f, Path.Direction.CW);
    } 
    rectF = this.m;
    f1 = -f1;
    rectF.inset(f1, f1);
  }
  
  public void a(float paramFloat) {
    boolean bool;
    if (paramFloat >= 0.0F) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool, "radius should be non negative");
    Arrays.fill(this.f, paramFloat);
    a();
    invalidateSelf();
  }
  
  public void a(int paramInt) {
    if (this.l != paramInt) {
      this.l = paramInt;
      invalidateSelf();
    } 
  }
  
  public void a(int paramInt, float paramFloat) {
    if (this.j != paramInt) {
      this.j = paramInt;
      invalidateSelf();
    } 
    if (this.h != paramFloat) {
      this.h = paramFloat;
      a();
      invalidateSelf();
    } 
  }
  
  public void a(boolean paramBoolean) {
    this.g = paramBoolean;
    a();
    invalidateSelf();
  }
  
  public void a(float[] paramArrayOfFloat) {
    if (paramArrayOfFloat == null) {
      Arrays.fill(this.f, 0.0F);
    } else {
      boolean bool;
      if (paramArrayOfFloat.length == 8) {
        bool = true;
      } else {
        bool = false;
      } 
      i.a(bool, "radii should have exactly 8 values");
      System.arraycopy(paramArrayOfFloat, 0, this.f, 0, 8);
    } 
    a();
    invalidateSelf();
  }
  
  public void b(float paramFloat) {
    if (this.i != paramFloat) {
      this.i = paramFloat;
      a();
      invalidateSelf();
    } 
  }
  
  public void b(boolean paramBoolean) {
    if (this.k != paramBoolean) {
      this.k = paramBoolean;
      a();
      invalidateSelf();
    } 
  }
  
  public void draw(Canvas paramCanvas) {
    this.c.setColor(e.a(this.l, this.n));
    this.c.setStyle(Paint.Style.FILL);
    paramCanvas.drawPath(this.d, this.c);
    if (this.h != 0.0F) {
      this.c.setColor(e.a(this.j, this.n));
      this.c.setStyle(Paint.Style.STROKE);
      this.c.setStrokeWidth(this.h);
      paramCanvas.drawPath(this.e, this.c);
    } 
  }
  
  public int getAlpha() { return this.n; }
  
  public int getOpacity() { return e.a(e.a(this.l, this.n)); }
  
  protected void onBoundsChange(Rect paramRect) {
    super.onBoundsChange(paramRect);
    a();
  }
  
  public void setAlpha(int paramInt) {
    if (paramInt != this.n) {
      this.n = paramInt;
      invalidateSelf();
    } 
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
}
