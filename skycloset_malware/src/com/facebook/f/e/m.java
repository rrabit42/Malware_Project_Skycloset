package com.facebook.f.e;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import com.facebook.common.d.i;
import java.util.Arrays;

public class m extends g implements j {
  a a = a.a;
  
  final float[] c = new float[8];
  
  final Paint d = new Paint(1);
  
  private final RectF e = new RectF();
  
  private RectF f;
  
  private Matrix g;
  
  private final float[] h = new float[8];
  
  private boolean i = false;
  
  private float j = 0.0F;
  
  private int k = 0;
  
  private int l = 0;
  
  private float m = 0.0F;
  
  private boolean n = false;
  
  private final Path o = new Path();
  
  private final Path p = new Path();
  
  private final RectF q = new RectF();
  
  public m(Drawable paramDrawable) { super((Drawable)i.a(paramDrawable)); }
  
  private void b() {
    this.o.reset();
    this.p.reset();
    this.q.set(getBounds());
    RectF rectF = this.q;
    float f1 = this.m;
    rectF.inset(f1, f1);
    this.o.addRect(this.q, Path.Direction.CW);
    if (this.i) {
      this.o.addCircle(this.q.centerX(), this.q.centerY(), Math.min(this.q.width(), this.q.height()) / 2.0F, Path.Direction.CW);
    } else {
      this.o.addRoundRect(this.q, this.h, Path.Direction.CW);
    } 
    rectF = this.q;
    f1 = this.m;
    rectF.inset(-f1, -f1);
    rectF = this.q;
    f1 = this.j;
    rectF.inset(f1 / 2.0F, f1 / 2.0F);
    if (this.i) {
      f1 = Math.min(this.q.width(), this.q.height()) / 2.0F;
      this.p.addCircle(this.q.centerX(), this.q.centerY(), f1, Path.Direction.CW);
    } else {
      float[] arrayOfFloat;
      byte b = 0;
      while (true) {
        arrayOfFloat = this.c;
        if (b < arrayOfFloat.length) {
          arrayOfFloat[b] = this.h[b] + this.m - this.j / 2.0F;
          b++;
          continue;
        } 
        break;
      } 
      this.p.addRoundRect(this.q, arrayOfFloat, Path.Direction.CW);
    } 
    rectF = this.q;
    f1 = this.j;
    rectF.inset(-f1 / 2.0F, -f1 / 2.0F);
  }
  
  public void a(float paramFloat) {
    Arrays.fill(this.h, paramFloat);
    b();
    invalidateSelf();
  }
  
  public void a(int paramInt) {
    this.l = paramInt;
    invalidateSelf();
  }
  
  public void a(int paramInt, float paramFloat) {
    this.k = paramInt;
    this.j = paramFloat;
    b();
    invalidateSelf();
  }
  
  public void a(boolean paramBoolean) {
    this.i = paramBoolean;
    b();
    invalidateSelf();
  }
  
  public void a(float[] paramArrayOfFloat) {
    if (paramArrayOfFloat == null) {
      Arrays.fill(this.h, 0.0F);
    } else {
      boolean bool;
      if (paramArrayOfFloat.length == 8) {
        bool = true;
      } else {
        bool = false;
      } 
      i.a(bool, "radii should have exactly 8 values");
      System.arraycopy(paramArrayOfFloat, 0, this.h, 0, 8);
    } 
    b();
    invalidateSelf();
  }
  
  public void b(float paramFloat) {
    this.m = paramFloat;
    b();
    invalidateSelf();
  }
  
  public void b(boolean paramBoolean) {
    this.n = paramBoolean;
    b();
    invalidateSelf();
  }
  
  public void draw(Canvas paramCanvas) {
    int i1;
    this.e.set(getBounds());
    switch (null.a[this.a.ordinal()]) {
      case 2:
        if (this.n) {
          RectF rectF = this.f;
          if (rectF == null) {
            this.f = new RectF(this.e);
            this.g = new Matrix();
          } else {
            rectF.set(this.e);
          } 
          rectF = this.f;
          float f1 = this.j;
          rectF.inset(f1, f1);
          this.g.setRectToRect(this.e, this.f, Matrix.ScaleToFit.FILL);
          int i2 = paramCanvas.save();
          paramCanvas.clipRect(this.e);
          paramCanvas.concat(this.g);
          super.draw(paramCanvas);
          paramCanvas.restoreToCount(i2);
        } else {
          super.draw(paramCanvas);
        } 
        this.d.setStyle(Paint.Style.FILL);
        this.d.setColor(this.l);
        this.d.setStrokeWidth(0.0F);
        this.o.setFillType(Path.FillType.EVEN_ODD);
        paramCanvas.drawPath(this.o, this.d);
        if (this.i) {
          float f1 = (this.e.width() - this.e.height() + this.j) / 2.0F;
          float f2 = (this.e.height() - this.e.width() + this.j) / 2.0F;
          if (f1 > 0.0F) {
            paramCanvas.drawRect(this.e.left, this.e.top, this.e.left + f1, this.e.bottom, this.d);
            paramCanvas.drawRect(this.e.right - f1, this.e.top, this.e.right, this.e.bottom, this.d);
          } 
          if (f2 > 0.0F) {
            paramCanvas.drawRect(this.e.left, this.e.top, this.e.right, this.e.top + f2, this.d);
            paramCanvas.drawRect(this.e.left, this.e.bottom - f2, this.e.right, this.e.bottom, this.d);
          } 
        } 
        break;
      case 1:
        i1 = paramCanvas.save();
        this.o.setFillType(Path.FillType.EVEN_ODD);
        paramCanvas.clipPath(this.o);
        super.draw(paramCanvas);
        paramCanvas.restoreToCount(i1);
        break;
    } 
    if (this.k != 0) {
      this.d.setStyle(Paint.Style.STROKE);
      this.d.setColor(this.k);
      this.d.setStrokeWidth(this.j);
      this.o.setFillType(Path.FillType.EVEN_ODD);
      paramCanvas.drawPath(this.p, this.d);
    } 
  }
  
  protected void onBoundsChange(Rect paramRect) {
    super.onBoundsChange(paramRect);
    b();
  }
}
