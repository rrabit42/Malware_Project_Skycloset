package com.facebook.f.e;

import android.annotation.TargetApi;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import com.facebook.common.d.i;

public class a extends Drawable implements Drawable.Callback, r, s {
  private s a;
  
  private final d b = new d();
  
  private final Drawable[] c;
  
  private final c[] d;
  
  private final Rect e = new Rect();
  
  private boolean f;
  
  private boolean g;
  
  private boolean h;
  
  public a(Drawable[] paramArrayOfDrawable) {
    byte b1 = 0;
    this.f = false;
    this.g = false;
    this.h = false;
    i.a(paramArrayOfDrawable);
    this.c = paramArrayOfDrawable;
    while (true) {
      paramArrayOfDrawable = this.c;
      if (b1 < paramArrayOfDrawable.length) {
        e.a(paramArrayOfDrawable[b1], this, this);
        b1++;
        continue;
      } 
      break;
    } 
    this.d = new c[paramArrayOfDrawable.length];
  }
  
  private c c(int paramInt) { return new Object(this, paramInt); }
  
  public int a() { return this.c.length; }
  
  public Drawable a(int paramInt) {
    boolean bool;
    boolean bool1 = true;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt < this.c.length) {
      bool = bool1;
    } else {
      bool = false;
    } 
    i.a(bool);
    return this.c[paramInt];
  }
  
  public Drawable a(int paramInt, Drawable paramDrawable) {
    boolean bool;
    boolean bool1 = true;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt < this.c.length) {
      bool = bool1;
    } else {
      bool = false;
    } 
    i.a(bool);
    Drawable drawable = this.c[paramInt];
    if (paramDrawable != drawable) {
      if (paramDrawable != null && this.h)
        paramDrawable.mutate(); 
      e.a(this.c[paramInt], null, null);
      e.a(paramDrawable, null, null);
      e.a(paramDrawable, this.b);
      e.a(paramDrawable, this);
      e.a(paramDrawable, this, this);
      this.g = false;
      this.c[paramInt] = paramDrawable;
      invalidateSelf();
    } 
    return drawable;
  }
  
  public void a(Matrix paramMatrix) {
    s s1 = this.a;
    if (s1 != null) {
      s1.a(paramMatrix);
      return;
    } 
    paramMatrix.reset();
  }
  
  public void a(RectF paramRectF) {
    s s1 = this.a;
    if (s1 != null) {
      s1.a(paramRectF);
      return;
    } 
    paramRectF.set(getBounds());
  }
  
  public void a(s params) { this.a = params; }
  
  public c b(int paramInt) {
    boolean bool;
    boolean bool1 = true;
    if (paramInt >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt < this.d.length) {
      bool = bool1;
    } else {
      bool = false;
    } 
    i.a(bool);
    c[] arrayOfc = this.d;
    if (arrayOfc[paramInt] == null)
      arrayOfc[paramInt] = c(paramInt); 
    return this.d[paramInt];
  }
  
  public void draw(Canvas paramCanvas) {
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.draw(paramCanvas); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  public int getIntrinsicHeight() {
    byte b1 = -1;
    int j = 0;
    int i = -1;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (j < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[j];
        int k = i;
        if (drawable != null)
          k = Math.max(i, drawable.getIntrinsicHeight()); 
        j++;
        i = k;
        continue;
      } 
      break;
    } 
    j = b1;
    if (i > 0)
      j = i; 
    return j;
  }
  
  public int getIntrinsicWidth() {
    byte b1 = -1;
    int j = 0;
    int i = -1;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (j < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[j];
        int k = i;
        if (drawable != null)
          k = Math.max(i, drawable.getIntrinsicWidth()); 
        j++;
        i = k;
        continue;
      } 
      break;
    } 
    j = b1;
    if (i > 0)
      j = i; 
    return j;
  }
  
  public int getOpacity() {
    if (this.c.length == 0)
      return -2; 
    int i = -1;
    byte b1 = 1;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        int j = i;
        if (drawable != null)
          j = Drawable.resolveOpacity(i, drawable.getOpacity()); 
        b1++;
        i = j;
        continue;
      } 
      break;
    } 
    return i;
  }
  
  public boolean getPadding(Rect paramRect) {
    byte b1 = 0;
    paramRect.left = 0;
    paramRect.top = 0;
    paramRect.right = 0;
    paramRect.bottom = 0;
    Rect rect = this.e;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null) {
          drawable.getPadding(rect);
          paramRect.left = Math.max(paramRect.left, rect.left);
          paramRect.top = Math.max(paramRect.top, rect.top);
          paramRect.right = Math.max(paramRect.right, rect.right);
          paramRect.bottom = Math.max(paramRect.bottom, rect.bottom);
        } 
        b1++;
        continue;
      } 
      break;
    } 
    return true;
  }
  
  public void invalidateDrawable(Drawable paramDrawable) { invalidateSelf(); }
  
  public boolean isStateful() {
    if (!this.g) {
      this.f = false;
      byte b1 = 0;
      while (true) {
        Drawable[] arrayOfDrawable = this.c;
        int i = arrayOfDrawable.length;
        boolean bool = true;
        if (b1 < i) {
          Drawable drawable = arrayOfDrawable[b1];
          boolean bool1 = this.f;
          if (drawable == null || !drawable.isStateful())
            bool = false; 
          this.f = bool1 | bool;
          b1++;
          continue;
        } 
        break;
      } 
      this.g = true;
    } 
    return this.f;
  }
  
  public Drawable mutate() {
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.mutate(); 
        b1++;
        continue;
      } 
      break;
    } 
    this.h = true;
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect) {
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setBounds(paramRect); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  protected boolean onLevelChange(int paramInt) {
    byte b1 = 0;
    int i = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        byte b2 = i;
        if (drawable != null) {
          b2 = i;
          if (drawable.setLevel(paramInt))
            b2 = 1; 
        } 
        b1++;
        i = b2;
        continue;
      } 
      break;
    } 
    return i;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    byte b1 = 0;
    int i = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        byte b2 = i;
        if (drawable != null) {
          b2 = i;
          if (drawable.setState(paramArrayOfInt))
            b2 = 1; 
        } 
        b1++;
        i = b2;
        continue;
      } 
      break;
    } 
    return i;
  }
  
  public void scheduleDrawable(Drawable paramDrawable, Runnable paramRunnable, long paramLong) { scheduleSelf(paramRunnable, paramLong); }
  
  public void setAlpha(int paramInt) {
    this.b.a(paramInt);
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setAlpha(paramInt); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {
    this.b.a(paramColorFilter);
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setColorFilter(paramColorFilter); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  public void setDither(boolean paramBoolean) {
    this.b.a(paramBoolean);
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setDither(paramBoolean); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  public void setFilterBitmap(boolean paramBoolean) {
    this.b.b(paramBoolean);
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setFilterBitmap(paramBoolean); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  @TargetApi(21)
  public void setHotspot(float paramFloat1, float paramFloat2) {
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setHotspot(paramFloat1, paramFloat2); 
        b1++;
        continue;
      } 
      break;
    } 
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = super.setVisible(paramBoolean1, paramBoolean2);
    byte b1 = 0;
    while (true) {
      Drawable[] arrayOfDrawable = this.c;
      if (b1 < arrayOfDrawable.length) {
        Drawable drawable = arrayOfDrawable[b1];
        if (drawable != null)
          drawable.setVisible(paramBoolean1, paramBoolean2); 
        b1++;
        continue;
      } 
      break;
    } 
    return bool;
  }
  
  public void unscheduleDrawable(Drawable paramDrawable, Runnable paramRunnable) { unscheduleSelf(paramRunnable); }
}
