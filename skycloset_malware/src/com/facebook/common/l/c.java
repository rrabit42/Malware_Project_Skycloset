package com.facebook.common.l;

import android.graphics.BitmapFactory;
import android.os.Build;
import android.util.Base64;
import java.io.UnsupportedEncodingException;

public class c {
  public static final boolean a;
  
  public static final boolean b;
  
  public static final boolean c;
  
  public static b d;
  
  private static boolean e;
  
  private static final byte[] f;
  
  private static final byte[] g;
  
  private static final byte[] h;
  
  private static final byte[] i;
  
  private static final byte[] j;
  
  static  {
    byte b1;
    int k = Build.VERSION.SDK_INT;
    byte b2 = 1;
    if (k <= 17) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    a = b1;
    if (Build.VERSION.SDK_INT >= 14) {
      b1 = b2;
    } else {
      b1 = 0;
    } 
    b = b1;
    c = b();
    d = null;
    e = false;
    f = a("RIFF");
    g = a("WEBP");
    h = a("VP8 ");
    i = a("VP8L");
    j = a("VP8X");
  }
  
  public static b a() {
    if (e)
      return d; 
    b b1 = null;
    try {
      b b2 = (b)Class.forName("com.facebook.webpsupport.WebpBitmapFactoryImpl").newInstance();
      b1 = b2;
    } catch (Throwable throwable) {}
    e = true;
    return b1;
  }
  
  public static boolean a(byte[] paramArrayOfByte, int paramInt) {
    boolean bool = a(paramArrayOfByte, paramInt + 12, j);
    if ((paramArrayOfByte[paramInt + 20] & 0x2) == 2) {
      paramInt = 1;
    } else {
      paramInt = 0;
    } 
    return (bool && paramInt != 0);
  }
  
  public static boolean a(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return (paramInt2 >= 21 && a(paramArrayOfByte, paramInt1 + 12, j)); }
  
  private static boolean a(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2) {
    if (paramArrayOfByte2 != null) {
      if (paramArrayOfByte1 == null)
        return false; 
      if (paramArrayOfByte2.length + paramInt > paramArrayOfByte1.length)
        return false; 
      for (int k = 0; k < paramArrayOfByte2.length; k++) {
        if (paramArrayOfByte1[k + paramInt] != paramArrayOfByte2[k])
          return false; 
      } 
      return true;
    } 
    return false;
  }
  
  private static byte[] a(String paramString) {
    try {
      return paramString.getBytes("ASCII");
    } catch (UnsupportedEncodingException paramString) {
      throw new RuntimeException("ASCII not found!", paramString);
    } 
  }
  
  private static boolean b() {
    if (Build.VERSION.SDK_INT < 17)
      return false; 
    if (Build.VERSION.SDK_INT == 17) {
      byte[] arrayOfByte = Base64.decode("UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==", 0);
      BitmapFactory.Options options = new BitmapFactory.Options();
      options.inJustDecodeBounds = true;
      BitmapFactory.decodeByteArray(arrayOfByte, 0, arrayOfByte.length, options);
      if (options.outHeight != 1 || options.outWidth != 1)
        return false; 
    } 
    return true;
  }
  
  public static boolean b(byte[] paramArrayOfByte, int paramInt) { return a(paramArrayOfByte, paramInt + 12, h); }
  
  public static boolean b(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return (paramInt2 >= 20 && a(paramArrayOfByte, paramInt1, f) && a(paramArrayOfByte, paramInt1 + 8, g)); }
  
  public static boolean c(byte[] paramArrayOfByte, int paramInt) { return a(paramArrayOfByte, paramInt + 12, i); }
  
  public static boolean d(byte[] paramArrayOfByte, int paramInt) {
    boolean bool = a(paramArrayOfByte, paramInt + 12, j);
    if ((paramArrayOfByte[paramInt + 20] & 0x10) == 16) {
      paramInt = 1;
    } else {
      paramInt = 0;
    } 
    return (bool && paramInt != 0);
  }
}
