package com.facebook.common.b;

import android.os.Handler;
import java.util.List;
import java.util.concurrent.AbstractExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

public class c extends AbstractExecutorService implements b {
  private final Handler a;
  
  public c(Handler paramHandler) { this.a = paramHandler; }
  
  protected <T> d<T> a(Runnable paramRunnable, T paramT) { return new d(this.a, paramRunnable, paramT); }
  
  protected <T> d<T> a(Callable<T> paramCallable) { return new d(this.a, paramCallable); }
  
  public ScheduledFuture<?> a(Runnable paramRunnable) { return b(paramRunnable, (Void)null); }
  
  public boolean a() { return (Thread.currentThread() == this.a.getLooper().getThread()); }
  
  public boolean awaitTermination(long paramLong, TimeUnit paramTimeUnit) { throw new UnsupportedOperationException(); }
  
  public <T> ScheduledFuture<T> b(Runnable paramRunnable, T paramT) {
    if (paramRunnable != null) {
      d d = a(paramRunnable, paramT);
      execute(d);
      return d;
    } 
    throw new NullPointerException();
  }
  
  public <T> ScheduledFuture<T> b(Callable<T> paramCallable) {
    if (paramCallable != null) {
      d d = a(paramCallable);
      execute(d);
      return d;
    } 
    throw new NullPointerException();
  }
  
  public void execute(Runnable paramRunnable) { this.a.post(paramRunnable); }
  
  public boolean isShutdown() { return false; }
  
  public boolean isTerminated() { return false; }
  
  public ScheduledFuture<?> schedule(Runnable paramRunnable, long paramLong, TimeUnit paramTimeUnit) {
    d d = a(paramRunnable, null);
    this.a.postDelayed(d, paramTimeUnit.toMillis(paramLong));
    return d;
  }
  
  public <V> ScheduledFuture<V> schedule(Callable<V> paramCallable, long paramLong, TimeUnit paramTimeUnit) {
    d d = a(paramCallable);
    this.a.postDelayed(d, paramTimeUnit.toMillis(paramLong));
    return d;
  }
  
  public ScheduledFuture<?> scheduleAtFixedRate(Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit) { throw new UnsupportedOperationException(); }
  
  public ScheduledFuture<?> scheduleWithFixedDelay(Runnable paramRunnable, long paramLong1, long paramLong2, TimeUnit paramTimeUnit) { throw new UnsupportedOperationException(); }
  
  public void shutdown() { throw new UnsupportedOperationException(); }
  
  public List<Runnable> shutdownNow() { throw new UnsupportedOperationException(); }
}
