package com.facebook.imagepipeline.n;

import com.facebook.common.d.e;
import com.facebook.common.d.i;
import com.facebook.common.g.h;
import com.facebook.common.k.e;
import com.facebook.g.b;
import com.facebook.g.c;
import com.facebook.imagepipeline.e.e;
import com.facebook.imagepipeline.e.f;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.o.b;
import java.util.concurrent.Executor;

public class ap extends Object implements ak<d> {
  private static final e<Integer> a = e.a(new Integer[] { null, null, null, (new Integer[4][2] = (new Integer[4][1] = (new Integer[4][0] = Integer.valueOf(2)).valueOf(7)).valueOf(4)).valueOf(5) });
  
  private final Executor b;
  
  private final h c;
  
  private final boolean d;
  
  private final ak<d> e;
  
  private final boolean f;
  
  public ap(Executor paramExecutor, h paramh, boolean paramBoolean1, ak<d> paramak, boolean paramBoolean2) {
    this.b = (Executor)i.a(paramExecutor);
    this.c = (h)i.a(paramh);
    this.d = paramBoolean1;
    this.e = (ak)i.a(paramak);
    this.f = paramBoolean2;
  }
  
  static float a(e parame, int paramInt1, int paramInt2) {
    if (parame == null)
      return 1.0F; 
    float f1 = parame.a;
    float f4 = paramInt1;
    f1 /= f4;
    float f2 = parame.b;
    float f3 = paramInt2;
    f2 = Math.max(f1, f2 / f3);
    f1 = f2;
    if (f4 * f2 > parame.c)
      f1 = parame.c / f4; 
    f2 = f1;
    if (f3 * f1 > parame.c)
      f2 = parame.c / f3; 
    return f2;
  }
  
  static int a(float paramFloat1, float paramFloat2) { return (int)(paramFloat2 + paramFloat1 * 8.0F); }
  
  static int a(int paramInt) { return Math.max(1, 8 / paramInt); }
  
  private static int a(d paramd) {
    int i = paramd.f();
    return (i != 90 && i != 180 && i != 270) ? 0 : paramd.f();
  }
  
  private static boolean b(int paramInt) { return (paramInt < 8); }
  
  private static int c(f paramf, d paramd) {
    if (!paramf.e())
      return 0; 
    int i = a(paramd);
    return paramf.d() ? i : ((i + paramf.f()) % 360);
  }
  
  private static e c(b paramb, d paramd, boolean paramBoolean) {
    if (paramd == null || paramd.e() == c.a)
      return e.c; 
    if (paramd.e() != b.a)
      return e.b; 
    if (e(paramb.g(), paramd) || b(d(paramb, paramd, paramBoolean))) {
      paramBoolean = true;
      return e.a(paramBoolean);
    } 
    paramBoolean = false;
    return e.a(paramBoolean);
  }
  
  private static int d(f paramf, d paramd) {
    int i = paramd.g();
    int j = a.indexOf(Integer.valueOf(i));
    if (j >= 0) {
      i = 0;
      if (!paramf.d())
        i = paramf.f(); 
      i /= 90;
      e e1 = a;
      return ((Integer)e1.get((j + i) % e1.size())).intValue();
    } 
    throw new IllegalArgumentException("Only accepts inverted exif orientations");
  }
  
  private static int d(b paramb, d paramd, boolean paramBoolean) {
    if (!paramBoolean)
      return 8; 
    e e1 = paramb.f();
    if (e1 == null)
      return 8; 
    int k = c(paramb.g(), paramd);
    paramBoolean = a.contains(Integer.valueOf(paramd.g()));
    int i = 0;
    if (paramBoolean) {
      j = d(paramb.g(), paramd);
    } else {
      j = 0;
    } 
    if (k == 90 || k == 270 || j == 5 || j == 7)
      i = 1; 
    if (i) {
      j = paramd.i();
    } else {
      j = paramd.h();
    } 
    if (i) {
      i = paramd.h();
    } else {
      i = paramd.i();
    } 
    int j = a(a(e1, j, i), e1.d);
    if (j > 8)
      return 8; 
    i = j;
    if (j < 1)
      i = 1; 
    return i;
  }
  
  private static boolean e(f paramf, d paramd) { return (!paramf.g() && (c(paramf, paramd) != 0 || f(paramf, paramd))); }
  
  private static boolean f(f paramf, d paramd) {
    if (!paramf.e() || paramf.g()) {
      paramd.d(0);
      return false;
    } 
    return a.contains(Integer.valueOf(paramd.g()));
  }
  
  public void a(k<d> paramk, al paramal) { this.e.a(new a(this, paramk, paramal), paramal); }
}
