package com.facebook.imagepipeline.n;

import com.facebook.common.d.i;
import com.facebook.common.g.h;
import com.facebook.common.g.j;
import com.facebook.common.k.e;
import com.facebook.g.b;
import com.facebook.g.c;
import com.facebook.g.d;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.nativecode.b;
import com.facebook.imagepipeline.nativecode.c;
import java.io.InputStream;
import java.util.concurrent.Executor;

public class az extends Object implements ak<d> {
  private final Executor a;
  
  private final h b;
  
  private final ak<d> c;
  
  public az(Executor paramExecutor, h paramh, ak<d> paramak) {
    this.a = (Executor)i.a(paramExecutor);
    this.b = (h)i.a(paramh);
    this.c = (ak)i.a(paramak);
  }
  
  private void a(d paramd, k<d> paramk, al paramal) {
    i.a(paramd);
    paramd = d.a(paramd);
    Object object = new Object(this, paramk, paramal.c(), "WebpTranscodeProducer", paramal.b(), paramd);
    this.a.execute(object);
  }
  
  private static e b(d paramd) {
    i.a(paramd);
    c c1 = d.c(paramd.d());
    if (b.b(c1)) {
      b b1 = c.a();
      return (b1 == null) ? e.b : e.a(b1.a(c1) ^ true);
    } 
    return (c1 == c.a) ? e.c : e.b;
  }
  
  private static void b(d paramd, j paramj) {
    c c1;
    InputStream inputStream = paramd.d();
    c c2 = d.c(inputStream);
    if (c2 == b.e || c2 == b.g) {
      c.a().a(inputStream, paramj, 80);
      c1 = b.a;
    } else if (c2 == b.f || c2 == b.h) {
      c.a().a(inputStream, c1);
      c1 = b.b;
    } else {
      throw new IllegalArgumentException("Wrong image format");
    } 
    paramd.a(c1);
  }
  
  public void a(k<d> paramk, al paramal) { this.c.a(new a(this, paramk, paramal), paramal); }
}
