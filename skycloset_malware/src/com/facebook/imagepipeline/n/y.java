package com.facebook.imagepipeline.n;

import android.content.ContentResolver;
import android.database.Cursor;
import android.graphics.Rect;
import android.media.ExifInterface;
import android.net.Uri;
import android.provider.MediaStore;
import com.facebook.common.e.a;
import com.facebook.common.g.h;
import com.facebook.common.k.f;
import com.facebook.h.b;
import com.facebook.imagepipeline.e.e;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.o.b;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.Executor;

public class y extends aa implements ax<d> {
  private static final Class<?> a = y.class;
  
  private static final String[] b = { "_id", "_data" };
  
  private static final String[] c = { "_data" };
  
  private static final Rect d = new Rect(0, 0, 512, 384);
  
  private static final Rect e = new Rect(0, 0, 96, 96);
  
  private final ContentResolver f;
  
  public y(Executor paramExecutor, h paramh, ContentResolver paramContentResolver) {
    super(paramExecutor, paramh);
    this.f = paramContentResolver;
  }
  
  private static int a(String paramString) { return (paramString == null) ? -1 : (int)(new File(paramString)).length(); }
  
  private d a(Uri paramUri, e parame) {
    cursor = this.f.query(paramUri, b, null, null, null);
    if (cursor == null)
      return null; 
    try {
      int i = cursor.getCount();
      if (i == 0)
        return null; 
      cursor.moveToFirst();
      String str = cursor.getString(cursor.getColumnIndex("_data"));
      if (parame != null) {
        d1 = a(parame, cursor.getInt(cursor.getColumnIndex("_id")));
        if (d1 != null) {
          d1.c(b(str));
          return d1;
        } 
      } 
      return null;
    } finally {
      cursor.close();
    } 
  }
  
  private d a(e parame, int paramInt) {
    int i = b(parame);
    if (i == 0)
      return null; 
    try {
      cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(this.f, paramInt, i, c);
      if (cursor == null)
        return null; 
    } finally {
      e1 = null;
    } 
    if (parame != null)
      parame.close(); 
    throw e1;
  }
  
  private static int b(e parame) { return ay.a(e.width(), e.height(), parame) ? 3 : (ay.a(d.width(), d.height(), parame) ? 1 : 0); }
  
  private static int b(String paramString) {
    if (paramString != null)
      try {
        return b.a((new ExifInterface(paramString)).getAttributeInt("Orientation", 1));
      } catch (IOException iOException) {
        a.b(a, iOException, "Unable to retrieve thumbnail rotation for %s", new Object[] { paramString });
      }  
    return 0;
  }
  
  protected d a(b paramb) {
    Uri uri = paramb.b();
    if (f.f(uri)) {
      d d1 = a(uri, paramb.f());
      if (d1 != null)
        return d1; 
    } 
    return null;
  }
  
  protected String a() { return "LocalContentUriThumbnailFetchProducer"; }
  
  public boolean a(e parame) { return ay.a(d.width(), d.height(), parame); }
}
