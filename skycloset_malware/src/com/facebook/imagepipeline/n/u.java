package com.facebook.imagepipeline.n;

import android.net.Uri;
import com.facebook.common.k.f;
import com.facebook.imagepipeline.j.d;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class u extends c<t> {
  private int a;
  
  private final ExecutorService b;
  
  public u() { this(Executors.newFixedThreadPool(3)); }
  
  public u(int paramInt) {
    this(Executors.newFixedThreadPool(3));
    this.a = paramInt;
  }
  
  u(ExecutorService paramExecutorService) { this.b = paramExecutorService; }
  
  private static String a(String paramString, Object... paramVarArgs) { return String.format(Locale.getDefault(), paramString, paramVarArgs); }
  
  static HttpURLConnection a(Uri paramUri) { return (HttpURLConnection)f.a(paramUri).openConnection(); }
  
  private HttpURLConnection a(Uri paramUri, int paramInt) {
    String str;
    Object[] arrayOfObject = a(paramUri);
    arrayOfObject.setConnectTimeout(this.a);
    int i = arrayOfObject.getResponseCode();
    if (a(i))
      return arrayOfObject; 
    if (b(i)) {
      String str1 = arrayOfObject.getHeaderField("Location");
      arrayOfObject.disconnect();
      if (str1 == null) {
        arrayOfObject = null;
      } else {
        arrayOfObject = Uri.parse(str1);
      } 
      str1 = paramUri.getScheme();
      if (paramInt > 0 && arrayOfObject != null && !arrayOfObject.getScheme().equals(str1))
        return a(arrayOfObject, paramInt - 1); 
      if (paramInt == 0) {
        Object[] arrayOfObject1 = new Object[1];
        arrayOfObject1[0] = paramUri.toString();
        str = "URL %s follows too many redirects";
      } else {
        arrayOfObject = new Object[2];
        arrayOfObject[0] = str.toString();
        arrayOfObject[1] = Integer.valueOf(i);
        str = "URL %s returned %d without a valid redirect";
      } 
      throw new IOException(a(str, arrayOfObject));
    } 
    arrayOfObject.disconnect();
    throw new IOException(String.format("Image URL %s returned HTTP code %d", new Object[] { str.toString(), Integer.valueOf(i) }));
  }
  
  private static boolean a(int paramInt) { return (paramInt >= 200 && paramInt < 300); }
  
  private static boolean b(int paramInt) {
    switch (paramInt) {
      default:
        return false;
      case 300:
      case 301:
      case 302:
      case 303:
      case 307:
      case 308:
        break;
    } 
    return true;
  }
  
  public void a(t paramt, ag.a parama) {
    Future future = this.b.submit(new Object(this, paramt, parama));
    paramt.b().a(new Object(this, future, parama));
  }
  
  public t b(k<d> paramk, al paramal) { return new t(paramk, paramal); }
  
  void b(t paramt, ag.a parama) { // Byte code:
    //   0: aconst_null
    //   1: astore #8
    //   3: aconst_null
    //   4: astore #5
    //   6: aconst_null
    //   7: astore #4
    //   9: aconst_null
    //   10: astore #6
    //   12: aconst_null
    //   13: astore #7
    //   15: aload_0
    //   16: aload_1
    //   17: invokevirtual e : ()Landroid/net/Uri;
    //   20: iconst_5
    //   21: invokespecial a : (Landroid/net/Uri;I)Ljava/net/HttpURLConnection;
    //   24: astore_3
    //   25: aload #8
    //   27: astore #6
    //   29: aload_3
    //   30: ifnull -> 76
    //   33: aload #7
    //   35: astore #5
    //   37: aload #4
    //   39: astore_1
    //   40: aload_3
    //   41: astore #4
    //   43: aload_3
    //   44: invokevirtual getInputStream : ()Ljava/io/InputStream;
    //   47: astore #6
    //   49: aload #6
    //   51: astore #5
    //   53: aload #6
    //   55: astore_1
    //   56: aload_3
    //   57: astore #4
    //   59: aload_2
    //   60: aload #6
    //   62: iconst_m1
    //   63: invokeinterface a : (Ljava/io/InputStream;I)V
    //   68: goto -> 76
    //   71: astore #6
    //   73: goto -> 107
    //   76: aload #6
    //   78: ifnull -> 86
    //   81: aload #6
    //   83: invokevirtual close : ()V
    //   86: aload_3
    //   87: ifnull -> 139
    //   90: goto -> 135
    //   93: astore_2
    //   94: aconst_null
    //   95: astore #4
    //   97: aload #6
    //   99: astore_1
    //   100: goto -> 141
    //   103: astore #6
    //   105: aconst_null
    //   106: astore_3
    //   107: aload #5
    //   109: astore_1
    //   110: aload_3
    //   111: astore #4
    //   113: aload_2
    //   114: aload #6
    //   116: invokeinterface a : (Ljava/lang/Throwable;)V
    //   121: aload #5
    //   123: ifnull -> 131
    //   126: aload #5
    //   128: invokevirtual close : ()V
    //   131: aload_3
    //   132: ifnull -> 139
    //   135: aload_3
    //   136: invokevirtual disconnect : ()V
    //   139: return
    //   140: astore_2
    //   141: aload_1
    //   142: ifnull -> 149
    //   145: aload_1
    //   146: invokevirtual close : ()V
    //   149: aload #4
    //   151: ifnull -> 159
    //   154: aload #4
    //   156: invokevirtual disconnect : ()V
    //   159: aload_2
    //   160: athrow
    //   161: astore_1
    //   162: goto -> 86
    //   165: astore_1
    //   166: goto -> 131
    //   169: astore_1
    //   170: goto -> 149
    // Exception table:
    //   from	to	target	type
    //   15	25	103	java/io/IOException
    //   15	25	93	finally
    //   43	49	71	java/io/IOException
    //   43	49	140	finally
    //   59	68	71	java/io/IOException
    //   59	68	140	finally
    //   81	86	161	java/io/IOException
    //   113	121	140	finally
    //   126	131	165	java/io/IOException
    //   145	149	169	java/io/IOException }
}
