package com.facebook.imagepipeline.n;

import a.f;
import a.h;
import com.facebook.b.a.d;
import com.facebook.common.d.f;
import com.facebook.imagepipeline.d.e;
import com.facebook.imagepipeline.d.f;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.o.b;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class o extends Object implements ak<d> {
  private final e a;
  
  private final e b;
  
  private final f c;
  
  private final ak<d> d;
  
  public o(e parame1, e parame2, f paramf, ak<d> paramak) {
    this.a = parame1;
    this.b = parame2;
    this.c = paramf;
    this.d = paramak;
  }
  
  static Map<String, String> a(an paraman, String paramString, boolean paramBoolean, int paramInt) { return !paraman.b(paramString) ? null : (paramBoolean ? f.a("cached_value_found", String.valueOf(paramBoolean), "encodedImageSize", String.valueOf(paramInt)) : f.a("cached_value_found", String.valueOf(paramBoolean))); }
  
  private void a(AtomicBoolean paramAtomicBoolean, al paramal) { paramal.a(new Object(this, paramAtomicBoolean)); }
  
  private f<d, Void> b(k<d> paramk, al paramal) {
    String str = paramal.b();
    return new Object(this, paramal.c(), str, paramk, paramal);
  }
  
  private static boolean b(h<?> paramh) { return (paramh.c() || (paramh.d() && paramh.f() instanceof java.util.concurrent.CancellationException)); }
  
  private void c(k<d> paramk, al paramal) {
    if (paramal.e().a() >= b.b.b.a()) {
      paramk.b(null, 1);
      return;
    } 
    this.d.a(paramk, paramal);
  }
  
  public void a(k<d> paramk, al paramal) {
    boolean bool;
    e e1 = paramal.a();
    if (!e1.n()) {
      c(paramk, paramal);
      return;
    } 
    paramal.c().a(paramal.b(), "DiskCacheProducer");
    d d1 = this.c.c(e1, paramal.d());
    if (e1.a() == b.a.a) {
      bool = true;
    } else {
      bool = false;
    } 
    if (bool) {
      e e2 = this.b;
    } else {
      e1 = this.a;
    } 
    AtomicBoolean atomicBoolean = new AtomicBoolean(false);
    e1.a(d1, atomicBoolean).a(b(paramk, paramal));
    a(atomicBoolean, paramal);
  }
}
