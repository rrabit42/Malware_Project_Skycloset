package com.facebook.imagepipeline.n;

import android.os.SystemClock;
import com.facebook.common.g.a;
import com.facebook.common.g.h;
import com.facebook.common.g.j;
import com.facebook.common.h.a;
import com.facebook.imagepipeline.e.a;
import com.facebook.imagepipeline.j.d;
import java.io.InputStream;
import java.util.Map;

public class af extends Object implements ak<d> {
  private final h a;
  
  private final a b;
  
  private final ag c;
  
  public af(h paramh, a parama, ag paramag) {
    this.a = paramh;
    this.b = parama;
    this.c = paramag;
  }
  
  protected static float a(int paramInt1, int paramInt2) { return (paramInt2 > 0) ? (paramInt1 / paramInt2) : (1.0F - (float)Math.exp(-paramInt1 / 50000.0D)); }
  
  private Map<String, String> a(t paramt, int paramInt) { return !paramt.d().b(paramt.c()) ? null : this.c.a(paramt, paramInt); }
  
  private void a(j paramj, int paramInt, a parama, k<d> paramk) {
    a1 = a.a(paramj.a());
    try {
      d = new d(a1);
    } finally {
      parama = null;
    } 
    d.d(paramj);
    a.c(a1);
    throw parama;
  }
  
  private void a(t paramt) {
    paramt.d().b(paramt.c(), "NetworkFetchProducer", null);
    paramt.a().b();
  }
  
  private void a(t paramt, Throwable paramThrowable) {
    paramt.d().a(paramt.c(), "NetworkFetchProducer", paramThrowable, null);
    paramt.d().a(paramt.c(), "NetworkFetchProducer", false);
    paramt.a().b(paramThrowable);
  }
  
  private boolean b(t paramt) { return !paramt.b().h() ? false : this.c.a(paramt); }
  
  protected void a(j paramj, t paramt) {
    long l = SystemClock.uptimeMillis();
    if (b(paramt) && l - paramt.f() >= 100L) {
      paramt.a(l);
      paramt.d().a(paramt.c(), "NetworkFetchProducer", "intermediate_result");
      a(paramj, paramt.g(), paramt.h(), paramt.a());
    } 
  }
  
  public void a(k<d> paramk, al paramal) {
    paramal.c().a(paramal.b(), "NetworkFetchProducer");
    t t = this.c.b(paramk, paramal);
    this.c.a(t, new Object(this, t));
  }
  
  protected void a(t paramt, InputStream paramInputStream, int paramInt) {
    if (paramInt > 0) {
      j = this.a.a(paramInt);
    } else {
      j = this.a.a();
    } 
    arrayOfByte = (byte[])this.b.a(16384);
    try {
      while (true) {
        int i = paramInputStream.read(arrayOfByte);
        if (i >= 0) {
          if (i > 0) {
            j.write(arrayOfByte, 0, i);
            a(j, paramt);
            float f = a(j.b(), paramInt);
            paramt.a().b(f);
          } 
          continue;
        } 
        break;
      } 
      this.c.b(paramt, j.b());
      b(j, paramt);
      return;
    } finally {
      this.b.a(arrayOfByte);
      j.close();
    } 
  }
  
  protected void b(j paramj, t paramt) {
    Map map = a(paramt, paramj.b());
    an an = paramt.d();
    an.a(paramt.c(), "NetworkFetchProducer", map);
    an.a(paramt.c(), "NetworkFetchProducer", true);
    a(paramj, paramt.g() | true, paramt.h(), paramt.a());
  }
}
