package com.facebook.imagepipeline.d;

import a.h;
import com.facebook.a.a;
import com.facebook.b.a.d;
import com.facebook.b.b.i;
import com.facebook.common.d.i;
import com.facebook.common.e.a;
import com.facebook.common.g.g;
import com.facebook.common.g.h;
import com.facebook.common.g.k;
import com.facebook.imagepipeline.j.d;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;

public class e {
  private static final Class<?> a = e.class;
  
  private final i b;
  
  private final h c;
  
  private final k d;
  
  private final Executor e;
  
  private final Executor f;
  
  private final u g;
  
  private final n h;
  
  public e(i parami, h paramh, k paramk, Executor paramExecutor1, Executor paramExecutor2, n paramn) {
    this.b = parami;
    this.c = paramh;
    this.d = paramk;
    this.e = paramExecutor1;
    this.f = paramExecutor2;
    this.h = paramn;
    this.g = u.a();
  }
  
  private h<d> b(d paramd, d paramd1) {
    a.a(a, "Found image for %s in staging area", paramd.a());
    this.h.c(paramd);
    return h.a(paramd1);
  }
  
  private h<d> b(d paramd, AtomicBoolean paramAtomicBoolean) {
    try {
      return h.a(new Object(this, paramAtomicBoolean, paramd), this.e);
    } catch (Exception paramAtomicBoolean) {
      a.a(a, paramAtomicBoolean, "Failed to schedule disk-cache read for %s", new Object[] { paramd.a() });
      return h.a(paramAtomicBoolean);
    } 
  }
  
  private void c(d paramd, d paramd1) {
    a.a(a, "About to write to disk-cache for key %s", paramd.a());
    try {
      this.b.a(paramd, new Object(this, paramd1));
      a.a(a, "Successful disk-cache write for key %s", paramd.a());
      return;
    } catch (IOException paramd1) {
      a.a(a, paramd1, "Failed to write to disk-cache for key %s", new Object[] { paramd.a() });
      return;
    } 
  }
  
  private boolean d(d paramd) {
    d d1 = this.g.b(paramd);
    if (d1 != null) {
      d1.close();
      a.a(a, "Found image for %s in staging area", paramd.a());
      this.h.c(paramd);
      return true;
    } 
    a.a(a, "Did not find image for %s in staging area", paramd.a());
    this.h.e();
    try {
      return this.b.d(paramd);
    } catch (Exception paramd) {
      return false;
    } 
  }
  
  private g e(d paramd) {
    try {
      a.a(a, "Disk cache read for %s", paramd.a());
      null = this.b.a(paramd);
      if (null == null) {
        a.a(a, "Disk cache miss for %s", paramd.a());
        this.h.g();
        return null;
      } 
      a.a(a, "Found entry in disk cache for %s", paramd.a());
      this.h.f();
      InputStream inputStream = null.a();
      try {
        g1 = this.c.a(inputStream, (int)null.b());
        inputStream.close();
        return g1;
      } finally {
        inputStream.close();
      } 
    } catch (IOException iOException) {
      a.a(a, iOException, "Exception reading from cache for %s", new Object[] { paramd.a() });
      this.h.h();
      throw iOException;
    } 
  }
  
  public h<Void> a() {
    this.g.b();
    try {
      return h.a(new Object(this), this.f);
    } catch (Exception exception) {
      a.a(a, exception, "Failed to schedule disk-cache clear", new Object[0]);
      return h.a(exception);
    } 
  }
  
  public h<d> a(d paramd, AtomicBoolean paramAtomicBoolean) {
    d d1 = this.g.b(paramd);
    return (d1 != null) ? b(paramd, d1) : b(paramd, paramAtomicBoolean);
  }
  
  public void a(d paramd, d paramd1) {
    i.a(paramd);
    i.a(d.e(paramd1));
    this.g.a(paramd, paramd1);
    d d1 = d.a(paramd1);
    try {
      this.f.execute(new Object(this, paramd, d1));
      return;
    } catch (Exception exception) {
      a.a(a, exception, "Failed to schedule disk-cache write for %s", new Object[] { paramd.a() });
      this.g.b(paramd, paramd1);
      d.d(d1);
      return;
    } 
  }
  
  public boolean a(d paramd) { return (this.g.c(paramd) || this.b.c(paramd)); }
  
  public boolean b(d paramd) { return a(paramd) ? true : d(paramd); }
  
  public h<Void> c(d paramd) {
    i.a(paramd);
    this.g.a(paramd);
    try {
      return h.a(new Object(this, paramd), this.f);
    } catch (Exception exception) {
      a.a(a, exception, "Failed to schedule disk-cache remove for %s", new Object[] { paramd.a() });
      return h.a(exception);
    } 
  }
}
