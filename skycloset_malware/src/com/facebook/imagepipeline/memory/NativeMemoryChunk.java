package com.facebook.imagepipeline.memory;

import android.util.Log;
import com.facebook.common.d.d;
import com.facebook.common.d.i;
import com.facebook.imagepipeline.nativecode.a;
import java.io.Closeable;

@d
public class NativeMemoryChunk implements Closeable {
  private final long a;
  
  private final int b;
  
  private boolean c;
  
  static  {
    a.a();
  }
  
  public NativeMemoryChunk() {
    this.b = 0;
    this.a = 0L;
    this.c = true;
  }
  
  public NativeMemoryChunk(int paramInt) {
    if (paramInt > 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    this.b = paramInt;
    this.a = nativeAllocate(this.b);
    this.c = false;
  }
  
  private int a(int paramInt1, int paramInt2) { return Math.min(Math.max(0, this.b - paramInt1), paramInt2); }
  
  private void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    boolean bool;
    boolean bool1 = true;
    if (paramInt4 >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt1 >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt3 >= 0) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt1 + paramInt4 <= this.b) {
      bool = true;
    } else {
      bool = false;
    } 
    i.a(bool);
    if (paramInt3 + paramInt4 <= paramInt2) {
      bool = bool1;
    } else {
      bool = false;
    } 
    i.a(bool);
  }
  
  private void b(int paramInt1, NativeMemoryChunk paramNativeMemoryChunk, int paramInt2, int paramInt3) {
    i.b(a() ^ true);
    i.b(paramNativeMemoryChunk.a() ^ true);
    a(paramInt1, paramNativeMemoryChunk.b, paramInt2, paramInt3);
    nativeMemcpy(paramNativeMemoryChunk.a + paramInt2, this.a + paramInt1, paramInt3);
  }
  
  @d
  private static native long nativeAllocate(int paramInt);
  
  @d
  private static native void nativeCopyFromByteArray(long paramLong, byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  @d
  private static native void nativeCopyToByteArray(long paramLong, byte[] paramArrayOfByte, int paramInt1, int paramInt2);
  
  @d
  private static native void nativeFree(long paramLong);
  
  @d
  private static native void nativeMemcpy(long paramLong1, long paramLong2, int paramInt);
  
  @d
  private static native byte nativeReadByte(long paramLong);
  
  public byte a(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokevirtual a : ()Z
    //   6: istore_3
    //   7: iconst_1
    //   8: istore #4
    //   10: iload_3
    //   11: ifne -> 76
    //   14: iconst_1
    //   15: istore_3
    //   16: goto -> 19
    //   19: iload_3
    //   20: invokestatic b : (Z)V
    //   23: iload_1
    //   24: iflt -> 81
    //   27: iconst_1
    //   28: istore_3
    //   29: goto -> 32
    //   32: iload_3
    //   33: invokestatic a : (Z)V
    //   36: iload_1
    //   37: aload_0
    //   38: getfield b : I
    //   41: if_icmpge -> 86
    //   44: iload #4
    //   46: istore_3
    //   47: goto -> 50
    //   50: iload_3
    //   51: invokestatic a : (Z)V
    //   54: aload_0
    //   55: getfield a : J
    //   58: iload_1
    //   59: i2l
    //   60: ladd
    //   61: invokestatic nativeReadByte : (J)B
    //   64: istore_2
    //   65: aload_0
    //   66: monitorexit
    //   67: iload_2
    //   68: ireturn
    //   69: astore #5
    //   71: aload_0
    //   72: monitorexit
    //   73: aload #5
    //   75: athrow
    //   76: iconst_0
    //   77: istore_3
    //   78: goto -> 19
    //   81: iconst_0
    //   82: istore_3
    //   83: goto -> 32
    //   86: iconst_0
    //   87: istore_3
    //   88: goto -> 50
    // Exception table:
    //   from	to	target	type
    //   2	7	69	finally
    //   19	23	69	finally
    //   32	44	69	finally
    //   50	65	69	finally }
  
  public int a(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_2
    //   3: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   6: pop
    //   7: aload_0
    //   8: invokevirtual a : ()Z
    //   11: ifne -> 68
    //   14: iconst_1
    //   15: istore #5
    //   17: goto -> 20
    //   20: iload #5
    //   22: invokestatic b : (Z)V
    //   25: aload_0
    //   26: iload_1
    //   27: iload #4
    //   29: invokespecial a : (II)I
    //   32: istore #4
    //   34: aload_0
    //   35: iload_1
    //   36: aload_2
    //   37: arraylength
    //   38: iload_3
    //   39: iload #4
    //   41: invokespecial a : (IIII)V
    //   44: aload_0
    //   45: getfield a : J
    //   48: iload_1
    //   49: i2l
    //   50: ladd
    //   51: aload_2
    //   52: iload_3
    //   53: iload #4
    //   55: invokestatic nativeCopyFromByteArray : (J[BII)V
    //   58: aload_0
    //   59: monitorexit
    //   60: iload #4
    //   62: ireturn
    //   63: astore_2
    //   64: aload_0
    //   65: monitorexit
    //   66: aload_2
    //   67: athrow
    //   68: iconst_0
    //   69: istore #5
    //   71: goto -> 20
    // Exception table:
    //   from	to	target	type
    //   2	14	63	finally
    //   20	58	63	finally }
  
  public void a(int paramInt1, NativeMemoryChunk paramNativeMemoryChunk, int paramInt2, int paramInt3) { // Byte code:
    //   0: aload_2
    //   1: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: aload_2
    //   6: getfield a : J
    //   9: aload_0
    //   10: getfield a : J
    //   13: lcmp
    //   14: ifne -> 104
    //   17: new java/lang/StringBuilder
    //   20: dup
    //   21: invokespecial <init> : ()V
    //   24: astore #5
    //   26: aload #5
    //   28: ldc 'Copying from NativeMemoryChunk '
    //   30: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: pop
    //   34: aload #5
    //   36: aload_0
    //   37: invokestatic identityHashCode : (Ljava/lang/Object;)I
    //   40: invokestatic toHexString : (I)Ljava/lang/String;
    //   43: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   46: pop
    //   47: aload #5
    //   49: ldc ' to NativeMemoryChunk '
    //   51: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   54: pop
    //   55: aload #5
    //   57: aload_2
    //   58: invokestatic identityHashCode : (Ljava/lang/Object;)I
    //   61: invokestatic toHexString : (I)Ljava/lang/String;
    //   64: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   67: pop
    //   68: aload #5
    //   70: ldc ' which share the same address '
    //   72: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   75: pop
    //   76: aload #5
    //   78: aload_0
    //   79: getfield a : J
    //   82: invokestatic toHexString : (J)Ljava/lang/String;
    //   85: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   88: pop
    //   89: ldc 'NativeMemoryChunk'
    //   91: aload #5
    //   93: invokevirtual toString : ()Ljava/lang/String;
    //   96: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   99: pop
    //   100: iconst_0
    //   101: invokestatic a : (Z)V
    //   104: aload_2
    //   105: getfield a : J
    //   108: aload_0
    //   109: getfield a : J
    //   112: lcmp
    //   113: ifge -> 148
    //   116: aload_2
    //   117: monitorenter
    //   118: aload_0
    //   119: monitorenter
    //   120: aload_0
    //   121: iload_1
    //   122: aload_2
    //   123: iload_3
    //   124: iload #4
    //   126: invokespecial b : (ILcom/facebook/imagepipeline/memory/NativeMemoryChunk;II)V
    //   129: aload_0
    //   130: monitorexit
    //   131: aload_2
    //   132: monitorexit
    //   133: return
    //   134: astore #5
    //   136: aload_0
    //   137: monitorexit
    //   138: aload #5
    //   140: athrow
    //   141: astore #5
    //   143: aload_2
    //   144: monitorexit
    //   145: aload #5
    //   147: athrow
    //   148: aload_0
    //   149: monitorenter
    //   150: aload_2
    //   151: monitorenter
    //   152: aload_0
    //   153: iload_1
    //   154: aload_2
    //   155: iload_3
    //   156: iload #4
    //   158: invokespecial b : (ILcom/facebook/imagepipeline/memory/NativeMemoryChunk;II)V
    //   161: aload_2
    //   162: monitorexit
    //   163: aload_0
    //   164: monitorexit
    //   165: return
    //   166: astore #5
    //   168: aload_2
    //   169: monitorexit
    //   170: aload #5
    //   172: athrow
    //   173: astore_2
    //   174: aload_0
    //   175: monitorexit
    //   176: aload_2
    //   177: athrow
    // Exception table:
    //   from	to	target	type
    //   118	120	141	finally
    //   120	131	134	finally
    //   131	133	141	finally
    //   136	138	134	finally
    //   138	141	141	finally
    //   143	145	141	finally
    //   150	152	173	finally
    //   152	163	166	finally
    //   163	165	173	finally
    //   168	170	166	finally
    //   170	173	173	finally
    //   174	176	173	finally }
  
  public boolean a() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield c : Z
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public int b() { return this.b; }
  
  public int b(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_2
    //   3: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   6: pop
    //   7: aload_0
    //   8: invokevirtual a : ()Z
    //   11: ifne -> 68
    //   14: iconst_1
    //   15: istore #5
    //   17: goto -> 20
    //   20: iload #5
    //   22: invokestatic b : (Z)V
    //   25: aload_0
    //   26: iload_1
    //   27: iload #4
    //   29: invokespecial a : (II)I
    //   32: istore #4
    //   34: aload_0
    //   35: iload_1
    //   36: aload_2
    //   37: arraylength
    //   38: iload_3
    //   39: iload #4
    //   41: invokespecial a : (IIII)V
    //   44: aload_0
    //   45: getfield a : J
    //   48: iload_1
    //   49: i2l
    //   50: ladd
    //   51: aload_2
    //   52: iload_3
    //   53: iload #4
    //   55: invokestatic nativeCopyToByteArray : (J[BII)V
    //   58: aload_0
    //   59: monitorexit
    //   60: iload #4
    //   62: ireturn
    //   63: astore_2
    //   64: aload_0
    //   65: monitorexit
    //   66: aload_2
    //   67: athrow
    //   68: iconst_0
    //   69: istore #5
    //   71: goto -> 20
    // Exception table:
    //   from	to	target	type
    //   2	14	63	finally
    //   20	58	63	finally }
  
  public void close() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield c : Z
    //   6: ifne -> 21
    //   9: aload_0
    //   10: iconst_1
    //   11: putfield c : Z
    //   14: aload_0
    //   15: getfield a : J
    //   18: invokestatic nativeFree : (J)V
    //   21: aload_0
    //   22: monitorexit
    //   23: return
    //   24: astore_1
    //   25: aload_0
    //   26: monitorexit
    //   27: aload_1
    //   28: athrow
    // Exception table:
    //   from	to	target	type
    //   2	21	24	finally }
  
  protected void finalize() {
    if (a())
      return; 
    null = new StringBuilder();
    null.append("finalize: Chunk ");
    null.append(Integer.toHexString(System.identityHashCode(this)));
    null.append(" still active. Underlying address = ");
    null.append(Long.toHexString(this.a));
    Log.w("NativeMemoryChunk", null.toString());
    try {
      close();
      return;
    } finally {
      super.finalize();
    } 
  }
}
