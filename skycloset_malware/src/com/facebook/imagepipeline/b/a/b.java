package com.facebook.imagepipeline.b.a;

import android.net.Uri;
import android.os.SystemClock;
import com.facebook.imagepipeline.e.a;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.n.ag;
import com.facebook.imagepipeline.n.al;
import com.facebook.imagepipeline.n.c;
import com.facebook.imagepipeline.n.k;
import com.facebook.imagepipeline.n.t;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import okhttp3.CacheControl;
import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;

public class b extends c<b.a> {
  private final Call.Factory a;
  
  private Executor b;
  
  public b(Call.Factory paramFactory, Executor paramExecutor) {
    this.a = paramFactory;
    this.b = paramExecutor;
  }
  
  public b(OkHttpClient paramOkHttpClient) { this(paramOkHttpClient, paramOkHttpClient.dispatcher().executorService()); }
  
  private void a(Call paramCall, Exception paramException, ag.a parama) {
    if (paramCall.isCanceled()) {
      parama.a();
      return;
    } 
    parama.a(paramException);
  }
  
  public a a(k<d> paramk, al paramal) { return new a(paramk, paramal); }
  
  public void a(a parama, int paramInt) { parama.c = SystemClock.elapsedRealtime(); }
  
  public void a(a parama, ag.a parama1) {
    parama.a = SystemClock.elapsedRealtime();
    Uri uri = parama.e();
    try {
      Request.Builder builder = (new Request.Builder()).cacheControl((new CacheControl.Builder()).noStore().build()).url(uri.toString()).get();
      a a1 = parama.b().a().h();
      if (a1 != null)
        builder.addHeader("Range", a1.a()); 
      a(parama, parama1, builder.build());
      return;
    } catch (Exception parama) {
      parama1.a(parama);
      return;
    } 
  }
  
  protected void a(a parama, ag.a parama1, Request paramRequest) {
    Call call = this.a.newCall(paramRequest);
    parama.b().a(new Object(this, call));
    call.enqueue(new Object(this, parama, parama1));
  }
  
  public Map<String, String> b(a parama, int paramInt) {
    HashMap hashMap = new HashMap(4);
    hashMap.put("queue_time", Long.toString(parama.b - parama.a));
    hashMap.put("fetch_time", Long.toString(parama.c - parama.b));
    hashMap.put("total_time", Long.toString(parama.c - parama.a));
    hashMap.put("image_size", Integer.toString(paramInt));
    return hashMap;
  }
}
