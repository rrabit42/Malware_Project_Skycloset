package com.facebook.imagepipeline.l;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.support.v4.util.Pools;
import com.facebook.common.d.i;
import com.facebook.common.h.a;
import com.facebook.common.j.a;
import com.facebook.common.j.b;
import com.facebook.imagepipeline.j.d;
import com.facebook.imagepipeline.memory.d;
import java.io.InputStream;
import java.nio.ByteBuffer;

@TargetApi(21)
public class a implements e {
  private static final Class<?> b = a.class;
  
  private static final byte[] d = { -1, -39 };
  
  final Pools.a<ByteBuffer> a;
  
  private final d c;
  
  public a(d paramd, int paramInt, Pools.a parama) {
    this.c = paramd;
    this.a = parama;
    byte b1;
    for (b1 = 0; b1 < paramInt; b1++)
      this.a.a(ByteBuffer.allocate(16384)); 
  }
  
  private static BitmapFactory.Options a(d paramd, Bitmap.Config paramConfig) {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inSampleSize = paramd.j();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(paramd.d(), null, options);
    if (options.outWidth != -1 && options.outHeight != -1) {
      options.inJustDecodeBounds = false;
      options.inDither = true;
      options.inPreferredConfig = paramConfig;
      options.inMutable = true;
      return options;
    } 
    throw new IllegalArgumentException();
  }
  
  public a<Bitmap> a(d paramd, Bitmap.Config paramConfig, Rect paramRect) {
    boolean bool;
    options = a(paramd, paramConfig);
    if (options.inPreferredConfig != Bitmap.Config.ARGB_8888) {
      bool = true;
    } else {
      bool = false;
    } 
    try {
      return a(paramd.d(), options, paramRect);
    } catch (RuntimeException options) {
      if (bool)
        return a(paramd, Bitmap.Config.ARGB_8888, paramRect); 
      throw options;
    } 
  }
  
  public a<Bitmap> a(d paramd, Bitmap.Config paramConfig, Rect paramRect, int paramInt) {
    boolean bool = paramd.f(paramInt);
    BitmapFactory.Options options = a(paramd, paramConfig);
    InputStream inputStream = paramd.d();
    i.a(inputStream);
    b1 = inputStream;
    if (paramd.l() > paramInt)
      b1 = new a(inputStream, paramInt); 
    if (!bool)
      b1 = new b(b1, d); 
    if (options.inPreferredConfig != Bitmap.Config.ARGB_8888) {
      paramInt = 1;
    } else {
      paramInt = 0;
    } 
    try {
      return a(b1, options, paramRect);
    } catch (RuntimeException b1) {
      if (paramInt != 0)
        return a(paramd, Bitmap.Config.ARGB_8888, paramRect); 
      throw b1;
    } 
  }
  
  protected a<Bitmap> a(InputStream paramInputStream, BitmapFactory.Options paramOptions, Rect paramRect) { // Byte code:
    //   0: aload_1
    //   1: invokestatic a : (Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: aload_2
    //   6: getfield outWidth : I
    //   9: istore #4
    //   11: aload_2
    //   12: getfield outHeight : I
    //   15: istore #5
    //   17: aload_3
    //   18: ifnull -> 33
    //   21: aload_3
    //   22: invokevirtual width : ()I
    //   25: istore #4
    //   27: aload_3
    //   28: invokevirtual height : ()I
    //   31: istore #5
    //   33: iload #4
    //   35: iload #5
    //   37: aload_2
    //   38: getfield inPreferredConfig : Landroid/graphics/Bitmap$Config;
    //   41: invokestatic a : (IILandroid/graphics/Bitmap$Config;)I
    //   44: istore #6
    //   46: aload_0
    //   47: getfield c : Lcom/facebook/imagepipeline/memory/d;
    //   50: iload #6
    //   52: invokevirtual a : (I)Ljava/lang/Object;
    //   55: checkcast android/graphics/Bitmap
    //   58: astore #11
    //   60: aload #11
    //   62: ifnull -> 359
    //   65: aload_2
    //   66: aload #11
    //   68: putfield inBitmap : Landroid/graphics/Bitmap;
    //   71: aload_0
    //   72: getfield a : Landroid/support/v4/util/Pools$a;
    //   75: invokevirtual a : ()Ljava/lang/Object;
    //   78: checkcast java/nio/ByteBuffer
    //   81: astore #7
    //   83: aload #7
    //   85: astore #9
    //   87: aload #7
    //   89: ifnonnull -> 100
    //   92: sipush #16384
    //   95: invokestatic allocate : (I)Ljava/nio/ByteBuffer;
    //   98: astore #9
    //   100: aload_2
    //   101: aload #9
    //   103: invokevirtual array : ()[B
    //   106: putfield inTempStorage : [B
    //   109: aload_3
    //   110: ifnull -> 387
    //   113: aload #11
    //   115: iload #4
    //   117: iload #5
    //   119: aload_2
    //   120: getfield inPreferredConfig : Landroid/graphics/Bitmap$Config;
    //   123: invokevirtual reconfigure : (IILandroid/graphics/Bitmap$Config;)V
    //   126: aload_1
    //   127: iconst_1
    //   128: invokestatic newInstance : (Ljava/io/InputStream;Z)Landroid/graphics/BitmapRegionDecoder;
    //   131: astore #8
    //   133: aload #8
    //   135: astore #7
    //   137: aload #8
    //   139: aload_3
    //   140: aload_2
    //   141: invokevirtual decodeRegion : (Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   144: astore #10
    //   146: aload #10
    //   148: astore_3
    //   149: aload #8
    //   151: ifnull -> 220
    //   154: aload #8
    //   156: invokevirtual recycle : ()V
    //   159: aload #10
    //   161: astore_3
    //   162: goto -> 220
    //   165: astore_2
    //   166: aconst_null
    //   167: astore #7
    //   169: goto -> 208
    //   172: aconst_null
    //   173: astore #8
    //   175: aload #8
    //   177: astore #7
    //   179: getstatic com/facebook/imagepipeline/l/a.b : Ljava/lang/Class;
    //   182: ldc 'Could not decode region %s, decoding full bitmap instead.'
    //   184: iconst_1
    //   185: anewarray java/lang/Object
    //   188: dup
    //   189: iconst_0
    //   190: aload_3
    //   191: aastore
    //   192: invokestatic c : (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
    //   195: aload #8
    //   197: ifnull -> 387
    //   200: aload #8
    //   202: invokevirtual recycle : ()V
    //   205: goto -> 387
    //   208: aload #7
    //   210: ifnull -> 218
    //   213: aload #7
    //   215: invokevirtual recycle : ()V
    //   218: aload_2
    //   219: athrow
    //   220: aload_3
    //   221: astore #7
    //   223: aload_3
    //   224: ifnonnull -> 235
    //   227: aload_1
    //   228: aconst_null
    //   229: aload_2
    //   230: invokestatic decodeStream : (Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   233: astore #7
    //   235: aload_0
    //   236: getfield a : Landroid/support/v4/util/Pools$a;
    //   239: aload #9
    //   241: invokevirtual a : (Ljava/lang/Object;)Z
    //   244: pop
    //   245: aload #11
    //   247: aload #7
    //   249: if_acmpne -> 262
    //   252: aload #7
    //   254: aload_0
    //   255: getfield c : Lcom/facebook/imagepipeline/memory/d;
    //   258: invokestatic a : (Ljava/lang/Object;Lcom/facebook/common/h/c;)Lcom/facebook/common/h/a;
    //   261: areturn
    //   262: aload_0
    //   263: getfield c : Lcom/facebook/imagepipeline/memory/d;
    //   266: aload #11
    //   268: invokevirtual a : (Ljava/lang/Object;)V
    //   271: aload #7
    //   273: invokevirtual recycle : ()V
    //   276: new java/lang/IllegalStateException
    //   279: dup
    //   280: invokespecial <init> : ()V
    //   283: athrow
    //   284: astore_1
    //   285: goto -> 347
    //   288: astore_1
    //   289: aload_0
    //   290: getfield c : Lcom/facebook/imagepipeline/memory/d;
    //   293: aload #11
    //   295: invokevirtual a : (Ljava/lang/Object;)V
    //   298: aload_1
    //   299: athrow
    //   300: astore_2
    //   301: aload_0
    //   302: getfield c : Lcom/facebook/imagepipeline/memory/d;
    //   305: aload #11
    //   307: invokevirtual a : (Ljava/lang/Object;)V
    //   310: aload_1
    //   311: invokevirtual reset : ()V
    //   314: aload_1
    //   315: invokestatic decodeStream : (Ljava/io/InputStream;)Landroid/graphics/Bitmap;
    //   318: astore_1
    //   319: aload_1
    //   320: ifnull -> 343
    //   323: aload_1
    //   324: invokestatic a : ()Lcom/facebook/imagepipeline/c/g;
    //   327: invokestatic a : (Ljava/lang/Object;Lcom/facebook/common/h/c;)Lcom/facebook/common/h/a;
    //   330: astore_1
    //   331: aload_0
    //   332: getfield a : Landroid/support/v4/util/Pools$a;
    //   335: aload #9
    //   337: invokevirtual a : (Ljava/lang/Object;)Z
    //   340: pop
    //   341: aload_1
    //   342: areturn
    //   343: aload_2
    //   344: athrow
    //   345: aload_2
    //   346: athrow
    //   347: aload_0
    //   348: getfield a : Landroid/support/v4/util/Pools$a;
    //   351: aload #9
    //   353: invokevirtual a : (Ljava/lang/Object;)Z
    //   356: pop
    //   357: aload_1
    //   358: athrow
    //   359: new java/lang/NullPointerException
    //   362: dup
    //   363: ldc 'BitmapPool.get returned null'
    //   365: invokespecial <init> : (Ljava/lang/String;)V
    //   368: athrow
    //   369: astore #7
    //   371: goto -> 172
    //   374: astore #7
    //   376: goto -> 175
    //   379: astore_1
    //   380: goto -> 345
    //   383: astore_2
    //   384: goto -> 208
    //   387: aconst_null
    //   388: astore_3
    //   389: goto -> 220
    // Exception table:
    //   from	to	target	type
    //   100	109	300	java/lang/IllegalArgumentException
    //   100	109	288	java/lang/RuntimeException
    //   100	109	284	finally
    //   113	133	369	java/io/IOException
    //   113	133	165	finally
    //   137	146	374	java/io/IOException
    //   137	146	383	finally
    //   154	159	300	java/lang/IllegalArgumentException
    //   154	159	288	java/lang/RuntimeException
    //   154	159	284	finally
    //   179	195	383	finally
    //   200	205	300	java/lang/IllegalArgumentException
    //   200	205	288	java/lang/RuntimeException
    //   200	205	284	finally
    //   213	218	300	java/lang/IllegalArgumentException
    //   213	218	288	java/lang/RuntimeException
    //   213	218	284	finally
    //   218	220	300	java/lang/IllegalArgumentException
    //   218	220	288	java/lang/RuntimeException
    //   218	220	284	finally
    //   227	235	300	java/lang/IllegalArgumentException
    //   227	235	288	java/lang/RuntimeException
    //   227	235	284	finally
    //   289	300	284	finally
    //   301	310	284	finally
    //   310	319	379	java/io/IOException
    //   310	319	284	finally
    //   323	331	379	java/io/IOException
    //   323	331	284	finally
    //   343	345	379	java/io/IOException
    //   343	345	284	finally
    //   345	347	284	finally }
}
