package com.google.android.gms.location;

import android.os.Parcel;
import android.os.Parcelable;
import android.os.SystemClock;
import com.google.android.gms.b.a;
import com.google.android.gms.b.d;
import com.google.android.gms.common.internal.ReflectedParcelable;
import java.util.Arrays;

public final class LocationRequest extends a implements ReflectedParcelable {
  public static final Parcelable.Creator<LocationRequest> CREATOR = new w();
  
  private int a = 102;
  
  private long b = 3600000L;
  
  private long c = 600000L;
  
  private boolean d = false;
  
  private long e = Float.MAX_VALUE;
  
  private int f = Integer.MAX_VALUE;
  
  private float g = 0.0F;
  
  private long h = 0L;
  
  public LocationRequest() {}
  
  LocationRequest(int paramInt1, long paramLong1, long paramLong2, boolean paramBoolean, long paramLong3, int paramInt2, float paramFloat, long paramLong4) {}
  
  private static void c(long paramLong) {
    if (paramLong >= 0L)
      return; 
    StringBuilder stringBuilder = new StringBuilder(38);
    stringBuilder.append("invalid interval: ");
    stringBuilder.append(paramLong);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public final long a() {
    long l2 = this.h;
    long l3 = this.b;
    long l1 = l2;
    if (l2 < l3)
      l1 = l3; 
    return l1;
  }
  
  public final LocationRequest a(float paramFloat) {
    if (paramFloat >= 0.0F) {
      this.g = paramFloat;
      return this;
    } 
    StringBuilder stringBuilder = new StringBuilder(37);
    stringBuilder.append("invalid displacement: ");
    stringBuilder.append(paramFloat);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public final LocationRequest a(int paramInt) {
    StringBuilder stringBuilder;
    switch (paramInt) {
      default:
        stringBuilder = new StringBuilder(28);
        stringBuilder.append("invalid quality: ");
        stringBuilder.append(paramInt);
        throw new IllegalArgumentException(stringBuilder.toString());
      case 100:
      case 102:
      case 104:
      case 105:
        break;
    } 
    this.a = paramInt;
    return this;
  }
  
  public final LocationRequest a(long paramLong) {
    c(paramLong);
    this.b = paramLong;
    if (!this.d)
      this.c = (long)(this.b / 6.0D); 
    return this;
  }
  
  public final LocationRequest b(long paramLong) {
    c(paramLong);
    this.d = true;
    this.c = paramLong;
    return this;
  }
  
  public final boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof LocationRequest))
      return false; 
    paramObject = (LocationRequest)paramObject;
    return (this.a == paramObject.a && this.b == paramObject.b && this.c == paramObject.c && this.d == paramObject.d && this.e == paramObject.e && this.f == paramObject.f && this.g == paramObject.g && a() == paramObject.a());
  }
  
  public final int hashCode() { return Arrays.hashCode(new Object[] { Integer.valueOf(this.a), Long.valueOf(this.b), Float.valueOf(this.g), Long.valueOf(this.h) }); }
  
  public final String toString() {
    String str;
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Request[");
    switch (this.a) {
      default:
        str = "???";
        break;
      case 105:
        str = "PRIORITY_NO_POWER";
        break;
      case 104:
        str = "PRIORITY_LOW_POWER";
        break;
      case 102:
        str = "PRIORITY_BALANCED_POWER_ACCURACY";
        break;
      case 100:
        str = "PRIORITY_HIGH_ACCURACY";
        break;
    } 
    stringBuilder.append(str);
    if (this.a != 105) {
      stringBuilder.append(" requested=");
      stringBuilder.append(this.b);
      stringBuilder.append("ms");
    } 
    stringBuilder.append(" fastest=");
    stringBuilder.append(this.c);
    stringBuilder.append("ms");
    if (this.h > this.b) {
      stringBuilder.append(" maxWait=");
      stringBuilder.append(this.h);
      stringBuilder.append("ms");
    } 
    if (this.g > 0.0F) {
      stringBuilder.append(" smallestDisplacement=");
      stringBuilder.append(this.g);
      stringBuilder.append("m");
    } 
    long l = this.e;
    if (l != Float.MAX_VALUE) {
      long l1 = SystemClock.elapsedRealtime();
      stringBuilder.append(" expireIn=");
      stringBuilder.append(l - l1);
      stringBuilder.append("ms");
    } 
    if (this.f != Integer.MAX_VALUE) {
      stringBuilder.append(" num=");
      stringBuilder.append(this.f);
    } 
    stringBuilder.append(']');
    return stringBuilder.toString();
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt) {
    paramInt = d.a(paramParcel);
    d.a(paramParcel, 1, this.a);
    d.a(paramParcel, 2, this.b);
    d.a(paramParcel, 3, this.c);
    d.a(paramParcel, 4, this.d);
    d.a(paramParcel, 5, this.e);
    d.a(paramParcel, 6, this.f);
    d.a(paramParcel, 7, this.g);
    d.a(paramParcel, 8, this.h);
    d.a(paramParcel, paramInt);
  }
}
