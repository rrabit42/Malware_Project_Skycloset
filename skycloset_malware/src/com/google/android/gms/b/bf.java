package com.google.android.gms.b;

import android.accounts.Account;
import android.content.Context;
import android.os.Bundle;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.a.a;
import com.google.android.gms.common.api.f;
import com.google.android.gms.common.internal.af;
import com.google.android.gms.common.internal.ag;
import com.google.android.gms.common.internal.au;
import com.google.android.gms.common.internal.ax;
import com.google.android.gms.common.internal.b;

public final class bf extends b<bd> implements av {
  private final boolean d = true;
  
  private final ax e;
  
  private final Bundle f;
  
  private Integer g;
  
  private bf(Context paramContext, Looper paramLooper, boolean paramBoolean, ax paramax, Bundle paramBundle, f.a parama, f.b paramb) {
    super(paramContext, paramLooper, 44, paramax, parama, paramb);
    this.e = paramax;
    this.f = paramBundle;
    this.g = paramax.h();
  }
  
  public bf(Context paramContext, Looper paramLooper, boolean paramBoolean, ax paramax, aw paramaw, f.a parama, f.b paramb) { this(paramContext, paramLooper, true, paramax, a(paramax), parama, paramb); }
  
  public static Bundle a(ax paramax) {
    aw aw = paramax.g();
    Integer integer = paramax.h();
    Bundle bundle = new Bundle();
    bundle.putParcelable("com.google.android.gms.signin.internal.clientRequestedAccount", paramax.a());
    if (integer != null)
      bundle.putInt("com.google.android.gms.common.internal.ClientSettings.sessionId", integer.intValue()); 
    if (aw != null) {
      bundle.putBoolean("com.google.android.gms.signin.internal.offlineAccessRequested", aw.a());
      bundle.putBoolean("com.google.android.gms.signin.internal.idTokenRequested", aw.b());
      bundle.putString("com.google.android.gms.signin.internal.serverClientId", aw.c());
      bundle.putBoolean("com.google.android.gms.signin.internal.usePromptModeForAuthCode", true);
      bundle.putBoolean("com.google.android.gms.signin.internal.forceCodeForRefreshToken", aw.d());
      bundle.putString("com.google.android.gms.signin.internal.hostedDomain", aw.e());
      bundle.putBoolean("com.google.android.gms.signin.internal.waitForAccessTokenRefresh", aw.f());
      if (aw.g() != null)
        bundle.putLong("com.google.android.gms.signin.internal.authApiSignInModuleVersion", aw.g().longValue()); 
      if (aw.h() != null)
        bundle.putLong("com.google.android.gms.signin.internal.realClientLibraryVersion", aw.h().longValue()); 
    } 
    return bundle;
  }
  
  public final void a(bb parambb) {
    af.a(parambb, "Expecting a valid ISignInCallbacks");
    try {
      Account account = this.e.b();
      GoogleSignInAccount googleSignInAccount = null;
      if ("<<default account>>".equals(account.name))
        googleSignInAccount = a.a(m()).a(); 
      ag ag = new ag(account, this.g.intValue(), googleSignInAccount);
      ((bd)q()).a(new bg(ag), parambb);
      return;
    } catch (RemoteException remoteException) {
      Log.w("SignInClientImpl", "Remote service probably died when signIn is called");
      try {
        parambb.a(new bi(8));
        return;
      } catch (RemoteException parambb) {
        Log.wtf("SignInClientImpl", "ISignInCallbacks#onSignInComplete should be executed from the same process, unexpected RemoteException.", remoteException);
        return;
      } 
    } 
  }
  
  public final boolean d() { return this.d; }
  
  public final void f() { a(new au(this)); }
  
  protected final String i() { return "com.google.android.gms.signin.service.START"; }
  
  protected final String j() { return "com.google.android.gms.signin.internal.ISignInService"; }
  
  protected final Bundle n() {
    String str = this.e.e();
    if (!m().getPackageName().equals(str))
      this.f.putString("com.google.android.gms.signin.internal.realClientPackageName", this.e.e()); 
    return this.f;
  }
}
