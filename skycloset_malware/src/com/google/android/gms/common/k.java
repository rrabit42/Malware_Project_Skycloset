package com.google.android.gms.common;

import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.a.a;
import com.google.android.gms.a.c;
import com.google.android.gms.common.internal.af;
import com.google.android.gms.common.internal.o;
import com.google.android.gms.common.internal.p;
import com.google.android.gms.common.util.e;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;

abstract class k extends p {
  private int a;
  
  protected k(byte[] paramArrayOfByte) {
    byte[] arrayOfByte = paramArrayOfByte;
    if (paramArrayOfByte.length != 25) {
      int i = paramArrayOfByte.length;
      int j = paramArrayOfByte.length;
      boolean bool = false;
      String str;
      StringBuilder stringBuilder2 = new StringBuilder((str = e.a(paramArrayOfByte, 0, j, false)).valueOf(str).length() + 51);
      stringBuilder2.append("Cert hash data has incorrect length (");
      stringBuilder2.append(i);
      stringBuilder2.append("):\n");
      stringBuilder2.append(str);
      Log.wtf("GoogleCertificates", stringBuilder2.toString(), new Exception());
      arrayOfByte = Arrays.copyOfRange(paramArrayOfByte, 0, 25);
      if (arrayOfByte.length == 25)
        bool = true; 
      i = arrayOfByte.length;
      StringBuilder stringBuilder1 = new StringBuilder(55);
      stringBuilder1.append("cert hash data has incorrect length. length=");
      stringBuilder1.append(i);
      af.b(bool, stringBuilder1.toString());
    } 
    this.a = Arrays.hashCode(arrayOfByte);
  }
  
  protected static byte[] a(String paramString) {
    try {
      return paramString.getBytes("ISO-8859-1");
    } catch (UnsupportedEncodingException paramString) {
      throw new AssertionError(paramString);
    } 
  }
  
  public final a a() { return c.a(c()); }
  
  public final int b() { return hashCode(); }
  
  abstract byte[] c();
  
  public boolean equals(Object paramObject) {
    if (paramObject != null) {
      if (!(paramObject instanceof o))
        return false; 
      try {
        paramObject = (o)paramObject;
        if (paramObject.b() != hashCode())
          return false; 
        paramObject = paramObject.a();
        if (paramObject == null)
          return false; 
        byte[] arrayOfByte = (byte[])c.a(paramObject);
        return Arrays.equals(c(), arrayOfByte);
      } catch (RemoteException paramObject) {
        Log.e("GoogleCertificates", "Failed to get Google certificates from remote", paramObject);
      } 
    } 
    return false;
  }
  
  public int hashCode() { return this.a; }
}
