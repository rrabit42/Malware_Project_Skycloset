package com.google.android.gms.common.api.internal;

import android.app.Application;
import android.content.Context;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.support.v4.util.b;
import android.util.Log;
import com.google.android.gms.c.d;
import com.google.android.gms.c.e;
import com.google.android.gms.common.a;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.a;
import com.google.android.gms.common.api.e;
import com.google.android.gms.common.api.k;
import com.google.android.gms.common.c;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public final class h implements Handler.Callback {
  public static final Status a = new Status(4, "Sign-out occurred while this API call was in progress.");
  
  private static final Status b = new Status(4, "The user must be signed in to make this API call.");
  
  private static final Object f = new Object();
  
  private static h g;
  
  private long c = 5000L;
  
  private long d = 120000L;
  
  private long e = 10000L;
  
  private final Context h;
  
  private final c i;
  
  private int j = -1;
  
  private final AtomicInteger k = new AtomicInteger(1);
  
  private final AtomicInteger l = new AtomicInteger(0);
  
  private final Map<av<?>, j<?>> m = new ConcurrentHashMap(5, 0.75F, 1);
  
  private e n = null;
  
  private final Set<av<?>> o = new b();
  
  private final Set<av<?>> p = new b();
  
  private final Handler q;
  
  private h(Context paramContext, Looper paramLooper, c paramc) {
    this.h = paramContext;
    this.q = new Handler(paramLooper, this);
    this.i = paramc;
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(6));
  }
  
  public static h a(Context paramContext) {
    synchronized (f) {
      if (g == null) {
        HandlerThread handlerThread = new HandlerThread("GoogleApiHandler", 9);
        handlerThread.start();
        Looper looper = handlerThread.getLooper();
        g = new h(paramContext.getApplicationContext(), looper, c.a());
      } 
      return g;
    } 
  }
  
  private final void b(e<?> parame) {
    av av = parame.a();
    j j2 = (j)this.m.get(av);
    j j1 = j2;
    if (j2 == null) {
      j1 = new j(this, parame);
      this.m.put(av, j1);
    } 
    if (j1.k())
      this.p.add(av); 
    j1.i();
  }
  
  private final void e() {
    for (av av : this.p)
      ((j)this.m.remove(av)).a(); 
    this.p.clear();
  }
  
  public final int a() { return this.k.getAndIncrement(); }
  
  public final <O extends a.a> d<Void> a(e<O> parame, aa<a.c, ?> paramaa, ar<a.c, ?> paramar) {
    e e1 = new e();
    ai ai = new ai(new ab(paramaa, paramar), e1);
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(8, new z(ai, this.l.get(), parame)));
    return e1.a();
  }
  
  public final <O extends a.a> d<Boolean> a(e<O> parame, w<?> paramw) {
    e e1 = new e();
    at at = new at(paramw, e1);
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(13, new z(at, this.l.get(), parame)));
    return e1.a();
  }
  
  public final void a(e<?> parame) {
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(7, parame));
  }
  
  public final <O extends a.a, TResult> void a(e<O> parame, int paramInt, aj<a.c, TResult> paramaj, e<TResult> parame1, ah paramah) {
    as as = new as(paramInt, paramaj, parame1, paramah);
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(4, new z(as, this.l.get(), parame)));
  }
  
  public final <O extends a.a> void a(e<O> parame, int paramInt, az<? extends k, a.c> paramaz) {
    r r = new r(paramInt, paramaz);
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(4, new z(r, this.l.get(), parame)));
  }
  
  final boolean a(a parama, int paramInt) { return this.i.a(this.h, parama, paramInt); }
  
  public final void b() {
    Handler handler = this.q;
    handler.sendMessage(handler.obtainMessage(3));
  }
  
  public final void b(a parama, int paramInt) {
    if (!a(parama, paramInt)) {
      Handler handler = this.q;
      handler.sendMessage(handler.obtainMessage(5, paramInt, 0, parama));
    } 
  }
  
  public final boolean handleMessage(Message paramMessage) {
    Iterator iterator;
    a a2;
    z z;
    aw aw;
    StringBuilder stringBuilder2;
    a a1;
    StringBuilder stringBuilder1;
    j j1;
    int i1 = paramMessage.what;
    long l1 = 300000L;
    switch (i1) {
      default:
        i1 = paramMessage.what;
        j1 = new StringBuilder(31);
        j1.append("Unknown message id: ");
        j1.append(i1);
        Log.w("GoogleApiManager", j1.toString());
        return false;
      case 12:
        if (this.m.containsKey(j1.obj)) {
          ((j)this.m.get(j1.obj)).h();
          return true;
        } 
        return true;
      case 11:
        if (this.m.containsKey(j1.obj)) {
          ((j)this.m.get(j1.obj)).g();
          return true;
        } 
        return true;
      case 10:
        e();
        return true;
      case 9:
        if (this.m.containsKey(j1.obj)) {
          ((j)this.m.get(j1.obj)).f();
          return true;
        } 
        return true;
      case 7:
        b((e)j1.obj);
        return true;
      case 6:
        if (this.h.getApplicationContext() instanceof Application) {
          ax.a((Application)this.h.getApplicationContext());
          ax.a().a(new i(this));
          if (!ax.a().a(true)) {
            this.e = 300000L;
            return true;
          } 
        } 
        return true;
      case 5:
        i1 = j1.arg1;
        a2 = (a)j1.obj;
        stringBuilder2 = null;
        iterator = this.m.values().iterator();
        while (true) {
          j1 = stringBuilder2;
          if (iterator.hasNext()) {
            j1 = (j)iterator.next();
            if (j1.l() == i1)
              break; 
            continue;
          } 
          break;
        } 
        if (j1 != null) {
          String str1;
          String str2;
          StringBuilder stringBuilder = new StringBuilder((str2 = a2.e()).valueOf(str1).length() + 69 + (str1 = this.i.b(a2.c())).valueOf(str2).length());
          stringBuilder.append("Error resolution was canceled by the user, original error message: ");
          stringBuilder.append(str1);
          stringBuilder.append(": ");
          stringBuilder.append(str2);
          j1.a(new Status(17, stringBuilder.toString()));
          return true;
        } 
        stringBuilder1 = new StringBuilder(76);
        stringBuilder1.append("Could not find API instance ");
        stringBuilder1.append(i1);
        stringBuilder1.append(" while trying to fail enqueued calls.");
        Log.wtf("GoogleApiManager", stringBuilder1.toString(), new Exception());
        return true;
      case 4:
      case 8:
      case 13:
        z = (z)stringBuilder1.obj;
        j2 = (j)this.m.get(z.c.a());
        a1 = j2;
        if (j2 == null) {
          b(z.c);
          a1 = (j)this.m.get(z.c.a());
        } 
        if (a1.k() && this.l.get() != z.b) {
          z.a.a(a);
          a1.a();
          return true;
        } 
        a1.a(z.a);
        return true;
      case 3:
        for (j j2 : this.m.values()) {
          j2.d();
          j2.i();
        } 
        return true;
      case 2:
        aw = (aw)a1.obj;
        for (av av : aw.a()) {
          a1 = (j)this.m.get(av);
          if (a1 == null) {
            aw.a(av, new a(13));
            return true;
          } 
          if (a1.j()) {
            a1 = a.a;
          } else if (a1.e() != null) {
            a1 = a1.e();
          } else {
            a1.a(aw);
            continue;
          } 
          aw.a(av, a1);
        } 
        return true;
      case 1:
        break;
    } 
    if (((Boolean)a1.obj).booleanValue())
      l1 = 10000L; 
    this.e = l1;
    this.q.removeMessages(12);
    for (av av : this.m.keySet()) {
      Handler handler = this.q;
      handler.sendMessageDelayed(handler.obtainMessage(12, av), this.e);
    } 
    return true;
  }
}
