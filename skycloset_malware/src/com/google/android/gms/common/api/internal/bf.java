package com.google.android.gms.common.api.internal;

import android.os.Looper;
import android.util.Log;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.f;
import com.google.android.gms.common.api.g;
import com.google.android.gms.common.api.h;
import com.google.android.gms.common.api.k;
import com.google.android.gms.common.api.l;
import com.google.android.gms.common.internal.af;
import com.google.android.gms.common.internal.n;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

public abstract class bf<R extends k> extends g<R> {
  static final ThreadLocal<Boolean> a = new bg();
  
  private final Object b = new Object();
  
  private bh<R> c;
  
  private WeakReference<f> d;
  
  private final CountDownLatch e = new CountDownLatch(1);
  
  private final ArrayList<g.a> f = new ArrayList();
  
  private l<? super R> g;
  
  private final AtomicReference<aq> h = new AtomicReference();
  
  private R i;
  
  private Status j;
  
  private bi k;
  
  private boolean m;
  
  private boolean n;
  
  private n o;
  
  private boolean q = false;
  
  @Deprecated
  bf() {
    this.c = new bh(Looper.getMainLooper());
    this.d = new WeakReference(null);
  }
  
  protected bf(f paramf) {
    if (paramf != null) {
      looper = paramf.a();
    } else {
      looper = Looper.getMainLooper();
    } 
    this.c = new bh(looper);
    this.d = new WeakReference(paramf);
  }
  
  public static void b(k paramk) {
    if (paramk instanceof h)
      try {
        ((h)paramk).a();
        return;
      } catch (RuntimeException runtimeException) {
        String str;
        StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(paramk)).valueOf(str).length() + 18);
        stringBuilder.append("Unable to release ");
        stringBuilder.append(str);
        Log.w("BasePendingResult", stringBuilder.toString(), runtimeException);
      }  
  }
  
  private final void c(R paramR) {
    this.i = paramR;
    this.o = null;
    this.e.countDown();
    this.j = this.i.a();
    if (this.m) {
      this.g = null;
    } else if (this.g == null) {
      if (this.i instanceof h)
        this.k = new bi(this, null); 
    } else {
      this.c.removeMessages(2);
      this.c.a(this.g, d());
    } 
    paramR = (R)(ArrayList)this.f;
    int i1 = paramR.size();
    byte b1 = 0;
    while (b1 < i1) {
      Object object = paramR.get(b1);
      b1++;
      ((g.a)object).a(this.j);
    } 
    this.f.clear();
  }
  
  private final R d() {
    synchronized (this.b) {
      boolean bool;
      if (!this.l) {
        bool = true;
      } else {
        bool = false;
      } 
      af.a(bool, "Result has already been consumed.");
      af.a(b(), "Result is not ready.");
      k k1 = this.i;
      this.i = null;
      this.g = null;
      this.l = true;
      null = (aq)this.h.getAndSet(null);
      if (null != null)
        null.a(this); 
      return (R)k1;
    } 
  }
  
  public final R a(long paramLong, TimeUnit paramTimeUnit) {
    boolean bool1 = false;
    if (paramLong <= 0L || Looper.myLooper() != Looper.getMainLooper()) {
      bool = true;
    } else {
      bool = false;
    } 
    af.a(bool, "await must not be called on the UI thread when time is greater than zero.");
    af.a(this.l ^ true, "Result has already been consumed.");
    boolean bool = bool1;
    if (this.p == null)
      bool = true; 
    af.a(bool, "Cannot await if then() has been called.");
    try {
      if (!this.e.await(paramLong, paramTimeUnit))
        b(Status.d); 
    } catch (InterruptedException paramTimeUnit) {
      b(Status.b);
    } 
    af.a(b(), "Result is not ready.");
    return (R)d();
  }
  
  public final void a(g.a parama) {
    boolean bool;
    if (parama != null) {
      bool = true;
    } else {
      bool = false;
    } 
    af.b(bool, "Callback cannot be null.");
    synchronized (this.b) {
      if (b()) {
        parama.a(this.j);
      } else {
        this.f.add(parama);
      } 
      return;
    } 
  }
  
  public final void a(R paramR) {
    synchronized (this.b) {
      if (!this.n && !this.m) {
        b();
        boolean bool = b();
        boolean bool1 = true;
        if (!bool) {
          bool = true;
        } else {
          bool = false;
        } 
        af.a(bool, "Results have already been set");
        if (!this.l) {
          bool = bool1;
        } else {
          bool = false;
        } 
        af.a(bool, "Result has already been consumed");
        c(paramR);
        return;
      } 
      b(paramR);
      return;
    } 
  }
  
  public final void a(l<? super R> paraml) { // Byte code:
    //   0: aload_0
    //   1: getfield b : Ljava/lang/Object;
    //   4: astore #4
    //   6: aload #4
    //   8: monitorenter
    //   9: aload_1
    //   10: ifnonnull -> 22
    //   13: aload_0
    //   14: aconst_null
    //   15: putfield g : Lcom/google/android/gms/common/api/l;
    //   18: aload #4
    //   20: monitorexit
    //   21: return
    //   22: aload_0
    //   23: getfield l : Z
    //   26: istore_2
    //   27: iconst_1
    //   28: istore_3
    //   29: iload_2
    //   30: ifne -> 111
    //   33: iconst_1
    //   34: istore_2
    //   35: goto -> 38
    //   38: iload_2
    //   39: ldc 'Result has already been consumed.'
    //   41: invokestatic a : (ZLjava/lang/Object;)V
    //   44: aload_0
    //   45: getfield p : Lcom/google/android/gms/common/api/internal/am;
    //   48: ifnonnull -> 116
    //   51: iload_3
    //   52: istore_2
    //   53: goto -> 56
    //   56: iload_2
    //   57: ldc_w 'Cannot set callbacks if then() has been called.'
    //   60: invokestatic a : (ZLjava/lang/Object;)V
    //   63: aload_0
    //   64: invokevirtual a : ()Z
    //   67: ifeq -> 74
    //   70: aload #4
    //   72: monitorexit
    //   73: return
    //   74: aload_0
    //   75: invokevirtual b : ()Z
    //   78: ifeq -> 96
    //   81: aload_0
    //   82: getfield c : Lcom/google/android/gms/common/api/internal/bh;
    //   85: aload_1
    //   86: aload_0
    //   87: invokespecial d : ()Lcom/google/android/gms/common/api/k;
    //   90: invokevirtual a : (Lcom/google/android/gms/common/api/l;Lcom/google/android/gms/common/api/k;)V
    //   93: goto -> 101
    //   96: aload_0
    //   97: aload_1
    //   98: putfield g : Lcom/google/android/gms/common/api/l;
    //   101: aload #4
    //   103: monitorexit
    //   104: return
    //   105: astore_1
    //   106: aload #4
    //   108: monitorexit
    //   109: aload_1
    //   110: athrow
    //   111: iconst_0
    //   112: istore_2
    //   113: goto -> 38
    //   116: iconst_0
    //   117: istore_2
    //   118: goto -> 56
    // Exception table:
    //   from	to	target	type
    //   13	21	105	finally
    //   22	27	105	finally
    //   38	51	105	finally
    //   56	73	105	finally
    //   74	93	105	finally
    //   96	101	105	finally
    //   101	104	105	finally
    //   106	109	105	finally }
  
  public boolean a() {
    synchronized (this.b) {
      return this.m;
    } 
  }
  
  public final void b(Status paramStatus) {
    synchronized (this.b) {
      if (!b()) {
        a(c(paramStatus));
        this.n = true;
      } 
      return;
    } 
  }
  
  public final boolean b() { return (this.e.getCount() == 0L); }
  
  protected abstract R c(Status paramStatus);
  
  public final void c() {
    boolean bool;
    if (this.q || ((Boolean)a.get()).booleanValue()) {
      bool = true;
    } else {
      bool = false;
    } 
    this.q = bool;
  }
}
