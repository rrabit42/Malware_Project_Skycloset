package com.swmansion.gesturehandler;

import android.content.Context;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.ViewConfiguration;

public class j extends b<j> {
  private static float d = 3.4028235E38F;
  
  private static float e = 1.4E-45F;
  
  private static int f = 1;
  
  private static int g = 10;
  
  private float A;
  
  private float B;
  
  private float C;
  
  private VelocityTracker D;
  
  private boolean E;
  
  private float h;
  
  private float i;
  
  private float j;
  
  private float k;
  
  private float l;
  
  private float m;
  
  private float n;
  
  private float o;
  
  private float p;
  
  private float q;
  
  private float r;
  
  private float s;
  
  private int t;
  
  private int u;
  
  private float v;
  
  private float w;
  
  private float x;
  
  private float y;
  
  private float z;
  
  static  {
  
  }
  
  public j(Context paramContext) {
    float f1 = e;
    this.h = f1;
    float f2 = d;
    this.i = f2;
    this.j = f1;
    this.k = f1;
    this.l = f2;
    this.m = f2;
    this.n = f1;
    this.o = f1;
    this.p = f2;
    this.q = f2;
    this.r = f2;
    this.s = f2;
    this.t = f;
    this.u = g;
    int i1 = ViewConfiguration.get(paramContext).getScaledTouchSlop();
    this.h = (i1 * i1);
  }
  
  private static void a(VelocityTracker paramVelocityTracker, MotionEvent paramMotionEvent) {
    float f1 = paramMotionEvent.getRawX() - paramMotionEvent.getX();
    float f2 = paramMotionEvent.getRawY() - paramMotionEvent.getY();
    paramMotionEvent.offsetLocation(f1, f2);
    paramVelocityTracker.addMovement(paramMotionEvent);
    paramMotionEvent.offsetLocation(-f1, -f2);
  }
  
  private boolean x() {
    float f1 = this.z - this.v + this.x;
    float f2 = this.i;
    if (f2 != d && f1 < f2)
      return true; 
    f2 = this.j;
    if (f2 != e && f1 > f2)
      return true; 
    f2 = this.A - this.w + this.y;
    float f3 = this.m;
    if (f3 != d && f2 < f3)
      return true; 
    f3 = this.n;
    if (f3 != e && f2 > f3)
      return true; 
    f3 = this.h;
    if (f3 != d && f1 * f1 + f2 * f2 >= f3)
      return true; 
    f1 = this.B;
    f2 = this.q;
    if (f2 != d)
      if (f2 >= 0.0F || f1 > f2) {
        f2 = this.q;
        if (f2 >= 0.0F && f1 >= f2)
          return true; 
      } else {
        return true;
      }  
    f2 = this.C;
    f3 = this.r;
    if (f3 != d)
      if (f3 >= 0.0F || f1 > f3) {
        f3 = this.r;
        if (f3 >= 0.0F && f1 >= f3)
          return true; 
      } else {
        return true;
      }  
    f3 = this.s;
    return (f3 != d && f1 * f1 + f2 * f2 >= f3);
  }
  
  private boolean y() {
    float f1 = this.z - this.v + this.x;
    float f2 = this.k;
    if (f2 != e && f1 < f2)
      return true; 
    f2 = this.l;
    if (f2 != d && f1 > f2)
      return true; 
    f1 = this.A - this.w + this.y;
    f2 = this.o;
    if (f2 != e && f1 < f2)
      return true; 
    f2 = this.p;
    return (f2 != d && f1 > f2);
  }
  
  public j a(float paramFloat) {
    this.i = paramFloat;
    return this;
  }
  
  public j a(int paramInt) {
    this.t = paramInt;
    return this;
  }
  
  protected void a(MotionEvent paramMotionEvent) {
    int i1 = i();
    int i2 = paramMotionEvent.getActionMasked();
    if (i2 == 6 || i2 == 5) {
      this.x += this.z - this.v;
      this.y += this.A - this.w;
      this.z = f.a(paramMotionEvent, this.E);
      this.A = f.b(paramMotionEvent, this.E);
      this.v = this.z;
      this.w = this.A;
    } else {
      this.z = f.a(paramMotionEvent, this.E);
      this.A = f.b(paramMotionEvent, this.E);
    } 
    if (i1 == 0 && paramMotionEvent.getPointerCount() >= this.t) {
      this.v = this.z;
      this.w = this.A;
      this.x = 0.0F;
      this.y = 0.0F;
      this.D = VelocityTracker.obtain();
      a(this.D, paramMotionEvent);
      m();
    } else {
      VelocityTracker velocityTracker = this.D;
      if (velocityTracker != null) {
        a(velocityTracker, paramMotionEvent);
        this.D.computeCurrentVelocity(1000);
        this.B = this.D.getXVelocity();
        this.C = this.D.getYVelocity();
      } 
    } 
    if (i2 == 1) {
      if (i1 == 4) {
        n();
        return;
      } 
    } else if (i2 == 5 && paramMotionEvent.getPointerCount() > this.u) {
      if (i1 == 4) {
        j();
        return;
      } 
    } else if (i2 != 6 || i1 != 4 || paramMotionEvent.getPointerCount() >= this.t) {
      if (i1 == 2) {
        if (y()) {
          k();
          return;
        } 
        if (x()) {
          this.v = this.z;
          this.w = this.A;
          l();
        } 
      } 
      return;
    } 
    k();
  }
  
  public j b(float paramFloat) {
    this.j = paramFloat;
    return this;
  }
  
  public j b(int paramInt) {
    this.u = paramInt;
    return this;
  }
  
  protected void b() {
    VelocityTracker velocityTracker = this.D;
    if (velocityTracker != null) {
      velocityTracker.recycle();
      this.D = null;
    } 
  }
  
  public j c(float paramFloat) {
    this.k = paramFloat;
    return this;
  }
  
  public j c(boolean paramBoolean) {
    this.E = paramBoolean;
    return this;
  }
  
  public j d(float paramFloat) {
    this.l = paramFloat;
    return this;
  }
  
  public j e(float paramFloat) {
    this.m = paramFloat;
    return this;
  }
  
  public j f(float paramFloat) {
    this.n = paramFloat;
    return this;
  }
  
  public j g(float paramFloat) {
    this.o = paramFloat;
    return this;
  }
  
  public j h(float paramFloat) {
    this.p = paramFloat;
    return this;
  }
  
  public j i(float paramFloat) {
    this.h = paramFloat * paramFloat;
    return this;
  }
  
  public j j(float paramFloat) {
    this.s = paramFloat * paramFloat;
    return this;
  }
  
  public j k(float paramFloat) {
    this.q = paramFloat;
    return this;
  }
  
  public j l(float paramFloat) {
    this.r = paramFloat;
    return this;
  }
  
  public float t() { return this.z - this.v + this.x; }
  
  public float u() { return this.A - this.w + this.y; }
  
  public float v() { return this.B; }
  
  public float w() { return this.C; }
}
