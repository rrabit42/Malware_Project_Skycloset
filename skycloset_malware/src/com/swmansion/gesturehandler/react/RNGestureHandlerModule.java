package com.swmansion.gesturehandler.react;

import android.view.MotionEvent;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.common.e;
import com.facebook.react.module.a.a;
import com.facebook.react.r;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.o;
import com.swmansion.gesturehandler.b;
import com.swmansion.gesturehandler.i;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@a(a = "RNGestureHandlerModule")
public class RNGestureHandlerModule extends ReactContextBaseJavaModule {
  private static final String KEY_DIRECTION = "direction";
  
  private static final String KEY_ENABLED = "enabled";
  
  private static final String KEY_HIT_SLOP = "hitSlop";
  
  private static final String KEY_HIT_SLOP_BOTTOM = "bottom";
  
  private static final String KEY_HIT_SLOP_HEIGHT = "height";
  
  private static final String KEY_HIT_SLOP_HORIZONTAL = "horizontal";
  
  private static final String KEY_HIT_SLOP_LEFT = "left";
  
  private static final String KEY_HIT_SLOP_RIGHT = "right";
  
  private static final String KEY_HIT_SLOP_TOP = "top";
  
  private static final String KEY_HIT_SLOP_VERTICAL = "vertical";
  
  private static final String KEY_HIT_SLOP_WIDTH = "width";
  
  private static final String KEY_LONG_PRESS_MAX_DIST = "maxDist";
  
  private static final String KEY_LONG_PRESS_MIN_DURATION_MS = "minDurationMs";
  
  private static final String KEY_NATIVE_VIEW_DISALLOW_INTERRUPTION = "disallowInterruption";
  
  private static final String KEY_NATIVE_VIEW_SHOULD_ACTIVATE_ON_START = "shouldActivateOnStart";
  
  private static final String KEY_NUMBER_OF_POINTERS = "numberOfPointers";
  
  private static final String KEY_PAN_ACTIVE_OFFSET_X_END = "activeOffsetXEnd";
  
  private static final String KEY_PAN_ACTIVE_OFFSET_X_START = "activeOffsetXStart";
  
  private static final String KEY_PAN_ACTIVE_OFFSET_Y_END = "activeOffsetYEnd";
  
  private static final String KEY_PAN_ACTIVE_OFFSET_Y_START = "activeOffsetYStart";
  
  private static final String KEY_PAN_AVG_TOUCHES = "avgTouches";
  
  private static final String KEY_PAN_FAIL_OFFSET_RANGE_X_END = "failOffsetXEnd";
  
  private static final String KEY_PAN_FAIL_OFFSET_RANGE_X_START = "failOffsetXStart";
  
  private static final String KEY_PAN_FAIL_OFFSET_RANGE_Y_END = "failOffsetYEnd";
  
  private static final String KEY_PAN_FAIL_OFFSET_RANGE_Y_START = "failOffsetYStart";
  
  private static final String KEY_PAN_MAX_POINTERS = "maxPointers";
  
  private static final String KEY_PAN_MIN_DIST = "minDist";
  
  private static final String KEY_PAN_MIN_POINTERS = "minPointers";
  
  private static final String KEY_PAN_MIN_VELOCITY = "minVelocity";
  
  private static final String KEY_PAN_MIN_VELOCITY_X = "minVelocityX";
  
  private static final String KEY_PAN_MIN_VELOCITY_Y = "minVelocityY";
  
  private static final String KEY_SHOULD_CANCEL_WHEN_OUTSIDE = "shouldCancelWhenOutside";
  
  private static final String KEY_TAP_MAX_DELAY_MS = "maxDelayMs";
  
  private static final String KEY_TAP_MAX_DELTA_X = "maxDeltaX";
  
  private static final String KEY_TAP_MAX_DELTA_Y = "maxDeltaY";
  
  private static final String KEY_TAP_MAX_DIST = "maxDist";
  
  private static final String KEY_TAP_MAX_DURATION_MS = "maxDurationMs";
  
  private static final String KEY_TAP_MIN_POINTERS = "minPointers";
  
  private static final String KEY_TAP_NUMBER_OF_TAPS = "numberOfTaps";
  
  public static final String MODULE_NAME = "RNGestureHandlerModule";
  
  private List<Integer> mEnqueuedRootViewInit = new ArrayList();
  
  private i mEventListener = new Object(this);
  
  private b[] mHandlerFactories = { new d(null), new h(null), new c(null), new e(null), new f(null), new g(null), new a(null) };
  
  private d mInteractionManager = new d();
  
  private final f mRegistry = new f();
  
  private List<g> mRoots = new ArrayList();
  
  public RNGestureHandlerModule(ReactApplicationContext paramReactApplicationContext) { super(paramReactApplicationContext); }
  
  private b findFactoryForHandler(b paramb) {
    byte b1 = 0;
    while (true) {
      b[] arrayOfb = this.mHandlerFactories;
      if (b1 < arrayOfb.length) {
        b b2 = arrayOfb[b1];
        if (b2.a().equals(paramb.getClass()))
          return b2; 
        b1++;
        continue;
      } 
      break;
    } 
    return null;
  }
  
  private g findRootHelperForViewAncestor(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getReactApplicationContext : ()Lcom/facebook/react/bridge/ReactApplicationContext;
    //   4: ldc com/facebook/react/uimanager/UIManagerModule
    //   6: invokevirtual getNativeModule : (Ljava/lang/Class;)Lcom/facebook/react/bridge/NativeModule;
    //   9: checkcast com/facebook/react/uimanager/UIManagerModule
    //   12: iload_1
    //   13: invokevirtual resolveRootTagFromReactTag : (I)I
    //   16: istore_2
    //   17: iload_2
    //   18: iconst_1
    //   19: if_icmpge -> 24
    //   22: aconst_null
    //   23: areturn
    //   24: aload_0
    //   25: getfield mRoots : Ljava/util/List;
    //   28: astore_3
    //   29: aload_3
    //   30: monitorenter
    //   31: iconst_0
    //   32: istore_1
    //   33: iload_1
    //   34: aload_0
    //   35: getfield mRoots : Ljava/util/List;
    //   38: invokeinterface size : ()I
    //   43: if_icmpge -> 78
    //   46: aload_0
    //   47: getfield mRoots : Ljava/util/List;
    //   50: iload_1
    //   51: invokeinterface get : (I)Ljava/lang/Object;
    //   56: checkcast com/swmansion/gesturehandler/react/g
    //   59: astore #4
    //   61: aload #4
    //   63: invokevirtual b : ()Lcom/facebook/react/r;
    //   66: invokevirtual getRootViewTag : ()I
    //   69: iload_2
    //   70: if_icmpne -> 89
    //   73: aload_3
    //   74: monitorexit
    //   75: aload #4
    //   77: areturn
    //   78: aload_3
    //   79: monitorexit
    //   80: aconst_null
    //   81: areturn
    //   82: astore #4
    //   84: aload_3
    //   85: monitorexit
    //   86: aload #4
    //   88: athrow
    //   89: iload_1
    //   90: iconst_1
    //   91: iadd
    //   92: istore_1
    //   93: goto -> 33
    // Exception table:
    //   from	to	target	type
    //   33	75	82	finally
    //   78	80	82	finally
    //   84	86	82	finally }
  
  private static void handleHitSlopProperty(b paramb, ReadableMap paramReadableMap) {
    float f5;
    float f2;
    float f1;
    if (paramReadableMap.getType("hitSlop") == ReadableType.Number) {
      f1 = o.a(paramReadableMap.getDouble("hitSlop"));
      paramb.a(f1, f1, f1, f1, NaNF, NaNF);
      return;
    } 
    paramReadableMap = paramReadableMap.getMap("hitSlop");
    boolean bool = paramReadableMap.hasKey("horizontal");
    float f6 = NaNF;
    if (bool) {
      f2 = o.a(paramReadableMap.getDouble("horizontal"));
    } else {
      f2 = NaNF;
    } 
    float f4 = f2;
    if (paramReadableMap.hasKey("vertical")) {
      f1 = o.a(paramReadableMap.getDouble("vertical"));
    } else {
      f1 = NaNF;
    } 
    float f3 = f1;
    if (paramReadableMap.hasKey("left"))
      f2 = o.a(paramReadableMap.getDouble("left")); 
    if (paramReadableMap.hasKey("top"))
      f3 = o.a(paramReadableMap.getDouble("top")); 
    if (paramReadableMap.hasKey("right"))
      f4 = o.a(paramReadableMap.getDouble("right")); 
    if (paramReadableMap.hasKey("bottom"))
      f1 = o.a(paramReadableMap.getDouble("bottom")); 
    if (paramReadableMap.hasKey("width")) {
      f5 = o.a(paramReadableMap.getDouble("width"));
    } else {
      f5 = NaNF;
    } 
    if (paramReadableMap.hasKey("height"))
      f6 = o.a(paramReadableMap.getDouble("height")); 
    paramb.a(f2, f3, f4, f1, f5, f6);
  }
  
  private void onStateChange(b paramb, int paramInt1, int paramInt2) {
    if (paramb.d() < 0)
      return; 
    b b1 = findFactoryForHandler(paramb);
    ((UIManagerModule)getReactApplicationContext().getNativeModule(UIManagerModule.class)).getEventDispatcher().a(i.a(paramb, paramInt1, paramInt2, b1));
  }
  
  private void onTouchEvent(b paramb, MotionEvent paramMotionEvent) {
    if (paramb.d() < 0)
      return; 
    if (paramb.i() == 4) {
      b b1 = findFactoryForHandler(paramb);
      ((UIManagerModule)getReactApplicationContext().getNativeModule(UIManagerModule.class)).getEventDispatcher().a(b.a(paramb, b1));
    } 
  }
  
  private void tryInitializeHandlerForReactRootView(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getReactApplicationContext : ()Lcom/facebook/react/bridge/ReactApplicationContext;
    //   4: ldc com/facebook/react/uimanager/UIManagerModule
    //   6: invokevirtual getNativeModule : (Ljava/lang/Class;)Lcom/facebook/react/bridge/NativeModule;
    //   9: checkcast com/facebook/react/uimanager/UIManagerModule
    //   12: astore_3
    //   13: aload_3
    //   14: iload_1
    //   15: invokevirtual resolveRootTagFromReactTag : (I)I
    //   18: istore_2
    //   19: iload_2
    //   20: iconst_1
    //   21: if_icmplt -> 150
    //   24: aload_0
    //   25: getfield mRoots : Ljava/util/List;
    //   28: astore #4
    //   30: aload #4
    //   32: monitorenter
    //   33: iconst_0
    //   34: istore_1
    //   35: iload_1
    //   36: aload_0
    //   37: getfield mRoots : Ljava/util/List;
    //   40: invokeinterface size : ()I
    //   45: if_icmpge -> 75
    //   48: aload_0
    //   49: getfield mRoots : Ljava/util/List;
    //   52: iload_1
    //   53: invokeinterface get : (I)Ljava/lang/Object;
    //   58: checkcast com/swmansion/gesturehandler/react/g
    //   61: invokevirtual b : ()Lcom/facebook/react/r;
    //   64: invokevirtual getRootViewTag : ()I
    //   67: iload_2
    //   68: if_icmpne -> 184
    //   71: aload #4
    //   73: monitorexit
    //   74: return
    //   75: aload #4
    //   77: monitorexit
    //   78: aload_0
    //   79: getfield mEnqueuedRootViewInit : Ljava/util/List;
    //   82: astore #4
    //   84: aload #4
    //   86: monitorenter
    //   87: aload_0
    //   88: getfield mEnqueuedRootViewInit : Ljava/util/List;
    //   91: iload_2
    //   92: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   95: invokeinterface contains : (Ljava/lang/Object;)Z
    //   100: ifeq -> 107
    //   103: aload #4
    //   105: monitorexit
    //   106: return
    //   107: aload_0
    //   108: getfield mEnqueuedRootViewInit : Ljava/util/List;
    //   111: iload_2
    //   112: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   115: invokeinterface add : (Ljava/lang/Object;)Z
    //   120: pop
    //   121: aload #4
    //   123: monitorexit
    //   124: aload_3
    //   125: new com/swmansion/gesturehandler/react/RNGestureHandlerModule$2
    //   128: dup
    //   129: aload_0
    //   130: iload_2
    //   131: invokespecial <init> : (Lcom/swmansion/gesturehandler/react/RNGestureHandlerModule;I)V
    //   134: invokevirtual addUIBlock : (Lcom/facebook/react/uimanager/ai;)V
    //   137: return
    //   138: astore_3
    //   139: aload #4
    //   141: monitorexit
    //   142: aload_3
    //   143: athrow
    //   144: astore_3
    //   145: aload #4
    //   147: monitorexit
    //   148: aload_3
    //   149: athrow
    //   150: new java/lang/StringBuilder
    //   153: dup
    //   154: invokespecial <init> : ()V
    //   157: astore_3
    //   158: aload_3
    //   159: ldc_w 'Could find root view for a given ancestor with tag '
    //   162: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   165: pop
    //   166: aload_3
    //   167: iload_1
    //   168: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   171: pop
    //   172: new com/facebook/react/bridge/JSApplicationIllegalArgumentException
    //   175: dup
    //   176: aload_3
    //   177: invokevirtual toString : ()Ljava/lang/String;
    //   180: invokespecial <init> : (Ljava/lang/String;)V
    //   183: athrow
    //   184: iload_1
    //   185: iconst_1
    //   186: iadd
    //   187: istore_1
    //   188: goto -> 35
    // Exception table:
    //   from	to	target	type
    //   35	74	144	finally
    //   75	78	144	finally
    //   87	106	138	finally
    //   107	124	138	finally
    //   139	142	138	finally
    //   145	148	144	finally }
  
  @ReactMethod
  public void attachGestureHandler(int paramInt1, int paramInt2) {
    tryInitializeHandlerForReactRootView(paramInt2);
    if (this.mRegistry.a(paramInt1, paramInt2))
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Handler with tag ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" does not exists");
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  @ReactMethod
  public void createGestureHandler(String paramString, int paramInt, ReadableMap paramReadableMap) {
    b b1;
    byte b2 = 0;
    while (true) {
      b[] arrayOfb = this.mHandlerFactories;
      if (b2 < arrayOfb.length) {
        b b3 = arrayOfb[b2];
        if (b3.b().equals(paramString)) {
          b1 = b3.b(getReactApplicationContext());
          b1.c(paramInt);
          b1.a(this.mEventListener);
          this.mRegistry.a(b1);
          this.mInteractionManager.a(b1, paramReadableMap);
          b3.a(b1, paramReadableMap);
          return;
        } 
        b2++;
        continue;
      } 
      break;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Invalid handler name ");
    stringBuilder.append(b1);
    throw new JSApplicationIllegalArgumentException(stringBuilder.toString());
  }
  
  @ReactMethod
  public void dropGestureHandler(int paramInt) {
    this.mInteractionManager.a(paramInt);
    this.mRegistry.b(paramInt);
  }
  
  public Map getConstants() { return e.a("State", e.a("UNDETERMINED", Integer.valueOf(0), "BEGAN", Integer.valueOf(2), "ACTIVE", Integer.valueOf(4), "CANCELLED", Integer.valueOf(3), "FAILED", Integer.valueOf(1), "END", Integer.valueOf(5)), "Direction", e.a("RIGHT", Integer.valueOf(1), "LEFT", Integer.valueOf(2), "UP", Integer.valueOf(4), "DOWN", Integer.valueOf(8))); }
  
  public String getName() { return "RNGestureHandlerModule"; }
  
  public f getRegistry() { return this.mRegistry; }
  
  @ReactMethod
  public void handleClearJSResponder() {}
  
  @ReactMethod
  public void handleSetJSResponder(int paramInt, boolean paramBoolean) {
    if (this.mRegistry != null) {
      g g = findRootHelperForViewAncestor(paramInt);
      if (g != null)
        g.a(paramInt, paramBoolean); 
    } 
  }
  
  public void onCatalystInstanceDestroy() {
    this.mRegistry.a();
    this.mInteractionManager.a();
    synchronized (this.mRoots) {
      while (!this.mRoots.isEmpty()) {
        int j = this.mRoots.size();
        g g = (g)this.mRoots.get(0);
        r r = g.b();
        if (r instanceof a) {
          ((a)r).e();
        } else {
          g.a();
        } 
        if (this.mRoots.size() < j)
          continue; 
        throw new IllegalStateException("Expected root helper to get unregistered while tearing down");
      } 
      super.onCatalystInstanceDestroy();
      return;
    } 
  }
  
  public void registerRootHelper(g paramg) {
    synchronized (this.mRoots) {
      if (!this.mRoots.contains(paramg)) {
        this.mRoots.add(paramg);
        return;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Root helper");
      stringBuilder.append(paramg);
      stringBuilder.append(" already registered");
      throw new IllegalStateException(stringBuilder.toString());
    } 
  }
  
  public void unregisterRootHelper(g paramg) {
    synchronized (this.mRoots) {
      this.mRoots.remove(paramg);
      return;
    } 
  }
  
  @ReactMethod
  public void updateGestureHandler(int paramInt, ReadableMap paramReadableMap) {
    b b1 = this.mRegistry.a(paramInt);
    if (b1 != null) {
      b b2 = findFactoryForHandler(b1);
      if (b2 != null) {
        this.mInteractionManager.a(paramInt);
        this.mInteractionManager.a(b1, paramReadableMap);
        b2.a(b1, paramReadableMap);
      } 
    } 
  }
}
