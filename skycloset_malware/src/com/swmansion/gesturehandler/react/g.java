package com.swmansion.gesturehandler.react;

import android.util.Log;
import android.view.MotionEvent;
import android.view.ViewGroup;
import android.view.ViewParent;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.r;
import com.swmansion.gesturehandler.b;
import com.swmansion.gesturehandler.d;

public class g {
  private final ReactContext a;
  
  private final d b;
  
  private final b c;
  
  private final r d;
  
  private boolean e = false;
  
  private boolean f = false;
  
  public g(ReactContext paramReactContext, ViewGroup paramViewGroup) {
    UiThreadUtil.assertOnUiThread();
    int i = paramViewGroup.getId();
    if (i >= 1) {
      RNGestureHandlerModule rNGestureHandlerModule = (RNGestureHandlerModule)paramReactContext.getNativeModule(RNGestureHandlerModule.class);
      f f1 = rNGestureHandlerModule.getRegistry();
      this.d = a(paramViewGroup);
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("[GESTURE HANDLER] Initialize gesture handler for root view ");
      stringBuilder1.append(this.d);
      Log.i("ReactNative", stringBuilder1.toString());
      this.a = paramReactContext;
      this.b = new d(paramViewGroup, f1, new j());
      this.b.a(0.1F);
      this.c = new a(this, null);
      this.c.c(-i);
      f1.a(this.c);
      f1.a(this.c.d(), i);
      rNGestureHandlerModule.registerRootHelper(this);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Expect view tag to be set for ");
    stringBuilder.append(paramViewGroup);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  private static r a(ViewGroup paramViewGroup) {
    UiThreadUtil.assertOnUiThread();
    ViewParent viewParent = paramViewGroup;
    while (viewParent != null && !(viewParent instanceof r))
      viewParent = viewParent.getParent(); 
    if (viewParent != null)
      return (r)viewParent; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramViewGroup);
    stringBuilder.append(" has not been mounted under ReactRootView");
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  private void c() {
    b b1 = this.c;
    if (b1 != null && b1.i() == 2) {
      this.c.l();
      this.c.n();
    } 
  }
  
  public void a() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[GESTURE HANDLER] Tearing down gesture handler registered for root view ");
    stringBuilder.append(this.d);
    Log.i("ReactNative", stringBuilder.toString());
    RNGestureHandlerModule rNGestureHandlerModule = (RNGestureHandlerModule)this.a.getNativeModule(RNGestureHandlerModule.class);
    rNGestureHandlerModule.getRegistry().b(this.c.d());
    rNGestureHandlerModule.unregisterRootHelper(this);
  }
  
  void a(int paramInt, boolean paramBoolean) {
    if (paramBoolean)
      UiThreadUtil.runOnUiThread(new Object(this)); 
  }
  
  public void a(boolean paramBoolean) {
    if (this.b != null && !this.f)
      c(); 
  }
  
  public boolean a(MotionEvent paramMotionEvent) {
    this.f = true;
    this.b.a(paramMotionEvent);
    this.f = false;
    return this.e;
  }
  
  public r b() { return this.d; }
}
