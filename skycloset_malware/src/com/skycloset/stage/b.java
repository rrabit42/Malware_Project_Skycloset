package com.skycloset.stage;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;

public final class b {
  private static final long a = TimeUnit.SECONDS.toMillis(1L);
  
  private static int a(byte[] paramArrayOfByte, int paramInt) {
    int i = 0;
    byte b1 = 0;
    while (i < 4) {
      b1 |= (paramArrayOfByte[i + paramInt] & 0xFF) << i << 3;
      i++;
    } 
    return b1;
  }
  
  public static a a(byte[] paramArrayOfByte) {
    a a1 = new a();
    a1.a = a(paramArrayOfByte, 0);
    a1.b = a * a(paramArrayOfByte, 12);
    b(paramArrayOfByte, 16, 16);
    b(paramArrayOfByte, 32, 16);
    int j = 48;
    int i = j;
    if ((a1.a & true) != 0) {
      a1.c = a(paramArrayOfByte, 8000, 100);
      i = j;
    } 
    while (paramArrayOfByte[i] != 0) {
      f f = new f();
      f.a = a(paramArrayOfByte, i, 512);
      i = i + 'Ȁ' + '\004';
      f.b = a * a(paramArrayOfByte, i);
      i += '\004';
      f.c = a * a(paramArrayOfByte, i);
      j = i + '\004';
      i = j;
      if (f.a.startsWith("http")) {
        a(paramArrayOfByte, j, 128);
        i = j + '';
        a(paramArrayOfByte, i, 64);
        i += '@';
        a(paramArrayOfByte, i, 64);
        i += '@';
        f.d = a(paramArrayOfByte, i, 256);
        i += 'Ā';
        f.e = null;
        StringBuilder stringBuilder = b(paramArrayOfByte, i, 20);
        j = i + '\024';
        i = 0;
        while (true) {
          if (i < stringBuilder.length)
            if (stringBuilder[i] != 0) {
              f.e = stringBuilder;
            } else {
              i++;
              continue;
            }  
          stringBuilder = new StringBuilder();
          int k = paramArrayOfByte.length;
          i = j;
          while (i < k) {
            byte b1 = paramArrayOfByte[i];
            if (b1 != 0) {
              stringBuilder.append((char)(b1 & 0xFF));
              i++;
            } 
          } 
          break;
        } 
        String str = stringBuilder.toString();
        f.f = str;
        i = str.length() + j;
      } 
      a1.d.add(f);
    } 
    return a1;
  }
  
  private static String a(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    paramArrayOfByte = b(paramArrayOfByte, paramInt1, paramInt2);
    try {
      return (new String(paramArrayOfByte, "ISO-8859-1")).trim();
    } catch (UnsupportedEncodingException unsupportedEncodingException) {
      return (new String(paramArrayOfByte)).trim();
    } 
  }
  
  private static byte[] b(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    byte[] arrayOfByte = new byte[paramInt2];
    System.arraycopy(paramArrayOfByte, paramInt1, arrayOfByte, 0, paramInt2);
    return arrayOfByte;
  }
}
