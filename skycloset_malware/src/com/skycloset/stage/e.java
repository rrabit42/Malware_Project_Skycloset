package com.skycloset.stage;

import java.net.URLConnection;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public final class e implements HostnameVerifier, X509TrustManager {
  private byte[] a;
  
  private e(byte[] paramArrayOfByte) { this.a = paramArrayOfByte; }
  
  public static void a(URLConnection paramURLConnection, byte[] paramArrayOfByte) {
    if (paramURLConnection instanceof HttpsURLConnection) {
      paramURLConnection = (HttpsURLConnection)paramURLConnection;
      e e1 = new e(paramArrayOfByte);
      SSLContext sSLContext = SSLContext.getInstance("SSL");
      SecureRandom secureRandom = new SecureRandom();
      sSLContext.init(null, new TrustManager[] { e1 }, secureRandom);
      paramURLConnection.setSSLSocketFactory(sSLContext.getSocketFactory());
      paramURLConnection.setHostnameVerifier(e1);
    } 
  }
  
  public final void checkClientTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString) {}
  
  public final void checkServerTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString) {
    if (this.a != null) {
      if (paramArrayOfX509Certificate == null || paramArrayOfX509Certificate.length <= 0)
        throw new CertificateException(); 
      int i = paramArrayOfX509Certificate.length;
      byte b = 0;
      while (true) {
        if (b < i) {
          X509Certificate x509Certificate = paramArrayOfX509Certificate[b];
          try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
            messageDigest.update(x509Certificate.getEncoded());
            byte[] arrayOfByte = messageDigest.digest();
            if (!Arrays.equals(this.a, arrayOfByte))
              throw new CertificateException("Invalid certificate"); 
          } catch (Exception paramArrayOfX509Certificate) {
            throw new CertificateException(paramArrayOfX509Certificate);
          } 
          b++;
          continue;
        } 
        return;
      } 
    } 
  }
  
  public final X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
  
  public final boolean verify(String paramString, SSLSession paramSSLSession) { return true; }
}
