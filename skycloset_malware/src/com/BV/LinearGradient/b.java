package com.BV.LinearGradient;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.Shader;
import android.view.View;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.o;

public class b extends View {
  private final Paint a = new Paint(1);
  
  private Path b;
  
  private RectF c;
  
  private LinearGradient d;
  
  private float[] e;
  
  private float[] f = { 0.0F, 0.0F };
  
  private float[] g = { 0.0F, 1.0F };
  
  private int[] h;
  
  private boolean i = false;
  
  private float[] j = { 0.5F, 0.5F };
  
  private float k = 45.0F;
  
  private int[] l = { 0, 0 };
  
  private float[] m = { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F };
  
  public b(Context paramContext) { super(paramContext); }
  
  private void a() {
    int[] arrayOfInt = this.h;
    if (arrayOfInt != null) {
      float[] arrayOfFloat2 = this.e;
      if (arrayOfFloat2 != null && arrayOfInt.length != arrayOfFloat2.length)
        return; 
      float[] arrayOfFloat3 = this.f;
      float[] arrayOfFloat4 = this.g;
      arrayOfFloat2 = arrayOfFloat3;
      float[] arrayOfFloat1 = arrayOfFloat4;
      if (this.i) {
        arrayOfFloat2 = arrayOfFloat3;
        arrayOfFloat1 = arrayOfFloat4;
        if (this.j != null) {
          arrayOfFloat2 = a(this.k);
          arrayOfFloat3 = this.j;
          float f2 = arrayOfFloat3[0];
          float f3 = arrayOfFloat2[0] / 2.0F;
          float f4 = arrayOfFloat3[1];
          float f5 = arrayOfFloat2[1] / 2.0F;
          arrayOfFloat1 = new float[2];
          arrayOfFloat1[0] = arrayOfFloat3[0] + arrayOfFloat2[0] / 2.0F;
          arrayOfFloat1[1] = arrayOfFloat3[1] + arrayOfFloat2[1] / 2.0F;
          arrayOfFloat2 = new float[] { f2 - f3, f4 - f5 };
        } 
      } 
      float f1 = arrayOfFloat2[0];
      int[] arrayOfInt1 = this.l;
      this.d = new LinearGradient(arrayOfInt1[0] * f1, arrayOfFloat2[1] * arrayOfInt1[1], arrayOfFloat1[0] * arrayOfInt1[0], arrayOfFloat1[1] * arrayOfInt1[1], this.h, this.e, Shader.TileMode.CLAMP);
      this.a.setShader(this.d);
      invalidate();
    } 
  }
  
  private float[] a(float paramFloat) {
    float f1 = (float)Math.sqrt(2.0D);
    double d1 = ((paramFloat - 90.0F) * 0.017453292F);
    return new float[] { (float)Math.cos(d1) * f1, (float)Math.sin(d1) * f1 };
  }
  
  private void b() {
    if (this.b == null) {
      this.b = new Path();
      this.c = new RectF();
    } 
    this.b.reset();
    RectF rectF = this.c;
    int[] arrayOfInt = this.l;
    rectF.set(0.0F, 0.0F, arrayOfInt[0], arrayOfInt[1]);
    this.b.addRoundRect(this.c, this.m, Path.Direction.CW);
  }
  
  protected void onDraw(Canvas paramCanvas) {
    super.onDraw(paramCanvas);
    Path path = this.b;
    if (path == null) {
      paramCanvas.drawPaint(this.a);
      return;
    } 
    paramCanvas.drawPath(path, this.a);
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    this.l = new int[] { paramInt1, paramInt2 };
    b();
    a();
  }
  
  public void setAngle(float paramFloat) {
    this.k = paramFloat;
    a();
  }
  
  public void setAngleCenter(ReadableArray paramReadableArray) {
    this.j = new float[] { (float)paramReadableArray.getDouble(0), (float)paramReadableArray.getDouble(1) };
    a();
  }
  
  public void setBorderRadii(ReadableArray paramReadableArray) {
    float[] arrayOfFloat = new float[paramReadableArray.size()];
    for (byte b1 = 0; b1 < arrayOfFloat.length; b1++)
      arrayOfFloat[b1] = o.a((float)paramReadableArray.getDouble(b1)); 
    this.m = arrayOfFloat;
    b();
    a();
  }
  
  public void setColors(ReadableArray paramReadableArray) {
    int[] arrayOfInt = new int[paramReadableArray.size()];
    for (byte b1 = 0; b1 < arrayOfInt.length; b1++)
      arrayOfInt[b1] = paramReadableArray.getInt(b1); 
    this.h = arrayOfInt;
    a();
  }
  
  public void setEndPosition(ReadableArray paramReadableArray) {
    this.g = new float[] { (float)paramReadableArray.getDouble(0), (float)paramReadableArray.getDouble(1) };
    a();
  }
  
  public void setLocations(ReadableArray paramReadableArray) {
    float[] arrayOfFloat = new float[paramReadableArray.size()];
    for (byte b1 = 0; b1 < arrayOfFloat.length; b1++)
      arrayOfFloat[b1] = (float)paramReadableArray.getDouble(b1); 
    this.e = arrayOfFloat;
    a();
  }
  
  public void setStartPosition(ReadableArray paramReadableArray) {
    this.f = new float[] { (float)paramReadableArray.getDouble(0), (float)paramReadableArray.getDouble(1) };
    a();
  }
  
  public void setUseAngle(boolean paramBoolean) {
    this.i = paramBoolean;
    a();
  }
}
