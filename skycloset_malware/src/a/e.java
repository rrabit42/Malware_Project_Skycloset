package a;

import java.io.Closeable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ScheduledFuture;

public class e implements Closeable {
  private final Object a;
  
  private final List<d> b;
  
  private ScheduledFuture<?> c;
  
  private boolean d;
  
  private boolean e;
  
  private void b() {
    if (!this.e)
      return; 
    throw new IllegalStateException("Object already closed");
  }
  
  private void c() {
    ScheduledFuture scheduledFuture = this.c;
    if (scheduledFuture != null) {
      scheduledFuture.cancel(true);
      this.c = null;
    } 
  }
  
  void a(d paramd) {
    synchronized (this.a) {
      b();
      this.b.remove(paramd);
      return;
    } 
  }
  
  public boolean a() {
    synchronized (this.a) {
      b();
      return this.d;
    } 
  }
  
  public void close() {
    synchronized (this.a) {
      if (this.e)
        return; 
      c();
      Iterator iterator = this.b.iterator();
      while (iterator.hasNext())
        ((d)iterator.next()).close(); 
      this.b.clear();
      this.e = true;
      return;
    } 
  }
  
  public String toString() { return String.format(Locale.US, "%s@%s[cancellationRequested=%s]", new Object[] { getClass().getName(), Integer.toHexString(hashCode()), Boolean.toString(a()) }); }
}
