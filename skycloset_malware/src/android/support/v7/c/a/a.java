package android.support.v7.c.a;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Outline;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.b.a.c;
import android.support.b.a.i;
import android.support.v4.a.a.g;
import android.support.v7.a.a;
import android.support.v7.b.a.a;
import android.util.AttributeSet;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class a extends d {
  private static final String a = "a";
  
  private b b;
  
  private f c;
  
  private int d = -1;
  
  private int e = -1;
  
  private boolean f;
  
  static  {
  
  }
  
  public a() { this(null, null); }
  
  a(b paramb, Resources paramResources) {
    super(null);
    a(new b(paramb, this, paramResources));
    onStateChange(getState());
    jumpToCurrentState();
  }
  
  public static a a(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    a a1 = paramXmlPullParser.getName();
    if (a1.equals("animated-selector")) {
      a1 = new a();
      a1.b(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return a1;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramXmlPullParser.getPositionDescription());
    stringBuilder.append(": invalid animated-selector tag ");
    stringBuilder.append(a1);
    throw new XmlPullParserException(stringBuilder.toString());
  }
  
  private void a(TypedArray paramTypedArray) {
    b b1 = this.b;
    if (Build.VERSION.SDK_INT >= 21)
      b1.f |= paramTypedArray.getChangingConfigurations(); 
    b1.a(paramTypedArray.getBoolean(a.j.AnimatedStateListDrawableCompat_android_variablePadding, b1.k));
    b1.b(paramTypedArray.getBoolean(a.j.AnimatedStateListDrawableCompat_android_constantSize, b1.n));
    b1.c(paramTypedArray.getInt(a.j.AnimatedStateListDrawableCompat_android_enterFadeDuration, b1.C));
    b1.d(paramTypedArray.getInt(a.j.AnimatedStateListDrawableCompat_android_exitFadeDuration, b1.D));
    setDither(paramTypedArray.getBoolean(a.j.AnimatedStateListDrawableCompat_android_dither, b1.z));
  }
  
  private boolean b(int paramInt) {
    int i;
    f f1 = this.c;
    if (f1 != null) {
      if (paramInt == this.d)
        return true; 
      if (paramInt == this.e && f1.c()) {
        f1.d();
        this.d = this.e;
        this.e = paramInt;
        return true;
      } 
      i = this.d;
      f1.b();
    } else {
      i = d();
    } 
    this.c = null;
    this.e = -1;
    this.d = -1;
    b b1 = this.b;
    int j = b1.a(i);
    int k = b1.a(paramInt);
    if (k != 0) {
      a a1;
      if (j == 0)
        return false; 
      int m = b1.a(j, k);
      if (m < 0)
        return false; 
      boolean bool = b1.c(j, k);
      a(m);
      Drawable drawable = getCurrent();
      if (drawable instanceof AnimationDrawable) {
        boolean bool1 = b1.b(j, k);
        a1 = new d((AnimationDrawable)drawable, bool1, bool);
      } else if (drawable instanceof c) {
        a1 = new c((c)drawable);
      } else {
        if (drawable instanceof Animatable) {
          a1 = new a((Animatable)drawable);
          a1.a();
          this.c = a1;
          this.e = i;
          this.d = paramInt;
          return true;
        } 
        return false;
      } 
      a1.a();
      this.c = a1;
      this.e = i;
      this.d = paramInt;
      return true;
    } 
    return false;
  }
  
  private void c(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    int i = paramXmlPullParser.getDepth() + 1;
    while (true) {
      int j = paramXmlPullParser.next();
      if (j != 1) {
        int k = paramXmlPullParser.getDepth();
        if (k >= i || j != 3) {
          if (j != 2 || k > i)
            continue; 
          if (paramXmlPullParser.getName().equals("item")) {
            e(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
            continue;
          } 
          if (paramXmlPullParser.getName().equals("transition"))
            d(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme); 
          continue;
        } 
      } 
      break;
    } 
  }
  
  private int d(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    TypedArray typedArray;
    Drawable drawable = g.a(paramResources, paramTheme, paramAttributeSet, a.j.AnimatedStateListDrawableTransition);
    int i = drawable.getResourceId(a.j.AnimatedStateListDrawableTransition_android_fromId, -1);
    int j = drawable.getResourceId(a.j.AnimatedStateListDrawableTransition_android_toId, -1);
    int k = drawable.getResourceId(a.j.AnimatedStateListDrawableTransition_android_drawable, -1);
    if (k > 0) {
      typedArray = a.b(paramContext, k);
    } else {
      typedArray = null;
    } 
    boolean bool = drawable.getBoolean(a.j.AnimatedStateListDrawableTransition_android_reversible, false);
    drawable.recycle();
    drawable = typedArray;
    if (typedArray == null) {
      while (true) {
        k = paramXmlPullParser.next();
        if (k == 4)
          continue; 
        break;
      } 
      if (k == 2) {
        if (paramXmlPullParser.getName().equals("animated-vector")) {
          c c1 = c.a(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else if (Build.VERSION.SDK_INT >= 21) {
          Drawable drawable1 = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else {
          drawable = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet);
        } 
      } else {
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append(paramXmlPullParser.getPositionDescription());
        stringBuilder1.append(": <transition> tag requires a 'drawable' attribute or child tag defining a drawable");
        throw new XmlPullParserException(stringBuilder1.toString());
      } 
    } 
    if (drawable != null) {
      if (i != -1 && j != -1)
        return this.b.a(i, j, drawable, bool); 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(paramXmlPullParser.getPositionDescription());
      stringBuilder1.append(": <transition> tag requires 'fromId' & 'toId' attributes");
      throw new XmlPullParserException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramXmlPullParser.getPositionDescription());
    stringBuilder.append(": <transition> tag requires a 'drawable' attribute or child tag defining a drawable");
    throw new XmlPullParserException(stringBuilder.toString());
  }
  
  private int e(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    Context context;
    TypedArray typedArray = g.a(paramResources, paramTheme, paramAttributeSet, a.j.AnimatedStateListDrawableItem);
    int i = typedArray.getResourceId(a.j.AnimatedStateListDrawableItem_android_id, 0);
    int j = typedArray.getResourceId(a.j.AnimatedStateListDrawableItem_android_drawable, -1);
    if (j > 0) {
      context = a.b(paramContext, j);
    } else {
      context = null;
    } 
    typedArray.recycle();
    int[] arrayOfInt = a(paramAttributeSet);
    paramContext = context;
    if (context == null) {
      while (true) {
        j = paramXmlPullParser.next();
        if (j == 4)
          continue; 
        break;
      } 
      if (j == 2) {
        if (paramXmlPullParser.getName().equals("vector")) {
          stringBuilder = i.a(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else if (Build.VERSION.SDK_INT >= 21) {
          stringBuilder = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else {
          stringBuilder = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet);
        } 
      } else {
        stringBuilder = new StringBuilder();
        stringBuilder.append(paramXmlPullParser.getPositionDescription());
        stringBuilder.append(": <item> tag requires a 'drawable' attribute or child tag defining a drawable");
        throw new XmlPullParserException(stringBuilder.toString());
      } 
    } 
    if (stringBuilder != null)
      return this.b.a(arrayOfInt, stringBuilder, i); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramXmlPullParser.getPositionDescription());
    stringBuilder.append(": <item> tag requires a 'drawable' attribute or child tag defining a drawable");
    throw new XmlPullParserException(stringBuilder.toString());
  }
  
  private void e() { onStateChange(getState()); }
  
  b a() { return new b(this.b, this, null); }
  
  protected void a(b.b paramb) {
    super.a(paramb);
    if (paramb instanceof b)
      this.b = (b)paramb; 
  }
  
  public void b(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    TypedArray typedArray = g.a(paramResources, paramTheme, paramAttributeSet, a.j.AnimatedStateListDrawableCompat);
    setVisible(typedArray.getBoolean(a.j.AnimatedStateListDrawableCompat_android_visible, true), true);
    a(typedArray);
    a(paramResources);
    typedArray.recycle();
    c(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    e();
  }
  
  public boolean isStateful() { return true; }
  
  public void jumpToCurrentState() {
    super.jumpToCurrentState();
    f f1 = this.c;
    if (f1 != null) {
      f1.b();
      this.c = null;
      a(this.d);
      this.d = -1;
      this.e = -1;
    } 
  }
  
  public Drawable mutate() {
    if (!this.f && super.mutate() == this) {
      this.b.a();
      this.f = true;
    } 
    return this;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    boolean bool1;
    int i = this.b.a(paramArrayOfInt);
    if (i != d() && (b(i) || a(i))) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    Drawable drawable = getCurrent();
    boolean bool2 = bool1;
    if (drawable != null)
      bool2 = bool1 | drawable.setState(paramArrayOfInt); 
    return bool2;
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = super.setVisible(paramBoolean1, paramBoolean2);
    if (this.c != null && (bool || paramBoolean2)) {
      if (paramBoolean1) {
        this.c.a();
        return bool;
      } 
      jumpToCurrentState();
    } 
    return bool;
  }
}
