package android.support.v7.c.a;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Outline;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.SystemClock;
import android.support.v4.graphics.drawable.a;

class b extends Drawable implements Drawable.Callback {
  private b a;
  
  private Rect b;
  
  private Drawable c;
  
  private Drawable d;
  
  private int e = 255;
  
  private boolean f;
  
  private int g = -1;
  
  private int h = -1;
  
  private boolean i;
  
  private Runnable j;
  
  private long k;
  
  private long l;
  
  private a m;
  
  static int a(Resources paramResources, int paramInt) {
    if (paramResources != null)
      paramInt = (paramResources.getDisplayMetrics()).densityDpi; 
    int n = paramInt;
    if (paramInt == 0)
      n = 160; 
    return n;
  }
  
  private void a(Drawable paramDrawable) {
    if (this.m == null)
      this.m = new a(); 
    paramDrawable.setCallback(this.m.a(paramDrawable.getCallback()));
    try {
      if (this.a.C <= 0 && this.f)
        paramDrawable.setAlpha(this.e); 
      if (this.a.G) {
        paramDrawable.setColorFilter(this.a.F);
      } else {
        if (this.a.J)
          a.a(paramDrawable, this.a.H); 
        if (this.a.K)
          a.a(paramDrawable, this.a.I); 
      } 
      paramDrawable.setVisible(isVisible(), true);
      paramDrawable.setDither(this.a.z);
      paramDrawable.setState(getState());
      paramDrawable.setLevel(getLevel());
      paramDrawable.setBounds(getBounds());
      if (Build.VERSION.SDK_INT >= 23)
        paramDrawable.setLayoutDirection(getLayoutDirection()); 
      if (Build.VERSION.SDK_INT >= 19)
        paramDrawable.setAutoMirrored(this.a.E); 
      Rect rect = this.b;
      if (Build.VERSION.SDK_INT >= 21 && rect != null)
        paramDrawable.setHotspotBounds(rect.left, rect.top, rect.right, rect.bottom); 
      return;
    } finally {
      paramDrawable.setCallback(this.m.a());
    } 
  }
  
  @SuppressLint({"WrongConstant"})
  @TargetApi(23)
  private boolean a() { return (isAutoMirrored() && getLayoutDirection() == 1); }
  
  final void a(Resources paramResources) { this.a.a(paramResources); }
  
  protected void a(b paramb) {
    this.a = paramb;
    int n = this.g;
    if (n >= 0) {
      this.c = paramb.b(n);
      Drawable drawable = this.c;
      if (drawable != null)
        a(drawable); 
    } 
    this.h = -1;
    this.d = null;
  }
  
  void a(boolean paramBoolean) { // Byte code:
    //   0: iconst_1
    //   1: istore_3
    //   2: aload_0
    //   3: iconst_1
    //   4: putfield f : Z
    //   7: invokestatic uptimeMillis : ()J
    //   10: lstore #4
    //   12: aload_0
    //   13: getfield c : Landroid/graphics/drawable/Drawable;
    //   16: astore #8
    //   18: aload #8
    //   20: ifnull -> 101
    //   23: aload_0
    //   24: getfield k : J
    //   27: lstore #6
    //   29: lload #6
    //   31: lconst_0
    //   32: lcmp
    //   33: ifeq -> 106
    //   36: lload #6
    //   38: lload #4
    //   40: lcmp
    //   41: ifgt -> 56
    //   44: aload #8
    //   46: aload_0
    //   47: getfield e : I
    //   50: invokevirtual setAlpha : (I)V
    //   53: goto -> 101
    //   56: lload #6
    //   58: lload #4
    //   60: lsub
    //   61: ldc2_w 255
    //   64: lmul
    //   65: l2i
    //   66: aload_0
    //   67: getfield a : Landroid/support/v7/c/a/b$b;
    //   70: getfield C : I
    //   73: idiv
    //   74: istore_2
    //   75: aload_0
    //   76: getfield c : Landroid/graphics/drawable/Drawable;
    //   79: sipush #255
    //   82: iload_2
    //   83: isub
    //   84: aload_0
    //   85: getfield e : I
    //   88: imul
    //   89: sipush #255
    //   92: idiv
    //   93: invokevirtual setAlpha : (I)V
    //   96: iconst_1
    //   97: istore_2
    //   98: goto -> 108
    //   101: aload_0
    //   102: lconst_0
    //   103: putfield k : J
    //   106: iconst_0
    //   107: istore_2
    //   108: aload_0
    //   109: getfield d : Landroid/graphics/drawable/Drawable;
    //   112: astore #8
    //   114: aload #8
    //   116: ifnull -> 202
    //   119: aload_0
    //   120: getfield l : J
    //   123: lstore #6
    //   125: lload #6
    //   127: lconst_0
    //   128: lcmp
    //   129: ifeq -> 207
    //   132: lload #6
    //   134: lload #4
    //   136: lcmp
    //   137: ifgt -> 161
    //   140: aload #8
    //   142: iconst_0
    //   143: iconst_0
    //   144: invokevirtual setVisible : (ZZ)Z
    //   147: pop
    //   148: aload_0
    //   149: aconst_null
    //   150: putfield d : Landroid/graphics/drawable/Drawable;
    //   153: aload_0
    //   154: iconst_m1
    //   155: putfield h : I
    //   158: goto -> 202
    //   161: lload #6
    //   163: lload #4
    //   165: lsub
    //   166: ldc2_w 255
    //   169: lmul
    //   170: l2i
    //   171: aload_0
    //   172: getfield a : Landroid/support/v7/c/a/b$b;
    //   175: getfield D : I
    //   178: idiv
    //   179: istore_2
    //   180: aload_0
    //   181: getfield d : Landroid/graphics/drawable/Drawable;
    //   184: iload_2
    //   185: aload_0
    //   186: getfield e : I
    //   189: imul
    //   190: sipush #255
    //   193: idiv
    //   194: invokevirtual setAlpha : (I)V
    //   197: iload_3
    //   198: istore_2
    //   199: goto -> 207
    //   202: aload_0
    //   203: lconst_0
    //   204: putfield l : J
    //   207: iload_1
    //   208: ifeq -> 229
    //   211: iload_2
    //   212: ifeq -> 229
    //   215: aload_0
    //   216: aload_0
    //   217: getfield j : Ljava/lang/Runnable;
    //   220: lload #4
    //   222: ldc2_w 16
    //   225: ladd
    //   226: invokevirtual scheduleSelf : (Ljava/lang/Runnable;J)V
    //   229: return }
  
  boolean a(int paramInt) {
    if (paramInt == this.g)
      return false; 
    long l1 = SystemClock.uptimeMillis();
    if (this.a.D > 0) {
      Drawable drawable = this.d;
      if (drawable != null)
        drawable.setVisible(false, false); 
      drawable = this.c;
      if (drawable != null) {
        this.d = drawable;
        this.h = this.g;
        this.l = this.a.D + l1;
      } else {
        this.d = null;
        this.h = -1;
        this.l = 0L;
      } 
    } else {
      Drawable drawable = this.c;
      if (drawable != null)
        drawable.setVisible(false, false); 
    } 
    if (paramInt >= 0 && paramInt < this.a.j) {
      Drawable drawable = this.a.b(paramInt);
      this.c = drawable;
      this.g = paramInt;
      if (drawable != null) {
        if (this.a.C > 0)
          this.k = l1 + this.a.C; 
        a(drawable);
      } 
    } else {
      this.c = null;
      this.g = -1;
    } 
    if (this.k != 0L || this.l != 0L) {
      Runnable runnable = this.j;
      if (runnable == null) {
        this.j = new Object(this);
      } else {
        unscheduleSelf(runnable);
      } 
      a(true);
    } 
    invalidateSelf();
    return true;
  }
  
  public void applyTheme(Resources.Theme paramTheme) { this.a.a(paramTheme); }
  
  b c() { return this.a; }
  
  public boolean canApplyTheme() { return this.a.canApplyTheme(); }
  
  int d() { return this.g; }
  
  public void draw(Canvas paramCanvas) {
    Drawable drawable = this.c;
    if (drawable != null)
      drawable.draw(paramCanvas); 
    drawable = this.d;
    if (drawable != null)
      drawable.draw(paramCanvas); 
  }
  
  public int getAlpha() { return this.e; }
  
  public int getChangingConfigurations() { return super.getChangingConfigurations() | this.a.getChangingConfigurations(); }
  
  public final Drawable.ConstantState getConstantState() {
    if (this.a.n()) {
      this.a.f = getChangingConfigurations();
      return this.a;
    } 
    return null;
  }
  
  public Drawable getCurrent() { return this.c; }
  
  public void getHotspotBounds(Rect paramRect) {
    Rect rect = this.b;
    if (rect != null) {
      paramRect.set(rect);
      return;
    } 
    super.getHotspotBounds(paramRect);
  }
  
  public int getIntrinsicHeight() {
    if (this.a.f())
      return this.a.h(); 
    Drawable drawable = this.c;
    return (drawable != null) ? drawable.getIntrinsicHeight() : -1;
  }
  
  public int getIntrinsicWidth() {
    if (this.a.f())
      return this.a.g(); 
    Drawable drawable = this.c;
    return (drawable != null) ? drawable.getIntrinsicWidth() : -1;
  }
  
  public int getMinimumHeight() {
    if (this.a.f())
      return this.a.j(); 
    Drawable drawable = this.c;
    return (drawable != null) ? drawable.getMinimumHeight() : 0;
  }
  
  public int getMinimumWidth() {
    if (this.a.f())
      return this.a.i(); 
    Drawable drawable = this.c;
    return (drawable != null) ? drawable.getMinimumWidth() : 0;
  }
  
  public int getOpacity() {
    Drawable drawable = this.c;
    return (drawable == null || !drawable.isVisible()) ? -2 : this.a.l();
  }
  
  public void getOutline(Outline paramOutline) {
    Drawable drawable = this.c;
    if (drawable != null)
      drawable.getOutline(paramOutline); 
  }
  
  public boolean getPadding(Rect paramRect) {
    boolean bool;
    Rect rect = this.a.e();
    if (rect != null) {
      paramRect.set(rect);
      int n = rect.left;
      int i1 = rect.top;
      int i2 = rect.bottom;
      if ((rect.right | n | i1 | i2) != 0) {
        bool = true;
      } else {
        bool = false;
      } 
    } else {
      Drawable drawable = this.c;
      if (drawable != null) {
        bool = drawable.getPadding(paramRect);
      } else {
        bool = super.getPadding(paramRect);
      } 
    } 
    if (a()) {
      int n = paramRect.left;
      paramRect.left = paramRect.right;
      paramRect.right = n;
    } 
    return bool;
  }
  
  public void invalidateDrawable(Drawable paramDrawable) {
    b b1 = this.a;
    if (b1 != null)
      b1.b(); 
    if (paramDrawable == this.c && getCallback() != null)
      getCallback().invalidateDrawable(this); 
  }
  
  public boolean isAutoMirrored() { return this.a.E; }
  
  public boolean isStateful() { return this.a.m(); }
  
  public void jumpToCurrentState() {
    boolean bool;
    Drawable drawable = this.d;
    if (drawable != null) {
      drawable.jumpToCurrentState();
      this.d = null;
      this.h = -1;
      bool = true;
    } else {
      bool = false;
    } 
    drawable = this.c;
    if (drawable != null) {
      drawable.jumpToCurrentState();
      if (this.f)
        this.c.setAlpha(this.e); 
    } 
    if (this.l != 0L) {
      this.l = 0L;
      bool = true;
    } 
    if (this.k != 0L) {
      this.k = 0L;
      bool = true;
    } 
    if (bool)
      invalidateSelf(); 
  }
  
  public Drawable mutate() {
    if (!this.i && super.mutate() == this) {
      b b1 = c();
      b1.a();
      a(b1);
      this.i = true;
    } 
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect) {
    Drawable drawable = this.d;
    if (drawable != null)
      drawable.setBounds(paramRect); 
    drawable = this.c;
    if (drawable != null)
      drawable.setBounds(paramRect); 
  }
  
  public boolean onLayoutDirectionChanged(int paramInt) { return this.a.d(paramInt, d()); }
  
  protected boolean onLevelChange(int paramInt) {
    Drawable drawable = this.d;
    if (drawable != null)
      return drawable.setLevel(paramInt); 
    drawable = this.c;
    return (drawable != null) ? drawable.setLevel(paramInt) : 0;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    Drawable drawable = this.d;
    if (drawable != null)
      return drawable.setState(paramArrayOfInt); 
    drawable = this.c;
    return (drawable != null) ? drawable.setState(paramArrayOfInt) : 0;
  }
  
  public void scheduleDrawable(Drawable paramDrawable, Runnable paramRunnable, long paramLong) {
    if (paramDrawable == this.c && getCallback() != null)
      getCallback().scheduleDrawable(this, paramRunnable, paramLong); 
  }
  
  public void setAlpha(int paramInt) {
    if (!this.f || this.e != paramInt) {
      this.f = true;
      this.e = paramInt;
      Drawable drawable = this.c;
      if (drawable != null) {
        if (this.k == 0L) {
          drawable.setAlpha(paramInt);
          return;
        } 
        a(false);
      } 
    } 
  }
  
  public void setAutoMirrored(boolean paramBoolean) {
    if (this.a.E != paramBoolean) {
      b b1 = this.a;
      b1.E = paramBoolean;
      Drawable drawable = this.c;
      if (drawable != null)
        a.a(drawable, b1.E); 
    } 
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {
    b b1 = this.a;
    b1.G = true;
    if (b1.F != paramColorFilter) {
      this.a.F = paramColorFilter;
      Drawable drawable = this.c;
      if (drawable != null)
        drawable.setColorFilter(paramColorFilter); 
    } 
  }
  
  public void setDither(boolean paramBoolean) {
    if (this.a.z != paramBoolean) {
      b b1 = this.a;
      b1.z = paramBoolean;
      Drawable drawable = this.c;
      if (drawable != null)
        drawable.setDither(b1.z); 
    } 
  }
  
  public void setHotspot(float paramFloat1, float paramFloat2) {
    Drawable drawable = this.c;
    if (drawable != null)
      a.a(drawable, paramFloat1, paramFloat2); 
  }
  
  public void setHotspotBounds(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    Rect rect = this.b;
    if (rect == null) {
      this.b = new Rect(paramInt1, paramInt2, paramInt3, paramInt4);
    } else {
      rect.set(paramInt1, paramInt2, paramInt3, paramInt4);
    } 
    Drawable drawable = this.c;
    if (drawable != null)
      a.a(drawable, paramInt1, paramInt2, paramInt3, paramInt4); 
  }
  
  public void setTintList(ColorStateList paramColorStateList) {
    b b1 = this.a;
    b1.J = true;
    if (b1.H != paramColorStateList) {
      this.a.H = paramColorStateList;
      a.a(this.c, paramColorStateList);
    } 
  }
  
  public void setTintMode(PorterDuff.Mode paramMode) {
    b b1 = this.a;
    b1.K = true;
    if (b1.I != paramMode) {
      this.a.I = paramMode;
      a.a(this.c, paramMode);
    } 
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) {
    boolean bool = super.setVisible(paramBoolean1, paramBoolean2);
    Drawable drawable = this.d;
    if (drawable != null)
      drawable.setVisible(paramBoolean1, paramBoolean2); 
    drawable = this.c;
    if (drawable != null)
      drawable.setVisible(paramBoolean1, paramBoolean2); 
    return bool;
  }
  
  public void unscheduleDrawable(Drawable paramDrawable, Runnable paramRunnable) {
    if (paramDrawable == this.c && getCallback() != null)
      getCallback().unscheduleDrawable(this, paramRunnable); 
  }
}
