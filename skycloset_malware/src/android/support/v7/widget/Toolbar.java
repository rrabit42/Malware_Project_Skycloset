package android.support.v7.widget;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Parcelable;
import android.support.v4.f.d;
import android.support.v4.f.g;
import android.support.v4.f.r;
import android.support.v7.a.a;
import android.support.v7.app.a;
import android.support.v7.b.a.a;
import android.support.v7.view.g;
import android.support.v7.view.menu.h;
import android.support.v7.view.menu.j;
import android.support.v7.view.menu.o;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.ContextThemeWrapper;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;

public class Toolbar extends ViewGroup {
  private int A;
  
  private int B;
  
  private boolean C;
  
  private boolean D;
  
  private final ArrayList<View> E = new ArrayList();
  
  private final ArrayList<View> F = new ArrayList();
  
  private final int[] G = new int[2];
  
  private final ActionMenuView.e H = new Object(this);
  
  private aw I;
  
  private c J;
  
  private a K;
  
  private o.a L;
  
  private h.a M;
  
  private boolean N;
  
  private final Runnable O = new Object(this);
  
  ImageButton a;
  
  View b;
  
  int c;
  
  c d;
  
  private ActionMenuView e;
  
  private TextView f;
  
  private TextView g;
  
  private ImageButton h;
  
  private ImageView i;
  
  private Drawable j;
  
  private CharSequence k;
  
  private Context l;
  
  private int m;
  
  private int n;
  
  private int o;
  
  private int p;
  
  private int q;
  
  private int r;
  
  private int s;
  
  private int t;
  
  private am u;
  
  private int v;
  
  private int w;
  
  private int x = 8388627;
  
  private CharSequence y;
  
  private CharSequence z;
  
  public Toolbar(Context paramContext) { this(paramContext, null); }
  
  public Toolbar(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, a.a.toolbarStyle); }
  
  public Toolbar(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    av av = av.a(getContext(), paramAttributeSet, a.j.Toolbar, paramInt, 0);
    this.n = av.g(a.j.Toolbar_titleTextAppearance, 0);
    this.o = av.g(a.j.Toolbar_subtitleTextAppearance, 0);
    this.x = av.c(a.j.Toolbar_android_gravity, this.x);
    this.c = av.c(a.j.Toolbar_buttonGravity, 48);
    int i1 = av.d(a.j.Toolbar_titleMargin, 0);
    paramInt = i1;
    if (av.g(a.j.Toolbar_titleMargins))
      paramInt = av.d(a.j.Toolbar_titleMargins, i1); 
    this.t = paramInt;
    this.s = paramInt;
    this.r = paramInt;
    this.q = paramInt;
    paramInt = av.d(a.j.Toolbar_titleMarginStart, -1);
    if (paramInt >= 0)
      this.q = paramInt; 
    paramInt = av.d(a.j.Toolbar_titleMarginEnd, -1);
    if (paramInt >= 0)
      this.r = paramInt; 
    paramInt = av.d(a.j.Toolbar_titleMarginTop, -1);
    if (paramInt >= 0)
      this.s = paramInt; 
    paramInt = av.d(a.j.Toolbar_titleMarginBottom, -1);
    if (paramInt >= 0)
      this.t = paramInt; 
    this.p = av.e(a.j.Toolbar_maxButtonHeight, -1);
    paramInt = av.d(a.j.Toolbar_contentInsetStart, -2147483648);
    i1 = av.d(a.j.Toolbar_contentInsetEnd, -2147483648);
    int i2 = av.e(a.j.Toolbar_contentInsetLeft, 0);
    int i3 = av.e(a.j.Toolbar_contentInsetRight, 0);
    s();
    this.u.b(i2, i3);
    if (paramInt != Integer.MIN_VALUE || i1 != Integer.MIN_VALUE)
      this.u.a(paramInt, i1); 
    this.v = av.d(a.j.Toolbar_contentInsetStartWithNavigation, -2147483648);
    this.w = av.d(a.j.Toolbar_contentInsetEndWithActions, -2147483648);
    this.j = av.a(a.j.Toolbar_collapseIcon);
    this.k = av.c(a.j.Toolbar_collapseContentDescription);
    CharSequence charSequence3 = av.c(a.j.Toolbar_title);
    if (!TextUtils.isEmpty(charSequence3))
      setTitle(charSequence3); 
    charSequence3 = av.c(a.j.Toolbar_subtitle);
    if (!TextUtils.isEmpty(charSequence3))
      setSubtitle(charSequence3); 
    this.l = getContext();
    setPopupTheme(av.g(a.j.Toolbar_popupTheme, 0));
    Drawable drawable2 = av.a(a.j.Toolbar_navigationIcon);
    if (drawable2 != null)
      setNavigationIcon(drawable2); 
    CharSequence charSequence2 = av.c(a.j.Toolbar_navigationContentDescription);
    if (!TextUtils.isEmpty(charSequence2))
      setNavigationContentDescription(charSequence2); 
    Drawable drawable1 = av.a(a.j.Toolbar_logo);
    if (drawable1 != null)
      setLogo(drawable1); 
    CharSequence charSequence1 = av.c(a.j.Toolbar_logoDescription);
    if (!TextUtils.isEmpty(charSequence1))
      setLogoDescription(charSequence1); 
    if (av.g(a.j.Toolbar_titleTextColor))
      setTitleTextColor(av.b(a.j.Toolbar_titleTextColor, -1)); 
    if (av.g(a.j.Toolbar_subtitleTextColor))
      setSubtitleTextColor(av.b(a.j.Toolbar_subtitleTextColor, -1)); 
    av.a();
  }
  
  private int a(int paramInt) {
    int i1 = paramInt & 0x70;
    paramInt = i1;
    if (i1 != 16) {
      paramInt = i1;
      if (i1 != 48) {
        paramInt = i1;
        if (i1 != 80)
          paramInt = this.x & 0x70; 
      } 
    } 
    return paramInt;
  }
  
  private int a(View paramView, int paramInt) {
    b b1 = (b)paramView.getLayoutParams();
    int i2 = paramView.getMeasuredHeight();
    if (paramInt > 0) {
      paramInt = (i2 - paramInt) / 2;
    } else {
      paramInt = 0;
    } 
    int i1 = a(b1.a);
    if (i1 != 48) {
      if (i1 != 80) {
        int i3 = getPaddingTop();
        paramInt = getPaddingBottom();
        int i4 = getHeight();
        i1 = (i4 - i3 - paramInt - i2) / 2;
        if (i1 < b1.topMargin) {
          paramInt = b1.topMargin;
        } else {
          i2 = i4 - paramInt - i2 - i1 - i3;
          paramInt = i1;
          if (i2 < b1.bottomMargin)
            paramInt = Math.max(0, i1 - b1.bottomMargin - i2); 
        } 
        return i3 + paramInt;
      } 
      return getHeight() - getPaddingBottom() - i2 - b1.bottomMargin - paramInt;
    } 
    return getPaddingTop() - paramInt;
  }
  
  private int a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt) {
    ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    int i1 = marginLayoutParams.leftMargin - paramArrayOfInt[0];
    int i2 = marginLayoutParams.rightMargin - paramArrayOfInt[1];
    int i3 = Math.max(0, i1) + Math.max(0, i2);
    paramArrayOfInt[0] = Math.max(0, -i1);
    paramArrayOfInt[1] = Math.max(0, -i2);
    paramView.measure(getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + i3 + paramInt2, marginLayoutParams.width), getChildMeasureSpec(paramInt3, getPaddingTop() + getPaddingBottom() + marginLayoutParams.topMargin + marginLayoutParams.bottomMargin + paramInt4, marginLayoutParams.height));
    return paramView.getMeasuredWidth() + i3;
  }
  
  private int a(View paramView, int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    b b1 = (b)paramView.getLayoutParams();
    int i1 = b1.leftMargin - paramArrayOfInt[0];
    paramInt1 += Math.max(0, i1);
    paramArrayOfInt[0] = Math.max(0, -i1);
    paramInt2 = a(paramView, paramInt2);
    i1 = paramView.getMeasuredWidth();
    paramView.layout(paramInt1, paramInt2, paramInt1 + i1, paramView.getMeasuredHeight() + paramInt2);
    return paramInt1 + i1 + b1.rightMargin;
  }
  
  private int a(List<View> paramList, int[] paramArrayOfInt) {
    int i3 = paramArrayOfInt[0];
    int i2 = paramArrayOfInt[1];
    int i4 = paramList.size();
    byte b1 = 0;
    int i1 = b1;
    while (b1 < i4) {
      View view = (View)paramList.get(b1);
      b b2 = (b)view.getLayoutParams();
      i3 = b2.leftMargin - i3;
      i2 = b2.rightMargin - i2;
      int i5 = Math.max(0, i3);
      int i6 = Math.max(0, i2);
      i3 = Math.max(0, -i3);
      i2 = Math.max(0, -i2);
      i1 += i5 + view.getMeasuredWidth() + i6;
      b1++;
    } 
    return i1;
  }
  
  private void a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5) {
    ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    int i1 = getChildMeasureSpec(paramInt1, getPaddingLeft() + getPaddingRight() + marginLayoutParams.leftMargin + marginLayoutParams.rightMargin + paramInt2, marginLayoutParams.width);
    paramInt2 = getChildMeasureSpec(paramInt3, getPaddingTop() + getPaddingBottom() + marginLayoutParams.topMargin + marginLayoutParams.bottomMargin + paramInt4, marginLayoutParams.height);
    paramInt3 = View.MeasureSpec.getMode(paramInt2);
    paramInt1 = paramInt2;
    if (paramInt3 != 1073741824) {
      paramInt1 = paramInt2;
      if (paramInt5 >= 0) {
        paramInt1 = paramInt5;
        if (paramInt3 != 0)
          paramInt1 = Math.min(View.MeasureSpec.getSize(paramInt2), paramInt5); 
        paramInt1 = View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824);
      } 
    } 
    paramView.measure(i1, paramInt1);
  }
  
  private void a(View paramView, boolean paramBoolean) {
    b b1 = paramView.getLayoutParams();
    if (b1 == null) {
      b1 = j();
    } else if (!checkLayoutParams(b1)) {
      b1 = a(b1);
    } else {
      b1 = (b)b1;
    } 
    b1.b = 1;
    if (paramBoolean && this.b != null) {
      paramView.setLayoutParams(b1);
      this.F.add(paramView);
      return;
    } 
    addView(paramView, b1);
  }
  
  private void a(List<View> paramList, int paramInt) {
    int i1 = r.d(this);
    int i2 = 0;
    if (i1 == 1) {
      i1 = 1;
    } else {
      i1 = 0;
    } 
    int i4 = getChildCount();
    int i3 = d.a(paramInt, r.d(this));
    paramList.clear();
    paramInt = i2;
    if (i1 != 0) {
      for (paramInt = i4 - 1; paramInt >= 0; paramInt--) {
        View view = getChildAt(paramInt);
        b b1 = (b)view.getLayoutParams();
        if (b1.b == 0 && a(view) && b(b1.a) == i3)
          paramList.add(view); 
      } 
    } else {
      while (paramInt < i4) {
        View view = getChildAt(paramInt);
        b b1 = (b)view.getLayoutParams();
        if (b1.b == 0 && a(view) && b(b1.a) == i3)
          paramList.add(view); 
        paramInt++;
      } 
    } 
  }
  
  private boolean a(View paramView) { return (paramView != null && paramView.getParent() == this && paramView.getVisibility() != 8); }
  
  private int b(int paramInt) {
    int i1 = r.d(this);
    int i2 = d.a(paramInt, i1) & 0x7;
    if (i2 != 1) {
      paramInt = 3;
      if (i2 != 3 && i2 != 5) {
        if (i1 == 1)
          paramInt = 5; 
        return paramInt;
      } 
    } 
    return i2;
  }
  
  private int b(View paramView) {
    ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    return g.a(marginLayoutParams) + g.b(marginLayoutParams);
  }
  
  private int b(View paramView, int paramInt1, int[] paramArrayOfInt, int paramInt2) {
    b b1 = (b)paramView.getLayoutParams();
    int i1 = b1.rightMargin - paramArrayOfInt[1];
    paramInt1 -= Math.max(0, i1);
    paramArrayOfInt[1] = Math.max(0, -i1);
    paramInt2 = a(paramView, paramInt2);
    i1 = paramView.getMeasuredWidth();
    paramView.layout(paramInt1 - i1, paramInt2, paramInt1, paramView.getMeasuredHeight() + paramInt2);
    return paramInt1 - i1 + b1.leftMargin;
  }
  
  private int c(View paramView) {
    ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)paramView.getLayoutParams();
    return marginLayoutParams.topMargin + marginLayoutParams.bottomMargin;
  }
  
  private boolean d(View paramView) { return (paramView.getParent() == this || this.F.contains(paramView)); }
  
  private MenuInflater getMenuInflater() { return new g(getContext()); }
  
  private void m() {
    if (this.i == null)
      this.i = new p(getContext()); 
  }
  
  private void n() {
    o();
    if (this.e.d() == null) {
      h h1 = (h)this.e.getMenu();
      if (this.K == null)
        this.K = new a(this); 
      this.e.setExpandedActionViewsExclusive(true);
      h1.a(this.K, this.l);
    } 
  }
  
  private void o() {
    if (this.e == null) {
      this.e = new ActionMenuView(getContext());
      this.e.setPopupTheme(this.m);
      this.e.setOnMenuItemClickListener(this.H);
      this.e.a(this.L, this.M);
      b b1 = j();
      b1.a = 0x800005 | this.c & 0x70;
      this.e.setLayoutParams(b1);
      a(this.e, false);
    } 
  }
  
  private void p() {
    if (this.h == null) {
      this.h = new n(getContext(), null, a.a.toolbarNavigationButtonStyle);
      b b1 = j();
      b1.a = 0x800003 | this.c & 0x70;
      this.h.setLayoutParams(b1);
    } 
  }
  
  private void q() {
    removeCallbacks(this.O);
    post(this.O);
  }
  
  private boolean r() {
    if (!this.N)
      return false; 
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      View view = getChildAt(b1);
      if (a(view) && view.getMeasuredWidth() > 0 && view.getMeasuredHeight() > 0)
        return false; 
    } 
    return true;
  }
  
  private void s() {
    if (this.u == null)
      this.u = new am(); 
  }
  
  public b a(AttributeSet paramAttributeSet) { return new b(getContext(), paramAttributeSet); }
  
  protected b a(ViewGroup.LayoutParams paramLayoutParams) { return (paramLayoutParams instanceof b) ? new b((b)paramLayoutParams) : ((paramLayoutParams instanceof a.a) ? new b((a.a)paramLayoutParams) : ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams) ? new b((ViewGroup.MarginLayoutParams)paramLayoutParams) : new b(paramLayoutParams))); }
  
  public void a(int paramInt1, int paramInt2) {
    s();
    this.u.a(paramInt1, paramInt2);
  }
  
  public void a(Context paramContext, int paramInt) {
    this.n = paramInt;
    TextView textView = this.f;
    if (textView != null)
      textView.setTextAppearance(paramContext, paramInt); 
  }
  
  public void a(h paramh, c paramc) {
    if (paramh == null && this.e == null)
      return; 
    o();
    h h1 = this.e.d();
    if (h1 == paramh)
      return; 
    if (h1 != null) {
      h1.b(this.J);
      h1.b(this.K);
    } 
    if (this.K == null)
      this.K = new a(this); 
    paramc.d(true);
    if (paramh != null) {
      paramh.a(paramc, this.l);
      paramh.a(this.K, this.l);
    } else {
      paramc.a(this.l, null);
      this.K.a(this.l, null);
      paramc.b(true);
      this.K.b(true);
    } 
    this.e.setPopupTheme(this.m);
    this.e.setPresenter(paramc);
    this.J = paramc;
  }
  
  public void a(o.a parama, h.a parama1) {
    this.L = parama;
    this.M = parama1;
    ActionMenuView actionMenuView = this.e;
    if (actionMenuView != null)
      actionMenuView.a(parama, parama1); 
  }
  
  public boolean a() {
    if (getVisibility() == 0) {
      ActionMenuView actionMenuView = this.e;
      if (actionMenuView != null && actionMenuView.a())
        return true; 
    } 
    return false;
  }
  
  public void b(Context paramContext, int paramInt) {
    this.o = paramInt;
    TextView textView = this.g;
    if (textView != null)
      textView.setTextAppearance(paramContext, paramInt); 
  }
  
  public boolean b() {
    ActionMenuView actionMenuView = this.e;
    return (actionMenuView != null && actionMenuView.g());
  }
  
  public boolean c() {
    ActionMenuView actionMenuView = this.e;
    return (actionMenuView != null && actionMenuView.h());
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (super.checkLayoutParams(paramLayoutParams) && paramLayoutParams instanceof b); }
  
  public boolean d() {
    ActionMenuView actionMenuView = this.e;
    return (actionMenuView != null && actionMenuView.e());
  }
  
  public boolean e() {
    ActionMenuView actionMenuView = this.e;
    return (actionMenuView != null && actionMenuView.f());
  }
  
  public void f() {
    ActionMenuView actionMenuView = this.e;
    if (actionMenuView != null)
      actionMenuView.i(); 
  }
  
  public boolean g() {
    a a1 = this.K;
    return (a1 != null && a1.b != null);
  }
  
  public int getContentInsetEnd() {
    am am1 = this.u;
    return (am1 != null) ? am1.d() : 0;
  }
  
  public int getContentInsetEndWithActions() {
    int i1 = this.w;
    return (i1 != Integer.MIN_VALUE) ? i1 : getContentInsetEnd();
  }
  
  public int getContentInsetLeft() {
    am am1 = this.u;
    return (am1 != null) ? am1.a() : 0;
  }
  
  public int getContentInsetRight() {
    am am1 = this.u;
    return (am1 != null) ? am1.b() : 0;
  }
  
  public int getContentInsetStart() {
    am am1 = this.u;
    return (am1 != null) ? am1.c() : 0;
  }
  
  public int getContentInsetStartWithNavigation() {
    int i1 = this.v;
    return (i1 != Integer.MIN_VALUE) ? i1 : getContentInsetStart();
  }
  
  public int getCurrentContentInsetEnd() { // Byte code:
    //   0: aload_0
    //   1: getfield e : Landroid/support/v7/widget/ActionMenuView;
    //   4: astore_2
    //   5: aload_2
    //   6: ifnull -> 30
    //   9: aload_2
    //   10: invokevirtual d : ()Landroid/support/v7/view/menu/h;
    //   13: astore_2
    //   14: aload_2
    //   15: ifnull -> 30
    //   18: aload_2
    //   19: invokevirtual hasVisibleItems : ()Z
    //   22: ifeq -> 30
    //   25: iconst_1
    //   26: istore_1
    //   27: goto -> 32
    //   30: iconst_0
    //   31: istore_1
    //   32: iload_1
    //   33: ifeq -> 52
    //   36: aload_0
    //   37: invokevirtual getContentInsetEnd : ()I
    //   40: aload_0
    //   41: getfield w : I
    //   44: iconst_0
    //   45: invokestatic max : (II)I
    //   48: invokestatic max : (II)I
    //   51: ireturn
    //   52: aload_0
    //   53: invokevirtual getContentInsetEnd : ()I
    //   56: ireturn }
  
  public int getCurrentContentInsetLeft() { return (r.d(this) == 1) ? getCurrentContentInsetEnd() : getCurrentContentInsetStart(); }
  
  public int getCurrentContentInsetRight() { return (r.d(this) == 1) ? getCurrentContentInsetStart() : getCurrentContentInsetEnd(); }
  
  public int getCurrentContentInsetStart() { return (getNavigationIcon() != null) ? Math.max(getContentInsetStart(), Math.max(this.v, 0)) : getContentInsetStart(); }
  
  public Drawable getLogo() {
    ImageView imageView = this.i;
    return (imageView != null) ? imageView.getDrawable() : null;
  }
  
  public CharSequence getLogoDescription() {
    ImageView imageView = this.i;
    return (imageView != null) ? imageView.getContentDescription() : null;
  }
  
  public Menu getMenu() {
    n();
    return this.e.getMenu();
  }
  
  public CharSequence getNavigationContentDescription() {
    ImageButton imageButton = this.h;
    return (imageButton != null) ? imageButton.getContentDescription() : null;
  }
  
  public Drawable getNavigationIcon() {
    ImageButton imageButton = this.h;
    return (imageButton != null) ? imageButton.getDrawable() : null;
  }
  
  c getOuterActionMenuPresenter() { return this.J; }
  
  public Drawable getOverflowIcon() {
    n();
    return this.e.getOverflowIcon();
  }
  
  Context getPopupContext() { return this.l; }
  
  public int getPopupTheme() { return this.m; }
  
  public CharSequence getSubtitle() { return this.z; }
  
  public CharSequence getTitle() { return this.y; }
  
  public int getTitleMarginBottom() { return this.t; }
  
  public int getTitleMarginEnd() { return this.r; }
  
  public int getTitleMarginStart() { return this.q; }
  
  public int getTitleMarginTop() { return this.s; }
  
  public ac getWrapper() {
    if (this.I == null)
      this.I = new aw(this, true); 
    return this.I;
  }
  
  public void h() {
    j j1 = this.K;
    if (j1 == null) {
      j1 = null;
    } else {
      j1 = j1.b;
    } 
    if (j1 != null)
      j1.collapseActionView(); 
  }
  
  void i() {
    if (this.a == null) {
      this.a = new n(getContext(), null, a.a.toolbarNavigationButtonStyle);
      this.a.setImageDrawable(this.j);
      this.a.setContentDescription(this.k);
      b b1 = j();
      b1.a = 0x800003 | this.c & 0x70;
      b1.b = 2;
      this.a.setLayoutParams(b1);
      this.a.setOnClickListener(new Object(this));
    } 
  }
  
  protected b j() { return new b(-2, -2); }
  
  void k() {
    for (int i1 = getChildCount() - 1; i1 >= 0; i1--) {
      View view = getChildAt(i1);
      if (((b)view.getLayoutParams()).b != 2 && view != this.e) {
        removeViewAt(i1);
        this.F.add(view);
      } 
    } 
  }
  
  void l() {
    for (int i1 = this.F.size() - 1; i1 >= 0; i1--)
      addView((View)this.F.get(i1)); 
    this.F.clear();
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    removeCallbacks(this.O);
  }
  
  public boolean onHoverEvent(MotionEvent paramMotionEvent) {
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 9)
      this.D = false; 
    if (!this.D) {
      boolean bool = super.onHoverEvent(paramMotionEvent);
      if (i1 == 9 && !bool)
        this.D = true; 
    } 
    if (i1 == 10 || i1 == 3)
      this.D = false; 
    return true;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (r.d(this) == 1) {
      i3 = 1;
    } else {
      i3 = 0;
    } 
    int i5 = getWidth();
    int i8 = getHeight();
    int i1 = getPaddingLeft();
    int i6 = getPaddingRight();
    int i7 = getPaddingTop();
    int i9 = getPaddingBottom();
    int i4 = i5 - i6;
    int[] arrayOfInt = this.G;
    arrayOfInt[1] = 0;
    arrayOfInt[0] = 0;
    paramInt1 = r.h(this);
    if (paramInt1 >= 0) {
      paramInt4 = Math.min(paramInt1, paramInt4 - paramInt2);
    } else {
      paramInt4 = 0;
    } 
    if (a(this.h)) {
      if (i3) {
        i2 = b(this.h, i4, arrayOfInt, paramInt4);
        paramInt3 = i1;
      } else {
        paramInt3 = a(this.h, i1, arrayOfInt, paramInt4);
        i2 = i4;
      } 
    } else {
      paramInt3 = i1;
      i2 = i4;
    } 
    paramInt1 = paramInt3;
    paramInt2 = i2;
    if (a(this.a))
      if (i3) {
        paramInt2 = b(this.a, i2, arrayOfInt, paramInt4);
        paramInt1 = paramInt3;
      } else {
        paramInt1 = a(this.a, paramInt3, arrayOfInt, paramInt4);
        paramInt2 = i2;
      }  
    int i2 = paramInt1;
    paramInt3 = paramInt2;
    if (a(this.e))
      if (i3) {
        i2 = a(this.e, paramInt1, arrayOfInt, paramInt4);
        paramInt3 = paramInt2;
      } else {
        paramInt3 = b(this.e, paramInt2, arrayOfInt, paramInt4);
        i2 = paramInt1;
      }  
    paramInt2 = getCurrentContentInsetLeft();
    paramInt1 = getCurrentContentInsetRight();
    arrayOfInt[0] = Math.max(0, paramInt2 - i2);
    arrayOfInt[1] = Math.max(0, paramInt1 - i4 - paramInt3);
    paramInt2 = Math.max(i2, paramInt2);
    paramInt3 = Math.min(paramInt3, i4 - paramInt1);
    paramInt1 = paramInt2;
    i2 = paramInt3;
    if (a(this.b))
      if (i3) {
        i2 = b(this.b, paramInt3, arrayOfInt, paramInt4);
        paramInt1 = paramInt2;
      } else {
        paramInt1 = a(this.b, paramInt2, arrayOfInt, paramInt4);
        i2 = paramInt3;
      }  
    paramInt3 = paramInt1;
    paramInt2 = i2;
    if (a(this.i))
      if (i3) {
        paramInt2 = b(this.i, i2, arrayOfInt, paramInt4);
        paramInt3 = paramInt1;
      } else {
        paramInt3 = a(this.i, paramInt1, arrayOfInt, paramInt4);
        paramInt2 = i2;
      }  
    paramBoolean = a(this.f);
    boolean bool = a(this.g);
    if (paramBoolean) {
      b b1 = (b)this.f.getLayoutParams();
      paramInt1 = b1.topMargin + this.f.getMeasuredHeight() + b1.bottomMargin + 0;
    } else {
      paramInt1 = 0;
    } 
    if (bool) {
      b b1 = (b)this.g.getLayoutParams();
      paramInt1 += b1.topMargin + this.g.getMeasuredHeight() + b1.bottomMargin;
    } 
    if (paramBoolean || bool) {
      TextView textView2;
      TextView textView1;
      if (paramBoolean) {
        textView1 = this.f;
      } else {
        textView1 = this.g;
      } 
      if (bool) {
        textView2 = this.g;
      } else {
        textView2 = this.f;
      } 
      b b1 = (b)textView1.getLayoutParams();
      b b2 = (b)textView2.getLayoutParams();
      if ((paramBoolean && this.f.getMeasuredWidth() > 0) || (bool && this.g.getMeasuredWidth() > 0)) {
        i2 = 1;
      } else {
        i2 = 0;
      } 
      i4 = this.x & 0x70;
      if (i4 != 48) {
        if (i4 != 80) {
          i4 = (i8 - i7 - i9 - paramInt1) / 2;
          if (i4 < b1.topMargin + this.s) {
            paramInt1 = b1.topMargin + this.s;
          } else {
            i8 = i8 - i9 - paramInt1 - i4 - i7;
            paramInt1 = i4;
            if (i8 < b1.bottomMargin + this.t)
              paramInt1 = Math.max(0, i4 - b2.bottomMargin + this.t - i8); 
          } 
          paramInt1 = i7 + paramInt1;
        } else {
          paramInt1 = i8 - i9 - b2.bottomMargin - this.t - paramInt1;
        } 
      } else {
        paramInt1 = getPaddingTop() + b1.topMargin + this.s;
      } 
      if (i3) {
        if (i2 != 0) {
          i3 = this.q;
        } else {
          i3 = 0;
        } 
        i3 -= arrayOfInt[1];
        paramInt2 -= Math.max(0, i3);
        arrayOfInt[1] = Math.max(0, -i3);
        if (paramBoolean) {
          b1 = (b)this.f.getLayoutParams();
          i4 = paramInt2 - this.f.getMeasuredWidth();
          i3 = this.f.getMeasuredHeight() + paramInt1;
          this.f.layout(i4, paramInt1, paramInt2, i3);
          paramInt1 = i4 - this.r;
          i4 = i3 + b1.bottomMargin;
        } else {
          i3 = paramInt2;
          i4 = paramInt1;
          paramInt1 = i3;
        } 
        if (bool) {
          b1 = (b)this.g.getLayoutParams();
          i3 = i4 + b1.topMargin;
          i4 = this.g.getMeasuredWidth();
          i7 = this.g.getMeasuredHeight();
          this.g.layout(paramInt2 - i4, i3, paramInt2, i7 + i3);
          i3 = paramInt2 - this.r;
          i4 = b1.bottomMargin;
        } else {
          i3 = paramInt2;
        } 
        if (i2 != 0)
          paramInt2 = Math.min(paramInt1, i3); 
        paramInt1 = paramInt3;
      } else {
        if (i2 != 0) {
          i3 = this.q;
        } else {
          i3 = 0;
        } 
        i3 -= arrayOfInt[0];
        paramInt3 += Math.max(0, i3);
        arrayOfInt[0] = Math.max(0, -i3);
        if (paramBoolean) {
          b1 = (b)this.f.getLayoutParams();
          i3 = this.f.getMeasuredWidth() + paramInt3;
          i4 = this.f.getMeasuredHeight() + paramInt1;
          this.f.layout(paramInt3, paramInt1, i3, i4);
          i3 += this.r;
          paramInt1 = i4 + b1.bottomMargin;
        } else {
          i3 = paramInt3;
        } 
        if (bool) {
          b1 = (b)this.g.getLayoutParams();
          paramInt1 += b1.topMargin;
          i4 = this.g.getMeasuredWidth() + paramInt3;
          i7 = this.g.getMeasuredHeight();
          this.g.layout(paramInt3, paramInt1, i4, i7 + paramInt1);
          i4 += this.r;
          paramInt1 = b1.bottomMargin;
        } else {
          i4 = paramInt3;
        } 
        paramInt1 = paramInt3;
        paramInt3 = paramInt2;
        if (i2 != 0) {
          paramInt1 = Math.max(i3, i4);
          paramInt3 = paramInt2;
        } 
        i2 = i1;
        i1 = 0;
        a(this.E, 3);
        i3 = this.E.size();
        paramInt2 = 0;
      } 
    } else {
      paramInt1 = paramInt3;
    } 
    paramInt3 = paramInt2;
    i2 = i1;
    i1 = 0;
    a(this.E, 3);
    int i3 = this.E.size();
    paramInt2 = 0;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    int[] arrayOfInt = this.G;
    if (bb.a(this)) {
      i6 = 1;
      i5 = 0;
    } else {
      i5 = 1;
      i6 = 0;
    } 
    if (a(this.h)) {
      a(this.h, paramInt1, 0, paramInt2, 0, this.p);
      i1 = this.h.getMeasuredWidth() + b(this.h);
      i4 = Math.max(0, this.h.getMeasuredHeight() + c(this.h));
      i3 = View.combineMeasuredStates(0, this.h.getMeasuredState());
    } else {
      i1 = 0;
      i4 = i1;
      i3 = i4;
    } 
    int i7 = i1;
    int i2 = i4;
    int i1 = i3;
    if (a(this.a)) {
      a(this.a, paramInt1, 0, paramInt2, 0, this.p);
      i7 = this.a.getMeasuredWidth() + b(this.a);
      i2 = Math.max(i4, this.a.getMeasuredHeight() + c(this.a));
      i1 = View.combineMeasuredStates(i3, this.a.getMeasuredState());
    } 
    int i3 = getCurrentContentInsetStart();
    int i4 = 0 + Math.max(i3, i7);
    arrayOfInt[i6] = Math.max(0, i3 - i7);
    if (a(this.e)) {
      a(this.e, paramInt1, i4, paramInt2, 0, this.p);
      i3 = this.e.getMeasuredWidth() + b(this.e);
      i2 = Math.max(i2, this.e.getMeasuredHeight() + c(this.e));
      i1 = View.combineMeasuredStates(i1, this.e.getMeasuredState());
    } else {
      i3 = 0;
    } 
    i7 = getCurrentContentInsetEnd();
    int i6 = i4 + Math.max(i7, i3);
    arrayOfInt[i5] = Math.max(0, i7 - i3);
    int i5 = i6;
    i4 = i2;
    i3 = i1;
    if (a(this.b)) {
      i5 = i6 + a(this.b, paramInt1, i6, paramInt2, 0, arrayOfInt);
      i4 = Math.max(i2, this.b.getMeasuredHeight() + c(this.b));
      i3 = View.combineMeasuredStates(i1, this.b.getMeasuredState());
    } 
    i2 = i5;
    i6 = i4;
    i1 = i3;
    if (a(this.i)) {
      i2 = i5 + a(this.i, paramInt1, i5, paramInt2, 0, arrayOfInt);
      i6 = Math.max(i4, this.i.getMeasuredHeight() + c(this.i));
      i1 = View.combineMeasuredStates(i3, this.i.getMeasuredState());
    } 
    int i8 = getChildCount();
    i5 = i6;
    i3 = 0;
    i4 = i2;
    i2 = i3;
    while (i2 < i8) {
      View view = getChildAt(i2);
      i7 = i4;
      i6 = i1;
      i3 = i5;
      if (((b)view.getLayoutParams()).b == 0)
        if (!a(view)) {
          i7 = i4;
          i6 = i1;
          i3 = i5;
        } else {
          i7 = i4 + a(view, paramInt1, i4, paramInt2, 0, arrayOfInt);
          i3 = Math.max(i5, view.getMeasuredHeight() + c(view));
          i6 = View.combineMeasuredStates(i1, view.getMeasuredState());
        }  
      i2++;
      i4 = i7;
      i1 = i6;
      i5 = i3;
    } 
    i6 = this.s + this.t;
    i7 = this.q + this.r;
    if (a(this.f)) {
      a(this.f, paramInt1, i4 + i7, paramInt2, i6, arrayOfInt);
      i2 = this.f.getMeasuredWidth();
      i8 = b(this.f);
      i3 = this.f.getMeasuredHeight();
      int i9 = c(this.f);
      i1 = View.combineMeasuredStates(i1, this.f.getMeasuredState());
      i3 += i9;
      i2 += i8;
    } else {
      i3 = 0;
      i2 = i3;
    } 
    if (a(this.g)) {
      i2 = Math.max(i2, a(this.g, paramInt1, i4 + i7, paramInt2, i3 + i6, arrayOfInt));
      i3 += this.g.getMeasuredHeight() + c(this.g);
      i1 = View.combineMeasuredStates(i1, this.g.getMeasuredState());
    } 
    i3 = Math.max(i5, i3);
    i7 = getPaddingLeft();
    i8 = getPaddingRight();
    i5 = getPaddingTop();
    i6 = getPaddingBottom();
    i2 = View.resolveSizeAndState(Math.max(i4 + i2 + i7 + i8, getSuggestedMinimumWidth()), paramInt1, 0xFF000000 & i1);
    paramInt1 = View.resolveSizeAndState(Math.max(i3 + i5 + i6, getSuggestedMinimumHeight()), paramInt2, i1 << 16);
    if (r())
      paramInt1 = 0; 
    setMeasuredDimension(i2, paramInt1);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof d)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    d d1 = (d)paramParcelable;
    super.onRestoreInstanceState(d1.a());
    ActionMenuView actionMenuView = this.e;
    if (actionMenuView != null) {
      h h1 = actionMenuView.d();
    } else {
      actionMenuView = null;
    } 
    if (d1.b != 0 && this.K != null && actionMenuView != null) {
      MenuItem menuItem = actionMenuView.findItem(d1.b);
      if (menuItem != null)
        menuItem.expandActionView(); 
    } 
    if (d1.c)
      q(); 
  }
  
  public void onRtlPropertiesChanged(int paramInt) {
    if (Build.VERSION.SDK_INT >= 17)
      super.onRtlPropertiesChanged(paramInt); 
    s();
    am am1 = this.u;
    boolean bool = true;
    if (paramInt != 1)
      bool = false; 
    am1.a(bool);
  }
  
  protected Parcelable onSaveInstanceState() {
    d d1 = new d(super.onSaveInstanceState());
    a a1 = this.K;
    if (a1 != null && a1.b != null)
      d1.b = this.K.b.getItemId(); 
    d1.c = b();
    return d1;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 0)
      this.C = false; 
    if (!this.C) {
      boolean bool = super.onTouchEvent(paramMotionEvent);
      if (i1 == 0 && !bool)
        this.C = true; 
    } 
    if (i1 == 1 || i1 == 3)
      this.C = false; 
    return true;
  }
  
  public void setCollapsible(boolean paramBoolean) {
    this.N = paramBoolean;
    requestLayout();
  }
  
  public void setContentInsetEndWithActions(int paramInt) {
    int i1 = paramInt;
    if (paramInt < 0)
      i1 = Integer.MIN_VALUE; 
    if (i1 != this.w) {
      this.w = i1;
      if (getNavigationIcon() != null)
        requestLayout(); 
    } 
  }
  
  public void setContentInsetStartWithNavigation(int paramInt) {
    int i1 = paramInt;
    if (paramInt < 0)
      i1 = Integer.MIN_VALUE; 
    if (i1 != this.v) {
      this.v = i1;
      if (getNavigationIcon() != null)
        requestLayout(); 
    } 
  }
  
  public void setLogo(int paramInt) { setLogo(a.b(getContext(), paramInt)); }
  
  public void setLogo(Drawable paramDrawable) {
    if (paramDrawable != null) {
      m();
      if (!d(this.i))
        a(this.i, true); 
    } else {
      ImageView imageView1 = this.i;
      if (imageView1 != null && d(imageView1)) {
        removeView(this.i);
        this.F.remove(this.i);
      } 
    } 
    ImageView imageView = this.i;
    if (imageView != null)
      imageView.setImageDrawable(paramDrawable); 
  }
  
  public void setLogoDescription(int paramInt) { setLogoDescription(getContext().getText(paramInt)); }
  
  public void setLogoDescription(CharSequence paramCharSequence) {
    if (!TextUtils.isEmpty(paramCharSequence))
      m(); 
    ImageView imageView = this.i;
    if (imageView != null)
      imageView.setContentDescription(paramCharSequence); 
  }
  
  public void setNavigationContentDescription(int paramInt) {
    CharSequence charSequence;
    if (paramInt != 0) {
      charSequence = getContext().getText(paramInt);
    } else {
      charSequence = null;
    } 
    setNavigationContentDescription(charSequence);
  }
  
  public void setNavigationContentDescription(CharSequence paramCharSequence) {
    if (!TextUtils.isEmpty(paramCharSequence))
      p(); 
    ImageButton imageButton = this.h;
    if (imageButton != null)
      imageButton.setContentDescription(paramCharSequence); 
  }
  
  public void setNavigationIcon(int paramInt) { setNavigationIcon(a.b(getContext(), paramInt)); }
  
  public void setNavigationIcon(Drawable paramDrawable) {
    if (paramDrawable != null) {
      p();
      if (!d(this.h))
        a(this.h, true); 
    } else {
      ImageButton imageButton1 = this.h;
      if (imageButton1 != null && d(imageButton1)) {
        removeView(this.h);
        this.F.remove(this.h);
      } 
    } 
    ImageButton imageButton = this.h;
    if (imageButton != null)
      imageButton.setImageDrawable(paramDrawable); 
  }
  
  public void setNavigationOnClickListener(View.OnClickListener paramOnClickListener) {
    p();
    this.h.setOnClickListener(paramOnClickListener);
  }
  
  public void setOnMenuItemClickListener(c paramc) { this.d = paramc; }
  
  public void setOverflowIcon(Drawable paramDrawable) {
    n();
    this.e.setOverflowIcon(paramDrawable);
  }
  
  public void setPopupTheme(int paramInt) {
    if (this.m != paramInt) {
      this.m = paramInt;
      if (paramInt == 0) {
        this.l = getContext();
        return;
      } 
      this.l = new ContextThemeWrapper(getContext(), paramInt);
    } 
  }
  
  public void setSubtitle(int paramInt) { setSubtitle(getContext().getText(paramInt)); }
  
  public void setSubtitle(CharSequence paramCharSequence) {
    if (!TextUtils.isEmpty(paramCharSequence)) {
      if (this.g == null) {
        Context context = getContext();
        this.g = new z(context);
        this.g.setSingleLine();
        this.g.setEllipsize(TextUtils.TruncateAt.END);
        int i1 = this.o;
        if (i1 != 0)
          this.g.setTextAppearance(context, i1); 
        i1 = this.B;
        if (i1 != 0)
          this.g.setTextColor(i1); 
      } 
      if (!d(this.g))
        a(this.g, true); 
    } else {
      TextView textView1 = this.g;
      if (textView1 != null && d(textView1)) {
        removeView(this.g);
        this.F.remove(this.g);
      } 
    } 
    TextView textView = this.g;
    if (textView != null)
      textView.setText(paramCharSequence); 
    this.z = paramCharSequence;
  }
  
  public void setSubtitleTextColor(int paramInt) {
    this.B = paramInt;
    TextView textView = this.g;
    if (textView != null)
      textView.setTextColor(paramInt); 
  }
  
  public void setTitle(int paramInt) { setTitle(getContext().getText(paramInt)); }
  
  public void setTitle(CharSequence paramCharSequence) {
    if (!TextUtils.isEmpty(paramCharSequence)) {
      if (this.f == null) {
        Context context = getContext();
        this.f = new z(context);
        this.f.setSingleLine();
        this.f.setEllipsize(TextUtils.TruncateAt.END);
        int i1 = this.n;
        if (i1 != 0)
          this.f.setTextAppearance(context, i1); 
        i1 = this.A;
        if (i1 != 0)
          this.f.setTextColor(i1); 
      } 
      if (!d(this.f))
        a(this.f, true); 
    } else {
      TextView textView1 = this.f;
      if (textView1 != null && d(textView1)) {
        removeView(this.f);
        this.F.remove(this.f);
      } 
    } 
    TextView textView = this.f;
    if (textView != null)
      textView.setText(paramCharSequence); 
    this.y = paramCharSequence;
  }
  
  public void setTitleMarginBottom(int paramInt) {
    this.t = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginEnd(int paramInt) {
    this.r = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginStart(int paramInt) {
    this.q = paramInt;
    requestLayout();
  }
  
  public void setTitleMarginTop(int paramInt) {
    this.s = paramInt;
    requestLayout();
  }
  
  public void setTitleTextColor(int paramInt) {
    this.A = paramInt;
    TextView textView = this.f;
    if (textView != null)
      textView.setTextColor(paramInt); 
  }
}
