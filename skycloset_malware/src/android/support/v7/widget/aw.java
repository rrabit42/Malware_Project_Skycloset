package android.support.v7.widget;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.support.v4.f.r;
import android.support.v4.f.w;
import android.support.v7.a.a;
import android.support.v7.b.a.a;
import android.support.v7.view.menu.h;
import android.support.v7.view.menu.o;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.Window;

public class aw implements ac {
  Toolbar a;
  
  CharSequence b;
  
  Window.Callback c;
  
  boolean d;
  
  private int e;
  
  private View f;
  
  private View g;
  
  private Drawable h;
  
  private Drawable i;
  
  private Drawable j;
  
  private boolean k;
  
  private CharSequence l;
  
  private CharSequence m;
  
  private c n;
  
  private int o = 0;
  
  private int p = 0;
  
  private Drawable q;
  
  public aw(Toolbar paramToolbar, boolean paramBoolean) { this(paramToolbar, paramBoolean, a.h.abc_action_bar_up_description, a.e.abc_ic_ab_back_material); }
  
  public aw(Toolbar paramToolbar, boolean paramBoolean, int paramInt1, int paramInt2) {
    this.a = paramToolbar;
    this.b = paramToolbar.getTitle();
    this.l = paramToolbar.getSubtitle();
    if (this.b != null) {
      bool = true;
    } else {
      bool = false;
    } 
    this.k = bool;
    this.j = paramToolbar.getNavigationIcon();
    av av = av.a(paramToolbar.getContext(), null, a.j.ActionBar, a.a.actionBarStyle, 0);
    this.q = av.a(a.j.ActionBar_homeAsUpIndicator);
    if (paramBoolean) {
      CharSequence charSequence = av.c(a.j.ActionBar_title);
      if (!TextUtils.isEmpty(charSequence))
        b(charSequence); 
      charSequence = av.c(a.j.ActionBar_subtitle);
      if (!TextUtils.isEmpty(charSequence))
        c(charSequence); 
      Drawable drawable = av.a(a.j.ActionBar_logo);
      if (drawable != null)
        b(drawable); 
      drawable = av.a(a.j.ActionBar_icon);
      if (drawable != null)
        a(drawable); 
      if (this.j == null) {
        drawable = this.q;
        if (drawable != null)
          c(drawable); 
      } 
      c(av.a(a.j.ActionBar_displayOptions, 0));
      paramInt2 = av.g(a.j.ActionBar_customNavigationLayout, 0);
      if (paramInt2 != 0) {
        a(LayoutInflater.from(this.a.getContext()).inflate(paramInt2, this.a, false));
        c(this.e | 0x10);
      } 
      paramInt2 = av.f(a.j.ActionBar_height, 0);
      if (paramInt2 > 0) {
        ViewGroup.LayoutParams layoutParams = this.a.getLayoutParams();
        layoutParams.height = paramInt2;
        this.a.setLayoutParams(layoutParams);
      } 
      paramInt2 = av.d(a.j.ActionBar_contentInsetStart, -1);
      int i1 = av.d(a.j.ActionBar_contentInsetEnd, -1);
      if (paramInt2 >= 0 || i1 >= 0)
        this.a.a(Math.max(paramInt2, 0), Math.max(i1, 0)); 
      paramInt2 = av.g(a.j.ActionBar_titleTextStyle, 0);
      if (paramInt2 != 0) {
        Toolbar toolbar = this.a;
        toolbar.a(toolbar.getContext(), paramInt2);
      } 
      paramInt2 = av.g(a.j.ActionBar_subtitleTextStyle, 0);
      if (paramInt2 != 0) {
        Toolbar toolbar = this.a;
        toolbar.b(toolbar.getContext(), paramInt2);
      } 
      paramInt2 = av.g(a.j.ActionBar_popupTheme, 0);
      if (paramInt2 != 0)
        this.a.setPopupTheme(paramInt2); 
    } else {
      this.e = r();
    } 
    av.a();
    e(paramInt1);
    this.m = this.a.getNavigationContentDescription();
    this.a.setNavigationOnClickListener(new Object(this));
  }
  
  private void e(CharSequence paramCharSequence) {
    this.b = paramCharSequence;
    if ((this.e & 0x8) != 0)
      this.a.setTitle(paramCharSequence); 
  }
  
  private int r() {
    if (this.a.getNavigationIcon() != null) {
      this.q = this.a.getNavigationIcon();
      return 15;
    } 
    return 11;
  }
  
  private void s() {
    Drawable drawable;
    int i1 = this.e;
    if ((i1 & 0x2) != 0) {
      if ((i1 & true) != 0) {
        Drawable drawable1 = this.i;
        if (drawable1 != null) {
          this.a.setLogo(drawable1);
          return;
        } 
      } 
      drawable = this.h;
    } else {
      drawable = null;
    } 
    this.a.setLogo(drawable);
  }
  
  private void t() {
    Toolbar toolbar;
    Drawable drawable;
    if ((this.e & 0x4) != 0) {
      toolbar = this.a;
      drawable = this.j;
      if (drawable == null)
        drawable = this.q; 
    } else {
      toolbar = this.a;
      drawable = null;
    } 
    toolbar.setNavigationIcon(drawable);
  }
  
  private void u() {
    if ((this.e & 0x4) != 0) {
      if (TextUtils.isEmpty(this.m)) {
        this.a.setNavigationContentDescription(this.p);
        return;
      } 
      this.a.setNavigationContentDescription(this.m);
    } 
  }
  
  public w a(int paramInt, long paramLong) {
    float f1;
    w w = r.i(this.a);
    if (paramInt == 0) {
      f1 = 1.0F;
    } else {
      f1 = 0.0F;
    } 
    return w.a(f1).a(paramLong).a(new Object(this, paramInt));
  }
  
  public ViewGroup a() { return this.a; }
  
  public void a(int paramInt) {
    Drawable drawable;
    if (paramInt != 0) {
      drawable = a.b(b(), paramInt);
    } else {
      drawable = null;
    } 
    a(drawable);
  }
  
  public void a(Drawable paramDrawable) {
    this.h = paramDrawable;
    s();
  }
  
  public void a(o.a parama, h.a parama1) { this.a.a(parama, parama1); }
  
  public void a(an paraman) {
    View view = this.f;
    if (view != null) {
      ViewParent viewParent = view.getParent();
      Toolbar toolbar = this.a;
      if (viewParent == toolbar)
        toolbar.removeView(this.f); 
    } 
    this.f = paraman;
    if (paraman != null && this.o == 2) {
      this.a.addView(this.f, 0);
      Toolbar.b b1 = (Toolbar.b)this.f.getLayoutParams();
      b1.width = -2;
      b1.height = -2;
      b1.a = 8388691;
      paraman.setAllowCollapse(true);
    } 
  }
  
  public void a(Menu paramMenu, o.a parama) {
    if (this.n == null) {
      this.n = new c(this.a.getContext());
      this.n.a(a.f.action_menu_presenter);
    } 
    this.n.a(parama);
    this.a.a((h)paramMenu, this.n);
  }
  
  public void a(View paramView) {
    View view = this.g;
    if (view != null && (this.e & 0x10) != 0)
      this.a.removeView(view); 
    this.g = paramView;
    if (paramView != null && (this.e & 0x10) != 0)
      this.a.addView(this.g); 
  }
  
  public void a(Window.Callback paramCallback) { this.c = paramCallback; }
  
  public void a(CharSequence paramCharSequence) {
    if (!this.k)
      e(paramCharSequence); 
  }
  
  public void a(boolean paramBoolean) { this.a.setCollapsible(paramBoolean); }
  
  public Context b() { return this.a.getContext(); }
  
  public void b(int paramInt) {
    Drawable drawable;
    if (paramInt != 0) {
      drawable = a.b(b(), paramInt);
    } else {
      drawable = null;
    } 
    b(drawable);
  }
  
  public void b(Drawable paramDrawable) {
    this.i = paramDrawable;
    s();
  }
  
  public void b(CharSequence paramCharSequence) {
    this.k = true;
    e(paramCharSequence);
  }
  
  public void b(boolean paramBoolean) {}
  
  public void c(int paramInt) {
    int i1 = this.e ^ paramInt;
    this.e = paramInt;
    if (i1 != 0) {
      if ((i1 & 0x4) != 0) {
        if ((paramInt & 0x4) != 0)
          u(); 
        t();
      } 
      if ((i1 & 0x3) != 0)
        s(); 
      if ((i1 & 0x8) != 0) {
        CharSequence charSequence;
        Toolbar toolbar;
        if ((paramInt & 0x8) != 0) {
          this.a.setTitle(this.b);
          toolbar = this.a;
          charSequence = this.l;
        } else {
          toolbar = this.a;
          charSequence = null;
          toolbar.setTitle(null);
          toolbar = this.a;
        } 
        toolbar.setSubtitle(charSequence);
      } 
      if ((i1 & 0x10) != 0) {
        View view = this.g;
        if (view != null) {
          if ((paramInt & 0x10) != 0) {
            this.a.addView(view);
            return;
          } 
          this.a.removeView(view);
        } 
      } 
    } 
  }
  
  public void c(Drawable paramDrawable) {
    this.j = paramDrawable;
    t();
  }
  
  public void c(CharSequence paramCharSequence) {
    this.l = paramCharSequence;
    if ((this.e & 0x8) != 0)
      this.a.setSubtitle(paramCharSequence); 
  }
  
  public boolean c() { return this.a.g(); }
  
  public void d() { this.a.h(); }
  
  public void d(int paramInt) { this.a.setVisibility(paramInt); }
  
  public void d(CharSequence paramCharSequence) {
    this.m = paramCharSequence;
    u();
  }
  
  public CharSequence e() { return this.a.getTitle(); }
  
  public void e(int paramInt) {
    if (paramInt == this.p)
      return; 
    this.p = paramInt;
    if (TextUtils.isEmpty(this.a.getNavigationContentDescription()))
      f(this.p); 
  }
  
  public void f() { Log.i("ToolbarWidgetWrapper", "Progress display unsupported"); }
  
  public void f(int paramInt) {
    String str;
    if (paramInt == 0) {
      str = null;
    } else {
      str = b().getString(paramInt);
    } 
    d(str);
  }
  
  public void g() { Log.i("ToolbarWidgetWrapper", "Progress display unsupported"); }
  
  public boolean h() { return this.a.a(); }
  
  public boolean i() { return this.a.b(); }
  
  public boolean j() { return this.a.c(); }
  
  public boolean k() { return this.a.d(); }
  
  public boolean l() { return this.a.e(); }
  
  public void m() { this.d = true; }
  
  public void n() { this.a.f(); }
  
  public int o() { return this.e; }
  
  public int p() { return this.o; }
  
  public Menu q() { return this.a.getMenu(); }
}
