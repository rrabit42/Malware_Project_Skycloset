package android.support.v7.widget;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.database.DataSetObservable;
import android.os.AsyncTask;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class d extends DataSetObservable {
  static final String a = "d";
  
  private static final Object e = new Object();
  
  private static final Map<String, d> f = new HashMap();
  
  final Context b;
  
  final String c;
  
  boolean d;
  
  private final Object g;
  
  private final List<a> h;
  
  private final List<c> i;
  
  private Intent j;
  
  private b k;
  
  private int l;
  
  private boolean m;
  
  private boolean n;
  
  private boolean o;
  
  private d p;
  
  private boolean a(c paramc) {
    boolean bool = this.i.add(paramc);
    if (bool) {
      this.n = true;
      h();
      c();
      e();
      notifyChanged();
    } 
    return bool;
  }
  
  private void c() {
    if (this.m) {
      if (!this.n)
        return; 
      this.n = false;
      if (!TextUtils.isEmpty(this.c))
        (new e(this)).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new Object[] { new ArrayList(this.i), this.c }); 
      return;
    } 
    throw new IllegalStateException("No preceding call to #readHistoricalData");
  }
  
  private void d() {
    boolean bool1 = f();
    boolean bool2 = g();
    h();
    if (bool1 | bool2) {
      e();
      notifyChanged();
    } 
  }
  
  private boolean e() {
    if (this.k != null && this.j != null && !this.h.isEmpty() && !this.i.isEmpty()) {
      this.k.a(this.j, this.h, Collections.unmodifiableList(this.i));
      return true;
    } 
    return false;
  }
  
  private boolean f() {
    boolean bool = this.o;
    byte b1 = 0;
    if (bool && this.j != null) {
      this.o = false;
      this.h.clear();
      List list = this.b.getPackageManager().queryIntentActivities(this.j, 0);
      int i1 = list.size();
      while (b1 < i1) {
        ResolveInfo resolveInfo = (ResolveInfo)list.get(b1);
        this.h.add(new a(resolveInfo));
        b1++;
      } 
      return true;
    } 
    return false;
  }
  
  private boolean g() {
    if (this.d && this.n && !TextUtils.isEmpty(this.c)) {
      this.d = false;
      this.m = true;
      i();
      return true;
    } 
    return false;
  }
  
  private void h() {
    int i1 = this.i.size() - this.l;
    if (i1 <= 0)
      return; 
    this.n = true;
    for (byte b1 = 0; b1 < i1; b1++)
      c c1 = (c)this.i.remove(0); 
  }
  
  private void i() { // Byte code:
    //   0: aload_0
    //   1: getfield b : Landroid/content/Context;
    //   4: aload_0
    //   5: getfield c : Ljava/lang/String;
    //   8: invokevirtual openFileInput : (Ljava/lang/String;)Ljava/io/FileInputStream;
    //   11: astore_2
    //   12: invokestatic newPullParser : ()Lorg/xmlpull/v1/XmlPullParser;
    //   15: astore_3
    //   16: aload_3
    //   17: aload_2
    //   18: ldc 'UTF-8'
    //   20: invokeinterface setInput : (Ljava/io/InputStream;Ljava/lang/String;)V
    //   25: iconst_0
    //   26: istore_1
    //   27: iload_1
    //   28: iconst_1
    //   29: if_icmpeq -> 47
    //   32: iload_1
    //   33: iconst_2
    //   34: if_icmpeq -> 47
    //   37: aload_3
    //   38: invokeinterface next : ()I
    //   43: istore_1
    //   44: goto -> 27
    //   47: ldc 'historical-records'
    //   49: aload_3
    //   50: invokeinterface getName : ()Ljava/lang/String;
    //   55: invokevirtual equals : (Ljava/lang/Object;)Z
    //   58: ifeq -> 183
    //   61: aload_0
    //   62: getfield i : Ljava/util/List;
    //   65: astore #4
    //   67: aload #4
    //   69: invokeinterface clear : ()V
    //   74: aload_3
    //   75: invokeinterface next : ()I
    //   80: istore_1
    //   81: iload_1
    //   82: iconst_1
    //   83: if_icmpne -> 95
    //   86: aload_2
    //   87: ifnull -> 303
    //   90: aload_2
    //   91: invokevirtual close : ()V
    //   94: return
    //   95: iload_1
    //   96: iconst_3
    //   97: if_icmpeq -> 74
    //   100: iload_1
    //   101: iconst_4
    //   102: if_icmpne -> 108
    //   105: goto -> 74
    //   108: ldc 'historical-record'
    //   110: aload_3
    //   111: invokeinterface getName : ()Ljava/lang/String;
    //   116: invokevirtual equals : (Ljava/lang/Object;)Z
    //   119: ifeq -> 173
    //   122: aload #4
    //   124: new android/support/v7/widget/d$c
    //   127: dup
    //   128: aload_3
    //   129: aconst_null
    //   130: ldc 'activity'
    //   132: invokeinterface getAttributeValue : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   137: aload_3
    //   138: aconst_null
    //   139: ldc 'time'
    //   141: invokeinterface getAttributeValue : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   146: invokestatic parseLong : (Ljava/lang/String;)J
    //   149: aload_3
    //   150: aconst_null
    //   151: ldc 'weight'
    //   153: invokeinterface getAttributeValue : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   158: invokestatic parseFloat : (Ljava/lang/String;)F
    //   161: invokespecial <init> : (Ljava/lang/String;JF)V
    //   164: invokeinterface add : (Ljava/lang/Object;)Z
    //   169: pop
    //   170: goto -> 74
    //   173: new org/xmlpull/v1/XmlPullParserException
    //   176: dup
    //   177: ldc 'Share records file not well-formed.'
    //   179: invokespecial <init> : (Ljava/lang/String;)V
    //   182: athrow
    //   183: new org/xmlpull/v1/XmlPullParserException
    //   186: dup
    //   187: ldc 'Share records file does not start with historical-records tag.'
    //   189: invokespecial <init> : (Ljava/lang/String;)V
    //   192: athrow
    //   193: astore_3
    //   194: goto -> 304
    //   197: astore_3
    //   198: getstatic android/support/v7/widget/d.a : Ljava/lang/String;
    //   201: astore #4
    //   203: new java/lang/StringBuilder
    //   206: dup
    //   207: invokespecial <init> : ()V
    //   210: astore #5
    //   212: aload #5
    //   214: ldc_w 'Error reading historical recrod file: '
    //   217: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   220: pop
    //   221: aload #5
    //   223: aload_0
    //   224: getfield c : Ljava/lang/String;
    //   227: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   230: pop
    //   231: aload #4
    //   233: aload #5
    //   235: invokevirtual toString : ()Ljava/lang/String;
    //   238: aload_3
    //   239: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   242: pop
    //   243: aload_2
    //   244: ifnull -> 303
    //   247: goto -> 90
    //   250: astore_3
    //   251: getstatic android/support/v7/widget/d.a : Ljava/lang/String;
    //   254: astore #4
    //   256: new java/lang/StringBuilder
    //   259: dup
    //   260: invokespecial <init> : ()V
    //   263: astore #5
    //   265: aload #5
    //   267: ldc_w 'Error reading historical recrod file: '
    //   270: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   273: pop
    //   274: aload #5
    //   276: aload_0
    //   277: getfield c : Ljava/lang/String;
    //   280: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   283: pop
    //   284: aload #4
    //   286: aload #5
    //   288: invokevirtual toString : ()Ljava/lang/String;
    //   291: aload_3
    //   292: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   295: pop
    //   296: aload_2
    //   297: ifnull -> 303
    //   300: goto -> 90
    //   303: return
    //   304: aload_2
    //   305: ifnull -> 312
    //   308: aload_2
    //   309: invokevirtual close : ()V
    //   312: aload_3
    //   313: athrow
    //   314: astore_2
    //   315: return
    //   316: astore_2
    //   317: return
    //   318: astore_2
    //   319: goto -> 312
    // Exception table:
    //   from	to	target	type
    //   0	12	314	java/io/FileNotFoundException
    //   12	25	250	org/xmlpull/v1/XmlPullParserException
    //   12	25	197	java/io/IOException
    //   12	25	193	finally
    //   37	44	250	org/xmlpull/v1/XmlPullParserException
    //   37	44	197	java/io/IOException
    //   37	44	193	finally
    //   47	74	250	org/xmlpull/v1/XmlPullParserException
    //   47	74	197	java/io/IOException
    //   47	74	193	finally
    //   74	81	250	org/xmlpull/v1/XmlPullParserException
    //   74	81	197	java/io/IOException
    //   74	81	193	finally
    //   90	94	316	java/io/IOException
    //   108	170	250	org/xmlpull/v1/XmlPullParserException
    //   108	170	197	java/io/IOException
    //   108	170	193	finally
    //   173	183	250	org/xmlpull/v1/XmlPullParserException
    //   173	183	197	java/io/IOException
    //   173	183	193	finally
    //   183	193	250	org/xmlpull/v1/XmlPullParserException
    //   183	193	197	java/io/IOException
    //   183	193	193	finally
    //   198	243	193	finally
    //   251	296	193	finally
    //   308	312	318	java/io/IOException }
  
  public int a() {
    synchronized (this.g) {
      d();
      return this.h.size();
    } 
  }
  
  public int a(ResolveInfo paramResolveInfo) {
    synchronized (this.g) {
      d();
      List list = this.h;
      int i1 = list.size();
      for (byte b1 = 0;; b1++) {
        if (b1 < i1) {
          if (((a)list.get(b1)).a == paramResolveInfo)
            return b1; 
        } else {
          return -1;
        } 
      } 
    } 
  }
  
  public ResolveInfo a(int paramInt) {
    synchronized (this.g) {
      d();
      return ((a)this.h.get(paramInt)).a;
    } 
  }
  
  public Intent b(int paramInt) {
    synchronized (this.g) {
      if (this.j == null)
        return null; 
      d();
      a a1 = (a)this.h.get(paramInt);
      ComponentName componentName = new ComponentName(a1.a.activityInfo.packageName, a1.a.activityInfo.name);
      Intent intent = new Intent(this.j);
      intent.setComponent(componentName);
      if (this.p != null) {
        Intent intent1 = new Intent(intent);
        if (this.p.a(this, intent1))
          return null; 
      } 
      a(new c(componentName, System.currentTimeMillis(), 1.0F));
      return intent;
    } 
  }
  
  public ResolveInfo b() {
    synchronized (this.g) {
      d();
      if (!this.h.isEmpty())
        return ((a)this.h.get(0)).a; 
      return null;
    } 
  }
  
  public void c(int paramInt) {
    synchronized (this.g) {
      float f1;
      d();
      a a1 = (a)this.h.get(paramInt);
      a a2 = (a)this.h.get(0);
      if (a2 != null) {
        f1 = a2.b - a1.b + 5.0F;
      } else {
        f1 = 1.0F;
      } 
      a(new c(new ComponentName(a1.a.activityInfo.packageName, a1.a.activityInfo.name), System.currentTimeMillis(), f1));
      return;
    } 
  }
}
