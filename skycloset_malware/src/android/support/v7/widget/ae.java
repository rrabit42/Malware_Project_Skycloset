package android.support.v7.widget;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.v4.f.w;
import android.support.v4.graphics.drawable.a;
import android.support.v4.widget.k;
import android.support.v7.a.a;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListAdapter;
import android.widget.ListView;
import java.lang.reflect.Field;

class ae extends ListView {
  b a;
  
  private final Rect b = new Rect();
  
  private int c = 0;
  
  private int d = 0;
  
  private int e = 0;
  
  private int f = 0;
  
  private int g;
  
  private Field h;
  
  private a i;
  
  private boolean j;
  
  private boolean k;
  
  private boolean l;
  
  private w m;
  
  private k n;
  
  ae(Context paramContext, boolean paramBoolean) {
    super(paramContext, null, a.a.dropDownListViewStyle);
    this.k = paramBoolean;
    setCacheColorHint(0);
    try {
      this.h = android.widget.AbsListView.class.getDeclaredField("mIsChildViewEnabled");
      this.h.setAccessible(true);
      return;
    } catch (NoSuchFieldException paramContext) {
      paramContext.printStackTrace();
      return;
    } 
  }
  
  private void a() {
    Drawable drawable = getSelector();
    if (drawable != null && c() && isPressed())
      drawable.setState(getDrawableState()); 
  }
  
  private void a(int paramInt, View paramView) {
    boolean bool;
    Drawable drawable = getSelector();
    boolean bool1 = true;
    if (drawable != null && paramInt != -1) {
      bool = true;
    } else {
      bool = false;
    } 
    if (bool)
      drawable.setVisible(false, false); 
    b(paramInt, paramView);
    if (bool) {
      Rect rect = this.b;
      float f1 = rect.exactCenterX();
      float f2 = rect.exactCenterY();
      if (getVisibility() != 0)
        bool1 = false; 
      drawable.setVisible(bool1, false);
      a.a(drawable, f1, f2);
    } 
  }
  
  private void a(int paramInt, View paramView, float paramFloat1, float paramFloat2) {
    a(paramInt, paramView);
    Drawable drawable = getSelector();
    if (drawable != null && paramInt != -1)
      a.a(drawable, paramFloat1, paramFloat2); 
  }
  
  private void a(Canvas paramCanvas) {
    if (!this.b.isEmpty()) {
      Drawable drawable = getSelector();
      if (drawable != null) {
        drawable.setBounds(this.b);
        drawable.draw(paramCanvas);
      } 
    } 
  }
  
  private void a(View paramView, int paramInt) { performItemClick(paramView, paramInt, getItemIdAtPosition(paramInt)); }
  
  private void a(View paramView, int paramInt, float paramFloat1, float paramFloat2) {
    this.l = true;
    if (Build.VERSION.SDK_INT >= 21)
      drawableHotspotChanged(paramFloat1, paramFloat2); 
    if (!isPressed())
      setPressed(true); 
    layoutChildren();
    int i1 = this.g;
    if (i1 != -1) {
      View view = getChildAt(i1 - getFirstVisiblePosition());
      if (view != null && view != paramView && view.isPressed())
        view.setPressed(false); 
    } 
    this.g = paramInt;
    float f1 = paramView.getLeft();
    float f2 = paramView.getTop();
    if (Build.VERSION.SDK_INT >= 21)
      paramView.drawableHotspotChanged(paramFloat1 - f1, paramFloat2 - f2); 
    if (!paramView.isPressed())
      paramView.setPressed(true); 
    a(paramInt, paramView, paramFloat1, paramFloat2);
    setSelectorEnabled(false);
    refreshDrawableState();
  }
  
  private void b() {
    this.l = false;
    setPressed(false);
    drawableStateChanged();
    View view = getChildAt(this.g - getFirstVisiblePosition());
    if (view != null)
      view.setPressed(false); 
    w w1 = this.m;
    if (w1 != null) {
      w1.b();
      this.m = null;
    } 
  }
  
  private void b(int paramInt, View paramView) {
    Rect rect = this.b;
    rect.set(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom());
    rect.left -= this.c;
    rect.top -= this.d;
    rect.right += this.e;
    rect.bottom += this.f;
    try {
      boolean bool = this.h.getBoolean(this);
      if (paramView.isEnabled() != bool) {
        Field field = this.h;
        if (!bool) {
          bool = true;
        } else {
          bool = false;
        } 
        field.set(this, Boolean.valueOf(bool));
        if (paramInt != -1) {
          refreshDrawableState();
          return;
        } 
      } 
    } catch (IllegalAccessException paramView) {
      paramView.printStackTrace();
    } 
  }
  
  private boolean c() { return this.l; }
  
  private void setSelectorEnabled(boolean paramBoolean) {
    a a1 = this.i;
    if (a1 != null)
      a1.a(paramBoolean); 
  }
  
  public int a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5) {
    paramInt2 = getListPaddingTop();
    paramInt3 = getListPaddingBottom();
    getListPaddingLeft();
    getListPaddingRight();
    int i1 = getDividerHeight();
    Drawable drawable = getDivider();
    ListAdapter listAdapter = getAdapter();
    if (listAdapter == null)
      return paramInt2 + paramInt3; 
    if (i1 <= 0 || drawable == null)
      i1 = 0; 
    int i5 = listAdapter.getCount();
    int i3 = paramInt2 + paramInt3;
    int i2 = 0;
    paramInt3 = i2;
    paramInt2 = paramInt3;
    drawable = null;
    int i4 = paramInt3;
    paramInt3 = i3;
    while (i2 < i5) {
      int i6 = listAdapter.getItemViewType(i2);
      i3 = i4;
      if (i6 != i4) {
        drawable = null;
        i3 = i6;
      } 
      View view2 = listAdapter.getView(i2, drawable, this);
      ViewGroup.LayoutParams layoutParams2 = view2.getLayoutParams();
      ViewGroup.LayoutParams layoutParams1 = layoutParams2;
      if (layoutParams2 == null) {
        layoutParams1 = generateDefaultLayoutParams();
        view2.setLayoutParams(layoutParams1);
      } 
      if (layoutParams1.height > 0) {
        i4 = View.MeasureSpec.makeMeasureSpec(layoutParams1.height, 1073741824);
      } else {
        i4 = View.MeasureSpec.makeMeasureSpec(0, 0);
      } 
      view2.measure(paramInt1, i4);
      view2.forceLayout();
      i4 = paramInt3;
      if (i2 > 0)
        i4 = paramInt3 + i1; 
      paramInt3 = i4 + view2.getMeasuredHeight();
      if (paramInt3 >= paramInt4) {
        paramInt1 = paramInt4;
        if (paramInt5 >= 0) {
          paramInt1 = paramInt4;
          if (i2 > paramInt5) {
            paramInt1 = paramInt4;
            if (paramInt2 > 0) {
              paramInt1 = paramInt4;
              if (paramInt3 != paramInt4)
                paramInt1 = paramInt2; 
            } 
          } 
        } 
        return paramInt1;
      } 
      i6 = paramInt2;
      if (paramInt5 >= 0) {
        i6 = paramInt2;
        if (i2 >= paramInt5)
          i6 = paramInt3; 
      } 
      i2++;
      i4 = i3;
      View view1 = view2;
      paramInt2 = i6;
    } 
    return paramInt3;
  }
  
  public boolean a(MotionEvent paramMotionEvent, int paramInt) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual getActionMasked : ()I
    //   4: istore_3
    //   5: iload_3
    //   6: tableswitch default -> 32, 1 -> 57, 2 -> 51, 3 -> 41
    //   32: iconst_0
    //   33: istore #7
    //   35: iconst_1
    //   36: istore #6
    //   38: goto -> 155
    //   41: iconst_0
    //   42: istore #7
    //   44: iload #7
    //   46: istore #6
    //   48: goto -> 155
    //   51: iconst_1
    //   52: istore #6
    //   54: goto -> 60
    //   57: iconst_0
    //   58: istore #6
    //   60: aload_1
    //   61: iload_2
    //   62: invokevirtual findPointerIndex : (I)I
    //   65: istore #4
    //   67: iload #4
    //   69: ifge -> 75
    //   72: goto -> 41
    //   75: aload_1
    //   76: iload #4
    //   78: invokevirtual getX : (I)F
    //   81: f2i
    //   82: istore_2
    //   83: aload_1
    //   84: iload #4
    //   86: invokevirtual getY : (I)F
    //   89: f2i
    //   90: istore #4
    //   92: aload_0
    //   93: iload_2
    //   94: iload #4
    //   96: invokevirtual pointToPosition : (II)I
    //   99: istore #5
    //   101: iload #5
    //   103: iconst_m1
    //   104: if_icmpne -> 113
    //   107: iconst_1
    //   108: istore #7
    //   110: goto -> 155
    //   113: aload_0
    //   114: iload #5
    //   116: aload_0
    //   117: invokevirtual getFirstVisiblePosition : ()I
    //   120: isub
    //   121: invokevirtual getChildAt : (I)Landroid/view/View;
    //   124: astore #8
    //   126: aload_0
    //   127: aload #8
    //   129: iload #5
    //   131: iload_2
    //   132: i2f
    //   133: iload #4
    //   135: i2f
    //   136: invokespecial a : (Landroid/view/View;IFF)V
    //   139: iload_3
    //   140: iconst_1
    //   141: if_icmpne -> 32
    //   144: aload_0
    //   145: aload #8
    //   147: iload #5
    //   149: invokespecial a : (Landroid/view/View;I)V
    //   152: goto -> 32
    //   155: iload #6
    //   157: ifeq -> 165
    //   160: iload #7
    //   162: ifeq -> 169
    //   165: aload_0
    //   166: invokespecial b : ()V
    //   169: iload #6
    //   171: ifeq -> 215
    //   174: aload_0
    //   175: getfield n : Landroid/support/v4/widget/k;
    //   178: ifnonnull -> 193
    //   181: aload_0
    //   182: new android/support/v4/widget/k
    //   185: dup
    //   186: aload_0
    //   187: invokespecial <init> : (Landroid/widget/ListView;)V
    //   190: putfield n : Landroid/support/v4/widget/k;
    //   193: aload_0
    //   194: getfield n : Landroid/support/v4/widget/k;
    //   197: iconst_1
    //   198: invokevirtual a : (Z)Landroid/support/v4/widget/a;
    //   201: pop
    //   202: aload_0
    //   203: getfield n : Landroid/support/v4/widget/k;
    //   206: aload_0
    //   207: aload_1
    //   208: invokevirtual onTouch : (Landroid/view/View;Landroid/view/MotionEvent;)Z
    //   211: pop
    //   212: iload #6
    //   214: ireturn
    //   215: aload_0
    //   216: getfield n : Landroid/support/v4/widget/k;
    //   219: astore_1
    //   220: aload_1
    //   221: ifnull -> 230
    //   224: aload_1
    //   225: iconst_0
    //   226: invokevirtual a : (Z)Landroid/support/v4/widget/a;
    //   229: pop
    //   230: iload #6
    //   232: ireturn }
  
  protected void dispatchDraw(Canvas paramCanvas) {
    a(paramCanvas);
    super.dispatchDraw(paramCanvas);
  }
  
  protected void drawableStateChanged() {
    if (this.a != null)
      return; 
    super.drawableStateChanged();
    setSelectorEnabled(true);
    a();
  }
  
  public boolean hasFocus() { return (this.k || super.hasFocus()); }
  
  public boolean hasWindowFocus() { return (this.k || super.hasWindowFocus()); }
  
  public boolean isFocused() { return (this.k || super.isFocused()); }
  
  public boolean isInTouchMode() { return ((this.k && this.j) || super.isInTouchMode()); }
  
  protected void onDetachedFromWindow() {
    this.a = null;
    super.onDetachedFromWindow();
  }
  
  public boolean onHoverEvent(MotionEvent paramMotionEvent) {
    if (Build.VERSION.SDK_INT < 26)
      return super.onHoverEvent(paramMotionEvent); 
    int i1 = paramMotionEvent.getActionMasked();
    if (i1 == 10 && this.a == null) {
      this.a = new b(this);
      this.a.b();
    } 
    boolean bool = super.onHoverEvent(paramMotionEvent);
    if (i1 == 9 || i1 == 7) {
      i1 = pointToPosition((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY());
      if (i1 != -1 && i1 != getSelectedItemPosition()) {
        View view = getChildAt(i1 - getFirstVisiblePosition());
        if (view.isEnabled())
          setSelectionFromTop(i1, view.getTop() - getTop()); 
        a();
      } 
      return bool;
    } 
    setSelection(-1);
    return bool;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    if (paramMotionEvent.getAction() == 0)
      this.g = pointToPosition((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY()); 
    b b1 = this.a;
    if (b1 != null)
      b1.a(); 
    return super.onTouchEvent(paramMotionEvent);
  }
  
  void setListSelectionHidden(boolean paramBoolean) { this.j = paramBoolean; }
  
  public void setSelector(Drawable paramDrawable) {
    if (paramDrawable != null) {
      rect = new a(paramDrawable);
    } else {
      rect = null;
    } 
    this.i = rect;
    super.setSelector(this.i);
    Rect rect = new Rect();
    if (paramDrawable != null)
      paramDrawable.getPadding(rect); 
    this.c = rect.left;
    this.d = rect.top;
    this.e = rect.right;
    this.f = rect.bottom;
  }
}
