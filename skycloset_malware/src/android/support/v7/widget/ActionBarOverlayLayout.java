package android.support.v7.widget;

import android.animation.AnimatorListenerAdapter;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.v4.f.l;
import android.support.v4.f.n;
import android.support.v4.f.r;
import android.support.v7.a.a;
import android.support.v7.view.menu.o;
import android.util.AttributeSet;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewPropertyAnimator;
import android.view.Window;
import android.widget.OverScroller;

public class ActionBarOverlayLayout extends ViewGroup implements l, ab {
  static final int[] e = { a.a.actionBarSize, 16842841 };
  
  private final Runnable A = new Object(this);
  
  private final n B;
  
  ActionBarContainer a;
  
  boolean b;
  
  ViewPropertyAnimator c;
  
  final AnimatorListenerAdapter d = new Object(this);
  
  private int f;
  
  private int g = 0;
  
  private ContentFrameLayout h;
  
  private ac i;
  
  private Drawable j;
  
  private boolean k;
  
  private boolean l;
  
  private boolean m;
  
  private boolean n;
  
  private int o;
  
  private int p;
  
  private final Rect q = new Rect();
  
  private final Rect r = new Rect();
  
  private final Rect s = new Rect();
  
  private final Rect t = new Rect();
  
  private final Rect u = new Rect();
  
  private final Rect v = new Rect();
  
  private final Rect w = new Rect();
  
  private a x;
  
  private OverScroller y;
  
  private final Runnable z = new Object(this);
  
  public ActionBarOverlayLayout(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    a(paramContext);
    this.B = new n(this);
  }
  
  private ac a(View paramView) {
    if (paramView instanceof ac)
      return (ac)paramView; 
    if (paramView instanceof Toolbar)
      return ((Toolbar)paramView).getWrapper(); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Can't make a decor toolbar out of ");
    stringBuilder.append(paramView.getClass().getSimpleName());
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  private void a(Context paramContext) {
    TypedArray typedArray = getContext().getTheme().obtainStyledAttributes(e);
    boolean bool1 = false;
    this.f = typedArray.getDimensionPixelSize(0, 0);
    this.j = typedArray.getDrawable(1);
    if (this.j == null) {
      bool = true;
    } else {
      bool = false;
    } 
    setWillNotDraw(bool);
    typedArray.recycle();
    boolean bool = bool1;
    if ((paramContext.getApplicationInfo()).targetSdkVersion < 19)
      bool = true; 
    this.k = bool;
    this.y = new OverScroller(paramContext);
  }
  
  private boolean a(float paramFloat1, float paramFloat2) {
    this.y.fling(0, 0, 0, (int)paramFloat2, 0, 0, -2147483648, 2147483647);
    return (this.y.getFinalY() > this.a.getHeight());
  }
  
  private boolean a(View paramView, Rect paramRect, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4) {
    boolean bool;
    b b1 = (b)paramView.getLayoutParams();
    if (paramBoolean1 && b1.leftMargin != paramRect.left) {
      b1.leftMargin = paramRect.left;
      bool = true;
    } else {
      bool = false;
    } 
    paramBoolean1 = bool;
    if (paramBoolean2) {
      paramBoolean1 = bool;
      if (b1.topMargin != paramRect.top) {
        b1.topMargin = paramRect.top;
        paramBoolean1 = true;
      } 
    } 
    paramBoolean2 = paramBoolean1;
    if (paramBoolean4) {
      paramBoolean2 = paramBoolean1;
      if (b1.rightMargin != paramRect.right) {
        b1.rightMargin = paramRect.right;
        paramBoolean2 = true;
      } 
    } 
    paramBoolean1 = paramBoolean2;
    if (paramBoolean3) {
      paramBoolean1 = paramBoolean2;
      if (b1.bottomMargin != paramRect.bottom) {
        b1.bottomMargin = paramRect.bottom;
        paramBoolean1 = true;
      } 
    } 
    return paramBoolean1;
  }
  
  private void l() {
    d();
    postDelayed(this.z, 600L);
  }
  
  private void m() {
    d();
    postDelayed(this.A, 600L);
  }
  
  private void n() {
    d();
    this.z.run();
  }
  
  private void o() {
    d();
    this.A.run();
  }
  
  public b a(AttributeSet paramAttributeSet) { return new b(getContext(), paramAttributeSet); }
  
  public void a(int paramInt) {
    c();
    if (paramInt != 2) {
      if (paramInt != 5) {
        if (paramInt != 109)
          return; 
        setOverlayMode(true);
        return;
      } 
      this.i.g();
      return;
    } 
    this.i.f();
  }
  
  public void a(Menu paramMenu, o.a parama) {
    c();
    this.i.a(paramMenu, parama);
  }
  
  public boolean a() { return this.l; }
  
  protected b b() { return new b(-1, -1); }
  
  void c() {
    if (this.h == null) {
      this.h = (ContentFrameLayout)findViewById(a.f.action_bar_activity_content);
      this.a = (ActionBarContainer)findViewById(a.f.action_bar_container);
      this.i = a(findViewById(a.f.action_bar));
    } 
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return paramLayoutParams instanceof b; }
  
  void d() {
    removeCallbacks(this.z);
    removeCallbacks(this.A);
    ViewPropertyAnimator viewPropertyAnimator = this.c;
    if (viewPropertyAnimator != null)
      viewPropertyAnimator.cancel(); 
  }
  
  public void draw(Canvas paramCanvas) {
    super.draw(paramCanvas);
    if (this.j != null && !this.k) {
      int i1;
      if (this.a.getVisibility() == 0) {
        i1 = (int)(this.a.getBottom() + this.a.getTranslationY() + 0.5F);
      } else {
        i1 = 0;
      } 
      this.j.setBounds(0, i1, getWidth(), this.j.getIntrinsicHeight() + i1);
      this.j.draw(paramCanvas);
    } 
  }
  
  public boolean e() {
    c();
    return this.i.h();
  }
  
  public boolean f() {
    c();
    return this.i.i();
  }
  
  protected boolean fitSystemWindows(Rect paramRect) {
    c();
    r.l(this);
    boolean bool = a(this.a, paramRect, true, true, false, true);
    this.t.set(paramRect);
    bb.a(this, this.t, this.q);
    if (!this.u.equals(this.t)) {
      this.u.set(this.t);
      bool = true;
    } 
    if (!this.r.equals(this.q)) {
      this.r.set(this.q);
      bool = true;
    } 
    if (bool)
      requestLayout(); 
    return true;
  }
  
  public boolean g() {
    c();
    return this.i.j();
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return new b(paramLayoutParams); }
  
  public int getActionBarHideOffset() {
    ActionBarContainer actionBarContainer = this.a;
    return (actionBarContainer != null) ? -((int)actionBarContainer.getTranslationY()) : 0;
  }
  
  public int getNestedScrollAxes() { return this.B.a(); }
  
  public CharSequence getTitle() {
    c();
    return this.i.e();
  }
  
  public boolean h() {
    c();
    return this.i.k();
  }
  
  public boolean i() {
    c();
    return this.i.l();
  }
  
  public void j() {
    c();
    this.i.m();
  }
  
  public void k() {
    c();
    this.i.n();
  }
  
  protected void onConfigurationChanged(Configuration paramConfiguration) {
    super.onConfigurationChanged(paramConfiguration);
    a(getContext());
    r.m(this);
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    d();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    paramInt2 = getChildCount();
    paramInt3 = getPaddingLeft();
    getPaddingRight();
    paramInt4 = getPaddingTop();
    getPaddingBottom();
    for (paramInt1 = 0; paramInt1 < paramInt2; paramInt1++) {
      View view = getChildAt(paramInt1);
      if (view.getVisibility() != 8) {
        b b1 = (b)view.getLayoutParams();
        int i1 = view.getMeasuredWidth();
        int i2 = view.getMeasuredHeight();
        int i3 = b1.leftMargin + paramInt3;
        int i4 = b1.topMargin + paramInt4;
        view.layout(i3, i4, i1 + i3, i2 + i4);
      } 
    } 
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    c();
    measureChildWithMargins(this.a, paramInt1, 0, paramInt2, 0);
    Rect rect = (b)this.a.getLayoutParams();
    int i6 = Math.max(0, this.a.getMeasuredWidth() + rect.leftMargin + rect.rightMargin);
    int i5 = Math.max(0, this.a.getMeasuredHeight() + rect.topMargin + rect.bottomMargin);
    int i4 = View.combineMeasuredStates(0, this.a.getMeasuredState());
    if ((r.l(this) & 0x100) != 0) {
      i2 = 1;
    } else {
      i2 = 0;
    } 
    if (i2) {
      int i7 = this.f;
      i1 = i7;
      if (this.m) {
        i1 = i7;
        if (this.a.getTabContainer() != null)
          i1 = i7 + this.f; 
      } 
    } else if (this.a.getVisibility() != 8) {
      i1 = this.a.getMeasuredHeight();
    } else {
      i1 = 0;
    } 
    this.s.set(this.q);
    this.v.set(this.t);
    if (!this.l && !i2) {
      Rect rect1 = this.s;
      rect1.top += i1;
      rect1 = this.s;
    } else {
      rect = this.v;
      rect.top += i1;
      rect = this.v;
    } 
    rect.bottom += 0;
    a(this.h, this.s, true, true, true, true);
    if (!this.w.equals(this.v)) {
      this.w.set(this.v);
      this.h.a(this.v);
    } 
    measureChildWithMargins(this.h, paramInt1, 0, paramInt2, 0);
    b b1 = (b)this.h.getLayoutParams();
    int i1 = Math.max(i6, this.h.getMeasuredWidth() + b1.leftMargin + b1.rightMargin);
    int i2 = Math.max(i5, this.h.getMeasuredHeight() + b1.topMargin + b1.bottomMargin);
    int i3 = View.combineMeasuredStates(i4, this.h.getMeasuredState());
    i4 = getPaddingLeft();
    i5 = getPaddingRight();
    i2 = Math.max(i2 + getPaddingTop() + getPaddingBottom(), getSuggestedMinimumHeight());
    setMeasuredDimension(View.resolveSizeAndState(Math.max(i1 + i4 + i5, getSuggestedMinimumWidth()), paramInt1, i3), View.resolveSizeAndState(i2, paramInt2, i3 << 16));
  }
  
  public boolean onNestedFling(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean) {
    if (!this.n || !paramBoolean)
      return false; 
    if (a(paramFloat1, paramFloat2)) {
      o();
    } else {
      n();
    } 
    this.b = true;
    return true;
  }
  
  public boolean onNestedPreFling(View paramView, float paramFloat1, float paramFloat2) { return false; }
  
  public void onNestedPreScroll(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt) {}
  
  public void onNestedScroll(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    this.o += paramInt2;
    setActionBarHideOffset(this.o);
  }
  
  public void onNestedScrollAccepted(View paramView1, View paramView2, int paramInt) {
    this.B.a(paramView1, paramView2, paramInt);
    this.o = getActionBarHideOffset();
    d();
    a a1 = this.x;
    if (a1 != null)
      a1.l(); 
  }
  
  public boolean onStartNestedScroll(View paramView1, View paramView2, int paramInt) { return ((paramInt & 0x2) == 0 || this.a.getVisibility() != 0) ? false : this.n; }
  
  public void onStopNestedScroll(View paramView) {
    if (this.n && !this.b)
      if (this.o <= this.a.getHeight()) {
        l();
      } else {
        m();
      }  
    a a1 = this.x;
    if (a1 != null)
      a1.m(); 
  }
  
  public void onWindowSystemUiVisibilityChanged(int paramInt) {
    boolean bool1;
    if (Build.VERSION.SDK_INT >= 16)
      super.onWindowSystemUiVisibilityChanged(paramInt); 
    c();
    int i1 = this.p;
    this.p = paramInt;
    boolean bool2 = false;
    if ((paramInt & 0x4) == 0) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    if ((paramInt & 0x100) != 0)
      bool2 = true; 
    a a1 = this.x;
    if (a1 != null) {
      a1.g(bool2 ^ true);
      if (bool1 || !bool2) {
        this.x.j();
      } else {
        this.x.k();
      } 
    } 
    if (((i1 ^ paramInt) & 0x100) != 0 && this.x != null)
      r.m(this); 
  }
  
  protected void onWindowVisibilityChanged(int paramInt) {
    super.onWindowVisibilityChanged(paramInt);
    this.g = paramInt;
    a a1 = this.x;
    if (a1 != null)
      a1.a(paramInt); 
  }
  
  public void setActionBarHideOffset(int paramInt) {
    d();
    paramInt = Math.max(0, Math.min(paramInt, this.a.getHeight()));
    this.a.setTranslationY(-paramInt);
  }
  
  public void setActionBarVisibilityCallback(a parama) {
    this.x = parama;
    if (getWindowToken() != null) {
      this.x.a(this.g);
      int i1 = this.p;
      if (i1 != 0) {
        onWindowSystemUiVisibilityChanged(i1);
        r.m(this);
      } 
    } 
  }
  
  public void setHasNonEmbeddedTabs(boolean paramBoolean) { this.m = paramBoolean; }
  
  public void setHideOnContentScrollEnabled(boolean paramBoolean) {
    if (paramBoolean != this.n) {
      this.n = paramBoolean;
      if (!paramBoolean) {
        d();
        setActionBarHideOffset(0);
      } 
    } 
  }
  
  public void setIcon(int paramInt) {
    c();
    this.i.a(paramInt);
  }
  
  public void setIcon(Drawable paramDrawable) {
    c();
    this.i.a(paramDrawable);
  }
  
  public void setLogo(int paramInt) {
    c();
    this.i.b(paramInt);
  }
  
  public void setOverlayMode(boolean paramBoolean) {
    this.l = paramBoolean;
    if (paramBoolean && (getContext().getApplicationInfo()).targetSdkVersion < 19) {
      paramBoolean = true;
    } else {
      paramBoolean = false;
    } 
    this.k = paramBoolean;
  }
  
  public void setShowingForActionMode(boolean paramBoolean) {}
  
  public void setUiOptions(int paramInt) {}
  
  public void setWindowCallback(Window.Callback paramCallback) {
    c();
    this.i.a(paramCallback);
  }
  
  public void setWindowTitle(CharSequence paramCharSequence) {
    c();
    this.i.a(paramCharSequence);
  }
  
  public boolean shouldDelayChildPressedState() { return false; }
}
