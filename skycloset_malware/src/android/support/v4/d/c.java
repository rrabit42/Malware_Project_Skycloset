package android.support.v4.d;

import android.os.Handler;
import android.os.HandlerThread;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class c {
  private final Object a = new Object();
  
  private HandlerThread b;
  
  private Handler c;
  
  private int d;
  
  private Handler.Callback e = new Object(this);
  
  private final int f;
  
  private final int g;
  
  private final String h;
  
  public c(String paramString, int paramInt1, int paramInt2) {
    this.h = paramString;
    this.g = paramInt1;
    this.f = paramInt2;
    this.d = 0;
  }
  
  private void b(Runnable paramRunnable) {
    synchronized (this.a) {
      if (this.b == null) {
        this.b = new HandlerThread(this.h, this.g);
        this.b.start();
        this.c = new Handler(this.b.getLooper(), this.e);
        this.d++;
      } 
      this.c.removeMessages(0);
      this.c.sendMessage(this.c.obtainMessage(1, paramRunnable));
      return;
    } 
  }
  
  public <T> T a(Callable<T> paramCallable, int paramInt) {
    reentrantLock = new ReentrantLock();
    Condition condition = reentrantLock.newCondition();
    AtomicReference atomicReference = new AtomicReference();
    AtomicBoolean atomicBoolean = new AtomicBoolean(true);
    b(new Object(this, atomicReference, paramCallable, reentrantLock, atomicBoolean, condition));
    reentrantLock.lock();
    try {
      if (!atomicBoolean.get()) {
        object = atomicReference.get();
        return (T)object;
      } 
      long l = TimeUnit.MILLISECONDS.toNanos(paramInt);
      while (true) {
        try {
          long l1 = condition.awaitNanos(l);
          l = l1;
        } catch (InterruptedException paramCallable) {}
        if (!atomicBoolean.get()) {
          object = atomicReference.get();
          return (T)object;
        } 
        if (l > 0L)
          continue; 
        throw new InterruptedException("timeout");
      } 
    } finally {
      reentrantLock.unlock();
    } 
  }
  
  void a() {
    synchronized (this.a) {
      if (this.c.hasMessages(1))
        return; 
      this.b.quit();
      this.b = null;
      this.c = null;
      return;
    } 
  }
  
  void a(Runnable paramRunnable) {
    paramRunnable.run();
    synchronized (this.a) {
      this.c.removeMessages(0);
      this.c.sendMessageDelayed(this.c.obtainMessage(0), this.f);
      return;
    } 
  }
  
  public <T> void a(Callable<T> paramCallable, a<T> parama) { b(new Object(this, paramCallable, new Handler(), parama)); }
}
