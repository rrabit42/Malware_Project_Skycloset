package android.support.v4.f;

import android.animation.ValueAnimator;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewParent;
import android.view.WindowInsets;
import java.lang.reflect.Field;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class r {
  private static final AtomicInteger a = new AtomicInteger(1);
  
  private static Field b;
  
  private static boolean c;
  
  private static WeakHashMap<View, String> d;
  
  private static WeakHashMap<View, w> e = null;
  
  private static Field f;
  
  private static boolean g = false;
  
  private static ThreadLocal<Rect> h;
  
  private static Rect a() {
    if (h == null)
      h = new ThreadLocal(); 
    Rect rect2 = (Rect)h.get();
    Rect rect1 = rect2;
    if (rect2 == null) {
      rect1 = new Rect();
      h.set(rect1);
    } 
    rect1.setEmpty();
    return rect1;
  }
  
  public static aa a(View paramView, aa paramaa) {
    WindowInsets windowInsets;
    if (Build.VERSION.SDK_INT >= 21) {
      windowInsets = (WindowInsets)aa.a(paramaa);
      WindowInsets windowInsets2 = paramView.onApplyWindowInsets(windowInsets);
      WindowInsets windowInsets1 = windowInsets;
      if (windowInsets2 != windowInsets)
        windowInsets1 = new WindowInsets(windowInsets2); 
      return aa.a(windowInsets1);
    } 
    return windowInsets;
  }
  
  public static void a(View paramView, float paramFloat) {
    if (Build.VERSION.SDK_INT >= 21)
      paramView.setElevation(paramFloat); 
  }
  
  public static void a(View paramView, int paramInt) {
    int i;
    if (Build.VERSION.SDK_INT >= 19) {
      i = paramInt;
    } else if (Build.VERSION.SDK_INT >= 16) {
      i = paramInt;
      if (paramInt == 4)
        i = 2; 
    } else {
      return;
    } 
    paramView.setImportantForAccessibility(i);
  }
  
  public static void a(View paramView, int paramInt1, int paramInt2) {
    if (Build.VERSION.SDK_INT >= 23)
      paramView.setScrollIndicators(paramInt1, paramInt2); 
  }
  
  public static void a(View paramView, ColorStateList paramColorStateList) {
    Drawable drawable;
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setBackgroundTintList(paramColorStateList);
      if (Build.VERSION.SDK_INT == 21) {
        boolean bool;
        drawable = paramView.getBackground();
        if (paramView.getBackgroundTintList() != null || paramView.getBackgroundTintMode() != null) {
          bool = true;
        } else {
          bool = false;
        } 
        if (drawable != null && bool) {
          if (drawable.isStateful())
            drawable.setState(paramView.getDrawableState()); 
          paramView.setBackground(drawable);
          return;
        } 
      } 
    } else if (paramView instanceof q) {
      ((q)paramView).setSupportBackgroundTintList(drawable);
    } 
  }
  
  public static void a(View paramView, PorterDuff.Mode paramMode) {
    Drawable drawable;
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setBackgroundTintMode(paramMode);
      if (Build.VERSION.SDK_INT == 21) {
        boolean bool;
        drawable = paramView.getBackground();
        if (paramView.getBackgroundTintList() != null || paramView.getBackgroundTintMode() != null) {
          bool = true;
        } else {
          bool = false;
        } 
        if (drawable != null && bool) {
          if (drawable.isStateful())
            drawable.setState(paramView.getDrawableState()); 
          paramView.setBackground(drawable);
          return;
        } 
      } 
    } else if (paramView instanceof q) {
      ((q)paramView).setSupportBackgroundTintMode(drawable);
    } 
  }
  
  public static void a(View paramView, Drawable paramDrawable) {
    if (Build.VERSION.SDK_INT >= 16) {
      paramView.setBackground(paramDrawable);
      return;
    } 
    paramView.setBackgroundDrawable(paramDrawable);
  }
  
  public static void a(View paramView, b paramb) {
    View.AccessibilityDelegate accessibilityDelegate;
    if (paramb == null) {
      paramb = null;
    } else {
      accessibilityDelegate = paramb.a();
    } 
    paramView.setAccessibilityDelegate(accessibilityDelegate);
  }
  
  public static void a(View paramView, o paramo) {
    if (Build.VERSION.SDK_INT >= 21) {
      if (paramo == null) {
        paramView.setOnApplyWindowInsetsListener(null);
        return;
      } 
      paramView.setOnApplyWindowInsetsListener(new Object(paramo));
    } 
  }
  
  public static void a(View paramView, Runnable paramRunnable) {
    if (Build.VERSION.SDK_INT >= 16) {
      paramView.postOnAnimation(paramRunnable);
      return;
    } 
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay());
  }
  
  public static void a(View paramView, Runnable paramRunnable, long paramLong) {
    if (Build.VERSION.SDK_INT >= 16) {
      paramView.postOnAnimationDelayed(paramRunnable, paramLong);
      return;
    } 
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay() + paramLong);
  }
  
  public static void a(View paramView, String paramString) {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setTransitionName(paramString);
      return;
    } 
    if (d == null)
      d = new WeakHashMap(); 
    d.put(paramView, paramString);
  }
  
  public static void a(View paramView, boolean paramBoolean) {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.setNestedScrollingEnabled(paramBoolean);
      return;
    } 
    if (paramView instanceof i)
      ((i)paramView).setNestedScrollingEnabled(paramBoolean); 
  }
  
  public static boolean a(View paramView) { // Byte code:
    //   0: getstatic android/support/v4/f/r.g : Z
    //   3: istore_2
    //   4: iconst_0
    //   5: istore_1
    //   6: iload_2
    //   7: ifeq -> 12
    //   10: iconst_0
    //   11: ireturn
    //   12: getstatic android/support/v4/f/r.f : Ljava/lang/reflect/Field;
    //   15: ifnonnull -> 44
    //   18: ldc android/view/View
    //   20: ldc 'mAccessibilityDelegate'
    //   22: invokevirtual getDeclaredField : (Ljava/lang/String;)Ljava/lang/reflect/Field;
    //   25: putstatic android/support/v4/f/r.f : Ljava/lang/reflect/Field;
    //   28: getstatic android/support/v4/f/r.f : Ljava/lang/reflect/Field;
    //   31: iconst_1
    //   32: invokevirtual setAccessible : (Z)V
    //   35: goto -> 44
    //   38: iconst_1
    //   39: putstatic android/support/v4/f/r.g : Z
    //   42: iconst_0
    //   43: ireturn
    //   44: getstatic android/support/v4/f/r.f : Ljava/lang/reflect/Field;
    //   47: aload_0
    //   48: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   51: astore_0
    //   52: aload_0
    //   53: ifnull -> 58
    //   56: iconst_1
    //   57: istore_1
    //   58: iload_1
    //   59: ireturn
    //   60: iconst_1
    //   61: putstatic android/support/v4/f/r.g : Z
    //   64: iconst_0
    //   65: ireturn
    //   66: astore_0
    //   67: goto -> 38
    //   70: astore_0
    //   71: goto -> 60
    // Exception table:
    //   from	to	target	type
    //   18	35	66	java/lang/Throwable
    //   44	52	70	java/lang/Throwable }
  
  static boolean a(View paramView, KeyEvent paramKeyEvent) { return (Build.VERSION.SDK_INT >= 28) ? false : b.a(paramView).a(paramKeyEvent); }
  
  public static aa b(View paramView, aa paramaa) {
    WindowInsets windowInsets;
    if (Build.VERSION.SDK_INT >= 21) {
      windowInsets = (WindowInsets)aa.a(paramaa);
      WindowInsets windowInsets2 = paramView.dispatchApplyWindowInsets(windowInsets);
      WindowInsets windowInsets1 = windowInsets;
      if (windowInsets2 != windowInsets)
        windowInsets1 = new WindowInsets(windowInsets2); 
      return aa.a(windowInsets1);
    } 
    return windowInsets;
  }
  
  public static void b(View paramView) {
    if (Build.VERSION.SDK_INT >= 16) {
      paramView.postInvalidateOnAnimation();
      return;
    } 
    paramView.postInvalidate();
  }
  
  public static void b(View paramView, int paramInt) {
    if (Build.VERSION.SDK_INT >= 17)
      paramView.setLayoutDirection(paramInt); 
  }
  
  static boolean b(View paramView, KeyEvent paramKeyEvent) { return (Build.VERSION.SDK_INT >= 28) ? false : b.a(paramView).a(paramView, paramKeyEvent); }
  
  public static int c(View paramView) { return (Build.VERSION.SDK_INT >= 16) ? paramView.getImportantForAccessibility() : 0; }
  
  public static void c(View paramView, int paramInt) {
    if (Build.VERSION.SDK_INT >= 19)
      paramView.setAccessibilityLiveRegion(paramInt); 
  }
  
  public static int d(View paramView) { return (Build.VERSION.SDK_INT >= 17) ? paramView.getLayoutDirection() : 0; }
  
  public static void d(View paramView, int paramInt) {
    if (Build.VERSION.SDK_INT >= 23) {
      paramView.offsetTopAndBottom(paramInt);
      return;
    } 
    if (Build.VERSION.SDK_INT >= 21) {
      Rect rect = a();
      boolean bool = false;
      ViewParent viewParent = paramView.getParent();
      if (viewParent instanceof View) {
        View view = (View)viewParent;
        rect.set(view.getLeft(), view.getTop(), view.getRight(), view.getBottom());
        bool = rect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      } 
      f(paramView, paramInt);
      if (bool && rect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom())) {
        ((View)viewParent).invalidate(rect);
        return;
      } 
    } else {
      f(paramView, paramInt);
    } 
  }
  
  public static ViewParent e(View paramView) { return (Build.VERSION.SDK_INT >= 16) ? paramView.getParentForAccessibility() : paramView.getParent(); }
  
  public static void e(View paramView, int paramInt) {
    if (Build.VERSION.SDK_INT >= 23) {
      paramView.offsetLeftAndRight(paramInt);
      return;
    } 
    if (Build.VERSION.SDK_INT >= 21) {
      Rect rect = a();
      boolean bool = false;
      ViewParent viewParent = paramView.getParent();
      if (viewParent instanceof View) {
        View view = (View)viewParent;
        rect.set(view.getLeft(), view.getTop(), view.getRight(), view.getBottom());
        bool = rect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      } 
      g(paramView, paramInt);
      if (bool && rect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom())) {
        ((View)viewParent).invalidate(rect);
        return;
      } 
    } else {
      g(paramView, paramInt);
    } 
  }
  
  public static int f(View paramView) { return (Build.VERSION.SDK_INT >= 17) ? paramView.getPaddingStart() : paramView.getPaddingLeft(); }
  
  private static void f(View paramView, int paramInt) {
    paramView.offsetTopAndBottom(paramInt);
    if (paramView.getVisibility() == 0) {
      w(paramView);
      ViewParent viewParent = paramView.getParent();
      if (viewParent instanceof View)
        w((View)viewParent); 
    } 
  }
  
  public static int g(View paramView) { return (Build.VERSION.SDK_INT >= 17) ? paramView.getPaddingEnd() : paramView.getPaddingRight(); }
  
  private static void g(View paramView, int paramInt) {
    paramView.offsetLeftAndRight(paramInt);
    if (paramView.getVisibility() == 0) {
      w(paramView);
      ViewParent viewParent = paramView.getParent();
      if (viewParent instanceof View)
        w((View)viewParent); 
    } 
  }
  
  public static int h(View paramView) {
    if (Build.VERSION.SDK_INT >= 16)
      return paramView.getMinimumHeight(); 
    if (!c) {
      try {
        b = View.class.getDeclaredField("mMinHeight");
        b.setAccessible(true);
      } catch (NoSuchFieldException noSuchFieldException) {}
      c = true;
    } 
    Field field = b;
    if (field != null)
      try {
        return ((Integer)field.get(paramView)).intValue();
      } catch (Exception paramView) {} 
    return 0;
  }
  
  public static w i(View paramView) {
    if (e == null)
      e = new WeakHashMap(); 
    w w2 = (w)e.get(paramView);
    w w1 = w2;
    if (w2 == null) {
      w1 = new w(paramView);
      e.put(paramView, w1);
    } 
    return w1;
  }
  
  public static float j(View paramView) { return (Build.VERSION.SDK_INT >= 21) ? paramView.getElevation() : 0.0F; }
  
  public static String k(View paramView) {
    if (Build.VERSION.SDK_INT >= 21)
      return paramView.getTransitionName(); 
    WeakHashMap weakHashMap = d;
    return (weakHashMap == null) ? null : (String)weakHashMap.get(paramView);
  }
  
  public static int l(View paramView) { return (Build.VERSION.SDK_INT >= 16) ? paramView.getWindowSystemUiVisibility() : 0; }
  
  public static void m(View paramView) {
    if (Build.VERSION.SDK_INT >= 20) {
      paramView.requestApplyInsets();
      return;
    } 
    if (Build.VERSION.SDK_INT >= 16)
      paramView.requestFitSystemWindows(); 
  }
  
  public static boolean n(View paramView) { return (Build.VERSION.SDK_INT >= 16) ? paramView.getFitsSystemWindows() : 0; }
  
  public static boolean o(View paramView) { return (Build.VERSION.SDK_INT >= 16) ? paramView.hasOverlappingRendering() : 1; }
  
  public static ColorStateList p(View paramView) { return (Build.VERSION.SDK_INT >= 21) ? paramView.getBackgroundTintList() : ((paramView instanceof q) ? ((q)paramView).getSupportBackgroundTintList() : null); }
  
  public static PorterDuff.Mode q(View paramView) { return (Build.VERSION.SDK_INT >= 21) ? paramView.getBackgroundTintMode() : ((paramView instanceof q) ? ((q)paramView).getSupportBackgroundTintMode() : null); }
  
  public static boolean r(View paramView) { return (Build.VERSION.SDK_INT >= 21) ? paramView.isNestedScrollingEnabled() : ((paramView instanceof i) ? ((i)paramView).isNestedScrollingEnabled() : 0); }
  
  public static void s(View paramView) {
    if (Build.VERSION.SDK_INT >= 21) {
      paramView.stopNestedScroll();
      return;
    } 
    if (paramView instanceof i)
      ((i)paramView).stopNestedScroll(); 
  }
  
  public static boolean t(View paramView) { return (Build.VERSION.SDK_INT >= 19) ? paramView.isLaidOut() : ((paramView.getWidth() > 0 && paramView.getHeight() > 0) ? 1 : 0); }
  
  public static boolean u(View paramView) { return (Build.VERSION.SDK_INT >= 19) ? paramView.isAttachedToWindow() : ((paramView.getWindowToken() != null) ? 1 : 0); }
  
  public static boolean v(View paramView) { return (Build.VERSION.SDK_INT >= 15) ? paramView.hasOnClickListeners() : 0; }
  
  private static void w(View paramView) {
    float f1 = paramView.getTranslationY();
    paramView.setTranslationY(1.0F + f1);
    paramView.setTranslationY(f1);
  }
}
