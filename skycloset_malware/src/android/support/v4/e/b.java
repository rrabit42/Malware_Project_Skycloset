package android.support.v4.e;

import android.os.Build;
import android.text.PrecomputedText;
import android.text.Spannable;
import java.util.concurrent.Executor;

public class b implements Spannable {
  private static final Object a = new Object();
  
  private static Executor b = null;
  
  private final Spannable c;
  
  private final a d;
  
  private final PrecomputedText e;
  
  public PrecomputedText a() {
    Spannable spannable = this.c;
    return (spannable instanceof PrecomputedText) ? (PrecomputedText)spannable : null;
  }
  
  public a b() { return this.d; }
  
  public char charAt(int paramInt) { return this.c.charAt(paramInt); }
  
  public int getSpanEnd(Object paramObject) { return this.c.getSpanEnd(paramObject); }
  
  public int getSpanFlags(Object paramObject) { return this.c.getSpanFlags(paramObject); }
  
  public int getSpanStart(Object paramObject) { return this.c.getSpanStart(paramObject); }
  
  public <T> T[] getSpans(int paramInt1, int paramInt2, Class<T> paramClass) { return (Build.VERSION.SDK_INT >= 28) ? (T[])this.e.getSpans(paramInt1, paramInt2, paramClass) : (T[])this.c.getSpans(paramInt1, paramInt2, paramClass); }
  
  public int length() { return this.c.length(); }
  
  public int nextSpanTransition(int paramInt1, int paramInt2, Class paramClass) { return this.c.nextSpanTransition(paramInt1, paramInt2, paramClass); }
  
  public void removeSpan(Object paramObject) {
    if (!(paramObject instanceof android.text.style.MetricAffectingSpan)) {
      if (Build.VERSION.SDK_INT >= 28) {
        this.e.removeSpan(paramObject);
        return;
      } 
      this.c.removeSpan(paramObject);
      return;
    } 
    throw new IllegalArgumentException("MetricAffectingSpan can not be removed from PrecomputedText.");
  }
  
  public void setSpan(Object paramObject, int paramInt1, int paramInt2, int paramInt3) {
    if (!(paramObject instanceof android.text.style.MetricAffectingSpan)) {
      if (Build.VERSION.SDK_INT >= 28) {
        this.e.setSpan(paramObject, paramInt1, paramInt2, paramInt3);
        return;
      } 
      this.c.setSpan(paramObject, paramInt1, paramInt2, paramInt3);
      return;
    } 
    throw new IllegalArgumentException("MetricAffectingSpan can not be set to PrecomputedText.");
  }
  
  public CharSequence subSequence(int paramInt1, int paramInt2) { return this.c.subSequence(paramInt1, paramInt2); }
  
  public String toString() { return this.c.toString(); }
}
