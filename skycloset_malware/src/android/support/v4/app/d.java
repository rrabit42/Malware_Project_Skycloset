package android.support.v4.app;

import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import android.util.Log;
import java.util.ArrayList;

final class d implements Parcelable {
  public static final Parcelable.Creator<d> CREATOR = new Object();
  
  final int[] a;
  
  final int b;
  
  final int c;
  
  final String d;
  
  final int e;
  
  final int f;
  
  final CharSequence g;
  
  final int h;
  
  final CharSequence i;
  
  final ArrayList<String> j;
  
  final ArrayList<String> k;
  
  final boolean l;
  
  public d(Parcel paramParcel) {
    this.a = paramParcel.createIntArray();
    this.b = paramParcel.readInt();
    this.c = paramParcel.readInt();
    this.d = paramParcel.readString();
    this.e = paramParcel.readInt();
    this.f = paramParcel.readInt();
    this.g = (CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(paramParcel);
    this.h = paramParcel.readInt();
    this.i = (CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(paramParcel);
    this.j = paramParcel.createStringArrayList();
    this.k = paramParcel.createStringArrayList();
    if (paramParcel.readInt() != 0) {
      bool = true;
    } else {
      bool = false;
    } 
    this.l = bool;
  }
  
  public d(c paramc) {
    int m = paramc.b.size();
    this.a = new int[m * 6];
    if (paramc.i) {
      byte b1 = 0;
      for (int n = 0; b1 < m; n++) {
        c.a a1 = (c.a)paramc.b.get(b1);
        int[] arrayOfInt = this.a;
        int i1 = n + true;
        arrayOfInt[n] = a1.a;
        arrayOfInt = this.a;
        boolean bool = i1 + true;
        if (a1.b != null) {
          n = a1.b.o;
        } else {
          n = -1;
        } 
        arrayOfInt[i1] = n;
        arrayOfInt = this.a;
        n = bool + true;
        arrayOfInt[bool] = a1.c;
        arrayOfInt = this.a;
        i1 = n + 1;
        arrayOfInt[n] = a1.d;
        arrayOfInt = this.a;
        n = i1 + 1;
        arrayOfInt[i1] = a1.e;
        this.a[n] = a1.f;
        b1++;
      } 
      this.b = paramc.g;
      this.c = paramc.h;
      this.d = paramc.k;
      this.e = paramc.m;
      this.f = paramc.n;
      this.g = paramc.o;
      this.h = paramc.p;
      this.i = paramc.q;
      this.j = paramc.r;
      this.k = paramc.s;
      this.l = paramc.t;
      return;
    } 
    throw new IllegalStateException("Not on back stack");
  }
  
  public c a(l paraml) {
    c c1 = new c(paraml);
    int m = 0;
    byte b1 = 0;
    while (m < this.a.length) {
      c.a a1 = new c.a();
      int[] arrayOfInt = this.a;
      int n = m + true;
      a1.a = arrayOfInt[m];
      if (l.a) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Instantiate ");
        stringBuilder.append(c1);
        stringBuilder.append(" op #");
        stringBuilder.append(b1);
        stringBuilder.append(" base fragment #");
        stringBuilder.append(this.a[n]);
        Log.v("FragmentManager", stringBuilder.toString());
      } 
      arrayOfInt = this.a;
      m = n + true;
      n = arrayOfInt[n];
      if (n >= 0) {
        f f1 = (f)paraml.f.get(n);
      } else {
        arrayOfInt = null;
      } 
      a1.b = arrayOfInt;
      arrayOfInt = this.a;
      n = m + true;
      a1.c = arrayOfInt[m];
      m = n + 1;
      a1.d = arrayOfInt[n];
      n = m + 1;
      a1.e = arrayOfInt[m];
      a1.f = arrayOfInt[n];
      c1.c = a1.c;
      c1.d = a1.d;
      c1.e = a1.e;
      c1.f = a1.f;
      c1.a(a1);
      b1++;
      m = n + 1;
    } 
    c1.g = this.b;
    c1.h = this.c;
    c1.k = this.d;
    c1.m = this.e;
    c1.i = true;
    c1.n = this.f;
    c1.o = this.g;
    c1.p = this.h;
    c1.q = this.i;
    c1.r = this.j;
    c1.s = this.k;
    c1.t = this.l;
    c1.a(1);
    return c1;
  }
  
  public int describeContents() { return 0; }
  
  public void writeToParcel(Parcel paramParcel, int paramInt) { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
}
