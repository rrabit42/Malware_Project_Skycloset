package android.support.v4.app;

import android.animation.Animator;
import android.animation.AnimatorInflater;
import android.animation.AnimatorSet;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.arch.lifecycle.p;
import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.Parcelable;
import android.support.v4.f.r;
import android.support.v4.util.b;
import android.support.v4.util.d;
import android.support.v4.util.e;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.ScaleAnimation;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

final class l extends k implements LayoutInflater.Factory2 {
  static final Interpolator F = new DecelerateInterpolator(2.5F);
  
  static final Interpolator G = new DecelerateInterpolator(1.5F);
  
  static final Interpolator H = new AccelerateInterpolator(2.5F);
  
  static final Interpolator I = new AccelerateInterpolator(1.5F);
  
  static boolean a;
  
  static Field q;
  
  Bundle A = null;
  
  SparseArray<Parcelable> B = null;
  
  ArrayList<j> C;
  
  m D;
  
  Runnable E = new Object(this);
  
  private final CopyOnWriteArrayList<f> J = new CopyOnWriteArrayList();
  
  ArrayList<h> b;
  
  boolean c;
  
  int d = 0;
  
  final ArrayList<f> e = new ArrayList();
  
  SparseArray<f> f;
  
  ArrayList<c> g;
  
  ArrayList<f> h;
  
  ArrayList<c> i;
  
  ArrayList<Integer> j;
  
  ArrayList<k.b> k;
  
  int l = 0;
  
  j m;
  
  h n;
  
  f o;
  
  f p;
  
  boolean r;
  
  boolean s;
  
  boolean t;
  
  boolean u;
  
  String v;
  
  boolean w;
  
  ArrayList<c> x;
  
  ArrayList<Boolean> y;
  
  ArrayList<f> z;
  
  private void A() {
    if (this.C != null)
      while (!this.C.isEmpty())
        ((j)this.C.remove(0)).d();  
  }
  
  private void B() {
    int i1;
    SparseArray sparseArray = this.f;
    byte b1 = 0;
    if (sparseArray == null) {
      i1 = 0;
    } else {
      i1 = sparseArray.size();
    } 
    while (b1 < i1) {
      f f1 = (f)this.f.valueAt(b1);
      if (f1 != null)
        if (f1.Y() != null) {
          int i2 = f1.aa();
          View view = f1.Y();
          Animation animation = view.getAnimation();
          if (animation != null) {
            animation.cancel();
            view.clearAnimation();
          } 
          f1.a(null);
          a(f1, i2, 0, 0, false);
        } else if (f1.Z() != null) {
          f1.Z().end();
        }  
      b1++;
    } 
  }
  
  private void C() {
    SparseArray sparseArray = this.f;
    if (sparseArray != null)
      for (int i1 = sparseArray.size() - 1; i1 >= 0; i1--) {
        if (this.f.valueAt(i1) == null) {
          sparseArray = this.f;
          sparseArray.delete(sparseArray.keyAt(i1));
        } 
      }  
  }
  
  private int a(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2, int paramInt1, int paramInt2, b<f> paramb) {
    int i1 = paramInt2 - 1;
    int i2;
    for (i2 = paramInt2; i1 >= paramInt1; i2 = i3) {
      boolean bool;
      c c1 = (c)paramArrayList1.get(i1);
      boolean bool1 = ((Boolean)paramArrayList2.get(i1)).booleanValue();
      if (c1.e() && !c1.a(paramArrayList1, i1 + 1, paramInt2)) {
        bool = true;
      } else {
        bool = false;
      } 
      int i3 = i2;
      if (bool) {
        if (this.C == null)
          this.C = new ArrayList(); 
        j j1 = new j(c1, bool1);
        this.C.add(j1);
        c1.a(j1);
        if (bool1) {
          c1.d();
        } else {
          c1.b(false);
        } 
        i3 = i2 - 1;
        if (i1 != i3) {
          paramArrayList1.remove(i1);
          paramArrayList1.add(i3, c1);
        } 
        b(paramb);
      } 
      i1--;
    } 
    return i2;
  }
  
  static c a(Context paramContext, float paramFloat1, float paramFloat2) {
    AlphaAnimation alphaAnimation = new AlphaAnimation(paramFloat1, paramFloat2);
    alphaAnimation.setInterpolator(G);
    alphaAnimation.setDuration(220L);
    return new c(alphaAnimation);
  }
  
  static c a(Context paramContext, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    AnimationSet animationSet = new AnimationSet(false);
    ScaleAnimation scaleAnimation = new ScaleAnimation(paramFloat1, paramFloat2, paramFloat1, paramFloat2, 1, 0.5F, 1, 0.5F);
    scaleAnimation.setInterpolator(F);
    scaleAnimation.setDuration(220L);
    animationSet.addAnimation(scaleAnimation);
    AlphaAnimation alphaAnimation = new AlphaAnimation(paramFloat3, paramFloat4);
    alphaAnimation.setInterpolator(G);
    alphaAnimation.setDuration(220L);
    animationSet.addAnimation(alphaAnimation);
    return new c(animationSet);
  }
  
  private static Animation.AnimationListener a(Animation paramAnimation) {
    String str;
    try {
      if (q == null) {
        q = Animation.class.getDeclaredField("mListener");
        q.setAccessible(true);
      } 
      return (Animation.AnimationListener)q.get(paramAnimation);
    } catch (NoSuchFieldException null) {
      str = "No field with the name mListener is found in Animation class";
    } catch (IllegalAccessException illegalAccessException) {
      str = "Cannot access Animation's mListener field";
    } 
    Log.e("FragmentManager", str, illegalAccessException);
    return null;
  }
  
  private void a(f paramf, c paramc, int paramInt) {
    View view = paramf.S;
    ViewGroup viewGroup = paramf.R;
    viewGroup.startViewTransition(view);
    paramf.b(paramInt);
    if (paramc.a != null) {
      e e1 = new e(paramc.a, viewGroup, view);
      paramf.a(paramf.S);
      e1.setAnimationListener(new Object(this, a(e1), viewGroup, paramf));
      b(view, paramc);
      paramf.S.startAnimation(e1);
      return;
    } 
    Animator animator = paramc.b;
    paramf.a(paramc.b);
    animator.addListener(new Object(this, viewGroup, view, paramf));
    animator.setTarget(paramf.S);
    b(paramf.S, paramc);
    animator.start();
  }
  
  private static void a(m paramm) {
    if (paramm == null)
      return; 
    List list2 = paramm.a();
    if (list2 != null) {
      Iterator iterator = list2.iterator();
      while (iterator.hasNext())
        ((f)iterator.next()).N = true; 
    } 
    List list1 = paramm.b();
    if (list1 != null) {
      Iterator iterator = list1.iterator();
      while (iterator.hasNext())
        a((m)iterator.next()); 
    } 
  }
  
  private void a(b<f> paramb) {
    int i1 = paramb.size();
    for (byte b1 = 0; b1 < i1; b1++) {
      f f1 = (f)paramb.b(b1);
      if (!f1.u) {
        View view = f1.t();
        f1.Z = view.getAlpha();
        view.setAlpha(0.0F);
      } 
    } 
  }
  
  private void a(RuntimeException paramRuntimeException) {
    Log.e("FragmentManager", paramRuntimeException.getMessage());
    Log.e("FragmentManager", "Activity state:");
    printWriter = new PrintWriter(new e("FragmentManager"));
    j j1 = this.m;
    if (j1 != null) {
      try {
        j1.a("  ", null, printWriter, new String[0]);
      } catch (Exception printWriter) {
        Log.e("FragmentManager", "Failed dumping state", printWriter);
      } 
    } else {
      a("  ", null, printWriter, new String[0]);
    } 
    throw paramRuntimeException;
  }
  
  private void a(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2) { // Byte code:
    //   0: aload_0
    //   1: getfield C : Ljava/util/ArrayList;
    //   4: astore #7
    //   6: aload #7
    //   8: ifnonnull -> 16
    //   11: iconst_0
    //   12: istore_3
    //   13: goto -> 22
    //   16: aload #7
    //   18: invokevirtual size : ()I
    //   21: istore_3
    //   22: iconst_0
    //   23: istore #5
    //   25: iload_3
    //   26: istore #4
    //   28: iload #5
    //   30: istore_3
    //   31: iload_3
    //   32: iload #4
    //   34: if_icmpge -> 242
    //   37: aload_0
    //   38: getfield C : Ljava/util/ArrayList;
    //   41: iload_3
    //   42: invokevirtual get : (I)Ljava/lang/Object;
    //   45: checkcast android/support/v4/app/l$j
    //   48: astore #7
    //   50: aload_1
    //   51: ifnull -> 109
    //   54: aload #7
    //   56: getfield a : Z
    //   59: ifne -> 109
    //   62: aload_1
    //   63: aload #7
    //   65: getfield b : Landroid/support/v4/app/c;
    //   68: invokevirtual indexOf : (Ljava/lang/Object;)I
    //   71: istore #5
    //   73: iload #5
    //   75: iconst_m1
    //   76: if_icmpeq -> 109
    //   79: aload_2
    //   80: iload #5
    //   82: invokevirtual get : (I)Ljava/lang/Object;
    //   85: checkcast java/lang/Boolean
    //   88: invokevirtual booleanValue : ()Z
    //   91: ifeq -> 109
    //   94: aload #7
    //   96: invokevirtual e : ()V
    //   99: iload_3
    //   100: istore #6
    //   102: iload #4
    //   104: istore #5
    //   106: goto -> 230
    //   109: aload #7
    //   111: invokevirtual c : ()Z
    //   114: ifne -> 152
    //   117: iload_3
    //   118: istore #6
    //   120: iload #4
    //   122: istore #5
    //   124: aload_1
    //   125: ifnull -> 230
    //   128: iload_3
    //   129: istore #6
    //   131: iload #4
    //   133: istore #5
    //   135: aload #7
    //   137: getfield b : Landroid/support/v4/app/c;
    //   140: aload_1
    //   141: iconst_0
    //   142: aload_1
    //   143: invokevirtual size : ()I
    //   146: invokevirtual a : (Ljava/util/ArrayList;II)Z
    //   149: ifeq -> 230
    //   152: aload_0
    //   153: getfield C : Ljava/util/ArrayList;
    //   156: iload_3
    //   157: invokevirtual remove : (I)Ljava/lang/Object;
    //   160: pop
    //   161: iload_3
    //   162: iconst_1
    //   163: isub
    //   164: istore_3
    //   165: iload #4
    //   167: iconst_1
    //   168: isub
    //   169: istore #4
    //   171: aload_1
    //   172: ifnull -> 218
    //   175: aload #7
    //   177: getfield a : Z
    //   180: ifne -> 218
    //   183: aload_1
    //   184: aload #7
    //   186: getfield b : Landroid/support/v4/app/c;
    //   189: invokevirtual indexOf : (Ljava/lang/Object;)I
    //   192: istore #5
    //   194: iload #5
    //   196: iconst_m1
    //   197: if_icmpeq -> 218
    //   200: aload_2
    //   201: iload #5
    //   203: invokevirtual get : (I)Ljava/lang/Object;
    //   206: checkcast java/lang/Boolean
    //   209: invokevirtual booleanValue : ()Z
    //   212: ifeq -> 218
    //   215: goto -> 94
    //   218: aload #7
    //   220: invokevirtual d : ()V
    //   223: iload #4
    //   225: istore #5
    //   227: iload_3
    //   228: istore #6
    //   230: iload #6
    //   232: iconst_1
    //   233: iadd
    //   234: istore_3
    //   235: iload #5
    //   237: istore #4
    //   239: goto -> 31
    //   242: return }
  
  private void a(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2, int paramInt1, int paramInt2) {
    int i1 = paramInt1;
    boolean bool1 = ((c)paramArrayList1.get(i1)).t;
    ArrayList arrayList = this.z;
    if (arrayList == null) {
      this.z = new ArrayList();
    } else {
      arrayList.clear();
    } 
    this.z.addAll(this.e);
    f f1 = w();
    boolean bool = false;
    int i2;
    for (i2 = i1; i2 < paramInt2; i2++) {
      c c1 = (c)paramArrayList1.get(i2);
      if (!((Boolean)paramArrayList2.get(i2)).booleanValue()) {
        f1 = c1.a(this.z, f1);
      } else {
        f1 = c1.b(this.z, f1);
      } 
      if (bool || c1.i) {
        bool = true;
      } else {
        bool = false;
      } 
    } 
    this.z.clear();
    if (!bool1)
      q.a(this, paramArrayList1, paramArrayList2, paramInt1, paramInt2, false); 
    b(paramArrayList1, paramArrayList2, paramInt1, paramInt2);
    if (bool1) {
      b b1 = new b();
      b(b1);
      i2 = a(paramArrayList1, paramArrayList2, paramInt1, paramInt2, b1);
      a(b1);
    } else {
      i2 = paramInt2;
    } 
    int i3 = i1;
    if (i2 != i1) {
      i3 = i1;
      if (bool1) {
        q.a(this, paramArrayList1, paramArrayList2, paramInt1, i2, true);
        a(this.l, true);
        i3 = i1;
      } 
    } 
    while (i3 < paramInt2) {
      c c1 = (c)paramArrayList1.get(i3);
      if (((Boolean)paramArrayList2.get(i3)).booleanValue() && c1.m >= 0) {
        c(c1.m);
        c1.m = -1;
      } 
      c1.a();
      i3++;
    } 
    if (bool)
      i(); 
  }
  
  static boolean a(Animator paramAnimator) {
    PropertyValuesHolder[] arrayOfPropertyValuesHolder;
    if (paramAnimator == null)
      return false; 
    if (paramAnimator instanceof ValueAnimator) {
      arrayOfPropertyValuesHolder = ((ValueAnimator)paramAnimator).getValues();
      for (byte b1 = 0; b1 < arrayOfPropertyValuesHolder.length; b1++) {
        if ("alpha".equals(arrayOfPropertyValuesHolder[b1].getPropertyName()))
          return true; 
      } 
    } else if (arrayOfPropertyValuesHolder instanceof AnimatorSet) {
      ArrayList arrayList = ((AnimatorSet)arrayOfPropertyValuesHolder).getChildAnimations();
      for (byte b1 = 0; b1 < arrayList.size(); b1++) {
        if (a((Animator)arrayList.get(b1)))
          return true; 
      } 
    } 
    return false;
  }
  
  static boolean a(c paramc) {
    List list;
    if (paramc.a instanceof AlphaAnimation)
      return true; 
    if (paramc.a instanceof AnimationSet) {
      list = ((AnimationSet)paramc.a).getAnimations();
      for (byte b1 = 0; b1 < list.size(); b1++) {
        if (list.get(b1) instanceof AlphaAnimation)
          return true; 
      } 
      return false;
    } 
    return a(list.b);
  }
  
  static boolean a(View paramView, c paramc) {
    byte b1 = 0;
    int i1 = b1;
    if (paramView != null) {
      if (paramc == null)
        return false; 
      i1 = b1;
      if (Build.VERSION.SDK_INT >= 19) {
        i1 = b1;
        if (paramView.getLayerType() == 0) {
          i1 = b1;
          if (r.o(paramView)) {
            i1 = b1;
            if (a(paramc))
              i1 = 1; 
          } 
        } 
      } 
    } 
    return i1;
  }
  
  private boolean a(String paramString, int paramInt1, int paramInt2) {
    g();
    c(true);
    f f1 = this.p;
    if (f1 != null && paramInt1 < 0 && paramString == null) {
      k k1 = f1.r();
      if (k1 != null && k1.b())
        return true; 
    } 
    boolean bool = a(this.x, this.y, paramString, paramInt1, paramInt2);
    if (bool) {
      this.c = true;
      try {
        b(this.x, this.y);
      } finally {
        z();
      } 
    } 
    h();
    C();
    return bool;
  }
  
  public static int b(int paramInt, boolean paramBoolean) { return (paramInt != 4097) ? ((paramInt != 4099) ? ((paramInt != 8194) ? -1 : (paramBoolean ? 3 : 4)) : (paramBoolean ? 5 : 6)) : (paramBoolean ? 1 : 2); }
  
  private void b(b<f> paramb) {
    int i1 = this.l;
    if (i1 < 1)
      return; 
    int i2 = Math.min(i1, 3);
    int i3 = this.e.size();
    for (i1 = 0; i1 < i3; i1++) {
      f f1 = (f)this.e.get(i1);
      if (f1.k < i2) {
        a(f1, i2, f1.T(), f1.U(), false);
        if (f1.S != null && !f1.K && f1.X)
          paramb.add(f1); 
      } 
    } 
  }
  
  private static void b(View paramView, c paramc) {
    if (paramView != null) {
      if (paramc == null)
        return; 
      if (a(paramView, paramc)) {
        if (paramc.b != null) {
          paramc.b.addListener(new d(paramView));
          return;
        } 
        Animation.AnimationListener animationListener = a(paramc.a);
        paramView.setLayerType(2, null);
        paramc.a.setAnimationListener(new a(paramView, animationListener));
      } 
    } 
  }
  
  private void b(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2) {
    if (paramArrayList1 != null) {
      if (paramArrayList1.isEmpty())
        return; 
      if (paramArrayList2 != null && paramArrayList1.size() == paramArrayList2.size()) {
        a(paramArrayList1, paramArrayList2);
        int i1 = paramArrayList1.size();
        byte b1 = 0;
        byte b2;
        for (b2 = 0; b1 < i1; b2 = b3) {
          byte b4 = b1;
          byte b3 = b2;
          if (!((c)paramArrayList1.get(b1)).t) {
            if (b2 != b1)
              a(paramArrayList1, paramArrayList2, b2, b1); 
            b2 = b1 + 1;
            b3 = b2;
            if (((Boolean)paramArrayList2.get(b1)).booleanValue())
              while (true) {
                b3 = b2;
                if (b2 < i1) {
                  b3 = b2;
                  if (((Boolean)paramArrayList2.get(b2)).booleanValue()) {
                    b3 = b2;
                    if (!((c)paramArrayList1.get(b2)).t) {
                      b2++;
                      continue;
                    } 
                  } 
                } 
                break;
              }  
            a(paramArrayList1, paramArrayList2, b1, b3);
            b4 = b3 - 1;
          } 
          b1 = b4 + 1;
        } 
        if (b2 != i1)
          a(paramArrayList1, paramArrayList2, b2, i1); 
        return;
      } 
      throw new IllegalStateException("Internal error with the back stack records");
    } 
  }
  
  private static void b(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2, int paramInt1, int paramInt2) {
    while (paramInt1 < paramInt2) {
      c c1 = (c)paramArrayList1.get(paramInt1);
      boolean bool2 = ((Boolean)paramArrayList2.get(paramInt1)).booleanValue();
      boolean bool1 = true;
      if (bool2) {
        c1.a(-1);
        if (paramInt1 != paramInt2 - 1)
          bool1 = false; 
        c1.b(bool1);
      } else {
        c1.a(1);
        c1.d();
      } 
      paramInt1++;
    } 
  }
  
  private void c(boolean paramBoolean) {
    if (!this.c) {
      if (this.m != null) {
        if (Looper.myLooper() == this.m.h().getLooper()) {
          if (!paramBoolean)
            y(); 
          if (this.x == null) {
            this.x = new ArrayList();
            this.y = new ArrayList();
          } 
          this.c = true;
          try {
            a(null, null);
            return;
          } finally {
            this.c = false;
          } 
        } 
        throw new IllegalStateException("Must be called from main thread of fragment host");
      } 
      throw new IllegalStateException("Fragment host has been destroyed");
    } 
    throw new IllegalStateException("FragmentManager is already executing transactions");
  }
  
  private boolean c(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield b : Ljava/util/ArrayList;
    //   6: astore #6
    //   8: iconst_0
    //   9: istore_3
    //   10: aload #6
    //   12: ifnull -> 102
    //   15: aload_0
    //   16: getfield b : Ljava/util/ArrayList;
    //   19: invokevirtual size : ()I
    //   22: ifne -> 28
    //   25: goto -> 102
    //   28: aload_0
    //   29: getfield b : Ljava/util/ArrayList;
    //   32: invokevirtual size : ()I
    //   35: istore #4
    //   37: iconst_0
    //   38: istore #5
    //   40: iload_3
    //   41: iload #4
    //   43: if_icmpge -> 76
    //   46: iload #5
    //   48: aload_0
    //   49: getfield b : Ljava/util/ArrayList;
    //   52: iload_3
    //   53: invokevirtual get : (I)Ljava/lang/Object;
    //   56: checkcast android/support/v4/app/l$h
    //   59: aload_1
    //   60: aload_2
    //   61: invokeinterface a : (Ljava/util/ArrayList;Ljava/util/ArrayList;)Z
    //   66: ior
    //   67: istore #5
    //   69: iload_3
    //   70: iconst_1
    //   71: iadd
    //   72: istore_3
    //   73: goto -> 40
    //   76: aload_0
    //   77: getfield b : Ljava/util/ArrayList;
    //   80: invokevirtual clear : ()V
    //   83: aload_0
    //   84: getfield m : Landroid/support/v4/app/j;
    //   87: invokevirtual h : ()Landroid/os/Handler;
    //   90: aload_0
    //   91: getfield E : Ljava/lang/Runnable;
    //   94: invokevirtual removeCallbacks : (Ljava/lang/Runnable;)V
    //   97: aload_0
    //   98: monitorexit
    //   99: iload #5
    //   101: ireturn
    //   102: aload_0
    //   103: monitorexit
    //   104: iconst_0
    //   105: ireturn
    //   106: astore_1
    //   107: aload_0
    //   108: monitorexit
    //   109: aload_1
    //   110: athrow
    // Exception table:
    //   from	to	target	type
    //   2	8	106	finally
    //   15	25	106	finally
    //   28	37	106	finally
    //   46	69	106	finally
    //   76	99	106	finally
    //   102	104	106	finally
    //   107	109	106	finally }
  
  public static int d(int paramInt) {
    char c1 = ' ';
    if (paramInt != 4097) {
      if (paramInt != 4099)
        return (paramInt != 8194) ? 0 : 4097; 
      c1 = 'ဃ';
    } 
    return c1;
  }
  
  private void e(int paramInt) {
    try {
      this.c = true;
      a(paramInt, false);
      this.c = false;
      return;
    } finally {
      this.c = false;
    } 
  }
  
  private f p(f paramf) {
    ViewGroup viewGroup = paramf.R;
    View view = paramf.S;
    if (viewGroup != null) {
      if (view == null)
        return null; 
      for (int i1 = this.e.indexOf(paramf) - 1; i1 >= 0; i1--) {
        paramf = (f)this.e.get(i1);
        if (paramf.R == viewGroup && paramf.S != null)
          return paramf; 
      } 
    } 
    return null;
  }
  
  private void y() {
    if (!d()) {
      if (this.v == null)
        return; 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Can not perform this action inside of ");
      stringBuilder.append(this.v);
      throw new IllegalStateException(stringBuilder.toString());
    } 
    throw new IllegalStateException("Can not perform this action after onSaveInstanceState");
  }
  
  private void z() {
    this.c = false;
    this.y.clear();
    this.x.clear();
  }
  
  public int a(c paramc) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield j : Ljava/util/ArrayList;
    //   6: ifnull -> 112
    //   9: aload_0
    //   10: getfield j : Ljava/util/ArrayList;
    //   13: invokevirtual size : ()I
    //   16: ifgt -> 22
    //   19: goto -> 112
    //   22: aload_0
    //   23: getfield j : Ljava/util/ArrayList;
    //   26: aload_0
    //   27: getfield j : Ljava/util/ArrayList;
    //   30: invokevirtual size : ()I
    //   33: iconst_1
    //   34: isub
    //   35: invokevirtual remove : (I)Ljava/lang/Object;
    //   38: checkcast java/lang/Integer
    //   41: invokevirtual intValue : ()I
    //   44: istore_2
    //   45: getstatic android/support/v4/app/l.a : Z
    //   48: ifeq -> 98
    //   51: new java/lang/StringBuilder
    //   54: dup
    //   55: invokespecial <init> : ()V
    //   58: astore_3
    //   59: aload_3
    //   60: ldc_w 'Adding back stack index '
    //   63: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: pop
    //   67: aload_3
    //   68: iload_2
    //   69: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   72: pop
    //   73: aload_3
    //   74: ldc_w ' with '
    //   77: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   80: pop
    //   81: aload_3
    //   82: aload_1
    //   83: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   86: pop
    //   87: ldc_w 'FragmentManager'
    //   90: aload_3
    //   91: invokevirtual toString : ()Ljava/lang/String;
    //   94: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   97: pop
    //   98: aload_0
    //   99: getfield i : Ljava/util/ArrayList;
    //   102: iload_2
    //   103: aload_1
    //   104: invokevirtual set : (ILjava/lang/Object;)Ljava/lang/Object;
    //   107: pop
    //   108: aload_0
    //   109: monitorexit
    //   110: iload_2
    //   111: ireturn
    //   112: aload_0
    //   113: getfield i : Ljava/util/ArrayList;
    //   116: ifnonnull -> 130
    //   119: aload_0
    //   120: new java/util/ArrayList
    //   123: dup
    //   124: invokespecial <init> : ()V
    //   127: putfield i : Ljava/util/ArrayList;
    //   130: aload_0
    //   131: getfield i : Ljava/util/ArrayList;
    //   134: invokevirtual size : ()I
    //   137: istore_2
    //   138: getstatic android/support/v4/app/l.a : Z
    //   141: ifeq -> 191
    //   144: new java/lang/StringBuilder
    //   147: dup
    //   148: invokespecial <init> : ()V
    //   151: astore_3
    //   152: aload_3
    //   153: ldc_w 'Setting back stack index '
    //   156: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   159: pop
    //   160: aload_3
    //   161: iload_2
    //   162: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   165: pop
    //   166: aload_3
    //   167: ldc_w ' to '
    //   170: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   173: pop
    //   174: aload_3
    //   175: aload_1
    //   176: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   179: pop
    //   180: ldc_w 'FragmentManager'
    //   183: aload_3
    //   184: invokevirtual toString : ()Ljava/lang/String;
    //   187: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   190: pop
    //   191: aload_0
    //   192: getfield i : Ljava/util/ArrayList;
    //   195: aload_1
    //   196: invokevirtual add : (Ljava/lang/Object;)Z
    //   199: pop
    //   200: aload_0
    //   201: monitorexit
    //   202: iload_2
    //   203: ireturn
    //   204: astore_1
    //   205: aload_0
    //   206: monitorexit
    //   207: aload_1
    //   208: athrow
    // Exception table:
    //   from	to	target	type
    //   2	19	204	finally
    //   22	98	204	finally
    //   98	110	204	finally
    //   112	130	204	finally
    //   130	191	204	finally
    //   191	202	204	finally
    //   205	207	204	finally }
  
  public f a(Bundle paramBundle, String paramString) {
    int i1 = paramBundle.getInt(paramString, -1);
    if (i1 == -1)
      return null; 
    f f1 = (f)this.f.get(i1);
    if (f1 == null) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Fragment no longer exists for key ");
      stringBuilder.append(paramString);
      stringBuilder.append(": index ");
      stringBuilder.append(i1);
      a(new IllegalStateException(stringBuilder.toString()));
    } 
    return f1;
  }
  
  public f a(String paramString) {
    if (paramString != null)
      for (int i1 = this.e.size() - 1; i1 >= 0; i1--) {
        f f1 = (f)this.e.get(i1);
        if (f1 != null && paramString.equals(f1.J))
          return f1; 
      }  
    SparseArray sparseArray = this.f;
    if (sparseArray != null && paramString != null)
      for (int i1 = sparseArray.size() - 1; i1 >= 0; i1--) {
        f f1 = (f)this.f.valueAt(i1);
        if (f1 != null && paramString.equals(f1.J))
          return f1; 
      }  
    return null;
  }
  
  c a(f paramf, int paramInt1, boolean paramBoolean, int paramInt2) {
    int i1 = paramf.T();
    Animation animation = paramf.a(paramInt1, paramBoolean, i1);
    if (animation != null)
      return new c(animation); 
    animator = paramf.b(paramInt1, paramBoolean, i1);
    if (animator != null)
      return new c(animator); 
    if (i1 != 0) {
      boolean bool = "anim".equals(this.m.g().getResources().getResourceTypeName(i1));
      byte b2 = 0;
      byte b1 = b2;
      if (bool)
        try {
          Animation animation1 = AnimationUtils.loadAnimation(this.m.g(), i1);
          if (animation1 != null)
            return new c(animation1); 
          b1 = 1;
        } catch (android.content.res.Resources.NotFoundException animator) {
          throw animator;
        } catch (RuntimeException animator) {
          b1 = b2;
        }  
      if (b1 == 0)
        try {
          animator = AnimatorInflater.loadAnimator(this.m.g(), i1);
          if (animator != null)
            return new c(animator); 
        } catch (RuntimeException animator) {
          Animation animation1;
          if (!bool) {
            animation1 = AnimationUtils.loadAnimation(this.m.g(), i1);
            if (animation1 != null)
              return new c(animation1); 
          } else {
            throw animation1;
          } 
        }  
    } 
    if (paramInt1 == 0)
      return null; 
    paramInt1 = b(paramInt1, paramBoolean);
    if (paramInt1 < 0)
      return null; 
    switch (paramInt1) {
      default:
        paramInt1 = paramInt2;
        if (paramInt2 == 0) {
          paramInt1 = paramInt2;
          if (this.m.d())
            paramInt1 = this.m.e(); 
        } 
        break;
      case 6:
        return a(this.m.g(), 1.0F, 0.0F);
      case 5:
        return a(this.m.g(), 0.0F, 1.0F);
      case 4:
        return a(this.m.g(), 1.0F, 1.075F, 1.0F, 0.0F);
      case 3:
        return a(this.m.g(), 0.975F, 1.0F, 0.0F, 1.0F);
      case 2:
        return a(this.m.g(), 1.0F, 0.975F, 1.0F, 0.0F);
      case 1:
        return a(this.m.g(), 1.125F, 1.0F, 0.0F, 1.0F);
    } 
    if (paramInt1 == 0);
    return null;
  }
  
  public p a() { return new c(this); }
  
  public void a(int paramInt1, int paramInt2) {
    if (paramInt1 >= 0) {
      a(new i(this, null, paramInt1, paramInt2), false);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Bad id: ");
    stringBuilder.append(paramInt1);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(int paramInt, c paramc) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield i : Ljava/util/ArrayList;
    //   6: ifnonnull -> 20
    //   9: aload_0
    //   10: new java/util/ArrayList
    //   13: dup
    //   14: invokespecial <init> : ()V
    //   17: putfield i : Ljava/util/ArrayList;
    //   20: aload_0
    //   21: getfield i : Ljava/util/ArrayList;
    //   24: invokevirtual size : ()I
    //   27: istore #4
    //   29: iload #4
    //   31: istore_3
    //   32: iload_1
    //   33: iload #4
    //   35: if_icmpge -> 110
    //   38: getstatic android/support/v4/app/l.a : Z
    //   41: ifeq -> 97
    //   44: new java/lang/StringBuilder
    //   47: dup
    //   48: invokespecial <init> : ()V
    //   51: astore #5
    //   53: aload #5
    //   55: ldc_w 'Setting back stack index '
    //   58: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload #5
    //   64: iload_1
    //   65: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   68: pop
    //   69: aload #5
    //   71: ldc_w ' to '
    //   74: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   77: pop
    //   78: aload #5
    //   80: aload_2
    //   81: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: ldc_w 'FragmentManager'
    //   88: aload #5
    //   90: invokevirtual toString : ()Ljava/lang/String;
    //   93: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   96: pop
    //   97: aload_0
    //   98: getfield i : Ljava/util/ArrayList;
    //   101: iload_1
    //   102: aload_2
    //   103: invokevirtual set : (ILjava/lang/Object;)Ljava/lang/Object;
    //   106: pop
    //   107: goto -> 272
    //   110: iload_3
    //   111: iload_1
    //   112: if_icmpge -> 204
    //   115: aload_0
    //   116: getfield i : Ljava/util/ArrayList;
    //   119: aconst_null
    //   120: invokevirtual add : (Ljava/lang/Object;)Z
    //   123: pop
    //   124: aload_0
    //   125: getfield j : Ljava/util/ArrayList;
    //   128: ifnonnull -> 142
    //   131: aload_0
    //   132: new java/util/ArrayList
    //   135: dup
    //   136: invokespecial <init> : ()V
    //   139: putfield j : Ljava/util/ArrayList;
    //   142: getstatic android/support/v4/app/l.a : Z
    //   145: ifeq -> 185
    //   148: new java/lang/StringBuilder
    //   151: dup
    //   152: invokespecial <init> : ()V
    //   155: astore #5
    //   157: aload #5
    //   159: ldc_w 'Adding available back stack index '
    //   162: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   165: pop
    //   166: aload #5
    //   168: iload_3
    //   169: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   172: pop
    //   173: ldc_w 'FragmentManager'
    //   176: aload #5
    //   178: invokevirtual toString : ()Ljava/lang/String;
    //   181: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   184: pop
    //   185: aload_0
    //   186: getfield j : Ljava/util/ArrayList;
    //   189: iload_3
    //   190: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   193: invokevirtual add : (Ljava/lang/Object;)Z
    //   196: pop
    //   197: iload_3
    //   198: iconst_1
    //   199: iadd
    //   200: istore_3
    //   201: goto -> 110
    //   204: getstatic android/support/v4/app/l.a : Z
    //   207: ifeq -> 263
    //   210: new java/lang/StringBuilder
    //   213: dup
    //   214: invokespecial <init> : ()V
    //   217: astore #5
    //   219: aload #5
    //   221: ldc_w 'Adding back stack index '
    //   224: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   227: pop
    //   228: aload #5
    //   230: iload_1
    //   231: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   234: pop
    //   235: aload #5
    //   237: ldc_w ' with '
    //   240: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   243: pop
    //   244: aload #5
    //   246: aload_2
    //   247: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   250: pop
    //   251: ldc_w 'FragmentManager'
    //   254: aload #5
    //   256: invokevirtual toString : ()Ljava/lang/String;
    //   259: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   262: pop
    //   263: aload_0
    //   264: getfield i : Ljava/util/ArrayList;
    //   267: aload_2
    //   268: invokevirtual add : (Ljava/lang/Object;)Z
    //   271: pop
    //   272: aload_0
    //   273: monitorexit
    //   274: return
    //   275: astore_2
    //   276: aload_0
    //   277: monitorexit
    //   278: aload_2
    //   279: athrow
    // Exception table:
    //   from	to	target	type
    //   2	20	275	finally
    //   20	29	275	finally
    //   38	97	275	finally
    //   97	107	275	finally
    //   115	142	275	finally
    //   142	185	275	finally
    //   185	197	275	finally
    //   204	263	275	finally
    //   263	272	275	finally
    //   272	274	275	finally
    //   276	278	275	finally }
  
  void a(int paramInt, boolean paramBoolean) {
    if (this.m != null || paramInt == 0) {
      if (!paramBoolean && paramInt == this.l)
        return; 
      this.l = paramInt;
      if (this.f != null) {
        int i1 = this.e.size();
        for (paramInt = 0; paramInt < i1; paramInt++)
          e((f)this.e.get(paramInt)); 
        i1 = this.f.size();
        for (paramInt = 0; paramInt < i1; paramInt++) {
          f f1 = (f)this.f.valueAt(paramInt);
          if (f1 != null && (f1.v || f1.L) && !f1.X)
            e(f1); 
        } 
        e();
        if (this.r) {
          j j1 = this.m;
          if (j1 != null && this.l == 4) {
            j1.c();
            this.r = false;
          } 
        } 
      } 
      return;
    } 
    throw new IllegalStateException("No activity");
  }
  
  public void a(Configuration paramConfiguration) {
    for (byte b1 = 0; b1 < this.e.size(); b1++) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null)
        f1.a(paramConfiguration); 
    } 
  }
  
  public void a(Bundle paramBundle, String paramString, f paramf) {
    if (paramf.o < 0) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Fragment ");
      stringBuilder.append(paramf);
      stringBuilder.append(" is not currently in the FragmentManager");
      a(new IllegalStateException(stringBuilder.toString()));
    } 
    paramBundle.putInt(paramString, paramf.o);
  }
  
  void a(Parcelable paramParcelable, m paramm) {
    Parcelable parcelable;
    if (paramParcelable == null)
      return; 
    n n1 = (n)paramParcelable;
    if (n1.a == null)
      return; 
    if (paramm != null) {
      boolean bool;
      List list3 = paramm.a();
      List list1 = paramm.b();
      List list2 = paramm.c();
      if (list3 != null) {
        bool = list3.size();
      } else {
        bool = false;
      } 
      byte b1 = 0;
      while (true) {
        parcelable = list1;
        List list = list2;
        if (b1 < bool) {
          f f1 = (f)list3.get(b1);
          if (a) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("restoreAllState: re-attaching retained ");
            stringBuilder.append(f1);
            Log.v("FragmentManager", stringBuilder.toString());
          } 
          byte b2;
          for (b2 = 0; b2 < n1.a.length && (n1.a[b2]).b != f1.o; b2++);
          if (b2 == n1.a.length) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Could not find active fragment with index ");
            stringBuilder.append(f1.o);
            a(new IllegalStateException(stringBuilder.toString()));
          } 
          o o1 = n1.a[b2];
          o1.l = f1;
          f1.m = null;
          f1.A = 0;
          f1.x = false;
          f1.u = false;
          f1.r = null;
          if (o1.k != null) {
            o1.k.setClassLoader(this.m.g().getClassLoader());
            f1.m = o1.k.getSparseParcelableArray("android:view_state");
            f1.l = o1.k;
          } 
          b1++;
          continue;
        } 
        break;
      } 
    } else {
      parcelable = null;
      paramParcelable = parcelable;
    } 
    this.f = new SparseArray(n1.a.length);
    int i1;
    for (i1 = 0; i1 < n1.a.length; i1++) {
      o o1 = n1.a[i1];
      if (o1 != null) {
        p p1;
        m m1;
        if (parcelable != null && i1 < parcelable.size()) {
          m1 = (m)parcelable.get(i1);
        } else {
          m1 = null;
        } 
        if (paramParcelable != null && i1 < paramParcelable.size()) {
          p1 = (p)paramParcelable.get(i1);
        } else {
          p1 = null;
        } 
        f f1 = o1.a(this.m, this.n, this.o, m1, p1);
        if (a) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("restoreAllState: active #");
          stringBuilder.append(i1);
          stringBuilder.append(": ");
          stringBuilder.append(f1);
          Log.v("FragmentManager", stringBuilder.toString());
        } 
        this.f.put(f1.o, f1);
        o1.l = null;
      } 
    } 
    if (paramm != null) {
      List list = paramm.a();
      if (list != null) {
        i1 = list.size();
      } else {
        i1 = 0;
      } 
      byte b1;
      for (b1 = 0; b1 < i1; b1++) {
        f f1 = (f)list.get(b1);
        if (f1.s >= 0) {
          f1.r = (f)this.f.get(f1.s);
          if (f1.r == null) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Re-attaching retained fragment ");
            stringBuilder.append(f1);
            stringBuilder.append(" target no longer exists: ");
            stringBuilder.append(f1.s);
            Log.w("FragmentManager", stringBuilder.toString());
          } 
        } 
      } 
    } 
    this.e.clear();
    if (n1.b != null) {
      i1 = 0;
      while (i1 < n1.b.length) {
        f f1 = (f)this.f.get(n1.b[i1]);
        if (f1 == null) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("No instantiated fragment for index #");
          stringBuilder.append(n1.b[i1]);
          a(new IllegalStateException(stringBuilder.toString()));
        } 
        f1.u = true;
        if (a) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("restoreAllState: added #");
          stringBuilder.append(i1);
          stringBuilder.append(": ");
          stringBuilder.append(f1);
          Log.v("FragmentManager", stringBuilder.toString());
        } 
        if (!this.e.contains(f1))
          synchronized (this.e) {
            this.e.add(f1);
            i1++;
            continue;
          }  
        throw new IllegalStateException("Already added!");
      } 
    } 
    if (n1.c != null) {
      this.g = new ArrayList(n1.c.length);
      for (i1 = 0; i1 < n1.c.length; i1++) {
        c c1 = n1.c[i1].a(this);
        if (a) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("restoreAllState: back stack #");
          stringBuilder.append(i1);
          stringBuilder.append(" (index ");
          stringBuilder.append(c1.m);
          stringBuilder.append("): ");
          stringBuilder.append(c1);
          Log.v("FragmentManager", stringBuilder.toString());
          PrintWriter printWriter = new PrintWriter(new e("FragmentManager"));
          c1.a("  ", printWriter, false);
          printWriter.close();
        } 
        this.g.add(c1);
        if (c1.m >= 0)
          a(c1.m, c1); 
      } 
    } else {
      this.g = null;
    } 
    if (n1.d >= 0)
      this.p = (f)this.f.get(n1.d); 
    this.d = n1.e;
  }
  
  void a(c paramc, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3) {
    if (paramBoolean1) {
      paramc.b(paramBoolean3);
    } else {
      paramc.d();
    } 
    ArrayList arrayList1 = new ArrayList(1);
    ArrayList arrayList2 = new ArrayList(1);
    arrayList1.add(paramc);
    arrayList2.add(Boolean.valueOf(paramBoolean1));
    if (paramBoolean2)
      q.a(this, arrayList1, arrayList2, 0, 1, true); 
    if (paramBoolean3)
      a(this.l, true); 
    SparseArray sparseArray = this.f;
    if (sparseArray != null) {
      int i1 = sparseArray.size();
      byte b1;
      for (b1 = 0; b1 < i1; b1++) {
        f f1 = (f)this.f.valueAt(b1);
        if (f1 != null && f1.S != null && f1.X && paramc.b(f1.I)) {
          if (f1.Z > 0.0F)
            f1.S.setAlpha(f1.Z); 
          if (paramBoolean3) {
            f1.Z = 0.0F;
          } else {
            f1.Z = -1.0F;
            f1.X = false;
          } 
        } 
      } 
    } 
  }
  
  public void a(f paramf) {
    if (paramf.U) {
      if (this.c) {
        this.w = true;
        return;
      } 
      paramf.U = false;
      a(paramf, this.l, 0, 0, false);
    } 
  }
  
  void a(f paramf, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean) { // Byte code:
    //   0: aload_1
    //   1: getfield u : Z
    //   4: istore #9
    //   6: iconst_1
    //   7: istore #7
    //   9: iconst_1
    //   10: istore #8
    //   12: iload #9
    //   14: ifeq -> 30
    //   17: aload_1
    //   18: getfield L : Z
    //   21: ifeq -> 27
    //   24: goto -> 30
    //   27: goto -> 44
    //   30: iload_2
    //   31: istore #6
    //   33: iload #6
    //   35: istore_2
    //   36: iload #6
    //   38: iconst_1
    //   39: if_icmple -> 44
    //   42: iconst_1
    //   43: istore_2
    //   44: iload_2
    //   45: istore #6
    //   47: aload_1
    //   48: getfield v : Z
    //   51: ifeq -> 91
    //   54: iload_2
    //   55: istore #6
    //   57: iload_2
    //   58: aload_1
    //   59: getfield k : I
    //   62: if_icmple -> 91
    //   65: aload_1
    //   66: getfield k : I
    //   69: ifne -> 85
    //   72: aload_1
    //   73: invokevirtual i : ()Z
    //   76: ifeq -> 85
    //   79: iconst_1
    //   80: istore #6
    //   82: goto -> 91
    //   85: aload_1
    //   86: getfield k : I
    //   89: istore #6
    //   91: aload_1
    //   92: getfield U : Z
    //   95: ifeq -> 117
    //   98: aload_1
    //   99: getfield k : I
    //   102: iconst_3
    //   103: if_icmpge -> 117
    //   106: iload #6
    //   108: iconst_2
    //   109: if_icmple -> 117
    //   112: iconst_2
    //   113: istore_2
    //   114: goto -> 120
    //   117: iload #6
    //   119: istore_2
    //   120: aload_1
    //   121: getfield k : I
    //   124: iload_2
    //   125: if_icmpgt -> 1379
    //   128: aload_1
    //   129: getfield w : Z
    //   132: ifeq -> 143
    //   135: aload_1
    //   136: getfield x : Z
    //   139: ifne -> 143
    //   142: return
    //   143: aload_1
    //   144: invokevirtual Y : ()Landroid/view/View;
    //   147: ifnonnull -> 157
    //   150: aload_1
    //   151: invokevirtual Z : ()Landroid/animation/Animator;
    //   154: ifnull -> 179
    //   157: aload_1
    //   158: aconst_null
    //   159: invokevirtual a : (Landroid/view/View;)V
    //   162: aload_1
    //   163: aconst_null
    //   164: invokevirtual a : (Landroid/animation/Animator;)V
    //   167: aload_0
    //   168: aload_1
    //   169: aload_1
    //   170: invokevirtual aa : ()I
    //   173: iconst_0
    //   174: iconst_0
    //   175: iconst_1
    //   176: invokevirtual a : (Landroid/support/v4/app/f;IIIZ)V
    //   179: iload_2
    //   180: istore #4
    //   182: iload_2
    //   183: istore #6
    //   185: iload_2
    //   186: istore_3
    //   187: aload_1
    //   188: getfield k : I
    //   191: tableswitch default -> 220, 0 -> 226, 1 -> 774, 2 -> 1237, 3 -> 1302
    //   220: iload_2
    //   221: istore #6
    //   223: goto -> 1996
    //   226: iload_2
    //   227: istore #4
    //   229: iload_2
    //   230: ifle -> 774
    //   233: getstatic android/support/v4/app/l.a : Z
    //   236: ifeq -> 276
    //   239: new java/lang/StringBuilder
    //   242: dup
    //   243: invokespecial <init> : ()V
    //   246: astore #10
    //   248: aload #10
    //   250: ldc_w 'moveto CREATED: '
    //   253: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   256: pop
    //   257: aload #10
    //   259: aload_1
    //   260: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   263: pop
    //   264: ldc_w 'FragmentManager'
    //   267: aload #10
    //   269: invokevirtual toString : ()Ljava/lang/String;
    //   272: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   275: pop
    //   276: iload_2
    //   277: istore #4
    //   279: aload_1
    //   280: getfield l : Landroid/os/Bundle;
    //   283: ifnull -> 421
    //   286: aload_1
    //   287: getfield l : Landroid/os/Bundle;
    //   290: aload_0
    //   291: getfield m : Landroid/support/v4/app/j;
    //   294: invokevirtual g : ()Landroid/content/Context;
    //   297: invokevirtual getClassLoader : ()Ljava/lang/ClassLoader;
    //   300: invokevirtual setClassLoader : (Ljava/lang/ClassLoader;)V
    //   303: aload_1
    //   304: aload_1
    //   305: getfield l : Landroid/os/Bundle;
    //   308: ldc_w 'android:view_state'
    //   311: invokevirtual getSparseParcelableArray : (Ljava/lang/String;)Landroid/util/SparseArray;
    //   314: putfield m : Landroid/util/SparseArray;
    //   317: aload_1
    //   318: aload_0
    //   319: aload_1
    //   320: getfield l : Landroid/os/Bundle;
    //   323: ldc_w 'android:target_state'
    //   326: invokevirtual a : (Landroid/os/Bundle;Ljava/lang/String;)Landroid/support/v4/app/f;
    //   329: putfield r : Landroid/support/v4/app/f;
    //   332: aload_1
    //   333: getfield r : Landroid/support/v4/app/f;
    //   336: ifnull -> 354
    //   339: aload_1
    //   340: aload_1
    //   341: getfield l : Landroid/os/Bundle;
    //   344: ldc_w 'android:target_req_state'
    //   347: iconst_0
    //   348: invokevirtual getInt : (Ljava/lang/String;I)I
    //   351: putfield t : I
    //   354: aload_1
    //   355: getfield n : Ljava/lang/Boolean;
    //   358: ifnull -> 380
    //   361: aload_1
    //   362: aload_1
    //   363: getfield n : Ljava/lang/Boolean;
    //   366: invokevirtual booleanValue : ()Z
    //   369: putfield V : Z
    //   372: aload_1
    //   373: aconst_null
    //   374: putfield n : Ljava/lang/Boolean;
    //   377: goto -> 395
    //   380: aload_1
    //   381: aload_1
    //   382: getfield l : Landroid/os/Bundle;
    //   385: ldc_w 'android:user_visible_hint'
    //   388: iconst_1
    //   389: invokevirtual getBoolean : (Ljava/lang/String;Z)Z
    //   392: putfield V : Z
    //   395: iload_2
    //   396: istore #4
    //   398: aload_1
    //   399: getfield V : Z
    //   402: ifne -> 421
    //   405: aload_1
    //   406: iconst_1
    //   407: putfield U : Z
    //   410: iload_2
    //   411: istore #4
    //   413: iload_2
    //   414: iconst_2
    //   415: if_icmple -> 421
    //   418: iconst_2
    //   419: istore #4
    //   421: aload_0
    //   422: getfield m : Landroid/support/v4/app/j;
    //   425: astore #10
    //   427: aload_1
    //   428: aload #10
    //   430: putfield C : Landroid/support/v4/app/j;
    //   433: aload_0
    //   434: getfield o : Landroid/support/v4/app/f;
    //   437: astore #11
    //   439: aload_1
    //   440: aload #11
    //   442: putfield G : Landroid/support/v4/app/f;
    //   445: aload #11
    //   447: ifnull -> 460
    //   450: aload #11
    //   452: getfield D : Landroid/support/v4/app/l;
    //   455: astore #10
    //   457: goto -> 467
    //   460: aload #10
    //   462: invokevirtual i : ()Landroid/support/v4/app/l;
    //   465: astore #10
    //   467: aload_1
    //   468: aload #10
    //   470: putfield B : Landroid/support/v4/app/l;
    //   473: aload_1
    //   474: getfield r : Landroid/support/v4/app/f;
    //   477: ifnull -> 593
    //   480: aload_0
    //   481: getfield f : Landroid/util/SparseArray;
    //   484: aload_1
    //   485: getfield r : Landroid/support/v4/app/f;
    //   488: getfield o : I
    //   491: invokevirtual get : (I)Ljava/lang/Object;
    //   494: aload_1
    //   495: getfield r : Landroid/support/v4/app/f;
    //   498: if_acmpne -> 527
    //   501: aload_1
    //   502: getfield r : Landroid/support/v4/app/f;
    //   505: getfield k : I
    //   508: iconst_1
    //   509: if_icmpge -> 593
    //   512: aload_0
    //   513: aload_1
    //   514: getfield r : Landroid/support/v4/app/f;
    //   517: iconst_1
    //   518: iconst_0
    //   519: iconst_0
    //   520: iconst_1
    //   521: invokevirtual a : (Landroid/support/v4/app/f;IIIZ)V
    //   524: goto -> 593
    //   527: new java/lang/StringBuilder
    //   530: dup
    //   531: invokespecial <init> : ()V
    //   534: astore #10
    //   536: aload #10
    //   538: ldc_w 'Fragment '
    //   541: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   544: pop
    //   545: aload #10
    //   547: aload_1
    //   548: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   551: pop
    //   552: aload #10
    //   554: ldc_w ' declared target fragment '
    //   557: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   560: pop
    //   561: aload #10
    //   563: aload_1
    //   564: getfield r : Landroid/support/v4/app/f;
    //   567: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   570: pop
    //   571: aload #10
    //   573: ldc_w ' that does not belong to this FragmentManager!'
    //   576: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   579: pop
    //   580: new java/lang/IllegalStateException
    //   583: dup
    //   584: aload #10
    //   586: invokevirtual toString : ()Ljava/lang/String;
    //   589: invokespecial <init> : (Ljava/lang/String;)V
    //   592: athrow
    //   593: aload_0
    //   594: aload_1
    //   595: aload_0
    //   596: getfield m : Landroid/support/v4/app/j;
    //   599: invokevirtual g : ()Landroid/content/Context;
    //   602: iconst_0
    //   603: invokevirtual a : (Landroid/support/v4/app/f;Landroid/content/Context;Z)V
    //   606: aload_1
    //   607: iconst_0
    //   608: putfield Q : Z
    //   611: aload_1
    //   612: aload_0
    //   613: getfield m : Landroid/support/v4/app/j;
    //   616: invokevirtual g : ()Landroid/content/Context;
    //   619: invokevirtual a : (Landroid/content/Context;)V
    //   622: aload_1
    //   623: getfield Q : Z
    //   626: ifeq -> 727
    //   629: aload_1
    //   630: getfield G : Landroid/support/v4/app/f;
    //   633: ifnonnull -> 647
    //   636: aload_0
    //   637: getfield m : Landroid/support/v4/app/j;
    //   640: aload_1
    //   641: invokevirtual b : (Landroid/support/v4/app/f;)V
    //   644: goto -> 655
    //   647: aload_1
    //   648: getfield G : Landroid/support/v4/app/f;
    //   651: aload_1
    //   652: invokevirtual a : (Landroid/support/v4/app/f;)V
    //   655: aload_0
    //   656: aload_1
    //   657: aload_0
    //   658: getfield m : Landroid/support/v4/app/j;
    //   661: invokevirtual g : ()Landroid/content/Context;
    //   664: iconst_0
    //   665: invokevirtual b : (Landroid/support/v4/app/f;Landroid/content/Context;Z)V
    //   668: aload_1
    //   669: getfield ab : Z
    //   672: ifne -> 706
    //   675: aload_0
    //   676: aload_1
    //   677: aload_1
    //   678: getfield l : Landroid/os/Bundle;
    //   681: iconst_0
    //   682: invokevirtual a : (Landroid/support/v4/app/f;Landroid/os/Bundle;Z)V
    //   685: aload_1
    //   686: aload_1
    //   687: getfield l : Landroid/os/Bundle;
    //   690: invokevirtual l : (Landroid/os/Bundle;)V
    //   693: aload_0
    //   694: aload_1
    //   695: aload_1
    //   696: getfield l : Landroid/os/Bundle;
    //   699: iconst_0
    //   700: invokevirtual b : (Landroid/support/v4/app/f;Landroid/os/Bundle;Z)V
    //   703: goto -> 719
    //   706: aload_1
    //   707: aload_1
    //   708: getfield l : Landroid/os/Bundle;
    //   711: invokevirtual j : (Landroid/os/Bundle;)V
    //   714: aload_1
    //   715: iconst_1
    //   716: putfield k : I
    //   719: aload_1
    //   720: iconst_0
    //   721: putfield N : Z
    //   724: goto -> 774
    //   727: new java/lang/StringBuilder
    //   730: dup
    //   731: invokespecial <init> : ()V
    //   734: astore #10
    //   736: aload #10
    //   738: ldc_w 'Fragment '
    //   741: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   744: pop
    //   745: aload #10
    //   747: aload_1
    //   748: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   751: pop
    //   752: aload #10
    //   754: ldc_w ' did not call through to super.onAttach()'
    //   757: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   760: pop
    //   761: new android/support/v4/app/ac
    //   764: dup
    //   765: aload #10
    //   767: invokevirtual toString : ()Ljava/lang/String;
    //   770: invokespecial <init> : (Ljava/lang/String;)V
    //   773: athrow
    //   774: aload_0
    //   775: aload_1
    //   776: invokevirtual c : (Landroid/support/v4/app/f;)V
    //   779: iload #4
    //   781: istore #6
    //   783: iload #4
    //   785: iconst_1
    //   786: if_icmple -> 1237
    //   789: getstatic android/support/v4/app/l.a : Z
    //   792: ifeq -> 832
    //   795: new java/lang/StringBuilder
    //   798: dup
    //   799: invokespecial <init> : ()V
    //   802: astore #10
    //   804: aload #10
    //   806: ldc_w 'moveto ACTIVITY_CREATED: '
    //   809: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   812: pop
    //   813: aload #10
    //   815: aload_1
    //   816: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   819: pop
    //   820: ldc_w 'FragmentManager'
    //   823: aload #10
    //   825: invokevirtual toString : ()Ljava/lang/String;
    //   828: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   831: pop
    //   832: aload_1
    //   833: getfield w : Z
    //   836: ifne -> 1195
    //   839: aload_1
    //   840: getfield I : I
    //   843: ifeq -> 1048
    //   846: aload_1
    //   847: getfield I : I
    //   850: iconst_m1
    //   851: if_icmpne -> 904
    //   854: new java/lang/StringBuilder
    //   857: dup
    //   858: invokespecial <init> : ()V
    //   861: astore #10
    //   863: aload #10
    //   865: ldc_w 'Cannot create fragment '
    //   868: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   871: pop
    //   872: aload #10
    //   874: aload_1
    //   875: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   878: pop
    //   879: aload #10
    //   881: ldc_w ' for a container view with no id'
    //   884: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   887: pop
    //   888: aload_0
    //   889: new java/lang/IllegalArgumentException
    //   892: dup
    //   893: aload #10
    //   895: invokevirtual toString : ()Ljava/lang/String;
    //   898: invokespecial <init> : (Ljava/lang/String;)V
    //   901: invokespecial a : (Ljava/lang/RuntimeException;)V
    //   904: aload_0
    //   905: getfield n : Landroid/support/v4/app/h;
    //   908: aload_1
    //   909: getfield I : I
    //   912: invokevirtual a : (I)Landroid/view/View;
    //   915: checkcast android/view/ViewGroup
    //   918: astore #11
    //   920: aload #11
    //   922: astore #10
    //   924: aload #11
    //   926: ifnonnull -> 1051
    //   929: aload #11
    //   931: astore #10
    //   933: aload_1
    //   934: getfield y : Z
    //   937: ifne -> 1051
    //   940: aload_1
    //   941: invokevirtual o : ()Landroid/content/res/Resources;
    //   944: aload_1
    //   945: getfield I : I
    //   948: invokevirtual getResourceName : (I)Ljava/lang/String;
    //   951: astore #10
    //   953: goto -> 961
    //   956: ldc_w 'unknown'
    //   959: astore #10
    //   961: new java/lang/StringBuilder
    //   964: dup
    //   965: invokespecial <init> : ()V
    //   968: astore #12
    //   970: aload #12
    //   972: ldc_w 'No view found for id 0x'
    //   975: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   978: pop
    //   979: aload #12
    //   981: aload_1
    //   982: getfield I : I
    //   985: invokestatic toHexString : (I)Ljava/lang/String;
    //   988: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   991: pop
    //   992: aload #12
    //   994: ldc_w ' ('
    //   997: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1000: pop
    //   1001: aload #12
    //   1003: aload #10
    //   1005: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1008: pop
    //   1009: aload #12
    //   1011: ldc_w ') for fragment '
    //   1014: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1017: pop
    //   1018: aload #12
    //   1020: aload_1
    //   1021: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1024: pop
    //   1025: aload_0
    //   1026: new java/lang/IllegalArgumentException
    //   1029: dup
    //   1030: aload #12
    //   1032: invokevirtual toString : ()Ljava/lang/String;
    //   1035: invokespecial <init> : (Ljava/lang/String;)V
    //   1038: invokespecial a : (Ljava/lang/RuntimeException;)V
    //   1041: aload #11
    //   1043: astore #10
    //   1045: goto -> 1051
    //   1048: aconst_null
    //   1049: astore #10
    //   1051: aload_1
    //   1052: aload #10
    //   1054: putfield R : Landroid/view/ViewGroup;
    //   1057: aload_1
    //   1058: aload_1
    //   1059: aload_1
    //   1060: getfield l : Landroid/os/Bundle;
    //   1063: invokevirtual h : (Landroid/os/Bundle;)Landroid/view/LayoutInflater;
    //   1066: aload #10
    //   1068: aload_1
    //   1069: getfield l : Landroid/os/Bundle;
    //   1072: invokevirtual b : (Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)V
    //   1075: aload_1
    //   1076: getfield S : Landroid/view/View;
    //   1079: ifnull -> 1190
    //   1082: aload_1
    //   1083: aload_1
    //   1084: getfield S : Landroid/view/View;
    //   1087: putfield T : Landroid/view/View;
    //   1090: aload_1
    //   1091: getfield S : Landroid/view/View;
    //   1094: iconst_0
    //   1095: invokevirtual setSaveFromParentEnabled : (Z)V
    //   1098: aload #10
    //   1100: ifnull -> 1112
    //   1103: aload #10
    //   1105: aload_1
    //   1106: getfield S : Landroid/view/View;
    //   1109: invokevirtual addView : (Landroid/view/View;)V
    //   1112: aload_1
    //   1113: getfield K : Z
    //   1116: ifeq -> 1128
    //   1119: aload_1
    //   1120: getfield S : Landroid/view/View;
    //   1123: bipush #8
    //   1125: invokevirtual setVisibility : (I)V
    //   1128: aload_1
    //   1129: aload_1
    //   1130: getfield S : Landroid/view/View;
    //   1133: aload_1
    //   1134: getfield l : Landroid/os/Bundle;
    //   1137: invokevirtual a : (Landroid/view/View;Landroid/os/Bundle;)V
    //   1140: aload_0
    //   1141: aload_1
    //   1142: aload_1
    //   1143: getfield S : Landroid/view/View;
    //   1146: aload_1
    //   1147: getfield l : Landroid/os/Bundle;
    //   1150: iconst_0
    //   1151: invokevirtual a : (Landroid/support/v4/app/f;Landroid/view/View;Landroid/os/Bundle;Z)V
    //   1154: aload_1
    //   1155: getfield S : Landroid/view/View;
    //   1158: invokevirtual getVisibility : ()I
    //   1161: ifne -> 1178
    //   1164: aload_1
    //   1165: getfield R : Landroid/view/ViewGroup;
    //   1168: ifnull -> 1178
    //   1171: iload #8
    //   1173: istore #5
    //   1175: goto -> 1181
    //   1178: iconst_0
    //   1179: istore #5
    //   1181: aload_1
    //   1182: iload #5
    //   1184: putfield X : Z
    //   1187: goto -> 1195
    //   1190: aload_1
    //   1191: aconst_null
    //   1192: putfield T : Landroid/view/View;
    //   1195: aload_1
    //   1196: aload_1
    //   1197: getfield l : Landroid/os/Bundle;
    //   1200: invokevirtual m : (Landroid/os/Bundle;)V
    //   1203: aload_0
    //   1204: aload_1
    //   1205: aload_1
    //   1206: getfield l : Landroid/os/Bundle;
    //   1209: iconst_0
    //   1210: invokevirtual c : (Landroid/support/v4/app/f;Landroid/os/Bundle;Z)V
    //   1213: aload_1
    //   1214: getfield S : Landroid/view/View;
    //   1217: ifnull -> 1228
    //   1220: aload_1
    //   1221: aload_1
    //   1222: getfield l : Landroid/os/Bundle;
    //   1225: invokevirtual f : (Landroid/os/Bundle;)V
    //   1228: aload_1
    //   1229: aconst_null
    //   1230: putfield l : Landroid/os/Bundle;
    //   1233: iload #4
    //   1235: istore #6
    //   1237: iload #6
    //   1239: istore_3
    //   1240: iload #6
    //   1242: iconst_2
    //   1243: if_icmple -> 1302
    //   1246: getstatic android/support/v4/app/l.a : Z
    //   1249: ifeq -> 1289
    //   1252: new java/lang/StringBuilder
    //   1255: dup
    //   1256: invokespecial <init> : ()V
    //   1259: astore #10
    //   1261: aload #10
    //   1263: ldc_w 'moveto STARTED: '
    //   1266: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1269: pop
    //   1270: aload #10
    //   1272: aload_1
    //   1273: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1276: pop
    //   1277: ldc_w 'FragmentManager'
    //   1280: aload #10
    //   1282: invokevirtual toString : ()Ljava/lang/String;
    //   1285: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1288: pop
    //   1289: aload_1
    //   1290: invokevirtual K : ()V
    //   1293: aload_0
    //   1294: aload_1
    //   1295: iconst_0
    //   1296: invokevirtual b : (Landroid/support/v4/app/f;Z)V
    //   1299: iload #6
    //   1301: istore_3
    //   1302: iload_3
    //   1303: istore #6
    //   1305: iload_3
    //   1306: iconst_3
    //   1307: if_icmple -> 1996
    //   1310: getstatic android/support/v4/app/l.a : Z
    //   1313: ifeq -> 1353
    //   1316: new java/lang/StringBuilder
    //   1319: dup
    //   1320: invokespecial <init> : ()V
    //   1323: astore #10
    //   1325: aload #10
    //   1327: ldc_w 'moveto RESUMED: '
    //   1330: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1333: pop
    //   1334: aload #10
    //   1336: aload_1
    //   1337: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1340: pop
    //   1341: ldc_w 'FragmentManager'
    //   1344: aload #10
    //   1346: invokevirtual toString : ()Ljava/lang/String;
    //   1349: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1352: pop
    //   1353: aload_1
    //   1354: invokevirtual L : ()V
    //   1357: aload_0
    //   1358: aload_1
    //   1359: iconst_0
    //   1360: invokevirtual c : (Landroid/support/v4/app/f;Z)V
    //   1363: aload_1
    //   1364: aconst_null
    //   1365: putfield l : Landroid/os/Bundle;
    //   1368: aload_1
    //   1369: aconst_null
    //   1370: putfield m : Landroid/util/SparseArray;
    //   1373: iload_3
    //   1374: istore #6
    //   1376: goto -> 1996
    //   1379: iload_2
    //   1380: istore #6
    //   1382: aload_1
    //   1383: getfield k : I
    //   1386: iload_2
    //   1387: if_icmple -> 1996
    //   1390: aload_1
    //   1391: getfield k : I
    //   1394: tableswitch default -> 1424, 1 -> 1778, 2 -> 1546, 3 -> 1488, 4 -> 1430
    //   1424: iload_2
    //   1425: istore #6
    //   1427: goto -> 1996
    //   1430: iload_2
    //   1431: iconst_4
    //   1432: if_icmpge -> 1488
    //   1435: getstatic android/support/v4/app/l.a : Z
    //   1438: ifeq -> 1478
    //   1441: new java/lang/StringBuilder
    //   1444: dup
    //   1445: invokespecial <init> : ()V
    //   1448: astore #10
    //   1450: aload #10
    //   1452: ldc_w 'movefrom RESUMED: '
    //   1455: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1458: pop
    //   1459: aload #10
    //   1461: aload_1
    //   1462: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1465: pop
    //   1466: ldc_w 'FragmentManager'
    //   1469: aload #10
    //   1471: invokevirtual toString : ()Ljava/lang/String;
    //   1474: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1477: pop
    //   1478: aload_1
    //   1479: invokevirtual O : ()V
    //   1482: aload_0
    //   1483: aload_1
    //   1484: iconst_0
    //   1485: invokevirtual d : (Landroid/support/v4/app/f;Z)V
    //   1488: iload_2
    //   1489: iconst_3
    //   1490: if_icmpge -> 1546
    //   1493: getstatic android/support/v4/app/l.a : Z
    //   1496: ifeq -> 1536
    //   1499: new java/lang/StringBuilder
    //   1502: dup
    //   1503: invokespecial <init> : ()V
    //   1506: astore #10
    //   1508: aload #10
    //   1510: ldc_w 'movefrom STARTED: '
    //   1513: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1516: pop
    //   1517: aload #10
    //   1519: aload_1
    //   1520: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1523: pop
    //   1524: ldc_w 'FragmentManager'
    //   1527: aload #10
    //   1529: invokevirtual toString : ()Ljava/lang/String;
    //   1532: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1535: pop
    //   1536: aload_1
    //   1537: invokevirtual P : ()V
    //   1540: aload_0
    //   1541: aload_1
    //   1542: iconst_0
    //   1543: invokevirtual e : (Landroid/support/v4/app/f;Z)V
    //   1546: iload_2
    //   1547: iconst_2
    //   1548: if_icmpge -> 1778
    //   1551: getstatic android/support/v4/app/l.a : Z
    //   1554: ifeq -> 1594
    //   1557: new java/lang/StringBuilder
    //   1560: dup
    //   1561: invokespecial <init> : ()V
    //   1564: astore #10
    //   1566: aload #10
    //   1568: ldc_w 'movefrom ACTIVITY_CREATED: '
    //   1571: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1574: pop
    //   1575: aload #10
    //   1577: aload_1
    //   1578: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1581: pop
    //   1582: ldc_w 'FragmentManager'
    //   1585: aload #10
    //   1587: invokevirtual toString : ()Ljava/lang/String;
    //   1590: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1593: pop
    //   1594: aload_1
    //   1595: getfield S : Landroid/view/View;
    //   1598: ifnull -> 1624
    //   1601: aload_0
    //   1602: getfield m : Landroid/support/v4/app/j;
    //   1605: aload_1
    //   1606: invokevirtual a : (Landroid/support/v4/app/f;)Z
    //   1609: ifeq -> 1624
    //   1612: aload_1
    //   1613: getfield m : Landroid/util/SparseArray;
    //   1616: ifnonnull -> 1624
    //   1619: aload_0
    //   1620: aload_1
    //   1621: invokevirtual m : (Landroid/support/v4/app/f;)V
    //   1624: aload_1
    //   1625: invokevirtual Q : ()V
    //   1628: aload_0
    //   1629: aload_1
    //   1630: iconst_0
    //   1631: invokevirtual f : (Landroid/support/v4/app/f;Z)V
    //   1634: aload_1
    //   1635: getfield S : Landroid/view/View;
    //   1638: ifnull -> 1745
    //   1641: aload_1
    //   1642: getfield R : Landroid/view/ViewGroup;
    //   1645: ifnull -> 1745
    //   1648: aload_1
    //   1649: getfield R : Landroid/view/ViewGroup;
    //   1652: aload_1
    //   1653: getfield S : Landroid/view/View;
    //   1656: invokevirtual endViewTransition : (Landroid/view/View;)V
    //   1659: aload_1
    //   1660: getfield S : Landroid/view/View;
    //   1663: invokevirtual clearAnimation : ()V
    //   1666: aload_0
    //   1667: getfield l : I
    //   1670: ifle -> 1713
    //   1673: aload_0
    //   1674: getfield u : Z
    //   1677: ifne -> 1713
    //   1680: aload_1
    //   1681: getfield S : Landroid/view/View;
    //   1684: invokevirtual getVisibility : ()I
    //   1687: ifne -> 1713
    //   1690: aload_1
    //   1691: getfield Z : F
    //   1694: fconst_0
    //   1695: fcmpl
    //   1696: iflt -> 1713
    //   1699: aload_0
    //   1700: aload_1
    //   1701: iload_3
    //   1702: iconst_0
    //   1703: iload #4
    //   1705: invokevirtual a : (Landroid/support/v4/app/f;IZI)Landroid/support/v4/app/l$c;
    //   1708: astore #10
    //   1710: goto -> 1716
    //   1713: aconst_null
    //   1714: astore #10
    //   1716: aload_1
    //   1717: fconst_0
    //   1718: putfield Z : F
    //   1721: aload #10
    //   1723: ifnull -> 1734
    //   1726: aload_0
    //   1727: aload_1
    //   1728: aload #10
    //   1730: iload_2
    //   1731: invokespecial a : (Landroid/support/v4/app/f;Landroid/support/v4/app/l$c;I)V
    //   1734: aload_1
    //   1735: getfield R : Landroid/view/ViewGroup;
    //   1738: aload_1
    //   1739: getfield S : Landroid/view/View;
    //   1742: invokevirtual removeView : (Landroid/view/View;)V
    //   1745: aload_1
    //   1746: aconst_null
    //   1747: putfield R : Landroid/view/ViewGroup;
    //   1750: aload_1
    //   1751: aconst_null
    //   1752: putfield S : Landroid/view/View;
    //   1755: aload_1
    //   1756: aconst_null
    //   1757: putfield ae : Landroid/arch/lifecycle/e;
    //   1760: aload_1
    //   1761: getfield af : Landroid/arch/lifecycle/j;
    //   1764: aconst_null
    //   1765: invokevirtual a : (Ljava/lang/Object;)V
    //   1768: aload_1
    //   1769: aconst_null
    //   1770: putfield T : Landroid/view/View;
    //   1773: aload_1
    //   1774: iconst_0
    //   1775: putfield x : Z
    //   1778: iload_2
    //   1779: istore #6
    //   1781: iload_2
    //   1782: iconst_1
    //   1783: if_icmpge -> 1996
    //   1786: aload_0
    //   1787: getfield u : Z
    //   1790: ifeq -> 1842
    //   1793: aload_1
    //   1794: invokevirtual Y : ()Landroid/view/View;
    //   1797: ifnull -> 1819
    //   1800: aload_1
    //   1801: invokevirtual Y : ()Landroid/view/View;
    //   1804: astore #10
    //   1806: aload_1
    //   1807: aconst_null
    //   1808: invokevirtual a : (Landroid/view/View;)V
    //   1811: aload #10
    //   1813: invokevirtual clearAnimation : ()V
    //   1816: goto -> 1842
    //   1819: aload_1
    //   1820: invokevirtual Z : ()Landroid/animation/Animator;
    //   1823: ifnull -> 1842
    //   1826: aload_1
    //   1827: invokevirtual Z : ()Landroid/animation/Animator;
    //   1830: astore #10
    //   1832: aload_1
    //   1833: aconst_null
    //   1834: invokevirtual a : (Landroid/animation/Animator;)V
    //   1837: aload #10
    //   1839: invokevirtual cancel : ()V
    //   1842: aload_1
    //   1843: invokevirtual Y : ()Landroid/view/View;
    //   1846: ifnonnull -> 1984
    //   1849: aload_1
    //   1850: invokevirtual Z : ()Landroid/animation/Animator;
    //   1853: ifnull -> 1859
    //   1856: goto -> 1984
    //   1859: getstatic android/support/v4/app/l.a : Z
    //   1862: ifeq -> 1902
    //   1865: new java/lang/StringBuilder
    //   1868: dup
    //   1869: invokespecial <init> : ()V
    //   1872: astore #10
    //   1874: aload #10
    //   1876: ldc_w 'movefrom CREATED: '
    //   1879: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1882: pop
    //   1883: aload #10
    //   1885: aload_1
    //   1886: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   1889: pop
    //   1890: ldc_w 'FragmentManager'
    //   1893: aload #10
    //   1895: invokevirtual toString : ()Ljava/lang/String;
    //   1898: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   1901: pop
    //   1902: aload_1
    //   1903: getfield N : Z
    //   1906: ifne -> 1922
    //   1909: aload_1
    //   1910: invokevirtual R : ()V
    //   1913: aload_0
    //   1914: aload_1
    //   1915: iconst_0
    //   1916: invokevirtual g : (Landroid/support/v4/app/f;Z)V
    //   1919: goto -> 1927
    //   1922: aload_1
    //   1923: iconst_0
    //   1924: putfield k : I
    //   1927: aload_1
    //   1928: invokevirtual S : ()V
    //   1931: aload_0
    //   1932: aload_1
    //   1933: iconst_0
    //   1934: invokevirtual h : (Landroid/support/v4/app/f;Z)V
    //   1937: iload_2
    //   1938: istore #6
    //   1940: iload #5
    //   1942: ifne -> 1996
    //   1945: aload_1
    //   1946: getfield N : Z
    //   1949: ifne -> 1963
    //   1952: aload_0
    //   1953: aload_1
    //   1954: invokevirtual g : (Landroid/support/v4/app/f;)V
    //   1957: iload_2
    //   1958: istore #6
    //   1960: goto -> 1996
    //   1963: aload_1
    //   1964: aconst_null
    //   1965: putfield C : Landroid/support/v4/app/j;
    //   1968: aload_1
    //   1969: aconst_null
    //   1970: putfield G : Landroid/support/v4/app/f;
    //   1973: aload_1
    //   1974: aconst_null
    //   1975: putfield B : Landroid/support/v4/app/l;
    //   1978: iload_2
    //   1979: istore #6
    //   1981: goto -> 1996
    //   1984: aload_1
    //   1985: iload_2
    //   1986: invokevirtual b : (I)V
    //   1989: iload #7
    //   1991: istore #6
    //   1993: goto -> 1996
    //   1996: aload_1
    //   1997: getfield k : I
    //   2000: iload #6
    //   2002: if_icmpeq -> 2093
    //   2005: new java/lang/StringBuilder
    //   2008: dup
    //   2009: invokespecial <init> : ()V
    //   2012: astore #10
    //   2014: aload #10
    //   2016: ldc_w 'moveToState: Fragment state for '
    //   2019: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2022: pop
    //   2023: aload #10
    //   2025: aload_1
    //   2026: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   2029: pop
    //   2030: aload #10
    //   2032: ldc_w ' not updated inline; '
    //   2035: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2038: pop
    //   2039: aload #10
    //   2041: ldc_w 'expected state '
    //   2044: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2047: pop
    //   2048: aload #10
    //   2050: iload #6
    //   2052: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   2055: pop
    //   2056: aload #10
    //   2058: ldc_w ' found '
    //   2061: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2064: pop
    //   2065: aload #10
    //   2067: aload_1
    //   2068: getfield k : I
    //   2071: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   2074: pop
    //   2075: ldc_w 'FragmentManager'
    //   2078: aload #10
    //   2080: invokevirtual toString : ()Ljava/lang/String;
    //   2083: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   2086: pop
    //   2087: aload_1
    //   2088: iload #6
    //   2090: putfield k : I
    //   2093: return
    //   2094: astore #10
    //   2096: goto -> 956
    // Exception table:
    //   from	to	target	type
    //   940	953	2094	android/content/res/Resources$NotFoundException }
  
  void a(f paramf, Context paramContext, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).a(paramf, paramContext, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.a(this, paramf, paramContext); 
    } 
  }
  
  void a(f paramf, Bundle paramBundle, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).a(paramf, paramBundle, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.a(this, paramf, paramBundle); 
    } 
  }
  
  void a(f paramf, View paramView, Bundle paramBundle, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).a(paramf, paramView, paramBundle, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.a(this, paramf, paramView, paramBundle); 
    } 
  }
  
  public void a(f paramf, boolean paramBoolean) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("add: ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    f(paramf);
    if (!paramf.L)
      if (!this.e.contains(paramf)) {
        synchronized (this.e) {
          this.e.add(paramf);
          paramf.u = true;
          paramf.v = false;
          if (paramf.S == null)
            paramf.Y = false; 
          if (paramf.O && paramf.P)
            this.r = true; 
          if (paramBoolean) {
            b(paramf);
            return;
          } 
        } 
      } else {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Fragment already added: ");
        stringBuilder.append(paramf);
        throw new IllegalStateException(stringBuilder.toString());
      }  
  }
  
  public void a(j paramj, h paramh, f paramf) {
    if (this.m == null) {
      this.m = paramj;
      this.n = paramh;
      this.o = paramf;
      return;
    } 
    throw new IllegalStateException("Already attached");
  }
  
  public void a(h paramh, boolean paramBoolean) { // Byte code:
    //   0: iload_2
    //   1: ifne -> 8
    //   4: aload_0
    //   5: invokespecial y : ()V
    //   8: aload_0
    //   9: monitorenter
    //   10: aload_0
    //   11: getfield u : Z
    //   14: ifne -> 61
    //   17: aload_0
    //   18: getfield m : Landroid/support/v4/app/j;
    //   21: ifnonnull -> 27
    //   24: goto -> 61
    //   27: aload_0
    //   28: getfield b : Ljava/util/ArrayList;
    //   31: ifnonnull -> 45
    //   34: aload_0
    //   35: new java/util/ArrayList
    //   38: dup
    //   39: invokespecial <init> : ()V
    //   42: putfield b : Ljava/util/ArrayList;
    //   45: aload_0
    //   46: getfield b : Ljava/util/ArrayList;
    //   49: aload_1
    //   50: invokevirtual add : (Ljava/lang/Object;)Z
    //   53: pop
    //   54: aload_0
    //   55: invokevirtual f : ()V
    //   58: aload_0
    //   59: monitorexit
    //   60: return
    //   61: iload_2
    //   62: ifeq -> 68
    //   65: aload_0
    //   66: monitorexit
    //   67: return
    //   68: new java/lang/IllegalStateException
    //   71: dup
    //   72: ldc_w 'Activity has been destroyed'
    //   75: invokespecial <init> : (Ljava/lang/String;)V
    //   78: athrow
    //   79: astore_1
    //   80: aload_0
    //   81: monitorexit
    //   82: aload_1
    //   83: athrow
    // Exception table:
    //   from	to	target	type
    //   10	24	79	finally
    //   27	45	79	finally
    //   45	60	79	finally
    //   65	67	79	finally
    //   68	79	79	finally
    //   80	82	79	finally }
  
  public void a(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) { // Byte code:
    //   0: new java/lang/StringBuilder
    //   3: dup
    //   4: invokespecial <init> : ()V
    //   7: astore #8
    //   9: aload #8
    //   11: aload_1
    //   12: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   15: pop
    //   16: aload #8
    //   18: ldc_w '    '
    //   21: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   24: pop
    //   25: aload #8
    //   27: invokevirtual toString : ()Ljava/lang/String;
    //   30: astore #8
    //   32: aload_0
    //   33: getfield f : Landroid/util/SparseArray;
    //   36: astore #9
    //   38: iconst_0
    //   39: istore #6
    //   41: aload #9
    //   43: ifnull -> 168
    //   46: aload #9
    //   48: invokevirtual size : ()I
    //   51: istore #7
    //   53: iload #7
    //   55: ifle -> 168
    //   58: aload_3
    //   59: aload_1
    //   60: invokevirtual print : (Ljava/lang/String;)V
    //   63: aload_3
    //   64: ldc_w 'Active Fragments in '
    //   67: invokevirtual print : (Ljava/lang/String;)V
    //   70: aload_3
    //   71: aload_0
    //   72: invokestatic identityHashCode : (Ljava/lang/Object;)I
    //   75: invokestatic toHexString : (I)Ljava/lang/String;
    //   78: invokevirtual print : (Ljava/lang/String;)V
    //   81: aload_3
    //   82: ldc_w ':'
    //   85: invokevirtual println : (Ljava/lang/String;)V
    //   88: iconst_0
    //   89: istore #5
    //   91: iload #5
    //   93: iload #7
    //   95: if_icmpge -> 168
    //   98: aload_0
    //   99: getfield f : Landroid/util/SparseArray;
    //   102: iload #5
    //   104: invokevirtual valueAt : (I)Ljava/lang/Object;
    //   107: checkcast android/support/v4/app/f
    //   110: astore #9
    //   112: aload_3
    //   113: aload_1
    //   114: invokevirtual print : (Ljava/lang/String;)V
    //   117: aload_3
    //   118: ldc_w '  #'
    //   121: invokevirtual print : (Ljava/lang/String;)V
    //   124: aload_3
    //   125: iload #5
    //   127: invokevirtual print : (I)V
    //   130: aload_3
    //   131: ldc_w ': '
    //   134: invokevirtual print : (Ljava/lang/String;)V
    //   137: aload_3
    //   138: aload #9
    //   140: invokevirtual println : (Ljava/lang/Object;)V
    //   143: aload #9
    //   145: ifnull -> 159
    //   148: aload #9
    //   150: aload #8
    //   152: aload_2
    //   153: aload_3
    //   154: aload #4
    //   156: invokevirtual a : (Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
    //   159: iload #5
    //   161: iconst_1
    //   162: iadd
    //   163: istore #5
    //   165: goto -> 91
    //   168: aload_0
    //   169: getfield e : Ljava/util/ArrayList;
    //   172: invokevirtual size : ()I
    //   175: istore #7
    //   177: iload #7
    //   179: ifle -> 261
    //   182: aload_3
    //   183: aload_1
    //   184: invokevirtual print : (Ljava/lang/String;)V
    //   187: aload_3
    //   188: ldc_w 'Added Fragments:'
    //   191: invokevirtual println : (Ljava/lang/String;)V
    //   194: iconst_0
    //   195: istore #5
    //   197: iload #5
    //   199: iload #7
    //   201: if_icmpge -> 261
    //   204: aload_0
    //   205: getfield e : Ljava/util/ArrayList;
    //   208: iload #5
    //   210: invokevirtual get : (I)Ljava/lang/Object;
    //   213: checkcast android/support/v4/app/f
    //   216: astore #9
    //   218: aload_3
    //   219: aload_1
    //   220: invokevirtual print : (Ljava/lang/String;)V
    //   223: aload_3
    //   224: ldc_w '  #'
    //   227: invokevirtual print : (Ljava/lang/String;)V
    //   230: aload_3
    //   231: iload #5
    //   233: invokevirtual print : (I)V
    //   236: aload_3
    //   237: ldc_w ': '
    //   240: invokevirtual print : (Ljava/lang/String;)V
    //   243: aload_3
    //   244: aload #9
    //   246: invokevirtual toString : ()Ljava/lang/String;
    //   249: invokevirtual println : (Ljava/lang/String;)V
    //   252: iload #5
    //   254: iconst_1
    //   255: iadd
    //   256: istore #5
    //   258: goto -> 197
    //   261: aload_0
    //   262: getfield h : Ljava/util/ArrayList;
    //   265: astore #9
    //   267: aload #9
    //   269: ifnull -> 363
    //   272: aload #9
    //   274: invokevirtual size : ()I
    //   277: istore #7
    //   279: iload #7
    //   281: ifle -> 363
    //   284: aload_3
    //   285: aload_1
    //   286: invokevirtual print : (Ljava/lang/String;)V
    //   289: aload_3
    //   290: ldc_w 'Fragments Created Menus:'
    //   293: invokevirtual println : (Ljava/lang/String;)V
    //   296: iconst_0
    //   297: istore #5
    //   299: iload #5
    //   301: iload #7
    //   303: if_icmpge -> 363
    //   306: aload_0
    //   307: getfield h : Ljava/util/ArrayList;
    //   310: iload #5
    //   312: invokevirtual get : (I)Ljava/lang/Object;
    //   315: checkcast android/support/v4/app/f
    //   318: astore #9
    //   320: aload_3
    //   321: aload_1
    //   322: invokevirtual print : (Ljava/lang/String;)V
    //   325: aload_3
    //   326: ldc_w '  #'
    //   329: invokevirtual print : (Ljava/lang/String;)V
    //   332: aload_3
    //   333: iload #5
    //   335: invokevirtual print : (I)V
    //   338: aload_3
    //   339: ldc_w ': '
    //   342: invokevirtual print : (Ljava/lang/String;)V
    //   345: aload_3
    //   346: aload #9
    //   348: invokevirtual toString : ()Ljava/lang/String;
    //   351: invokevirtual println : (Ljava/lang/String;)V
    //   354: iload #5
    //   356: iconst_1
    //   357: iadd
    //   358: istore #5
    //   360: goto -> 299
    //   363: aload_0
    //   364: getfield g : Ljava/util/ArrayList;
    //   367: astore #9
    //   369: aload #9
    //   371: ifnull -> 476
    //   374: aload #9
    //   376: invokevirtual size : ()I
    //   379: istore #7
    //   381: iload #7
    //   383: ifle -> 476
    //   386: aload_3
    //   387: aload_1
    //   388: invokevirtual print : (Ljava/lang/String;)V
    //   391: aload_3
    //   392: ldc_w 'Back Stack:'
    //   395: invokevirtual println : (Ljava/lang/String;)V
    //   398: iconst_0
    //   399: istore #5
    //   401: iload #5
    //   403: iload #7
    //   405: if_icmpge -> 476
    //   408: aload_0
    //   409: getfield g : Ljava/util/ArrayList;
    //   412: iload #5
    //   414: invokevirtual get : (I)Ljava/lang/Object;
    //   417: checkcast android/support/v4/app/c
    //   420: astore #9
    //   422: aload_3
    //   423: aload_1
    //   424: invokevirtual print : (Ljava/lang/String;)V
    //   427: aload_3
    //   428: ldc_w '  #'
    //   431: invokevirtual print : (Ljava/lang/String;)V
    //   434: aload_3
    //   435: iload #5
    //   437: invokevirtual print : (I)V
    //   440: aload_3
    //   441: ldc_w ': '
    //   444: invokevirtual print : (Ljava/lang/String;)V
    //   447: aload_3
    //   448: aload #9
    //   450: invokevirtual toString : ()Ljava/lang/String;
    //   453: invokevirtual println : (Ljava/lang/String;)V
    //   456: aload #9
    //   458: aload #8
    //   460: aload_2
    //   461: aload_3
    //   462: aload #4
    //   464: invokevirtual a : (Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
    //   467: iload #5
    //   469: iconst_1
    //   470: iadd
    //   471: istore #5
    //   473: goto -> 401
    //   476: aload_0
    //   477: monitorenter
    //   478: aload_0
    //   479: getfield i : Ljava/util/ArrayList;
    //   482: ifnull -> 573
    //   485: aload_0
    //   486: getfield i : Ljava/util/ArrayList;
    //   489: invokevirtual size : ()I
    //   492: istore #7
    //   494: iload #7
    //   496: ifle -> 573
    //   499: aload_3
    //   500: aload_1
    //   501: invokevirtual print : (Ljava/lang/String;)V
    //   504: aload_3
    //   505: ldc_w 'Back Stack Indices:'
    //   508: invokevirtual println : (Ljava/lang/String;)V
    //   511: iconst_0
    //   512: istore #5
    //   514: iload #5
    //   516: iload #7
    //   518: if_icmpge -> 573
    //   521: aload_0
    //   522: getfield i : Ljava/util/ArrayList;
    //   525: iload #5
    //   527: invokevirtual get : (I)Ljava/lang/Object;
    //   530: checkcast android/support/v4/app/c
    //   533: astore_2
    //   534: aload_3
    //   535: aload_1
    //   536: invokevirtual print : (Ljava/lang/String;)V
    //   539: aload_3
    //   540: ldc_w '  #'
    //   543: invokevirtual print : (Ljava/lang/String;)V
    //   546: aload_3
    //   547: iload #5
    //   549: invokevirtual print : (I)V
    //   552: aload_3
    //   553: ldc_w ': '
    //   556: invokevirtual print : (Ljava/lang/String;)V
    //   559: aload_3
    //   560: aload_2
    //   561: invokevirtual println : (Ljava/lang/Object;)V
    //   564: iload #5
    //   566: iconst_1
    //   567: iadd
    //   568: istore #5
    //   570: goto -> 514
    //   573: aload_0
    //   574: getfield j : Ljava/util/ArrayList;
    //   577: ifnull -> 616
    //   580: aload_0
    //   581: getfield j : Ljava/util/ArrayList;
    //   584: invokevirtual size : ()I
    //   587: ifle -> 616
    //   590: aload_3
    //   591: aload_1
    //   592: invokevirtual print : (Ljava/lang/String;)V
    //   595: aload_3
    //   596: ldc_w 'mAvailBackStackIndices: '
    //   599: invokevirtual print : (Ljava/lang/String;)V
    //   602: aload_3
    //   603: aload_0
    //   604: getfield j : Ljava/util/ArrayList;
    //   607: invokevirtual toArray : ()[Ljava/lang/Object;
    //   610: invokestatic toString : ([Ljava/lang/Object;)Ljava/lang/String;
    //   613: invokevirtual println : (Ljava/lang/String;)V
    //   616: aload_0
    //   617: monitorexit
    //   618: aload_0
    //   619: getfield b : Ljava/util/ArrayList;
    //   622: astore_2
    //   623: aload_2
    //   624: ifnull -> 713
    //   627: aload_2
    //   628: invokevirtual size : ()I
    //   631: istore #7
    //   633: iload #7
    //   635: ifle -> 713
    //   638: aload_3
    //   639: aload_1
    //   640: invokevirtual print : (Ljava/lang/String;)V
    //   643: aload_3
    //   644: ldc_w 'Pending Actions:'
    //   647: invokevirtual println : (Ljava/lang/String;)V
    //   650: iload #6
    //   652: istore #5
    //   654: iload #5
    //   656: iload #7
    //   658: if_icmpge -> 713
    //   661: aload_0
    //   662: getfield b : Ljava/util/ArrayList;
    //   665: iload #5
    //   667: invokevirtual get : (I)Ljava/lang/Object;
    //   670: checkcast android/support/v4/app/l$h
    //   673: astore_2
    //   674: aload_3
    //   675: aload_1
    //   676: invokevirtual print : (Ljava/lang/String;)V
    //   679: aload_3
    //   680: ldc_w '  #'
    //   683: invokevirtual print : (Ljava/lang/String;)V
    //   686: aload_3
    //   687: iload #5
    //   689: invokevirtual print : (I)V
    //   692: aload_3
    //   693: ldc_w ': '
    //   696: invokevirtual print : (Ljava/lang/String;)V
    //   699: aload_3
    //   700: aload_2
    //   701: invokevirtual println : (Ljava/lang/Object;)V
    //   704: iload #5
    //   706: iconst_1
    //   707: iadd
    //   708: istore #5
    //   710: goto -> 654
    //   713: aload_3
    //   714: aload_1
    //   715: invokevirtual print : (Ljava/lang/String;)V
    //   718: aload_3
    //   719: ldc_w 'FragmentManager misc state:'
    //   722: invokevirtual println : (Ljava/lang/String;)V
    //   725: aload_3
    //   726: aload_1
    //   727: invokevirtual print : (Ljava/lang/String;)V
    //   730: aload_3
    //   731: ldc_w '  mHost='
    //   734: invokevirtual print : (Ljava/lang/String;)V
    //   737: aload_3
    //   738: aload_0
    //   739: getfield m : Landroid/support/v4/app/j;
    //   742: invokevirtual println : (Ljava/lang/Object;)V
    //   745: aload_3
    //   746: aload_1
    //   747: invokevirtual print : (Ljava/lang/String;)V
    //   750: aload_3
    //   751: ldc_w '  mContainer='
    //   754: invokevirtual print : (Ljava/lang/String;)V
    //   757: aload_3
    //   758: aload_0
    //   759: getfield n : Landroid/support/v4/app/h;
    //   762: invokevirtual println : (Ljava/lang/Object;)V
    //   765: aload_0
    //   766: getfield o : Landroid/support/v4/app/f;
    //   769: ifnull -> 792
    //   772: aload_3
    //   773: aload_1
    //   774: invokevirtual print : (Ljava/lang/String;)V
    //   777: aload_3
    //   778: ldc_w '  mParent='
    //   781: invokevirtual print : (Ljava/lang/String;)V
    //   784: aload_3
    //   785: aload_0
    //   786: getfield o : Landroid/support/v4/app/f;
    //   789: invokevirtual println : (Ljava/lang/Object;)V
    //   792: aload_3
    //   793: aload_1
    //   794: invokevirtual print : (Ljava/lang/String;)V
    //   797: aload_3
    //   798: ldc_w '  mCurState='
    //   801: invokevirtual print : (Ljava/lang/String;)V
    //   804: aload_3
    //   805: aload_0
    //   806: getfield l : I
    //   809: invokevirtual print : (I)V
    //   812: aload_3
    //   813: ldc_w ' mStateSaved='
    //   816: invokevirtual print : (Ljava/lang/String;)V
    //   819: aload_3
    //   820: aload_0
    //   821: getfield s : Z
    //   824: invokevirtual print : (Z)V
    //   827: aload_3
    //   828: ldc_w ' mStopped='
    //   831: invokevirtual print : (Ljava/lang/String;)V
    //   834: aload_3
    //   835: aload_0
    //   836: getfield t : Z
    //   839: invokevirtual print : (Z)V
    //   842: aload_3
    //   843: ldc_w ' mDestroyed='
    //   846: invokevirtual print : (Ljava/lang/String;)V
    //   849: aload_3
    //   850: aload_0
    //   851: getfield u : Z
    //   854: invokevirtual println : (Z)V
    //   857: aload_0
    //   858: getfield r : Z
    //   861: ifeq -> 884
    //   864: aload_3
    //   865: aload_1
    //   866: invokevirtual print : (Ljava/lang/String;)V
    //   869: aload_3
    //   870: ldc_w '  mNeedMenuInvalidate='
    //   873: invokevirtual print : (Ljava/lang/String;)V
    //   876: aload_3
    //   877: aload_0
    //   878: getfield r : Z
    //   881: invokevirtual println : (Z)V
    //   884: aload_0
    //   885: getfield v : Ljava/lang/String;
    //   888: ifnull -> 911
    //   891: aload_3
    //   892: aload_1
    //   893: invokevirtual print : (Ljava/lang/String;)V
    //   896: aload_3
    //   897: ldc_w '  mNoTransactionsBecause='
    //   900: invokevirtual print : (Ljava/lang/String;)V
    //   903: aload_3
    //   904: aload_0
    //   905: getfield v : Ljava/lang/String;
    //   908: invokevirtual println : (Ljava/lang/String;)V
    //   911: return
    //   912: astore_1
    //   913: aload_0
    //   914: monitorexit
    //   915: aload_1
    //   916: athrow
    // Exception table:
    //   from	to	target	type
    //   478	494	912	finally
    //   499	511	912	finally
    //   521	564	912	finally
    //   573	616	912	finally
    //   616	618	912	finally
    //   913	915	912	finally }
  
  public void a(boolean paramBoolean) {
    for (int i1 = this.e.size() - 1; i1 >= 0; i1--) {
      f f1 = (f)this.e.get(i1);
      if (f1 != null)
        f1.g(paramBoolean); 
    } 
  }
  
  boolean a(int paramInt) { return (this.l >= paramInt); }
  
  public boolean a(Menu paramMenu) {
    int i1 = this.l;
    byte b1 = 0;
    if (i1 < 1)
      return false; 
    int i2;
    for (i2 = 0; b1 < this.e.size(); i2 = b2) {
      f f1 = (f)this.e.get(b1);
      byte b2 = i2;
      if (f1 != null) {
        b2 = i2;
        if (f1.c(paramMenu))
          b2 = 1; 
      } 
      b1++;
    } 
    return i2;
  }
  
  public boolean a(Menu paramMenu, MenuInflater paramMenuInflater) { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge Z and I\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
  
  public boolean a(MenuItem paramMenuItem) {
    if (this.l < 1)
      return false; 
    for (byte b1 = 0; b1 < this.e.size(); b1++) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null && f1.c(paramMenuItem))
        return true; 
    } 
    return false;
  }
  
  boolean a(ArrayList<c> paramArrayList1, ArrayList<Boolean> paramArrayList2, String paramString, int paramInt1, int paramInt2) { // Byte code:
    //   0: aload_0
    //   1: getfield g : Ljava/util/ArrayList;
    //   4: astore #8
    //   6: aload #8
    //   8: ifnonnull -> 13
    //   11: iconst_0
    //   12: ireturn
    //   13: aload_3
    //   14: ifnonnull -> 70
    //   17: iload #4
    //   19: ifge -> 70
    //   22: iload #5
    //   24: iconst_1
    //   25: iand
    //   26: ifne -> 70
    //   29: aload #8
    //   31: invokevirtual size : ()I
    //   34: iconst_1
    //   35: isub
    //   36: istore #4
    //   38: iload #4
    //   40: ifge -> 45
    //   43: iconst_0
    //   44: ireturn
    //   45: aload_1
    //   46: aload_0
    //   47: getfield g : Ljava/util/ArrayList;
    //   50: iload #4
    //   52: invokevirtual remove : (I)Ljava/lang/Object;
    //   55: invokevirtual add : (Ljava/lang/Object;)Z
    //   58: pop
    //   59: aload_2
    //   60: iconst_1
    //   61: invokestatic valueOf : (Z)Ljava/lang/Boolean;
    //   64: invokevirtual add : (Ljava/lang/Object;)Z
    //   67: pop
    //   68: iconst_1
    //   69: ireturn
    //   70: aload_3
    //   71: ifnonnull -> 88
    //   74: iload #4
    //   76: iflt -> 82
    //   79: goto -> 88
    //   82: iconst_m1
    //   83: istore #7
    //   85: goto -> 261
    //   88: aload_0
    //   89: getfield g : Ljava/util/ArrayList;
    //   92: invokevirtual size : ()I
    //   95: iconst_1
    //   96: isub
    //   97: istore #6
    //   99: iload #6
    //   101: iflt -> 164
    //   104: aload_0
    //   105: getfield g : Ljava/util/ArrayList;
    //   108: iload #6
    //   110: invokevirtual get : (I)Ljava/lang/Object;
    //   113: checkcast android/support/v4/app/c
    //   116: astore #8
    //   118: aload_3
    //   119: ifnull -> 137
    //   122: aload_3
    //   123: aload #8
    //   125: invokevirtual f : ()Ljava/lang/String;
    //   128: invokevirtual equals : (Ljava/lang/Object;)Z
    //   131: ifeq -> 137
    //   134: goto -> 164
    //   137: iload #4
    //   139: iflt -> 155
    //   142: iload #4
    //   144: aload #8
    //   146: getfield m : I
    //   149: if_icmpne -> 155
    //   152: goto -> 164
    //   155: iload #6
    //   157: iconst_1
    //   158: isub
    //   159: istore #6
    //   161: goto -> 99
    //   164: iload #6
    //   166: ifge -> 171
    //   169: iconst_0
    //   170: ireturn
    //   171: iload #6
    //   173: istore #7
    //   175: iload #5
    //   177: iconst_1
    //   178: iand
    //   179: ifeq -> 261
    //   182: iload #6
    //   184: iconst_1
    //   185: isub
    //   186: istore #5
    //   188: iload #5
    //   190: istore #7
    //   192: iload #5
    //   194: iflt -> 261
    //   197: aload_0
    //   198: getfield g : Ljava/util/ArrayList;
    //   201: iload #5
    //   203: invokevirtual get : (I)Ljava/lang/Object;
    //   206: checkcast android/support/v4/app/c
    //   209: astore #8
    //   211: aload_3
    //   212: ifnull -> 231
    //   215: iload #5
    //   217: istore #6
    //   219: aload_3
    //   220: aload #8
    //   222: invokevirtual f : ()Ljava/lang/String;
    //   225: invokevirtual equals : (Ljava/lang/Object;)Z
    //   228: ifne -> 182
    //   231: iload #5
    //   233: istore #7
    //   235: iload #4
    //   237: iflt -> 261
    //   240: iload #5
    //   242: istore #7
    //   244: iload #4
    //   246: aload #8
    //   248: getfield m : I
    //   251: if_icmpne -> 261
    //   254: iload #5
    //   256: istore #6
    //   258: goto -> 182
    //   261: iload #7
    //   263: aload_0
    //   264: getfield g : Ljava/util/ArrayList;
    //   267: invokevirtual size : ()I
    //   270: iconst_1
    //   271: isub
    //   272: if_icmpne -> 277
    //   275: iconst_0
    //   276: ireturn
    //   277: aload_0
    //   278: getfield g : Ljava/util/ArrayList;
    //   281: invokevirtual size : ()I
    //   284: iconst_1
    //   285: isub
    //   286: istore #4
    //   288: iload #4
    //   290: iload #7
    //   292: if_icmple -> 327
    //   295: aload_1
    //   296: aload_0
    //   297: getfield g : Ljava/util/ArrayList;
    //   300: iload #4
    //   302: invokevirtual remove : (I)Ljava/lang/Object;
    //   305: invokevirtual add : (Ljava/lang/Object;)Z
    //   308: pop
    //   309: aload_2
    //   310: iconst_1
    //   311: invokestatic valueOf : (Z)Ljava/lang/Boolean;
    //   314: invokevirtual add : (Ljava/lang/Object;)Z
    //   317: pop
    //   318: iload #4
    //   320: iconst_1
    //   321: isub
    //   322: istore #4
    //   324: goto -> 288
    //   327: iconst_1
    //   328: ireturn }
  
  public f b(int paramInt) {
    int i1;
    for (i1 = this.e.size() - 1; i1 >= 0; i1--) {
      f f1 = (f)this.e.get(i1);
      if (f1 != null && f1.H == paramInt)
        return f1; 
    } 
    SparseArray sparseArray = this.f;
    if (sparseArray != null)
      for (i1 = sparseArray.size() - 1; i1 >= 0; i1--) {
        f f1 = (f)this.f.valueAt(i1);
        if (f1 != null && f1.H == paramInt)
          return f1; 
      }  
    return null;
  }
  
  public f b(String paramString) {
    SparseArray sparseArray = this.f;
    if (sparseArray != null && paramString != null)
      for (int i1 = sparseArray.size() - 1; i1 >= 0; i1--) {
        f f1 = (f)this.f.valueAt(i1);
        if (f1 != null) {
          f1 = f1.a(paramString);
          if (f1 != null)
            return f1; 
        } 
      }  
    return null;
  }
  
  void b(c paramc) {
    if (this.g == null)
      this.g = new ArrayList(); 
    this.g.add(paramc);
  }
  
  void b(f paramf) { a(paramf, this.l, 0, 0, false); }
  
  void b(f paramf, Context paramContext, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).b(paramf, paramContext, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.b(this, paramf, paramContext); 
    } 
  }
  
  void b(f paramf, Bundle paramBundle, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).b(paramf, paramBundle, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.b(this, paramf, paramBundle); 
    } 
  }
  
  void b(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).b(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.a(this, paramf); 
    } 
  }
  
  public void b(Menu paramMenu) {
    if (this.l < 1)
      return; 
    for (byte b1 = 0; b1 < this.e.size(); b1++) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null)
        f1.d(paramMenu); 
    } 
  }
  
  public void b(boolean paramBoolean) {
    for (int i1 = this.e.size() - 1; i1 >= 0; i1--) {
      f f1 = (f)this.e.get(i1);
      if (f1 != null)
        f1.h(paramBoolean); 
    } 
  }
  
  public boolean b() {
    y();
    return a(null, -1, 0);
  }
  
  public boolean b(MenuItem paramMenuItem) {
    if (this.l < 1)
      return false; 
    for (byte b1 = 0; b1 < this.e.size(); b1++) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null && f1.d(paramMenuItem))
        return true; 
    } 
    return false;
  }
  
  public List<f> c() {
    if (this.e.isEmpty())
      return Collections.emptyList(); 
    synchronized (this.e) {
      return (List)this.e.clone();
    } 
  }
  
  public void c(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield i : Ljava/util/ArrayList;
    //   6: iload_1
    //   7: aconst_null
    //   8: invokevirtual set : (ILjava/lang/Object;)Ljava/lang/Object;
    //   11: pop
    //   12: aload_0
    //   13: getfield j : Ljava/util/ArrayList;
    //   16: ifnonnull -> 30
    //   19: aload_0
    //   20: new java/util/ArrayList
    //   23: dup
    //   24: invokespecial <init> : ()V
    //   27: putfield j : Ljava/util/ArrayList;
    //   30: getstatic android/support/v4/app/l.a : Z
    //   33: ifeq -> 69
    //   36: new java/lang/StringBuilder
    //   39: dup
    //   40: invokespecial <init> : ()V
    //   43: astore_2
    //   44: aload_2
    //   45: ldc_w 'Freeing back stack index '
    //   48: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   51: pop
    //   52: aload_2
    //   53: iload_1
    //   54: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   57: pop
    //   58: ldc_w 'FragmentManager'
    //   61: aload_2
    //   62: invokevirtual toString : ()Ljava/lang/String;
    //   65: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   68: pop
    //   69: aload_0
    //   70: getfield j : Ljava/util/ArrayList;
    //   73: iload_1
    //   74: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   77: invokevirtual add : (Ljava/lang/Object;)Z
    //   80: pop
    //   81: aload_0
    //   82: monitorexit
    //   83: return
    //   84: astore_2
    //   85: aload_0
    //   86: monitorexit
    //   87: aload_2
    //   88: athrow
    // Exception table:
    //   from	to	target	type
    //   2	30	84	finally
    //   30	69	84	finally
    //   69	83	84	finally
    //   85	87	84	finally }
  
  void c(f paramf) {
    if (paramf.w && !paramf.z) {
      paramf.b(paramf.h(paramf.l), null, paramf.l);
      if (paramf.S != null) {
        paramf.T = paramf.S;
        paramf.S.setSaveFromParentEnabled(false);
        if (paramf.K)
          paramf.S.setVisibility(8); 
        paramf.a(paramf.S, paramf.l);
        a(paramf, paramf.S, paramf.l, false);
        return;
      } 
      paramf.T = null;
    } 
  }
  
  void c(f paramf, Bundle paramBundle, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).c(paramf, paramBundle, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.c(this, paramf, paramBundle); 
    } 
  }
  
  void c(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).c(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.b(this, paramf); 
    } 
  }
  
  void d(f paramf) {
    if (paramf.S != null) {
      c c1 = a(paramf, paramf.U(), paramf.K ^ true, paramf.V());
      if (c1 != null && c1.b != null) {
        c1.b.setTarget(paramf.S);
        if (paramf.K) {
          if (paramf.ac()) {
            paramf.i(false);
          } else {
            ViewGroup viewGroup = paramf.R;
            View view = paramf.S;
            viewGroup.startViewTransition(view);
            c1.b.addListener(new Object(this, viewGroup, view, paramf));
          } 
        } else {
          paramf.S.setVisibility(0);
        } 
        b(paramf.S, c1);
        c1.b.start();
      } else {
        byte b1;
        if (c1 != null) {
          b(paramf.S, c1);
          paramf.S.startAnimation(c1.a);
          c1.a.start();
        } 
        if (paramf.K && !paramf.ac()) {
          b1 = 8;
        } else {
          b1 = 0;
        } 
        paramf.S.setVisibility(b1);
        if (paramf.ac())
          paramf.i(false); 
      } 
    } 
    if (paramf.u && paramf.O && paramf.P)
      this.r = true; 
    paramf.Y = false;
    paramf.d(paramf.K);
  }
  
  void d(f paramf, Bundle paramBundle, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).d(paramf, paramBundle, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.d(this, paramf, paramBundle); 
    } 
  }
  
  void d(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).d(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.c(this, paramf); 
    } 
  }
  
  public boolean d() { return (this.s || this.t); }
  
  void e() {
    if (this.f == null)
      return; 
    for (byte b1 = 0; b1 < this.f.size(); b1++) {
      f f1 = (f)this.f.valueAt(b1);
      if (f1 != null)
        a(f1); 
    } 
  }
  
  void e(f paramf) {
    if (paramf == null)
      return; 
    int i2 = this.l;
    int i1 = i2;
    if (paramf.v)
      if (paramf.i()) {
        i1 = Math.min(i2, 1);
      } else {
        i1 = Math.min(i2, 0);
      }  
    a(paramf, i1, paramf.U(), paramf.V(), false);
    if (paramf.S != null) {
      f f1 = p(paramf);
      if (f1 != null) {
        View view = f1.S;
        ViewGroup viewGroup = paramf.R;
        i1 = viewGroup.indexOfChild(view);
        i2 = viewGroup.indexOfChild(paramf.S);
        if (i2 < i1) {
          viewGroup.removeViewAt(i2);
          viewGroup.addView(paramf.S, i1);
        } 
      } 
      if (paramf.X && paramf.R != null) {
        if (paramf.Z > 0.0F)
          paramf.S.setAlpha(paramf.Z); 
        paramf.Z = 0.0F;
        paramf.X = false;
        c c1 = a(paramf, paramf.U(), true, paramf.V());
        if (c1 != null) {
          b(paramf.S, c1);
          if (c1.a != null) {
            paramf.S.startAnimation(c1.a);
          } else {
            c1.b.setTarget(paramf.S);
            c1.b.start();
          } 
        } 
      } 
    } 
    if (paramf.Y)
      d(paramf); 
  }
  
  void e(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).e(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.d(this, paramf); 
    } 
  }
  
  void f() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield C : Ljava/util/ArrayList;
    //   6: astore #4
    //   8: iconst_0
    //   9: istore_3
    //   10: aload #4
    //   12: ifnull -> 96
    //   15: aload_0
    //   16: getfield C : Ljava/util/ArrayList;
    //   19: invokevirtual isEmpty : ()Z
    //   22: ifne -> 96
    //   25: iconst_1
    //   26: istore_1
    //   27: goto -> 30
    //   30: iload_3
    //   31: istore_2
    //   32: aload_0
    //   33: getfield b : Ljava/util/ArrayList;
    //   36: ifnull -> 101
    //   39: iload_3
    //   40: istore_2
    //   41: aload_0
    //   42: getfield b : Ljava/util/ArrayList;
    //   45: invokevirtual size : ()I
    //   48: iconst_1
    //   49: if_icmpne -> 101
    //   52: iconst_1
    //   53: istore_2
    //   54: goto -> 101
    //   57: aload_0
    //   58: getfield m : Landroid/support/v4/app/j;
    //   61: invokevirtual h : ()Landroid/os/Handler;
    //   64: aload_0
    //   65: getfield E : Ljava/lang/Runnable;
    //   68: invokevirtual removeCallbacks : (Ljava/lang/Runnable;)V
    //   71: aload_0
    //   72: getfield m : Landroid/support/v4/app/j;
    //   75: invokevirtual h : ()Landroid/os/Handler;
    //   78: aload_0
    //   79: getfield E : Ljava/lang/Runnable;
    //   82: invokevirtual post : (Ljava/lang/Runnable;)Z
    //   85: pop
    //   86: aload_0
    //   87: monitorexit
    //   88: return
    //   89: astore #4
    //   91: aload_0
    //   92: monitorexit
    //   93: aload #4
    //   95: athrow
    //   96: iconst_0
    //   97: istore_1
    //   98: goto -> 30
    //   101: iload_1
    //   102: ifne -> 57
    //   105: iload_2
    //   106: ifeq -> 86
    //   109: goto -> 57
    // Exception table:
    //   from	to	target	type
    //   2	8	89	finally
    //   15	25	89	finally
    //   32	39	89	finally
    //   41	52	89	finally
    //   57	86	89	finally
    //   86	88	89	finally
    //   91	93	89	finally }
  
  void f(f paramf) {
    if (paramf.o >= 0)
      return; 
    int i1 = this.d;
    this.d = i1 + 1;
    paramf.a(i1, this.o);
    if (this.f == null)
      this.f = new SparseArray(); 
    this.f.put(paramf.o, paramf);
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Allocated fragment index ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
  }
  
  void f(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).f(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.e(this, paramf); 
    } 
  }
  
  void g(f paramf) {
    if (paramf.o < 0)
      return; 
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Freeing fragment index ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    this.f.put(paramf.o, null);
    paramf.x();
  }
  
  void g(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).g(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.f(this, paramf); 
    } 
  }
  
  public boolean g() {
    c(true);
    bool = false;
    while (c(this.x, this.y)) {
      this.c = true;
      try {
        b(this.x, this.y);
        z();
      } finally {
        z();
      } 
    } 
    h();
    C();
    return bool;
  }
  
  void h() {
    if (this.w) {
      this.w = false;
      e();
    } 
  }
  
  public void h(f paramf) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("remove: ");
      stringBuilder.append(paramf);
      stringBuilder.append(" nesting=");
      stringBuilder.append(paramf.A);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    boolean bool = paramf.i();
    if (!paramf.L || bool ^ true)
      synchronized (this.e) {
        this.e.remove(paramf);
        if (paramf.O && paramf.P)
          this.r = true; 
        paramf.u = false;
        paramf.v = true;
        return;
      }  
  }
  
  void h(f paramf, boolean paramBoolean) {
    f f1 = this.o;
    if (f1 != null) {
      k k1 = f1.p();
      if (k1 instanceof l)
        ((l)k1).h(paramf, true); 
    } 
    for (f f2 : this.J) {
      if (!paramBoolean || f2.b)
        f2.a.g(this, paramf); 
    } 
  }
  
  void i() {
    if (this.k != null)
      for (byte b1 = 0; b1 < this.k.size(); b1++)
        ((k.b)this.k.get(b1)).a();  
  }
  
  public void i(f paramf) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("hide: ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    if (!paramf.K) {
      paramf.K = true;
      paramf.Y = true ^ paramf.Y;
    } 
  }
  
  m j() {
    a(this.D);
    return this.D;
  }
  
  public void j(f paramf) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("show: ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    if (paramf.K) {
      paramf.K = false;
      paramf.Y ^= true;
    } 
  }
  
  void k() {
    List list3;
    List list2;
    List list1;
    if (this.f != null) {
      byte b1 = 0;
      StringBuilder stringBuilder1 = null;
      StringBuilder stringBuilder3 = stringBuilder1;
      StringBuilder stringBuilder2 = stringBuilder3;
      while (true) {
        list3 = stringBuilder1;
        list2 = stringBuilder3;
        list1 = stringBuilder2;
        if (b1 < this.f.size()) {
          ArrayList arrayList4;
          f f1 = (f)this.f.valueAt(b1);
          list2 = stringBuilder1;
          list3 = stringBuilder3;
          ArrayList arrayList5 = stringBuilder2;
          if (f1 != null) {
            m m1;
            ArrayList arrayList7;
            ArrayList arrayList6;
            list1 = stringBuilder1;
            if (f1.M) {
              byte b2;
              list2 = stringBuilder1;
              if (stringBuilder1 == null)
                list2 = new ArrayList(); 
              list2.add(f1);
              if (f1.r != null) {
                b2 = f1.r.o;
              } else {
                b2 = -1;
              } 
              f1.s = b2;
              list1 = list2;
              if (a) {
                stringBuilder1 = new StringBuilder();
                stringBuilder1.append("retainNonConfig: keeping retained ");
                stringBuilder1.append(f1);
                Log.v("FragmentManager", stringBuilder1.toString());
                list1 = list2;
              } 
            } 
            if (f1.D != null) {
              f1.D.k();
              m1 = f1.D.D;
            } else {
              m1 = f1.E;
            } 
            stringBuilder1 = stringBuilder3;
            if (stringBuilder3 == null) {
              stringBuilder1 = stringBuilder3;
              if (m1 != null) {
                arrayList7 = new ArrayList(this.f.size());
                byte b2 = 0;
                while (true) {
                  arrayList6 = arrayList7;
                  if (b2 < b1) {
                    arrayList7.add(null);
                    b2++;
                    continue;
                  } 
                  break;
                } 
              } 
            } 
            if (arrayList6 != null)
              arrayList6.add(m1); 
            stringBuilder3 = stringBuilder2;
            if (stringBuilder2 == null) {
              stringBuilder3 = stringBuilder2;
              if (f1.F != null) {
                ArrayList arrayList = new ArrayList(this.f.size());
                byte b2 = 0;
                while (true) {
                  arrayList7 = arrayList;
                  if (b2 < b1) {
                    arrayList.add(null);
                    b2++;
                    continue;
                  } 
                  break;
                } 
              } 
            } 
            arrayList4 = list1;
            list3 = arrayList6;
            arrayList5 = arrayList7;
            if (arrayList7 != null) {
              arrayList7.add(f1.F);
              arrayList5 = arrayList7;
              list3 = arrayList6;
              arrayList4 = list1;
            } 
          } 
          b1++;
          ArrayList arrayList1 = arrayList4;
          ArrayList arrayList3 = list3;
          ArrayList arrayList2 = arrayList5;
          continue;
        } 
        break;
      } 
    } else {
      list3 = null;
      Object object = list3;
      list1 = object;
      list2 = object;
    } 
    if (list3 == null && list2 == null && list1 == null) {
      this.D = null;
      return;
    } 
    this.D = new m(list3, list2, list1);
  }
  
  public void k(f paramf) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("detach: ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    if (!paramf.L) {
      paramf.L = true;
      if (paramf.u) {
        if (a) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("remove from detach: ");
          stringBuilder.append(paramf);
          Log.v("FragmentManager", stringBuilder.toString());
        } 
        synchronized (this.e) {
          this.e.remove(paramf);
          if (paramf.O && paramf.P)
            this.r = true; 
          paramf.u = false;
          return;
        } 
      } 
    } 
  }
  
  Parcelable l() {
    A();
    B();
    g();
    this.s = true;
    d[] arrayOfd = null;
    this.D = null;
    SparseArray sparseArray = this.f;
    if (sparseArray != null) {
      if (sparseArray.size() <= 0)
        return null; 
      int i2 = this.f.size();
      o[] arrayOfo = new o[i2];
      byte b2 = 0;
      byte b1 = 0;
      int i1 = b1;
      while (b1 < i2) {
        f f2 = (f)this.f.valueAt(b1);
        if (f2 != null) {
          if (f2.o < 0) {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append("Failure saving state: active ");
            stringBuilder1.append(f2);
            stringBuilder1.append(" has cleared index: ");
            stringBuilder1.append(f2.o);
            a(new IllegalStateException(stringBuilder1.toString()));
          } 
          o o1 = new o(f2);
          arrayOfo[b1] = o1;
          if (f2.k > 0 && o1.k == null) {
            o1.k = n(f2);
            if (f2.r != null) {
              if (f2.r.o < 0) {
                StringBuilder stringBuilder1 = new StringBuilder();
                stringBuilder1.append("Failure saving state: ");
                stringBuilder1.append(f2);
                stringBuilder1.append(" has target not in fragment manager: ");
                stringBuilder1.append(f2.r);
                a(new IllegalStateException(stringBuilder1.toString()));
              } 
              if (o1.k == null)
                o1.k = new Bundle(); 
              a(o1.k, "android:target_state", f2.r);
              if (f2.t != 0)
                o1.k.putInt("android:target_req_state", f2.t); 
            } 
          } else {
            o1.k = f2.l;
          } 
          if (a) {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append("Saved state of ");
            stringBuilder1.append(f2);
            stringBuilder1.append(": ");
            stringBuilder1.append(o1.k);
            Log.v("FragmentManager", stringBuilder1.toString());
          } 
          i1 = 1;
        } 
        b1++;
      } 
      if (!i1) {
        if (a)
          Log.v("FragmentManager", "saveAllState: no fragments!"); 
        return null;
      } 
      i1 = this.e.size();
      if (i1 > 0) {
        int[] arrayOfInt = new int[i1];
        b1 = 0;
        while (true) {
          int[] arrayOfInt1 = arrayOfInt;
          if (b1 < i1) {
            arrayOfInt[b1] = ((f)this.e.get(b1)).o;
            if (arrayOfInt[b1] < 0) {
              StringBuilder stringBuilder1 = new StringBuilder();
              stringBuilder1.append("Failure saving state: active ");
              stringBuilder1.append(this.e.get(b1));
              stringBuilder1.append(" has cleared index: ");
              stringBuilder1.append(arrayOfInt[b1]);
              a(new IllegalStateException(stringBuilder1.toString()));
            } 
            if (a) {
              StringBuilder stringBuilder1 = new StringBuilder();
              stringBuilder1.append("saveAllState: adding fragment #");
              stringBuilder1.append(b1);
              stringBuilder1.append(": ");
              stringBuilder1.append(this.e.get(b1));
              Log.v("FragmentManager", stringBuilder1.toString());
            } 
            b1++;
            continue;
          } 
          break;
        } 
      } else {
        sparseArray = null;
      } 
      ArrayList arrayList = this.g;
      StringBuilder stringBuilder = arrayOfd;
      if (arrayList != null) {
        i1 = arrayList.size();
        stringBuilder = arrayOfd;
        if (i1 > 0) {
          arrayOfd = new d[i1];
          b1 = b2;
          while (true) {
            stringBuilder = arrayOfd;
            if (b1 < i1) {
              arrayOfd[b1] = new d((c)this.g.get(b1));
              if (a) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("saveAllState: adding back stack #");
                stringBuilder.append(b1);
                stringBuilder.append(": ");
                stringBuilder.append(this.g.get(b1));
                Log.v("FragmentManager", stringBuilder.toString());
              } 
              b1++;
              continue;
            } 
            break;
          } 
        } 
      } 
      arrayOfd = new n();
      arrayOfd.a = arrayOfo;
      arrayOfd.b = sparseArray;
      arrayOfd.c = stringBuilder;
      f f1 = this.p;
      if (f1 != null)
        arrayOfd.d = f1.o; 
      arrayOfd.e = this.d;
      k();
      return arrayOfd;
    } 
    return null;
  }
  
  public void l(f paramf) {
    if (a) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("attach: ");
      stringBuilder.append(paramf);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    if (paramf.L) {
      paramf.L = false;
      if (!paramf.u)
        if (!this.e.contains(paramf)) {
          if (a) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("add from attach: ");
            stringBuilder.append(paramf);
            Log.v("FragmentManager", stringBuilder.toString());
          } 
          synchronized (this.e) {
            this.e.add(paramf);
            paramf.u = true;
            if (paramf.O && paramf.P) {
              this.r = true;
              return;
            } 
          } 
        } else {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Fragment already added: ");
          stringBuilder.append(paramf);
          throw new IllegalStateException(stringBuilder.toString());
        }  
    } 
  }
  
  public void m() {
    this.D = null;
    byte b1 = 0;
    this.s = false;
    this.t = false;
    int i1 = this.e.size();
    while (b1 < i1) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null)
        f1.M(); 
      b1++;
    } 
  }
  
  void m(f paramf) {
    if (paramf.T == null)
      return; 
    SparseArray sparseArray = this.B;
    if (sparseArray == null) {
      this.B = new SparseArray();
    } else {
      sparseArray.clear();
    } 
    paramf.T.saveHierarchyState(this.B);
    if (this.B.size() > 0) {
      paramf.m = this.B;
      this.B = null;
    } 
  }
  
  Bundle n(f paramf) {
    if (this.A == null)
      this.A = new Bundle(); 
    paramf.n(this.A);
    d(paramf, this.A, false);
    if (!this.A.isEmpty()) {
      bundle2 = this.A;
      this.A = null;
    } else {
      bundle2 = null;
    } 
    if (paramf.S != null)
      m(paramf); 
    Bundle bundle1 = bundle2;
    if (paramf.m != null) {
      bundle1 = bundle2;
      if (bundle2 == null)
        bundle1 = new Bundle(); 
      bundle1.putSparseParcelableArray("android:view_state", paramf.m);
    } 
    Bundle bundle2 = bundle1;
    if (!paramf.V) {
      bundle2 = bundle1;
      if (bundle1 == null)
        bundle2 = new Bundle(); 
      bundle2.putBoolean("android:user_visible_hint", paramf.V);
    } 
    return bundle2;
  }
  
  public void n() {
    this.s = false;
    this.t = false;
    e(1);
  }
  
  public void o() {
    this.s = false;
    this.t = false;
    e(2);
  }
  
  public void o(f paramf) {
    if (paramf == null || (this.f.get(paramf.o) == paramf && (paramf.C == null || paramf.p() == this))) {
      this.p = paramf;
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Fragment ");
    stringBuilder.append(paramf);
    stringBuilder.append(" is not an active fragment of FragmentManager ");
    stringBuilder.append(this);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public View onCreateView(View paramView, String paramString, Context paramContext, AttributeSet paramAttributeSet) {
    if (!"fragment".equals(paramString))
      return null; 
    paramString = paramAttributeSet.getAttributeValue(null, "class");
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, g.a);
    int i1 = 0;
    String str1 = paramString;
    if (paramString == null)
      str1 = typedArray.getString(0); 
    int i2 = typedArray.getResourceId(1, -1);
    String str2 = typedArray.getString(2);
    typedArray.recycle();
    if (!f.a(this.m.g(), str1))
      return null; 
    if (paramView != null)
      i1 = paramView.getId(); 
    if (i1 != -1 || i2 != -1 || str2 != null) {
      if (i2 != -1) {
        f f1 = b(i2);
      } else {
        paramString = null;
      } 
      StringBuilder stringBuilder1 = paramString;
      if (paramString == null) {
        stringBuilder1 = paramString;
        if (str2 != null)
          stringBuilder1 = a(str2); 
      } 
      j j1 = stringBuilder1;
      if (stringBuilder1 == null) {
        j1 = stringBuilder1;
        if (i1 != -1)
          j1 = b(i1); 
      } 
      if (a) {
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("onCreateView: id=0x");
        stringBuilder2.append(Integer.toHexString(i2));
        stringBuilder2.append(" fname=");
        stringBuilder2.append(str1);
        stringBuilder2.append(" existing=");
        stringBuilder2.append(j1);
        Log.v("FragmentManager", stringBuilder2.toString());
      } 
      if (j1 == null) {
        int i3;
        stringBuilder1 = this.n.a(paramContext, str1, null);
        stringBuilder1.w = true;
        if (i2 != 0) {
          i3 = i2;
        } else {
          i3 = i1;
        } 
        stringBuilder1.H = i3;
        stringBuilder1.I = i1;
        stringBuilder1.J = str2;
        stringBuilder1.x = true;
        stringBuilder1.B = this;
        j1 = this.m;
        stringBuilder1.C = j1;
        stringBuilder1.a(j1.g(), paramAttributeSet, stringBuilder1.l);
        a(stringBuilder1, true);
      } else if (!j1.x) {
        j1.x = true;
        j1.C = this.m;
        if (!j1.N)
          j1.a(this.m.g(), paramAttributeSet, j1.l); 
        j j2 = j1;
      } else {
        stringBuilder1 = new StringBuilder();
        stringBuilder1.append(paramAttributeSet.getPositionDescription());
        stringBuilder1.append(": Duplicate id 0x");
        stringBuilder1.append(Integer.toHexString(i2));
        stringBuilder1.append(", tag ");
        stringBuilder1.append(str2);
        stringBuilder1.append(", or parent id 0x");
        stringBuilder1.append(Integer.toHexString(i1));
        stringBuilder1.append(" with another fragment for ");
        stringBuilder1.append(str1);
        throw new IllegalArgumentException(stringBuilder1.toString());
      } 
      if (this.l < 1 && stringBuilder1.w) {
        a(stringBuilder1, 1, 0, 0, false);
      } else {
        b(stringBuilder1);
      } 
      if (stringBuilder1.S != null) {
        if (i2 != 0)
          stringBuilder1.S.setId(i2); 
        if (stringBuilder1.S.getTag() == null)
          stringBuilder1.S.setTag(str2); 
        return stringBuilder1.S;
      } 
      stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Fragment ");
      stringBuilder1.append(str1);
      stringBuilder1.append(" did not create a view.");
      throw new IllegalStateException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramAttributeSet.getPositionDescription());
    stringBuilder.append(": Must specify unique android:id, android:tag, or have a parent with an id for ");
    stringBuilder.append(str1);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public View onCreateView(String paramString, Context paramContext, AttributeSet paramAttributeSet) { return onCreateView(null, paramString, paramContext, paramAttributeSet); }
  
  public void p() {
    this.s = false;
    this.t = false;
    e(3);
  }
  
  public void q() {
    this.s = false;
    this.t = false;
    e(4);
  }
  
  public void r() { e(3); }
  
  public void s() {
    this.t = true;
    e(2);
  }
  
  public void t() { e(1); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder(128);
    stringBuilder.append("FragmentManager{");
    stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    stringBuilder.append(" in ");
    j j1 = this.o;
    if (j1 == null)
      j1 = this.m; 
    d.a(j1, stringBuilder);
    stringBuilder.append("}}");
    return stringBuilder.toString();
  }
  
  public void u() {
    this.u = true;
    g();
    e(0);
    this.m = null;
    this.n = null;
    this.o = null;
  }
  
  public void v() {
    for (byte b1 = 0; b1 < this.e.size(); b1++) {
      f f1 = (f)this.e.get(b1);
      if (f1 != null)
        f1.N(); 
    } 
  }
  
  public f w() { return this.p; }
  
  LayoutInflater.Factory2 x() { return this; }
}
