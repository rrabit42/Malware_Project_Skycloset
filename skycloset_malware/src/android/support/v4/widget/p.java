package android.support.v4.widget;

import android.graphics.Paint;
import android.icu.text.DecimalFormatSymbols;
import android.os.Build;
import android.support.v4.e.b;
import android.support.v4.util.j;
import android.text.PrecomputedText;
import android.text.TextDirectionHeuristic;
import android.text.TextDirectionHeuristics;
import android.text.TextPaint;
import android.view.ActionMode;
import android.widget.TextView;

public final class p {
  private static int a(TextDirectionHeuristic paramTextDirectionHeuristic) { return (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) ? 1 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) ? 1 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.ANYRTL_LTR) ? 2 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.LTR) ? 3 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.RTL) ? 4 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.LOCALE) ? 5 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) ? 6 : ((paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) ? 7 : 1))))))); }
  
  public static int a(TextView paramTextView) { return paramTextView.getPaddingTop() - (paramTextView.getPaint().getFontMetricsInt()).top; }
  
  public static ActionMode.Callback a(TextView paramTextView, ActionMode.Callback paramCallback) { return (Build.VERSION.SDK_INT >= 26 && Build.VERSION.SDK_INT <= 27) ? ((paramCallback instanceof a) ? paramCallback : new a(paramCallback, paramTextView)) : paramCallback; }
  
  public static void a(TextView paramTextView, int paramInt) {
    int i;
    j.a(paramInt);
    if (Build.VERSION.SDK_INT >= 28) {
      paramTextView.setFirstBaselineToTopHeight(paramInt);
      return;
    } 
    Paint.FontMetricsInt fontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    if (Build.VERSION.SDK_INT < 16 || paramTextView.getIncludeFontPadding()) {
      i = fontMetricsInt.top;
    } else {
      i = fontMetricsInt.ascent;
    } 
    if (paramInt > Math.abs(i)) {
      i = -i;
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramInt - i, paramTextView.getPaddingRight(), paramTextView.getPaddingBottom());
    } 
  }
  
  public static void a(TextView paramTextView, b.a parama) {
    if (Build.VERSION.SDK_INT >= 18)
      paramTextView.setTextDirection(a(parama.b())); 
    if (Build.VERSION.SDK_INT < 23) {
      float f = parama.a().getTextScaleX();
      paramTextView.getPaint().set(parama.a());
      if (f == paramTextView.getTextScaleX())
        paramTextView.setTextScaleX(f / 2.0F + 1.0F); 
      paramTextView.setTextScaleX(f);
      return;
    } 
    paramTextView.getPaint().set(parama.a());
    paramTextView.setBreakStrategy(parama.c());
    paramTextView.setHyphenationFrequency(parama.d());
  }
  
  public static void a(TextView paramTextView, b paramb) {
    PrecomputedText precomputedText;
    if (Build.VERSION.SDK_INT >= 28) {
      precomputedText = paramb.a();
    } else if (!c(paramTextView).equals(precomputedText.b())) {
      throw new IllegalArgumentException("Given text can not be applied to TextView.");
    } 
    paramTextView.setText(precomputedText);
  }
  
  public static int b(TextView paramTextView) { return paramTextView.getPaddingBottom() + (paramTextView.getPaint().getFontMetricsInt()).bottom; }
  
  public static void b(TextView paramTextView, int paramInt) {
    int i;
    j.a(paramInt);
    Paint.FontMetricsInt fontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    if (Build.VERSION.SDK_INT < 16 || paramTextView.getIncludeFontPadding()) {
      i = fontMetricsInt.bottom;
    } else {
      i = fontMetricsInt.descent;
    } 
    if (paramInt > Math.abs(i))
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramTextView.getPaddingTop(), paramTextView.getPaddingRight(), paramInt - i); 
  }
  
  public static b.a c(TextView paramTextView) {
    if (Build.VERSION.SDK_INT >= 28)
      return new b.a(paramTextView.getTextMetricsParams()); 
    b.a.a a = new b.a.a(new TextPaint(paramTextView.getPaint()));
    if (Build.VERSION.SDK_INT >= 23) {
      a.a(paramTextView.getBreakStrategy());
      a.b(paramTextView.getHyphenationFrequency());
    } 
    if (Build.VERSION.SDK_INT >= 18)
      a.a(d(paramTextView)); 
    return a.a();
  }
  
  public static void c(TextView paramTextView, int paramInt) {
    j.a(paramInt);
    int i = paramTextView.getPaint().getFontMetricsInt(null);
    if (paramInt != i)
      paramTextView.setLineSpacing((paramInt - i), 1.0F); 
  }
  
  private static TextDirectionHeuristic d(TextView paramTextView) {
    if (paramTextView.getTransformationMethod() instanceof android.text.method.PasswordTransformationMethod)
      return TextDirectionHeuristics.LTR; 
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    if (i >= 28 && (paramTextView.getInputType() & 0xF) == 3) {
      b = Character.getDirectionality(DecimalFormatSymbols.getInstance(paramTextView.getTextLocale()).getDigitStrings()[0].codePointAt(0));
      return (b == 1 || b == 2) ? TextDirectionHeuristics.RTL : TextDirectionHeuristics.LTR;
    } 
    if (paramTextView.getLayoutDirection() == 1)
      b = 1; 
    switch (paramTextView.getTextDirection()) {
      default:
        return (b != 0) ? TextDirectionHeuristics.FIRSTSTRONG_RTL : TextDirectionHeuristics.FIRSTSTRONG_LTR;
      case 7:
        return TextDirectionHeuristics.FIRSTSTRONG_RTL;
      case 6:
        return TextDirectionHeuristics.FIRSTSTRONG_LTR;
      case 5:
        return TextDirectionHeuristics.LOCALE;
      case 4:
        return TextDirectionHeuristics.RTL;
      case 3:
        return TextDirectionHeuristics.LTR;
      case 2:
        break;
    } 
    return TextDirectionHeuristics.ANYRTL_LTR;
  }
}
