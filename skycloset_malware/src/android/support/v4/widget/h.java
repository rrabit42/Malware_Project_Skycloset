package android.support.v4.widget;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Parcelable;
import android.os.SystemClock;
import android.support.v4.a.a;
import android.support.v4.f.d;
import android.support.v4.f.r;
import android.support.v4.graphics.drawable.a;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.List;

public class h extends ViewGroup {
  static final int[] a;
  
  static final boolean b;
  
  private static final int[] c;
  
  private static final boolean d;
  
  private float A;
  
  private Drawable B;
  
  private Drawable C;
  
  private Drawable D;
  
  private CharSequence E;
  
  private CharSequence F;
  
  private Object G;
  
  private boolean H;
  
  private Drawable I = null;
  
  private Drawable J = null;
  
  private Drawable K = null;
  
  private Drawable L = null;
  
  private final ArrayList<View> M;
  
  private Rect N;
  
  private Matrix O;
  
  private final b e = new b();
  
  private float f;
  
  private int g;
  
  private int h = -1728053248;
  
  private float i;
  
  private Paint j = new Paint();
  
  private final s k;
  
  private final s l;
  
  private final f m;
  
  private final f n;
  
  private int o;
  
  private boolean p;
  
  private boolean q = true;
  
  private int r = 3;
  
  private int s = 3;
  
  private int t = 3;
  
  private int u = 3;
  
  private boolean v;
  
  private boolean w;
  
  private c x;
  
  private List<c> y;
  
  private float z;
  
  static  {
    byte b1;
    byte b2 = 1;
    c = new int[] { 16843828 };
    a = new int[] { 16842931 };
    if (Build.VERSION.SDK_INT >= 19) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    b = b1;
    if (Build.VERSION.SDK_INT >= 21) {
      b1 = b2;
    } else {
      b1 = 0;
    } 
    d = b1;
  }
  
  public h(Context paramContext) { this(paramContext, null); }
  
  public h(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, 0); }
  
  public h(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    setDescendantFocusability(262144);
    float f1 = (getResources().getDisplayMetrics()).density;
    this.g = (int)(64.0F * f1 + 0.5F);
    float f2 = 400.0F * f1;
    this.m = new f(this, 3);
    this.n = new f(this, 5);
    this.k = s.a(this, 1.0F, this.m);
    this.k.a(1);
    this.k.a(f2);
    this.m.a(this.k);
    this.l = s.a(this, 1.0F, this.n);
    this.l.a(2);
    this.l.a(f2);
    this.n.a(this.l);
    setFocusableInTouchMode(true);
    r.a(this, 1);
    r.a(this, new a(this));
    setMotionEventSplittingEnabled(false);
    if (r.n(this))
      if (Build.VERSION.SDK_INT >= 21) {
        setOnApplyWindowInsetsListener(new Object(this));
        setSystemUiVisibility(1280);
        typedArray = paramContext.obtainStyledAttributes(c);
        try {
          this.B = typedArray.getDrawable(0);
        } finally {
          typedArray.recycle();
        } 
      } else {
        this.B = null;
      }  
    this.f = f1 * 10.0F;
    this.M = new ArrayList();
  }
  
  private boolean a(float paramFloat1, float paramFloat2, View paramView) {
    if (this.N == null)
      this.N = new Rect(); 
    paramView.getHitRect(this.N);
    return this.N.contains((int)paramFloat1, (int)paramFloat2);
  }
  
  private boolean a(Drawable paramDrawable, int paramInt) {
    if (paramDrawable == null || !a.b(paramDrawable))
      return false; 
    a.b(paramDrawable, paramInt);
    return true;
  }
  
  private boolean a(MotionEvent paramMotionEvent, View paramView) {
    if (!paramView.getMatrix().isIdentity()) {
      paramMotionEvent = b(paramMotionEvent, paramView);
      boolean bool1 = paramView.dispatchGenericMotionEvent(paramMotionEvent);
      paramMotionEvent.recycle();
      return bool1;
    } 
    float f1 = (getScrollX() - paramView.getLeft());
    float f2 = (getScrollY() - paramView.getTop());
    paramMotionEvent.offsetLocation(f1, f2);
    boolean bool = paramView.dispatchGenericMotionEvent(paramMotionEvent);
    paramMotionEvent.offsetLocation(-f1, -f2);
    return bool;
  }
  
  private MotionEvent b(MotionEvent paramMotionEvent, View paramView) {
    float f1 = (getScrollX() - paramView.getLeft());
    float f2 = (getScrollY() - paramView.getTop());
    paramMotionEvent = MotionEvent.obtain(paramMotionEvent);
    paramMotionEvent.offsetLocation(f1, f2);
    Matrix matrix = paramView.getMatrix();
    if (!matrix.isIdentity()) {
      if (this.O == null)
        this.O = new Matrix(); 
      matrix.invert(this.O);
      paramMotionEvent.transform(this.O);
    } 
    return paramMotionEvent;
  }
  
  private void c(View paramView, boolean paramBoolean) {
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      byte b2;
      View view = getChildAt(b1);
      if ((!paramBoolean && !g(view)) || (paramBoolean && view == paramView)) {
        b2 = 1;
      } else {
        b2 = 4;
      } 
      r.a(view, b2);
    } 
  }
  
  static String d(int paramInt) { return ((paramInt & 0x3) == 3) ? "LEFT" : (((paramInt & 0x5) == 5) ? "RIGHT" : Integer.toHexString(paramInt)); }
  
  private void e() {
    if (d)
      return; 
    this.C = f();
    this.D = g();
  }
  
  private Drawable f() {
    int i1 = r.d(this);
    if (i1 == 0) {
      Drawable drawable = this.I;
      if (drawable != null) {
        a(drawable, i1);
        return this.I;
      } 
    } else {
      Drawable drawable = this.J;
      if (drawable != null) {
        a(drawable, i1);
        return this.J;
      } 
    } 
    return this.K;
  }
  
  private Drawable g() {
    int i1 = r.d(this);
    if (i1 == 0) {
      Drawable drawable = this.J;
      if (drawable != null) {
        a(drawable, i1);
        return this.J;
      } 
    } else {
      Drawable drawable = this.I;
      if (drawable != null) {
        a(drawable, i1);
        return this.I;
      } 
    } 
    return this.L;
  }
  
  private boolean h() {
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      if (((d)getChildAt(b1).getLayoutParams()).c)
        return true; 
    } 
    return false;
  }
  
  private boolean i() { return (c() != null); }
  
  static boolean l(View paramView) { return (r.c(paramView) != 4 && r.c(paramView) != 2); }
  
  private static boolean m(View paramView) {
    Drawable drawable = paramView.getBackground();
    byte b1 = 0;
    int i1 = b1;
    if (drawable != null) {
      i1 = b1;
      if (drawable.getOpacity() == -1)
        i1 = 1; 
    } 
    return i1;
  }
  
  public int a(int paramInt) {
    int i1 = r.d(this);
    if (paramInt != 3) {
      if (paramInt != 5) {
        if (paramInt != 8388611) {
          if (paramInt == 8388613) {
            paramInt = this.u;
            if (paramInt != 3)
              return paramInt; 
            if (i1 == 0) {
              paramInt = this.s;
            } else {
              paramInt = this.r;
            } 
            if (paramInt != 3)
              return paramInt; 
          } 
        } else {
          paramInt = this.t;
          if (paramInt != 3)
            return paramInt; 
          if (i1 == 0) {
            paramInt = this.r;
          } else {
            paramInt = this.s;
          } 
          if (paramInt != 3)
            return paramInt; 
        } 
      } else {
        paramInt = this.s;
        if (paramInt != 3)
          return paramInt; 
        if (i1 == 0) {
          paramInt = this.u;
        } else {
          paramInt = this.t;
        } 
        if (paramInt != 3)
          return paramInt; 
      } 
    } else {
      paramInt = this.r;
      if (paramInt != 3)
        return paramInt; 
      if (i1 == 0) {
        paramInt = this.t;
      } else {
        paramInt = this.u;
      } 
      if (paramInt != 3)
        return paramInt; 
    } 
    return 0;
  }
  
  public int a(View paramView) {
    if (g(paramView))
      return a(((d)paramView.getLayoutParams()).a); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramView);
    stringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  View a() {
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      View view = getChildAt(b1);
      if ((((d)view.getLayoutParams()).d & true) == 1)
        return view; 
    } 
    return null;
  }
  
  public void a(int paramInt1, int paramInt2) {
    int i1 = d.a(paramInt2, r.d(this));
    if (paramInt2 != 3) {
      if (paramInt2 != 5) {
        if (paramInt2 != 8388611) {
          if (paramInt2 == 8388613)
            this.u = paramInt1; 
        } else {
          this.t = paramInt1;
        } 
      } else {
        this.s = paramInt1;
      } 
    } else {
      this.r = paramInt1;
    } 
    if (paramInt1 != 0) {
      s s1;
      if (i1 == 3) {
        s1 = this.k;
      } else {
        s1 = this.l;
      } 
      s1.e();
    } 
    switch (paramInt1) {
      default:
        return;
      case 2:
        view = c(i1);
        if (view != null) {
          h(view);
          return;
        } 
        return;
      case 1:
        break;
    } 
    View view = c(i1);
    if (view != null)
      i(view); 
  }
  
  void a(int paramInt1, int paramInt2, View paramView) {
    int i2 = this.k.a();
    int i3 = this.l.a();
    int i1 = 2;
    if (i2 == 1 || i3 == 1) {
      paramInt1 = 1;
    } else {
      paramInt1 = i1;
      if (i2 != 2)
        if (i3 == 2) {
          paramInt1 = i1;
        } else {
          paramInt1 = 0;
        }  
    } 
    if (paramView != null && paramInt2 == 0) {
      d d1 = (d)paramView.getLayoutParams();
      if (d1.b == 0.0F) {
        b(paramView);
      } else if (d1.b == 1.0F) {
        c(paramView);
      } 
    } 
    if (paramInt1 != this.o) {
      this.o = paramInt1;
      List list = this.y;
      if (list != null)
        for (paramInt2 = list.size() - 1; paramInt2 >= 0; paramInt2--)
          ((c)this.y.get(paramInt2)).a(paramInt1);  
    } 
  }
  
  public void a(int paramInt, boolean paramBoolean) {
    View view = c(paramInt);
    if (view != null) {
      a(view, paramBoolean);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("No drawer view found with gravity ");
    stringBuilder.append(d(paramInt));
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(c paramc) {
    if (paramc == null)
      return; 
    if (this.y == null)
      this.y = new ArrayList(); 
    this.y.add(paramc);
  }
  
  void a(View paramView, float paramFloat) {
    List list = this.y;
    if (list != null)
      for (int i1 = list.size() - 1; i1 >= 0; i1--)
        ((c)this.y.get(i1)).a(paramView, paramFloat);  
  }
  
  public void a(View paramView, boolean paramBoolean) {
    if (g(paramView)) {
      d d1 = (d)paramView.getLayoutParams();
      if (this.q) {
        d1.b = 1.0F;
        d1.d = 1;
        c(paramView, true);
      } else if (paramBoolean) {
        d1.d |= 0x2;
        if (a(paramView, 3)) {
          this.k.a(paramView, 0, paramView.getTop());
        } else {
          this.l.a(paramView, getWidth() - paramView.getWidth(), paramView.getTop());
        } 
      } else {
        c(paramView, 1.0F);
        a(d1.a, 0, paramView);
        paramView.setVisibility(0);
      } 
      invalidate();
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramView);
    stringBuilder.append(" is not a sliding drawer");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void a(Object paramObject, boolean paramBoolean) {
    this.G = paramObject;
    this.H = paramBoolean;
    if (!paramBoolean && getBackground() == null) {
      paramBoolean = true;
    } else {
      paramBoolean = false;
    } 
    setWillNotDraw(paramBoolean);
    requestLayout();
  }
  
  void a(boolean paramBoolean) {
    int i2 = getChildCount();
    byte b1 = 0;
    int i1;
    for (i1 = b1; b1 < i2; i1 = i3) {
      View view = getChildAt(b1);
      d d1 = (d)view.getLayoutParams();
      int i3 = i1;
      if (g(view))
        if (paramBoolean && !d1.c) {
          i3 = i1;
        } else {
          boolean bool;
          i3 = view.getWidth();
          if (a(view, 3)) {
            bool = this.k.a(view, -i3, view.getTop());
          } else {
            bool = this.l.a(view, getWidth(), view.getTop());
          } 
          i3 = i1 | bool;
          d1.c = false;
        }  
      b1++;
    } 
    this.m.a();
    this.n.a();
    if (i1 != 0)
      invalidate(); 
  }
  
  boolean a(View paramView, int paramInt) { return ((e(paramView) & paramInt) == paramInt); }
  
  public void addFocusables(ArrayList<View> paramArrayList, int paramInt1, int paramInt2) {
    if (getDescendantFocusability() == 393216)
      return; 
    int i2 = getChildCount();
    byte b2 = 0;
    byte b1 = 0;
    int i1 = b1;
    while (b1 < i2) {
      View view = getChildAt(b1);
      if (g(view)) {
        if (j(view)) {
          view.addFocusables(paramArrayList, paramInt1, paramInt2);
          i1 = 1;
        } 
      } else {
        this.M.add(view);
      } 
      b1++;
    } 
    if (!i1) {
      i1 = this.M.size();
      for (b1 = b2; b1 < i1; b1++) {
        View view = (View)this.M.get(b1);
        if (view.getVisibility() == 0)
          view.addFocusables(paramArrayList, paramInt1, paramInt2); 
      } 
    } 
    this.M.clear();
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) {
    super.addView(paramView, paramInt, paramLayoutParams);
    if (a() != null || g(paramView)) {
      paramInt = 4;
    } else {
      paramInt = 1;
    } 
    r.a(paramView, paramInt);
    if (!b)
      r.a(paramView, this.e); 
  }
  
  public CharSequence b(int paramInt) {
    paramInt = d.a(paramInt, r.d(this));
    return (paramInt == 3) ? this.E : ((paramInt == 5) ? this.F : null);
  }
  
  public void b() { a(false); }
  
  public void b(int paramInt, boolean paramBoolean) {
    View view = c(paramInt);
    if (view != null) {
      b(view, paramBoolean);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("No drawer view found with gravity ");
    stringBuilder.append(d(paramInt));
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void b(c paramc) {
    if (paramc == null)
      return; 
    List list = this.y;
    if (list == null)
      return; 
    list.remove(paramc);
  }
  
  void b(View paramView) {
    d d1 = (d)paramView.getLayoutParams();
    if ((d1.d & true) == 1) {
      d1.d = 0;
      List list = this.y;
      if (list != null)
        for (int i1 = list.size() - 1; i1 >= 0; i1--)
          ((c)this.y.get(i1)).b(paramView);  
      c(paramView, false);
      if (hasWindowFocus()) {
        paramView = getRootView();
        if (paramView != null)
          paramView.sendAccessibilityEvent(32); 
      } 
    } 
  }
  
  void b(View paramView, float paramFloat) {
    d d1 = (d)paramView.getLayoutParams();
    if (paramFloat == d1.b)
      return; 
    d1.b = paramFloat;
    a(paramView, paramFloat);
  }
  
  public void b(View paramView, boolean paramBoolean) {
    if (g(paramView)) {
      d d1 = (d)paramView.getLayoutParams();
      if (this.q) {
        d1.b = 0.0F;
        d1.d = 0;
      } else {
        s s1;
        if (paramBoolean) {
          int i1;
          d1.d |= 0x4;
          if (a(paramView, 3)) {
            s1 = this.k;
            i1 = -paramView.getWidth();
          } else {
            s1 = this.l;
            i1 = getWidth();
          } 
          s1.a(paramView, i1, paramView.getTop());
        } else {
          c(paramView, 0.0F);
          a(s1.a, 0, paramView);
          paramView.setVisibility(4);
        } 
      } 
      invalidate();
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramView);
    stringBuilder.append(" is not a sliding drawer");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  View c() {
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      View view = getChildAt(b1);
      if (g(view) && k(view))
        return view; 
    } 
    return null;
  }
  
  View c(int paramInt) {
    int i1 = d.a(paramInt, r.d(this));
    int i2 = getChildCount();
    for (paramInt = 0; paramInt < i2; paramInt++) {
      View view = getChildAt(paramInt);
      if ((e(view) & 0x7) == (i1 & 0x7))
        return view; 
    } 
    return null;
  }
  
  void c(View paramView) {
    d d1 = (d)paramView.getLayoutParams();
    if ((d1.d & true) == 0) {
      d1.d = 1;
      List list = this.y;
      if (list != null)
        for (int i1 = list.size() - 1; i1 >= 0; i1--)
          ((c)this.y.get(i1)).a(paramView);  
      c(paramView, true);
      if (hasWindowFocus())
        sendAccessibilityEvent(32); 
    } 
  }
  
  void c(View paramView, float paramFloat) {
    float f1 = d(paramView);
    float f2 = paramView.getWidth();
    int i1 = (int)(f1 * f2);
    i1 = (int)(f2 * paramFloat) - i1;
    if (!a(paramView, 3))
      i1 = -i1; 
    paramView.offsetLeftAndRight(i1);
    b(paramView, paramFloat);
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (paramLayoutParams instanceof d && super.checkLayoutParams(paramLayoutParams)); }
  
  public void computeScroll() {
    int i1 = getChildCount();
    float f1 = 0.0F;
    for (byte b1 = 0; b1 < i1; b1++)
      f1 = Math.max(f1, ((d)getChildAt(b1).getLayoutParams()).b); 
    this.i = f1;
    boolean bool1 = this.k.a(true);
    boolean bool2 = this.l.a(true);
    if (bool1 || bool2)
      r.b(this); 
  }
  
  float d(View paramView) { return ((d)paramView.getLayoutParams()).b; }
  
  void d() {
    if (!this.w) {
      long l1 = SystemClock.uptimeMillis();
      MotionEvent motionEvent = MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0);
      int i1 = getChildCount();
      for (byte b1 = 0; b1 < i1; b1++)
        getChildAt(b1).dispatchTouchEvent(motionEvent); 
      motionEvent.recycle();
      this.w = true;
    } 
  }
  
  public boolean dispatchGenericMotionEvent(MotionEvent paramMotionEvent) {
    if ((paramMotionEvent.getSource() & 0x2) == 0 || paramMotionEvent.getAction() == 10 || this.i <= 0.0F)
      return super.dispatchGenericMotionEvent(paramMotionEvent); 
    int i1 = getChildCount();
    if (i1 != 0) {
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      while (--i1 >= 0) {
        View view = getChildAt(i1);
        if (a(f1, f2, view) && !f(view) && a(paramMotionEvent, view))
          return true; 
        i1--;
      } 
    } 
    return false;
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong) {
    Drawable drawable;
    int i4 = getHeight();
    boolean bool1 = f(paramView);
    int i1 = getWidth();
    int i3 = paramCanvas.save();
    int i2 = 0;
    if (bool1) {
      int i5 = getChildCount();
      byte b1 = 0;
      i2 = b1;
      while (b1 < i5) {
        View view = getChildAt(b1);
        int i6 = i2;
        int i7 = i1;
        if (view != paramView) {
          i6 = i2;
          i7 = i1;
          if (view.getVisibility() == 0) {
            i6 = i2;
            i7 = i1;
            if (m(view)) {
              i6 = i2;
              i7 = i1;
              if (g(view))
                if (view.getHeight() < i4) {
                  i6 = i2;
                  i7 = i1;
                } else if (a(view, 3)) {
                  int i8 = view.getRight();
                  i6 = i2;
                  i7 = i1;
                  if (i8 > i2) {
                    i6 = i8;
                    i7 = i1;
                  } 
                } else {
                  int i8 = view.getLeft();
                  i6 = i2;
                  i7 = i1;
                  if (i8 < i1) {
                    i7 = i8;
                    i6 = i2;
                  } 
                }  
            } 
          } 
        } 
        b1++;
        i2 = i6;
        i1 = i7;
      } 
      paramCanvas.clipRect(i2, 0, i1, getHeight());
    } 
    boolean bool2 = super.drawChild(paramCanvas, paramView, paramLong);
    paramCanvas.restoreToCount(i3);
    float f1 = this.i;
    if (f1 > 0.0F && bool1) {
      int i5 = this.h;
      int i6 = (int)(((0xFF000000 & i5) >>> 24) * f1);
      this.j.setColor(i5 & 0xFFFFFF | i6 << 24);
      paramCanvas.drawRect(i2, 0.0F, i1, getHeight(), this.j);
      return bool2;
    } 
    if (this.C != null && a(paramView, 3)) {
      i1 = this.C.getIntrinsicWidth();
      i2 = paramView.getRight();
      int i5 = this.k.b();
      f1 = Math.max(0.0F, Math.min(i2 / i5, 1.0F));
      this.C.setBounds(i2, paramView.getTop(), i1 + i2, paramView.getBottom());
      this.C.setAlpha((int)(f1 * 255.0F));
      drawable = this.C;
      drawable.draw(paramCanvas);
      return bool2;
    } 
    if (this.D != null && a(drawable, 5)) {
      i1 = this.D.getIntrinsicWidth();
      i2 = drawable.getLeft();
      int i5 = getWidth();
      int i6 = this.l.b();
      f1 = Math.max(0.0F, Math.min((i5 - i2) / i6, 1.0F));
      this.D.setBounds(i2 - i1, drawable.getTop(), i2, drawable.getBottom());
      this.D.setAlpha((int)(f1 * 255.0F));
      drawable = this.D;
      drawable.draw(paramCanvas);
      return bool2;
    } 
    return bool2;
  }
  
  int e(View paramView) { return d.a(((d)paramView.getLayoutParams()).a, r.d(this)); }
  
  public void e(int paramInt) { a(paramInt, true); }
  
  public void f(int paramInt) { b(paramInt, true); }
  
  boolean f(View paramView) { return (((d)paramView.getLayoutParams()).a == 0); }
  
  boolean g(View paramView) {
    int i1 = d.a(((d)paramView.getLayoutParams()).a, r.d(paramView));
    return ((i1 & 0x3) != 0) ? true : (((i1 & 0x5) != 0));
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams() { return new d(-1, -1); }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return new d(getContext(), paramAttributeSet); }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (paramLayoutParams instanceof d) ? new d((d)paramLayoutParams) : ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams) ? new d((ViewGroup.MarginLayoutParams)paramLayoutParams) : new d(paramLayoutParams)); }
  
  public float getDrawerElevation() { return d ? this.f : 0.0F; }
  
  public Drawable getStatusBarBackgroundDrawable() { return this.B; }
  
  public void h(View paramView) { a(paramView, true); }
  
  public void i(View paramView) { b(paramView, true); }
  
  public boolean j(View paramView) {
    if (g(paramView))
      return ((((d)paramView.getLayoutParams()).d & true) == 1); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramView);
    stringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public boolean k(View paramView) {
    if (g(paramView))
      return (((d)paramView.getLayoutParams()).b > 0.0F); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("View ");
    stringBuilder.append(paramView);
    stringBuilder.append(" is not a drawer");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    this.q = true;
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    this.q = true;
  }
  
  public void onDraw(Canvas paramCanvas) { // Byte code:
    //   0: aload_0
    //   1: aload_1
    //   2: invokespecial onDraw : (Landroid/graphics/Canvas;)V
    //   5: aload_0
    //   6: getfield H : Z
    //   9: ifeq -> 75
    //   12: aload_0
    //   13: getfield B : Landroid/graphics/drawable/Drawable;
    //   16: ifnull -> 75
    //   19: getstatic android/os/Build$VERSION.SDK_INT : I
    //   22: bipush #21
    //   24: if_icmplt -> 47
    //   27: aload_0
    //   28: getfield G : Ljava/lang/Object;
    //   31: astore_3
    //   32: aload_3
    //   33: ifnull -> 47
    //   36: aload_3
    //   37: checkcast android/view/WindowInsets
    //   40: invokevirtual getSystemWindowInsetTop : ()I
    //   43: istore_2
    //   44: goto -> 49
    //   47: iconst_0
    //   48: istore_2
    //   49: iload_2
    //   50: ifle -> 75
    //   53: aload_0
    //   54: getfield B : Landroid/graphics/drawable/Drawable;
    //   57: iconst_0
    //   58: iconst_0
    //   59: aload_0
    //   60: invokevirtual getWidth : ()I
    //   63: iload_2
    //   64: invokevirtual setBounds : (IIII)V
    //   67: aload_0
    //   68: getfield B : Landroid/graphics/drawable/Drawable;
    //   71: aload_1
    //   72: invokevirtual draw : (Landroid/graphics/Canvas;)V
    //   75: return }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual getActionMasked : ()I
    //   4: istore #4
    //   6: aload_0
    //   7: getfield k : Landroid/support/v4/widget/s;
    //   10: aload_1
    //   11: invokevirtual a : (Landroid/view/MotionEvent;)Z
    //   14: istore #7
    //   16: aload_0
    //   17: getfield l : Landroid/support/v4/widget/s;
    //   20: aload_1
    //   21: invokevirtual a : (Landroid/view/MotionEvent;)Z
    //   24: istore #8
    //   26: iconst_1
    //   27: istore #6
    //   29: iload #4
    //   31: tableswitch default -> 60, 0 -> 109, 1 -> 91, 2 -> 63, 3 -> 91
    //   60: goto -> 184
    //   63: aload_0
    //   64: getfield k : Landroid/support/v4/widget/s;
    //   67: iconst_3
    //   68: invokevirtual d : (I)Z
    //   71: ifeq -> 184
    //   74: aload_0
    //   75: getfield m : Landroid/support/v4/widget/h$f;
    //   78: invokevirtual a : ()V
    //   81: aload_0
    //   82: getfield n : Landroid/support/v4/widget/h$f;
    //   85: invokevirtual a : ()V
    //   88: goto -> 184
    //   91: aload_0
    //   92: iconst_1
    //   93: invokevirtual a : (Z)V
    //   96: aload_0
    //   97: iconst_0
    //   98: putfield v : Z
    //   101: aload_0
    //   102: iconst_0
    //   103: putfield w : Z
    //   106: goto -> 184
    //   109: aload_1
    //   110: invokevirtual getX : ()F
    //   113: fstore_2
    //   114: aload_1
    //   115: invokevirtual getY : ()F
    //   118: fstore_3
    //   119: aload_0
    //   120: fload_2
    //   121: putfield z : F
    //   124: aload_0
    //   125: fload_3
    //   126: putfield A : F
    //   129: aload_0
    //   130: getfield i : F
    //   133: fconst_0
    //   134: fcmpl
    //   135: ifle -> 168
    //   138: aload_0
    //   139: getfield k : Landroid/support/v4/widget/s;
    //   142: fload_2
    //   143: f2i
    //   144: fload_3
    //   145: f2i
    //   146: invokevirtual d : (II)Landroid/view/View;
    //   149: astore_1
    //   150: aload_1
    //   151: ifnull -> 168
    //   154: aload_0
    //   155: aload_1
    //   156: invokevirtual f : (Landroid/view/View;)Z
    //   159: ifeq -> 168
    //   162: iconst_1
    //   163: istore #4
    //   165: goto -> 171
    //   168: iconst_0
    //   169: istore #4
    //   171: aload_0
    //   172: iconst_0
    //   173: putfield v : Z
    //   176: aload_0
    //   177: iconst_0
    //   178: putfield w : Z
    //   181: goto -> 187
    //   184: iconst_0
    //   185: istore #4
    //   187: iload #6
    //   189: istore #5
    //   191: iload #7
    //   193: iload #8
    //   195: ior
    //   196: ifne -> 231
    //   199: iload #6
    //   201: istore #5
    //   203: iload #4
    //   205: ifne -> 231
    //   208: iload #6
    //   210: istore #5
    //   212: aload_0
    //   213: invokespecial h : ()Z
    //   216: ifne -> 231
    //   219: aload_0
    //   220: getfield w : Z
    //   223: ifeq -> 228
    //   226: iconst_1
    //   227: ireturn
    //   228: iconst_0
    //   229: istore #5
    //   231: iload #5
    //   233: ireturn }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent) {
    if (paramInt == 4 && i()) {
      paramKeyEvent.startTracking();
      return true;
    } 
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent) {
    View view;
    if (paramInt == 4) {
      view = c();
      if (view != null && a(view) == 0)
        b(); 
      return (view != null);
    } 
    return super.onKeyUp(paramInt, view);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    this.p = true;
    int i1 = paramInt3 - paramInt1;
    int i2 = getChildCount();
    for (paramInt3 = 0; paramInt3 < i2; paramInt3++) {
      View view = getChildAt(paramInt3);
      if (view.getVisibility() != 8) {
        d d1 = (d)view.getLayoutParams();
        if (f(view)) {
          view.layout(d1.leftMargin, d1.topMargin, d1.leftMargin + view.getMeasuredWidth(), d1.topMargin + view.getMeasuredHeight());
        } else {
          boolean bool;
          int i3;
          float f1;
          int i4 = view.getMeasuredWidth();
          int i5 = view.getMeasuredHeight();
          if (a(view, 3)) {
            paramInt1 = -i4;
            f1 = i4;
            i3 = paramInt1 + (int)(d1.b * f1);
            f1 = (i4 + i3) / f1;
          } else {
            f1 = i4;
            i3 = i1 - (int)(d1.b * f1);
            f1 = (i1 - i3) / f1;
          } 
          if (f1 != d1.b) {
            bool = true;
          } else {
            bool = false;
          } 
          paramInt1 = d1.a & 0x70;
          if (paramInt1 != 16) {
            if (paramInt1 != 80) {
              view.layout(i3, d1.topMargin, i4 + i3, d1.topMargin + i5);
            } else {
              paramInt1 = paramInt4 - paramInt2;
              view.layout(i3, paramInt1 - d1.bottomMargin - view.getMeasuredHeight(), i4 + i3, paramInt1 - d1.bottomMargin);
            } 
          } else {
            int i7 = paramInt4 - paramInt2;
            int i6 = (i7 - i5) / 2;
            if (i6 < d1.topMargin) {
              paramInt1 = d1.topMargin;
            } else {
              paramInt1 = i6;
              if (i6 + i5 > i7 - d1.bottomMargin)
                paramInt1 = i7 - d1.bottomMargin - i5; 
            } 
            view.layout(i3, paramInt1, i4 + i3, i5 + paramInt1);
          } 
          if (bool)
            b(view, f1); 
          if (d1.b > 0.0F) {
            paramInt1 = 0;
          } else {
            paramInt1 = 4;
          } 
          if (view.getVisibility() != paramInt1)
            view.setVisibility(paramInt1); 
        } 
      } 
    } 
    this.p = false;
    this.q = false;
  }
  
  @SuppressLint({"WrongConstant"})
  protected void onMeasure(int paramInt1, int paramInt2) { // Byte code:
    //   0: iload_1
    //   1: invokestatic getMode : (I)I
    //   4: istore #10
    //   6: iload_2
    //   7: invokestatic getMode : (I)I
    //   10: istore #9
    //   12: iload_1
    //   13: invokestatic getSize : (I)I
    //   16: istore #5
    //   18: iload_2
    //   19: invokestatic getSize : (I)I
    //   22: istore #6
    //   24: iload #10
    //   26: ldc_w 1073741824
    //   29: if_icmpne -> 48
    //   32: iload #5
    //   34: istore #7
    //   36: iload #6
    //   38: istore #8
    //   40: iload #9
    //   42: ldc_w 1073741824
    //   45: if_icmpeq -> 117
    //   48: aload_0
    //   49: invokevirtual isInEditMode : ()Z
    //   52: ifeq -> 822
    //   55: iload #10
    //   57: ldc_w -2147483648
    //   60: if_icmpne -> 66
    //   63: goto -> 76
    //   66: iload #10
    //   68: ifne -> 76
    //   71: sipush #300
    //   74: istore #5
    //   76: iload #9
    //   78: ldc_w -2147483648
    //   81: if_icmpne -> 95
    //   84: iload #5
    //   86: istore #7
    //   88: iload #6
    //   90: istore #8
    //   92: goto -> 117
    //   95: iload #5
    //   97: istore #7
    //   99: iload #6
    //   101: istore #8
    //   103: iload #9
    //   105: ifne -> 117
    //   108: sipush #300
    //   111: istore #8
    //   113: iload #5
    //   115: istore #7
    //   117: aload_0
    //   118: iload #7
    //   120: iload #8
    //   122: invokevirtual setMeasuredDimension : (II)V
    //   125: aload_0
    //   126: getfield G : Ljava/lang/Object;
    //   129: ifnull -> 145
    //   132: aload_0
    //   133: invokestatic n : (Landroid/view/View;)Z
    //   136: ifeq -> 145
    //   139: iconst_1
    //   140: istore #9
    //   142: goto -> 148
    //   145: iconst_0
    //   146: istore #9
    //   148: aload_0
    //   149: invokestatic d : (Landroid/view/View;)I
    //   152: istore #12
    //   154: aload_0
    //   155: invokevirtual getChildCount : ()I
    //   158: istore #13
    //   160: iconst_0
    //   161: istore #10
    //   163: iload #10
    //   165: istore #6
    //   167: iload #6
    //   169: istore #5
    //   171: iload #10
    //   173: iload #13
    //   175: if_icmpge -> 821
    //   178: aload_0
    //   179: iload #10
    //   181: invokevirtual getChildAt : (I)Landroid/view/View;
    //   184: astore #17
    //   186: aload #17
    //   188: invokevirtual getVisibility : ()I
    //   191: bipush #8
    //   193: if_icmpne -> 199
    //   196: goto -> 503
    //   199: aload #17
    //   201: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   204: checkcast android/support/v4/widget/h$d
    //   207: astore #18
    //   209: iload #9
    //   211: ifeq -> 449
    //   214: aload #18
    //   216: getfield a : I
    //   219: iload #12
    //   221: invokestatic a : (II)I
    //   224: istore #11
    //   226: aload #17
    //   228: invokestatic n : (Landroid/view/View;)Z
    //   231: ifeq -> 327
    //   234: getstatic android/os/Build$VERSION.SDK_INT : I
    //   237: bipush #21
    //   239: if_icmplt -> 449
    //   242: aload_0
    //   243: getfield G : Ljava/lang/Object;
    //   246: checkcast android/view/WindowInsets
    //   249: astore #16
    //   251: iload #11
    //   253: iconst_3
    //   254: if_icmpne -> 283
    //   257: aload #16
    //   259: aload #16
    //   261: invokevirtual getSystemWindowInsetLeft : ()I
    //   264: aload #16
    //   266: invokevirtual getSystemWindowInsetTop : ()I
    //   269: iconst_0
    //   270: aload #16
    //   272: invokevirtual getSystemWindowInsetBottom : ()I
    //   275: invokevirtual replaceSystemWindowInsets : (IIII)Landroid/view/WindowInsets;
    //   278: astore #15
    //   280: goto -> 316
    //   283: aload #16
    //   285: astore #15
    //   287: iload #11
    //   289: iconst_5
    //   290: if_icmpne -> 316
    //   293: aload #16
    //   295: iconst_0
    //   296: aload #16
    //   298: invokevirtual getSystemWindowInsetTop : ()I
    //   301: aload #16
    //   303: invokevirtual getSystemWindowInsetRight : ()I
    //   306: aload #16
    //   308: invokevirtual getSystemWindowInsetBottom : ()I
    //   311: invokevirtual replaceSystemWindowInsets : (IIII)Landroid/view/WindowInsets;
    //   314: astore #15
    //   316: aload #17
    //   318: aload #15
    //   320: invokevirtual dispatchApplyWindowInsets : (Landroid/view/WindowInsets;)Landroid/view/WindowInsets;
    //   323: pop
    //   324: goto -> 449
    //   327: getstatic android/os/Build$VERSION.SDK_INT : I
    //   330: bipush #21
    //   332: if_icmplt -> 449
    //   335: aload_0
    //   336: getfield G : Ljava/lang/Object;
    //   339: checkcast android/view/WindowInsets
    //   342: astore #16
    //   344: iload #11
    //   346: iconst_3
    //   347: if_icmpne -> 376
    //   350: aload #16
    //   352: aload #16
    //   354: invokevirtual getSystemWindowInsetLeft : ()I
    //   357: aload #16
    //   359: invokevirtual getSystemWindowInsetTop : ()I
    //   362: iconst_0
    //   363: aload #16
    //   365: invokevirtual getSystemWindowInsetBottom : ()I
    //   368: invokevirtual replaceSystemWindowInsets : (IIII)Landroid/view/WindowInsets;
    //   371: astore #15
    //   373: goto -> 409
    //   376: aload #16
    //   378: astore #15
    //   380: iload #11
    //   382: iconst_5
    //   383: if_icmpne -> 409
    //   386: aload #16
    //   388: iconst_0
    //   389: aload #16
    //   391: invokevirtual getSystemWindowInsetTop : ()I
    //   394: aload #16
    //   396: invokevirtual getSystemWindowInsetRight : ()I
    //   399: aload #16
    //   401: invokevirtual getSystemWindowInsetBottom : ()I
    //   404: invokevirtual replaceSystemWindowInsets : (IIII)Landroid/view/WindowInsets;
    //   407: astore #15
    //   409: aload #18
    //   411: aload #15
    //   413: invokevirtual getSystemWindowInsetLeft : ()I
    //   416: putfield leftMargin : I
    //   419: aload #18
    //   421: aload #15
    //   423: invokevirtual getSystemWindowInsetTop : ()I
    //   426: putfield topMargin : I
    //   429: aload #18
    //   431: aload #15
    //   433: invokevirtual getSystemWindowInsetRight : ()I
    //   436: putfield rightMargin : I
    //   439: aload #18
    //   441: aload #15
    //   443: invokevirtual getSystemWindowInsetBottom : ()I
    //   446: putfield bottomMargin : I
    //   449: aload_0
    //   450: aload #17
    //   452: invokevirtual f : (Landroid/view/View;)Z
    //   455: ifeq -> 506
    //   458: aload #17
    //   460: iload #7
    //   462: aload #18
    //   464: getfield leftMargin : I
    //   467: isub
    //   468: aload #18
    //   470: getfield rightMargin : I
    //   473: isub
    //   474: ldc_w 1073741824
    //   477: invokestatic makeMeasureSpec : (II)I
    //   480: iload #8
    //   482: aload #18
    //   484: getfield topMargin : I
    //   487: isub
    //   488: aload #18
    //   490: getfield bottomMargin : I
    //   493: isub
    //   494: ldc_w 1073741824
    //   497: invokestatic makeMeasureSpec : (II)I
    //   500: invokevirtual measure : (II)V
    //   503: goto -> 738
    //   506: aload_0
    //   507: aload #17
    //   509: invokevirtual g : (Landroid/view/View;)Z
    //   512: ifeq -> 747
    //   515: getstatic android/support/v4/widget/h.d : Z
    //   518: ifeq -> 547
    //   521: aload #17
    //   523: invokestatic j : (Landroid/view/View;)F
    //   526: fstore_3
    //   527: aload_0
    //   528: getfield f : F
    //   531: fstore #4
    //   533: fload_3
    //   534: fload #4
    //   536: fcmpl
    //   537: ifeq -> 547
    //   540: aload #17
    //   542: fload #4
    //   544: invokestatic a : (Landroid/view/View;F)V
    //   547: aload_0
    //   548: aload #17
    //   550: invokevirtual e : (Landroid/view/View;)I
    //   553: bipush #7
    //   555: iand
    //   556: istore #14
    //   558: iload #14
    //   560: iconst_3
    //   561: if_icmpne -> 570
    //   564: iconst_1
    //   565: istore #11
    //   567: goto -> 573
    //   570: iconst_0
    //   571: istore #11
    //   573: iload #11
    //   575: ifeq -> 583
    //   578: iload #6
    //   580: ifne -> 596
    //   583: iload #11
    //   585: ifne -> 674
    //   588: iload #5
    //   590: ifne -> 596
    //   593: goto -> 674
    //   596: new java/lang/StringBuilder
    //   599: dup
    //   600: invokespecial <init> : ()V
    //   603: astore #15
    //   605: aload #15
    //   607: ldc_w 'Child drawer has absolute gravity '
    //   610: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   613: pop
    //   614: aload #15
    //   616: iload #14
    //   618: invokestatic d : (I)Ljava/lang/String;
    //   621: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   624: pop
    //   625: aload #15
    //   627: ldc_w ' but this '
    //   630: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   633: pop
    //   634: aload #15
    //   636: ldc_w 'DrawerLayout'
    //   639: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   642: pop
    //   643: aload #15
    //   645: ldc_w ' already has a '
    //   648: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   651: pop
    //   652: aload #15
    //   654: ldc_w 'drawer view along that edge'
    //   657: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   660: pop
    //   661: new java/lang/IllegalStateException
    //   664: dup
    //   665: aload #15
    //   667: invokevirtual toString : ()Ljava/lang/String;
    //   670: invokespecial <init> : (Ljava/lang/String;)V
    //   673: athrow
    //   674: iload #11
    //   676: ifeq -> 685
    //   679: iconst_1
    //   680: istore #6
    //   682: goto -> 688
    //   685: iconst_1
    //   686: istore #5
    //   688: aload #17
    //   690: iload_1
    //   691: aload_0
    //   692: getfield g : I
    //   695: aload #18
    //   697: getfield leftMargin : I
    //   700: iadd
    //   701: aload #18
    //   703: getfield rightMargin : I
    //   706: iadd
    //   707: aload #18
    //   709: getfield width : I
    //   712: invokestatic getChildMeasureSpec : (III)I
    //   715: iload_2
    //   716: aload #18
    //   718: getfield topMargin : I
    //   721: aload #18
    //   723: getfield bottomMargin : I
    //   726: iadd
    //   727: aload #18
    //   729: getfield height : I
    //   732: invokestatic getChildMeasureSpec : (III)I
    //   735: invokevirtual measure : (II)V
    //   738: iload #10
    //   740: iconst_1
    //   741: iadd
    //   742: istore #10
    //   744: goto -> 171
    //   747: new java/lang/StringBuilder
    //   750: dup
    //   751: invokespecial <init> : ()V
    //   754: astore #15
    //   756: aload #15
    //   758: ldc_w 'Child '
    //   761: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   764: pop
    //   765: aload #15
    //   767: aload #17
    //   769: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   772: pop
    //   773: aload #15
    //   775: ldc_w ' at index '
    //   778: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   781: pop
    //   782: aload #15
    //   784: iload #10
    //   786: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   789: pop
    //   790: aload #15
    //   792: ldc_w ' does not have a valid layout_gravity - must be Gravity.LEFT, '
    //   795: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   798: pop
    //   799: aload #15
    //   801: ldc_w 'Gravity.RIGHT or Gravity.NO_GRAVITY'
    //   804: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   807: pop
    //   808: new java/lang/IllegalStateException
    //   811: dup
    //   812: aload #15
    //   814: invokevirtual toString : ()Ljava/lang/String;
    //   817: invokespecial <init> : (Ljava/lang/String;)V
    //   820: athrow
    //   821: return
    //   822: new java/lang/IllegalArgumentException
    //   825: dup
    //   826: ldc_w 'DrawerLayout must be measured with MeasureSpec.EXACTLY.'
    //   829: invokespecial <init> : (Ljava/lang/String;)V
    //   832: athrow }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof e)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    e e1 = (e)paramParcelable;
    super.onRestoreInstanceState(e1.a());
    if (e1.b != 0) {
      View view = c(e1.b);
      if (view != null)
        h(view); 
    } 
    if (e1.c != 3)
      a(e1.c, 3); 
    if (e1.d != 3)
      a(e1.d, 5); 
    if (e1.e != 3)
      a(e1.e, 8388611); 
    if (e1.f != 3)
      a(e1.f, 8388613); 
  }
  
  public void onRtlPropertiesChanged(int paramInt) { e(); }
  
  protected Parcelable onSaveInstanceState() {
    e e1 = new e(super.onSaveInstanceState());
    int i1 = getChildCount();
    for (byte b1 = 0; b1 < i1; b1++) {
      d d1 = (d)getChildAt(b1).getLayoutParams();
      int i2 = d1.d;
      boolean bool = true;
      if (i2 == 1) {
        i2 = 1;
      } else {
        i2 = 0;
      } 
      if (d1.d != 2)
        bool = false; 
      if (i2 != 0 || bool) {
        e1.b = d1.a;
        break;
      } 
    } 
    e1.c = this.r;
    e1.d = this.s;
    e1.e = this.t;
    e1.f = this.u;
    return e1;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    this.k.b(paramMotionEvent);
    this.l.b(paramMotionEvent);
    int i1 = paramMotionEvent.getAction() & 0xFF;
    if (i1 != 3) {
      boolean bool;
      View view;
      switch (i1) {
        default:
          return true;
        case 1:
          f2 = paramMotionEvent.getX();
          f1 = paramMotionEvent.getY();
          view = this.k.d((int)f2, (int)f1);
          if (view != null && f(view)) {
            f2 -= this.z;
            f1 -= this.A;
            i1 = this.k.d();
            if (f2 * f2 + f1 * f1 < (i1 * i1)) {
              view = a();
              if (view == null || a(view) == 2) {
                boolean bool2 = true;
                a(bool2);
                this.v = false;
                return true;
              } 
              boolean bool1 = false;
              a(bool1);
              this.v = false;
              return true;
            } 
          } 
          bool = true;
          a(bool);
          this.v = false;
          return true;
        case 0:
          break;
      } 
      float f1 = view.getX();
      float f2 = view.getY();
      this.z = f1;
      this.A = f2;
      this.v = false;
      this.w = false;
      return true;
    } 
    a(true);
    this.v = false;
    this.w = false;
    return true;
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean) {
    super.requestDisallowInterceptTouchEvent(paramBoolean);
    this.v = paramBoolean;
    if (paramBoolean)
      a(true); 
  }
  
  public void requestLayout() {
    if (!this.p)
      super.requestLayout(); 
  }
  
  public void setDrawerElevation(float paramFloat) {
    this.f = paramFloat;
    for (byte b1 = 0; b1 < getChildCount(); b1++) {
      View view = getChildAt(b1);
      if (g(view))
        r.a(view, this.f); 
    } 
  }
  
  @Deprecated
  public void setDrawerListener(c paramc) {
    c c1 = this.x;
    if (c1 != null)
      b(c1); 
    if (paramc != null)
      a(paramc); 
    this.x = paramc;
  }
  
  public void setDrawerLockMode(int paramInt) {
    a(paramInt, 3);
    a(paramInt, 5);
  }
  
  public void setScrimColor(int paramInt) {
    this.h = paramInt;
    invalidate();
  }
  
  public void setStatusBarBackground(int paramInt) {
    Object object;
    if (paramInt != 0) {
      object = a.a(getContext(), paramInt);
    } else {
      object = null;
    } 
    this.B = object;
    invalidate();
  }
  
  public void setStatusBarBackground(Drawable paramDrawable) {
    this.B = paramDrawable;
    invalidate();
  }
  
  public void setStatusBarBackgroundColor(int paramInt) {
    this.B = new ColorDrawable(paramInt);
    invalidate();
  }
}
