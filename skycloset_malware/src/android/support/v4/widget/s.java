package android.support.v4.widget;

import android.content.Context;
import android.support.v4.f.r;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import android.widget.OverScroller;
import java.util.Arrays;

public class s {
  private static final Interpolator v = new Object();
  
  private int a;
  
  private int b;
  
  private int c = -1;
  
  private float[] d;
  
  private float[] e;
  
  private float[] f;
  
  private float[] g;
  
  private int[] h;
  
  private int[] i;
  
  private int[] j;
  
  private int k;
  
  private VelocityTracker l;
  
  private float m;
  
  private float n;
  
  private int o;
  
  private int p;
  
  private OverScroller q;
  
  private final a r;
  
  private View s;
  
  private boolean t;
  
  private final ViewGroup u;
  
  private final Runnable w = new Object(this);
  
  private s(Context paramContext, ViewGroup paramViewGroup, a parama) {
    if (paramViewGroup != null) {
      if (parama != null) {
        this.u = paramViewGroup;
        this.r = parama;
        ViewConfiguration viewConfiguration = ViewConfiguration.get(paramContext);
        this.o = (int)((paramContext.getResources().getDisplayMetrics()).density * 20.0F + 0.5F);
        this.b = viewConfiguration.getScaledTouchSlop();
        this.m = viewConfiguration.getScaledMaximumFlingVelocity();
        this.n = viewConfiguration.getScaledMinimumFlingVelocity();
        this.q = new OverScroller(paramContext, v);
        return;
      } 
      throw new IllegalArgumentException("Callback may not be null");
    } 
    throw new IllegalArgumentException("Parent view may not be null");
  }
  
  private float a(float paramFloat1, float paramFloat2, float paramFloat3) {
    float f1 = Math.abs(paramFloat1);
    return (f1 < paramFloat2) ? 0.0F : ((f1 > paramFloat3) ? ((paramFloat1 > 0.0F) ? paramFloat3 : -paramFloat3) : paramFloat1);
  }
  
  private int a(int paramInt1, int paramInt2, int paramInt3) {
    if (paramInt1 == 0)
      return 0; 
    int i1 = this.u.getWidth();
    int i2 = i1 / 2;
    float f2 = Math.min(1.0F, Math.abs(paramInt1) / i1);
    float f1 = i2;
    f2 = b(f2);
    paramInt2 = Math.abs(paramInt2);
    if (paramInt2 > 0) {
      paramInt1 = Math.round(Math.abs((f1 + f2 * f1) / paramInt2) * 1000.0F) * 4;
    } else {
      paramInt1 = (int)((Math.abs(paramInt1) / paramInt3 + 1.0F) * 256.0F);
    } 
    return Math.min(paramInt1, 600);
  }
  
  private int a(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    float f2;
    float f1;
    paramInt3 = b(paramInt3, (int)this.n, (int)this.m);
    paramInt4 = b(paramInt4, (int)this.n, (int)this.m);
    int i1 = Math.abs(paramInt1);
    int i2 = Math.abs(paramInt2);
    int i3 = Math.abs(paramInt3);
    int i4 = Math.abs(paramInt4);
    int i5 = i3 + i4;
    int i6 = i1 + i2;
    if (paramInt3 != 0) {
      f1 = i3;
      f2 = i5;
    } else {
      f1 = i1;
      f2 = i6;
    } 
    float f3 = f1 / f2;
    if (paramInt4 != 0) {
      f1 = i4;
      f2 = i5;
    } else {
      f1 = i2;
      f2 = i6;
    } 
    f1 /= f2;
    paramInt1 = a(paramInt1, paramInt3, this.r.a(paramView));
    paramInt2 = a(paramInt2, paramInt4, this.r.b(paramView));
    return (int)(paramInt1 * f3 + paramInt2 * f1);
  }
  
  public static s a(ViewGroup paramViewGroup, float paramFloat, a parama) {
    s s1 = a(paramViewGroup, parama);
    s1.b = (int)(s1.b * 1.0F / paramFloat);
    return s1;
  }
  
  public static s a(ViewGroup paramViewGroup, a parama) { return new s(paramViewGroup.getContext(), paramViewGroup, parama); }
  
  private void a(float paramFloat1, float paramFloat2) {
    this.t = true;
    this.r.a(this.s, paramFloat1, paramFloat2);
    this.t = false;
    if (this.a == 1)
      c(0); 
  }
  
  private void a(float paramFloat1, float paramFloat2, int paramInt) {
    f(paramInt);
    float[] arrayOfFloat = this.d;
    this.f[paramInt] = paramFloat1;
    arrayOfFloat[paramInt] = paramFloat1;
    arrayOfFloat = this.e;
    this.g[paramInt] = paramFloat2;
    arrayOfFloat[paramInt] = paramFloat2;
    this.h[paramInt] = e((int)paramFloat1, (int)paramFloat2);
    this.k |= 1 << paramInt;
  }
  
  private boolean a(float paramFloat1, float paramFloat2, int paramInt1, int paramInt2) {
    paramFloat1 = Math.abs(paramFloat1);
    paramFloat2 = Math.abs(paramFloat2);
    int i1 = this.h[paramInt1];
    byte b1 = 0;
    int i2 = b1;
    if ((i1 & paramInt2) == paramInt2) {
      i2 = b1;
      if ((this.p & paramInt2) != 0) {
        i2 = b1;
        if ((this.j[paramInt1] & paramInt2) != paramInt2) {
          i2 = b1;
          if ((this.i[paramInt1] & paramInt2) != paramInt2) {
            i1 = this.b;
            if (paramFloat1 <= i1 && paramFloat2 <= i1)
              return false; 
            if (paramFloat1 < paramFloat2 * 0.5F && this.r.b(paramInt2)) {
              int[] arrayOfInt = this.j;
              arrayOfInt[paramInt1] = arrayOfInt[paramInt1] | paramInt2;
              return false;
            } 
            i2 = b1;
            if ((this.i[paramInt1] & paramInt2) == 0) {
              i2 = b1;
              if (paramFloat1 > this.b)
                i2 = 1; 
            } 
          } 
        } 
      } 
    } 
    return i2;
  }
  
  private boolean a(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    int i1 = this.s.getLeft();
    int i2 = this.s.getTop();
    paramInt1 -= i1;
    paramInt2 -= i2;
    if (paramInt1 == 0 && paramInt2 == 0) {
      this.q.abortAnimation();
      c(0);
      return false;
    } 
    paramInt3 = a(this.s, paramInt1, paramInt2, paramInt3, paramInt4);
    this.q.startScroll(i1, i2, paramInt1, paramInt2, paramInt3);
    c(2);
    return true;
  }
  
  private boolean a(View paramView, float paramFloat1, float paramFloat2) {
    boolean bool1;
    int i1;
    boolean bool3 = false;
    boolean bool2 = false;
    boolean bool = false;
    if (paramView == null)
      return false; 
    if (this.r.a(paramView) > 0) {
      i1 = 1;
    } else {
      i1 = 0;
    } 
    if (this.r.b(paramView) > 0) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    if (i1 && bool1) {
      i1 = this.b;
      if (paramFloat1 * paramFloat1 + paramFloat2 * paramFloat2 > (i1 * i1))
        bool = true; 
      return bool;
    } 
    if (i1 != 0) {
      bool = bool3;
      if (Math.abs(paramFloat1) > this.b)
        bool = true; 
      return bool;
    } 
    bool = bool2;
    if (bool1) {
      bool = bool2;
      if (Math.abs(paramFloat2) > this.b)
        bool = true; 
    } 
    return bool;
  }
  
  private float b(float paramFloat) { return (float)Math.sin(((paramFloat - 0.5F) * 0.47123894F)); }
  
  private int b(int paramInt1, int paramInt2, int paramInt3) {
    int i1 = Math.abs(paramInt1);
    return (i1 < paramInt2) ? 0 : ((i1 > paramInt3) ? ((paramInt1 > 0) ? paramInt3 : -paramInt3) : paramInt1);
  }
  
  private void b(float paramFloat1, float paramFloat2, int paramInt) {
    byte b1 = 1;
    if (!a(paramFloat1, paramFloat2, paramInt, 1))
      b1 = 0; 
    int i1 = b1;
    if (a(paramFloat2, paramFloat1, paramInt, 4))
      i1 = b1 | 0x4; 
    b1 = i1;
    if (a(paramFloat1, paramFloat2, paramInt, 2))
      b1 = i1 | 0x2; 
    i1 = b1;
    if (a(paramFloat2, paramFloat1, paramInt, 8))
      i1 = b1 | 0x8; 
    if (i1 != 0) {
      int[] arrayOfInt = this.i;
      arrayOfInt[paramInt] = arrayOfInt[paramInt] | i1;
      this.r.b(i1, paramInt);
    } 
  }
  
  private void b(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    int i2 = this.s.getLeft();
    int i3 = this.s.getTop();
    int i1 = paramInt1;
    if (paramInt3 != 0) {
      i1 = this.r.a(this.s, paramInt1, paramInt3);
      r.e(this.s, i1 - i2);
    } 
    paramInt1 = paramInt2;
    if (paramInt4 != 0) {
      paramInt1 = this.r.b(this.s, paramInt2, paramInt4);
      r.d(this.s, paramInt1 - i3);
    } 
    if (paramInt3 != 0 || paramInt4 != 0)
      this.r.a(this.s, i1, paramInt1, i1 - i2, paramInt1 - i3); 
  }
  
  private void c(MotionEvent paramMotionEvent) {
    int i1 = paramMotionEvent.getPointerCount();
    byte b1;
    for (b1 = 0; b1 < i1; b1++) {
      int i2 = paramMotionEvent.getPointerId(b1);
      if (g(i2)) {
        float f1 = paramMotionEvent.getX(b1);
        float f2 = paramMotionEvent.getY(b1);
        this.f[i2] = f1;
        this.g[i2] = f2;
      } 
    } 
  }
  
  private int e(int paramInt1, int paramInt2) {
    if (paramInt1 < this.u.getLeft() + this.o) {
      i1 = 1;
    } else {
      i1 = 0;
    } 
    byte b1 = i1;
    if (paramInt2 < this.u.getTop() + this.o)
      b1 = i1 | 0x4; 
    int i1 = b1;
    if (paramInt1 > this.u.getRight() - this.o)
      i1 = b1 | 0x2; 
    paramInt1 = i1;
    if (paramInt2 > this.u.getBottom() - this.o)
      paramInt1 = i1 | 0x8; 
    return paramInt1;
  }
  
  private void e(int paramInt) {
    if (this.d != null) {
      if (!b(paramInt))
        return; 
      this.d[paramInt] = 0.0F;
      this.e[paramInt] = 0.0F;
      this.f[paramInt] = 0.0F;
      this.g[paramInt] = 0.0F;
      this.h[paramInt] = 0;
      this.i[paramInt] = 0;
      this.j[paramInt] = 0;
      this.k = 1 << paramInt & this.k;
    } 
  }
  
  private void f() {
    float[] arrayOfFloat = this.d;
    if (arrayOfFloat == null)
      return; 
    Arrays.fill(arrayOfFloat, 0.0F);
    Arrays.fill(this.e, 0.0F);
    Arrays.fill(this.f, 0.0F);
    Arrays.fill(this.g, 0.0F);
    Arrays.fill(this.h, 0);
    Arrays.fill(this.i, 0);
    Arrays.fill(this.j, 0);
    this.k = 0;
  }
  
  private void f(int paramInt) {
    float[] arrayOfFloat = this.d;
    if (arrayOfFloat == null || arrayOfFloat.length <= paramInt) {
      arrayOfFloat = new float[++paramInt];
      float[] arrayOfFloat1 = new float[paramInt];
      float[] arrayOfFloat2 = new float[paramInt];
      float[] arrayOfFloat3 = new float[paramInt];
      int[] arrayOfInt1 = new int[paramInt];
      int[] arrayOfInt2 = new int[paramInt];
      int[] arrayOfInt3 = new int[paramInt];
      float[] arrayOfFloat4 = this.d;
      if (arrayOfFloat4 != null) {
        System.arraycopy(arrayOfFloat4, 0, arrayOfFloat, 0, arrayOfFloat4.length);
        arrayOfFloat4 = this.e;
        System.arraycopy(arrayOfFloat4, 0, arrayOfFloat1, 0, arrayOfFloat4.length);
        arrayOfFloat4 = this.f;
        System.arraycopy(arrayOfFloat4, 0, arrayOfFloat2, 0, arrayOfFloat4.length);
        arrayOfFloat4 = this.g;
        System.arraycopy(arrayOfFloat4, 0, arrayOfFloat3, 0, arrayOfFloat4.length);
        int[] arrayOfInt = this.h;
        System.arraycopy(arrayOfInt, 0, arrayOfInt1, 0, arrayOfInt.length);
        arrayOfInt = this.i;
        System.arraycopy(arrayOfInt, 0, arrayOfInt2, 0, arrayOfInt.length);
        arrayOfInt = this.j;
        System.arraycopy(arrayOfInt, 0, arrayOfInt3, 0, arrayOfInt.length);
      } 
      this.d = arrayOfFloat;
      this.e = arrayOfFloat1;
      this.f = arrayOfFloat2;
      this.g = arrayOfFloat3;
      this.h = arrayOfInt1;
      this.i = arrayOfInt2;
      this.j = arrayOfInt3;
    } 
  }
  
  private void g() {
    this.l.computeCurrentVelocity(1000, this.m);
    a(a(this.l.getXVelocity(this.c), this.n, this.m), a(this.l.getYVelocity(this.c), this.n, this.m));
  }
  
  private boolean g(int paramInt) {
    if (!b(paramInt)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Ignoring pointerId=");
      stringBuilder.append(paramInt);
      stringBuilder.append(" because ACTION_DOWN was not received ");
      stringBuilder.append("for this pointer before ACTION_MOVE. It likely happened because ");
      stringBuilder.append(" ViewDragHelper did not receive all the events in the event stream.");
      Log.e("ViewDragHelper", stringBuilder.toString());
      return false;
    } 
    return true;
  }
  
  public int a() { return this.a; }
  
  public void a(float paramFloat) { this.n = paramFloat; }
  
  public void a(int paramInt) { this.p = paramInt; }
  
  public void a(View paramView, int paramInt) {
    if (paramView.getParent() == this.u) {
      this.s = paramView;
      this.c = paramInt;
      this.r.b(paramView, paramInt);
      c(1);
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("captureChildView: parameter must be a descendant of the ViewDragHelper's tracked parent view (");
    stringBuilder.append(this.u);
    stringBuilder.append(")");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public boolean a(int paramInt1, int paramInt2) {
    if (this.t)
      return a(paramInt1, paramInt2, (int)this.l.getXVelocity(this.c), (int)this.l.getYVelocity(this.c)); 
    throw new IllegalStateException("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");
  }
  
  public boolean a(MotionEvent paramMotionEvent) {
    int i3;
    float f2;
    float f1;
    View view;
    int i1 = paramMotionEvent.getActionMasked();
    int i2 = paramMotionEvent.getActionIndex();
    if (i1 == 0)
      e(); 
    if (this.l == null)
      this.l = VelocityTracker.obtain(); 
    this.l.addMovement(paramMotionEvent);
    switch (i1) {
      case 6:
        e(paramMotionEvent.getPointerId(i2));
        break;
      case 5:
        i1 = paramMotionEvent.getPointerId(i2);
        f1 = paramMotionEvent.getX(i2);
        f2 = paramMotionEvent.getY(i2);
        a(f1, f2, i1);
        i2 = this.a;
        if (i2 == 0) {
          i2 = this.h[i1];
          int i4 = this.p;
          if ((i2 & i4) != 0)
            this.r.a(i2 & i4, i1); 
          break;
        } 
        if (i2 == 2) {
          view = d((int)f1, (int)f2);
          if (view == this.s)
            b(view, i1); 
        } 
        break;
      case 2:
        if (this.d == null || this.e == null)
          break; 
        i3 = view.getPointerCount();
        for (i1 = 0; i1 < i3; i1++) {
          int i4 = view.getPointerId(i1);
          if (g(i4)) {
            f1 = view.getX(i1);
            f2 = view.getY(i1);
            float f3 = f1 - this.d[i4];
            float f4 = f2 - this.e[i4];
            View view1 = d((int)f1, (int)f2);
            if (view1 != null && a(view1, f3, f4)) {
              i2 = 1;
            } else {
              i2 = 0;
            } 
            if (i2 != 0) {
              int i5 = view1.getLeft();
              int i6 = (int)f3;
              i6 = this.r.a(view1, i5 + i6, i6);
              int i7 = view1.getTop();
              int i8 = (int)f4;
              i8 = this.r.b(view1, i7 + i8, i8);
              int i9 = this.r.a(view1);
              int i10 = this.r.b(view1);
              if ((i9 == 0 || (i9 > 0 && i6 == i5)) && (i10 == 0 || (i10 > 0 && i8 == i7)))
                break; 
            } 
            b(f3, f4, i4);
            if (this.a == 1 || (i2 != 0 && b(view1, i4)))
              break; 
          } 
        } 
        c(view);
        break;
      case 1:
      case 3:
        e();
        break;
      case 0:
        f1 = view.getX();
        f2 = view.getY();
        i1 = view.getPointerId(0);
        a(f1, f2, i1);
        view = d((int)f1, (int)f2);
        if (view == this.s && this.a == 2)
          b(view, i1); 
        i2 = this.h[i1];
        i3 = this.p;
        if ((i2 & i3) != 0)
          this.r.a(i2 & i3, i1); 
        break;
    } 
    boolean bool = false;
    if (this.a == 1)
      bool = true; 
    return bool;
  }
  
  public boolean a(View paramView, int paramInt1, int paramInt2) {
    this.s = paramView;
    this.c = -1;
    boolean bool = a(paramInt1, paramInt2, 0, 0);
    if (!bool && this.a == 0 && this.s != null)
      this.s = null; 
    return bool;
  }
  
  public boolean a(boolean paramBoolean) {
    int i1 = this.a;
    boolean bool = false;
    if (i1 == 2) {
      boolean bool2 = this.q.computeScrollOffset();
      i1 = this.q.getCurrX();
      int i2 = this.q.getCurrY();
      int i3 = i1 - this.s.getLeft();
      int i4 = i2 - this.s.getTop();
      if (i3 != 0)
        r.e(this.s, i3); 
      if (i4 != 0)
        r.d(this.s, i4); 
      if (i3 != 0 || i4 != 0)
        this.r.a(this.s, i1, i2, i3, i4); 
      boolean bool1 = bool2;
      if (bool2) {
        bool1 = bool2;
        if (i1 == this.q.getFinalX()) {
          bool1 = bool2;
          if (i2 == this.q.getFinalY()) {
            this.q.abortAnimation();
            bool1 = false;
          } 
        } 
      } 
      if (!bool1)
        if (paramBoolean) {
          this.u.post(this.w);
        } else {
          c(0);
        }  
    } 
    paramBoolean = bool;
    if (this.a == 2)
      paramBoolean = true; 
    return paramBoolean;
  }
  
  public int b() { return this.o; }
  
  public void b(MotionEvent paramMotionEvent) {
    int i4 = paramMotionEvent.getActionMasked();
    int i3 = paramMotionEvent.getActionIndex();
    if (i4 == 0)
      e(); 
    if (this.l == null)
      this.l = VelocityTracker.obtain(); 
    this.l.addMovement(paramMotionEvent);
    int i2 = 0;
    int i1 = 0;
    switch (i4) {
      default:
        return;
      case 6:
        i2 = paramMotionEvent.getPointerId(i3);
        if (this.a == 1 && i2 == this.c) {
          i3 = paramMotionEvent.getPointerCount();
          while (true) {
            if (i1 < i3) {
              i4 = paramMotionEvent.getPointerId(i1);
              if (i4 != this.c) {
                float f3 = paramMotionEvent.getX(i1);
                float f4 = paramMotionEvent.getY(i1);
                View view1 = d((int)f3, (int)f4);
                View view2 = this.s;
                if (view1 == view2 && b(view2, i4)) {
                  i1 = this.c;
                  break;
                } 
              } 
              i1++;
              continue;
            } 
            i1 = -1;
            break;
          } 
          if (i1 == -1)
            g(); 
        } 
        e(i2);
        return;
      case 5:
        i1 = paramMotionEvent.getPointerId(i3);
        f1 = paramMotionEvent.getX(i3);
        f2 = paramMotionEvent.getY(i3);
        a(f1, f2, i1);
        if (this.a == 0) {
          b(d((int)f1, (int)f2), i1);
          i2 = this.h[i1];
          i3 = this.p;
          if ((i2 & i3) != 0) {
            this.r.a(i2 & i3, i1);
            return;
          } 
        } else if (c((int)f1, (int)f2)) {
          b(this.s, i1);
          return;
        } 
        return;
      case 3:
        if (this.a == 1)
          a(0.0F, 0.0F); 
        e();
        return;
      case 2:
        if (this.a == 1) {
          if (!g(this.c))
            return; 
          i1 = paramMotionEvent.findPointerIndex(this.c);
          f1 = paramMotionEvent.getX(i1);
          f2 = paramMotionEvent.getY(i1);
          float[] arrayOfFloat = this.f;
          i2 = this.c;
          i1 = (int)(f1 - arrayOfFloat[i2]);
          i2 = (int)(f2 - this.g[i2]);
          b(this.s.getLeft() + i1, this.s.getTop() + i2, i1, i2);
        } else {
          i3 = paramMotionEvent.getPointerCount();
          i1 = i2;
          while (true) {
            if (i1 < i3) {
              i2 = paramMotionEvent.getPointerId(i1);
              if (g(i2)) {
                f1 = paramMotionEvent.getX(i1);
                f2 = paramMotionEvent.getY(i1);
                float f3 = f1 - this.d[i2];
                float f4 = f2 - this.e[i2];
                b(f3, f4, i2);
                if (this.a == 1) {
                  c(paramMotionEvent);
                  return;
                } 
                View view1 = d((int)f1, (int)f2);
                if (a(view1, f3, f4) && b(view1, i2)) {
                  c(paramMotionEvent);
                  return;
                } 
              } 
              i1++;
              continue;
            } 
            c(paramMotionEvent);
            return;
          } 
        } 
        c(paramMotionEvent);
        return;
      case 1:
        if (this.a == 1)
          g(); 
        e();
        return;
      case 0:
        break;
    } 
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    i1 = paramMotionEvent.getPointerId(0);
    View view = d((int)f1, (int)f2);
    a(f1, f2, i1);
    b(view, i1);
    i2 = this.h[i1];
    i3 = this.p;
    if ((i2 & i3) != 0)
      this.r.a(i2 & i3, i1); 
  }
  
  public boolean b(int paramInt) { return ((1 << paramInt & this.k) != 0); }
  
  public boolean b(int paramInt1, int paramInt2) {
    boolean bool1;
    boolean bool5 = b(paramInt2);
    boolean bool4 = false;
    boolean bool3 = false;
    boolean bool2 = false;
    if (!bool5)
      return false; 
    if ((paramInt1 & true) == 1) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    if ((paramInt1 & 0x2) == 2) {
      paramInt1 = 1;
    } else {
      paramInt1 = 0;
    } 
    float f1 = this.f[paramInt2] - this.d[paramInt2];
    float f2 = this.g[paramInt2] - this.e[paramInt2];
    if (bool1 && paramInt1 != 0) {
      paramInt1 = this.b;
      if (f1 * f1 + f2 * f2 > (paramInt1 * paramInt1))
        bool2 = true; 
      return bool2;
    } 
    if (bool1) {
      bool2 = bool4;
      if (Math.abs(f1) > this.b)
        bool2 = true; 
      return bool2;
    } 
    bool2 = bool3;
    if (paramInt1 != 0) {
      bool2 = bool3;
      if (Math.abs(f2) > this.b)
        bool2 = true; 
    } 
    return bool2;
  }
  
  boolean b(View paramView, int paramInt) {
    if (paramView == this.s && this.c == paramInt)
      return true; 
    if (paramView != null && this.r.a(paramView, paramInt)) {
      this.c = paramInt;
      a(paramView, paramInt);
      return true;
    } 
    return false;
  }
  
  public boolean b(View paramView, int paramInt1, int paramInt2) {
    byte b1 = 0;
    if (paramView == null)
      return false; 
    int i1 = b1;
    if (paramInt1 >= paramView.getLeft()) {
      i1 = b1;
      if (paramInt1 < paramView.getRight()) {
        i1 = b1;
        if (paramInt2 >= paramView.getTop()) {
          i1 = b1;
          if (paramInt2 < paramView.getBottom())
            i1 = 1; 
        } 
      } 
    } 
    return i1;
  }
  
  public View c() { return this.s; }
  
  void c(int paramInt) {
    this.u.removeCallbacks(this.w);
    if (this.a != paramInt) {
      this.a = paramInt;
      this.r.a(paramInt);
      if (this.a == 0)
        this.s = null; 
    } 
  }
  
  public boolean c(int paramInt1, int paramInt2) { return b(this.s, paramInt1, paramInt2); }
  
  public int d() { return this.b; }
  
  public View d(int paramInt1, int paramInt2) {
    for (int i1 = this.u.getChildCount() - 1; i1 >= 0; i1--) {
      View view = this.u.getChildAt(this.r.c(i1));
      if (paramInt1 >= view.getLeft() && paramInt1 < view.getRight() && paramInt2 >= view.getTop() && paramInt2 < view.getBottom())
        return view; 
    } 
    return null;
  }
  
  public boolean d(int paramInt) {
    int i1 = this.d.length;
    for (byte b1 = 0; b1 < i1; b1++) {
      if (b(paramInt, b1))
        return true; 
    } 
    return false;
  }
  
  public void e() {
    this.c = -1;
    f();
    VelocityTracker velocityTracker = this.l;
    if (velocityTracker != null) {
      velocityTracker.recycle();
      this.l = null;
    } 
  }
}
