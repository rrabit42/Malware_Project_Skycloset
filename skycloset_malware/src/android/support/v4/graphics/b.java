package android.support.v4.graphics;

import android.graphics.Path;
import java.util.ArrayList;

public class b {
  private static int a(String paramString, int paramInt) {
    while (paramInt < paramString.length()) {
      char c = paramString.charAt(paramInt);
      if (((c - 'A') * (c - 'Z') <= '\000' || (c - 'a') * (c - 'z') <= '\000') && c != 'e' && c != 'E')
        return paramInt; 
      paramInt++;
    } 
    return paramInt;
  }
  
  public static Path a(String paramString) {
    path = new Path();
    b[] arrayOfb = b(paramString);
    if (arrayOfb != null)
      try {
        b.a(arrayOfb, path);
        return path;
      } catch (RuntimeException path) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Error in parsing ");
        stringBuilder.append(paramString);
        throw new RuntimeException(stringBuilder.toString(), path);
      }  
    return null;
  }
  
  private static void a(String paramString, int paramInt, a parama) {
    parama.b = false;
    int i = paramInt;
    char c = Character.MIN_VALUE;
    byte b1 = c;
    boolean bool1 = b1;
    boolean bool2 = b1;
    b1 = c;
    while (i < paramString.length()) {
      c = paramString.charAt(i);
      if (c != ' ') {
        if (c != 'E' && c != 'e') {
          switch (c) {
            default:
              b1 = 0;
              break;
            case '.':
              if (!bool2) {
                b1 = 0;
                bool2 = true;
                break;
              } 
              parama.b = true;
            case '-':
            
            case ',':
              b1 = 0;
              bool1 = true;
              break;
          } 
        } else {
          b1 = 1;
        } 
        if (bool1)
          break; 
        continue;
      } 
      i++;
    } 
    parama.a = i;
  }
  
  private static void a(ArrayList<b> paramArrayList, char paramChar, float[] paramArrayOfFloat) { paramArrayList.add(new b(paramChar, paramArrayOfFloat)); }
  
  public static boolean a(b[] paramArrayOfb1, b[] paramArrayOfb2) {
    if (paramArrayOfb1 != null) {
      if (paramArrayOfb2 == null)
        return false; 
      if (paramArrayOfb1.length != paramArrayOfb2.length)
        return false; 
      byte b1 = 0;
      while (b1 < paramArrayOfb1.length) {
        if ((paramArrayOfb1[b1]).a == (paramArrayOfb2[b1]).a) {
          if ((paramArrayOfb1[b1]).b.length != (paramArrayOfb2[b1]).b.length)
            return false; 
          b1++;
          continue;
        } 
        return false;
      } 
      return true;
    } 
    return false;
  }
  
  static float[] a(float[] paramArrayOfFloat, int paramInt1, int paramInt2) {
    if (paramInt1 <= paramInt2) {
      int i = paramArrayOfFloat.length;
      if (paramInt1 >= 0 && paramInt1 <= i) {
        paramInt2 -= paramInt1;
        i = Math.min(paramInt2, i - paramInt1);
        float[] arrayOfFloat = new float[paramInt2];
        System.arraycopy(paramArrayOfFloat, paramInt1, arrayOfFloat, 0, i);
        return arrayOfFloat;
      } 
      throw new ArrayIndexOutOfBoundsException();
    } 
    throw new IllegalArgumentException();
  }
  
  public static b[] a(b[] paramArrayOfb) {
    if (paramArrayOfb == null)
      return null; 
    b[] arrayOfb = new b[paramArrayOfb.length];
    for (byte b1 = 0; b1 < paramArrayOfb.length; b1++)
      arrayOfb[b1] = new b(paramArrayOfb[b1]); 
    return arrayOfb;
  }
  
  public static void b(b[] paramArrayOfb1, b[] paramArrayOfb2) {
    for (byte b1 = 0; b1 < paramArrayOfb2.length; b1++) {
      (paramArrayOfb1[b1]).a = (paramArrayOfb2[b1]).a;
      for (byte b2 = 0; b2 < (paramArrayOfb2[b1]).b.length; b2++)
        (paramArrayOfb1[b1]).b[b2] = (paramArrayOfb2[b1]).b[b2]; 
    } 
  }
  
  public static b[] b(String paramString) {
    if (paramString == null)
      return null; 
    ArrayList arrayList = new ArrayList();
    int j = 1;
    int i = 0;
    while (j < paramString.length()) {
      j = a(paramString, j);
      String str = paramString.substring(i, j).trim();
      if (str.length() > 0) {
        float[] arrayOfFloat = c(str);
        a(arrayList, str.charAt(0), arrayOfFloat);
      } 
      i = j;
      j++;
    } 
    if (j - i == 1 && i < paramString.length())
      a(arrayList, paramString.charAt(i), new float[0]); 
    return (b[])arrayList.toArray(new b[arrayList.size()]);
  }
  
  private static float[] c(String paramString) {
    if (paramString.charAt(0) == 'z' || paramString.charAt(0) == 'Z')
      return new float[0]; 
    try {
      float[] arrayOfFloat = new float[paramString.length()];
      a a = new a();
      int j = paramString.length();
      int i = 1;
      for (byte b1 = 0;; b1 = b2) {
        int k;
        byte b2;
        if (i < j) {
          a(paramString, i, a);
          k = a.a;
          b2 = b1;
          if (i < k) {
            arrayOfFloat[b1] = Float.parseFloat(paramString.substring(i, k));
            b2 = b1 + true;
          } 
          if (a.b) {
            i = k;
            b1 = b2;
            continue;
          } 
        } else {
          return a(arrayOfFloat, 0, b1);
        } 
        i = k + 1;
      } 
    } catch (NumberFormatException numberFormatException) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("error in parsing \"");
      stringBuilder.append(paramString);
      stringBuilder.append("\"");
      throw new RuntimeException(stringBuilder.toString(), numberFormatException);
    } 
  }
}
