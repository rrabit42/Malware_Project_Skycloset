package android.support.v4.graphics;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.CancellationSignal;
import android.support.v4.a.a.c;
import android.support.v4.d.b;
import android.support.v4.util.k;
import android.util.Log;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;

class e extends h {
  private static final Class a;
  
  private static final Constructor b;
  
  private static final Method c;
  
  private static final Method d;
  
  static  {
    ClassNotFoundException classNotFoundException2;
    ClassNotFoundException classNotFoundException1;
    Constructor constructor = null;
    try {
      classNotFoundException1 = Class.forName("android.graphics.FontFamily");
      Constructor constructor1 = classNotFoundException1.getConstructor(new Class[0]);
      classNotFoundException2 = classNotFoundException1.getMethod("addFontWeightStyle", new Class[] { ByteBuffer.class, int.class, java.util.List.class, int.class, boolean.class });
      noSuchMethodException = Typeface.class.getMethod("createFromFamiliesWithDefault", new Class[] { Array.newInstance(classNotFoundException1, 1).getClass() });
      constructor = constructor1;
    } catch (ClassNotFoundException null) {
      Log.e("TypefaceCompatApi24Impl", noSuchMethodException.getClass().getName(), noSuchMethodException);
      classNotFoundException1 = null;
      noSuchMethodException = classNotFoundException1;
      classNotFoundException2 = noSuchMethodException;
    } catch (NoSuchMethodException noSuchMethodException) {}
    b = constructor;
    a = classNotFoundException1;
    c = classNotFoundException2;
    d = noSuchMethodException;
  }
  
  private static Typeface a(Object paramObject) {
    try {
      Object object = Array.newInstance(a, 1);
      Array.set(object, 0, paramObject);
      return (Typeface)d.invoke(null, new Object[] { object });
    } catch (IllegalAccessException paramObject) {
    
    } catch (InvocationTargetException paramObject) {}
    throw new RuntimeException(paramObject);
  }
  
  public static boolean a() {
    if (c == null)
      Log.w("TypefaceCompatApi24Impl", "Unable to collect necessary private methods.Fallback to legacy implementation."); 
    return (c != null);
  }
  
  private static boolean a(Object paramObject, ByteBuffer paramByteBuffer, int paramInt1, int paramInt2, boolean paramBoolean) {
    try {
      return ((Boolean)c.invoke(paramObject, new Object[] { paramByteBuffer, Integer.valueOf(paramInt1), null, Integer.valueOf(paramInt2), Boolean.valueOf(paramBoolean) })).booleanValue();
    } catch (IllegalAccessException paramObject) {
    
    } catch (InvocationTargetException paramObject) {}
    throw new RuntimeException(paramObject);
  }
  
  private static Object b() {
    try {
      return b.newInstance(new Object[0]);
    } catch (IllegalAccessException null) {
    
    } catch (InstantiationException null) {
    
    } catch (InvocationTargetException invocationTargetException) {}
    throw new RuntimeException(invocationTargetException);
  }
  
  public Typeface a(Context paramContext, CancellationSignal paramCancellationSignal, b.b[] paramArrayOfb, int paramInt) {
    Object object = b();
    k k = new k();
    int i = paramArrayOfb.length;
    byte b1;
    for (b1 = 0; b1 < i; b1++) {
      b.b b2 = paramArrayOfb[b1];
      Uri uri = b2.a();
      ByteBuffer byteBuffer2 = (ByteBuffer)k.get(uri);
      ByteBuffer byteBuffer1 = byteBuffer2;
      if (byteBuffer2 == null) {
        byteBuffer1 = i.a(paramContext, paramCancellationSignal, uri);
        k.put(uri, byteBuffer1);
      } 
      if (!a(object, byteBuffer1, b2.b(), b2.c(), b2.d()))
        return null; 
    } 
    return Typeface.create(a(object), paramInt);
  }
  
  public Typeface a(Context paramContext, c.b paramb, Resources paramResources, int paramInt) {
    Object object = b();
    c.c[] arrayOfc = paramb.a();
    int i = arrayOfc.length;
    for (paramInt = 0; paramInt < i; paramInt++) {
      c.c c1 = arrayOfc[paramInt];
      ByteBuffer byteBuffer = i.a(paramContext, paramResources, c1.f());
      if (byteBuffer == null)
        return null; 
      if (!a(object, byteBuffer, c1.e(), c1.b(), c1.c()))
        return null; 
    } 
    return a(object);
  }
}
