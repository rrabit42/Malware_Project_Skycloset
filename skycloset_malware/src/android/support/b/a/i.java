package android.support.b.a;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.Region;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.v4.a.a.f;
import android.support.v4.a.a.g;
import android.support.v4.graphics.drawable.a;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Xml;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class i extends h {
  static final PorterDuff.Mode a = PorterDuff.Mode.SRC_IN;
  
  private g b = new g();
  
  private PorterDuffColorFilter d;
  
  private ColorFilter e;
  
  private boolean f;
  
  private boolean g = true;
  
  private Drawable.ConstantState h;
  
  private final float[] i = new float[9];
  
  private final Matrix j = new Matrix();
  
  private final Rect k = new Rect();
  
  i() {}
  
  i(g paramg) { this.d = a(this.d, paramg.c, paramg.d); }
  
  static int a(int paramInt, float paramFloat) { return paramInt & 0xFFFFFF | (int)(Color.alpha(paramInt) * paramFloat) << 24; }
  
  private static PorterDuff.Mode a(int paramInt, PorterDuff.Mode paramMode) {
    if (paramInt != 3) {
      if (paramInt != 5) {
        if (paramInt != 9) {
          switch (paramInt) {
            default:
              return paramMode;
            case 16:
              return PorterDuff.Mode.ADD;
            case 15:
              return PorterDuff.Mode.SCREEN;
            case 14:
              break;
          } 
          return PorterDuff.Mode.MULTIPLY;
        } 
        return PorterDuff.Mode.SRC_ATOP;
      } 
      return PorterDuff.Mode.SRC_IN;
    } 
    return PorterDuff.Mode.SRC_OVER;
  }
  
  public static i a(Resources paramResources, int paramInt, Resources.Theme paramTheme) {
    if (Build.VERSION.SDK_INT >= 24) {
      i i1 = new i();
      i1.c = f.a(paramResources, paramInt, paramTheme);
      i1.h = new h(i1.c.getConstantState());
      return i1;
    } 
    try {
      XmlResourceParser xmlResourceParser = paramResources.getXml(paramInt);
      AttributeSet attributeSet = Xml.asAttributeSet(xmlResourceParser);
      while (true) {
        paramInt = xmlResourceParser.next();
        if (paramInt != 2 && paramInt != 1)
          continue; 
        break;
      } 
      if (paramInt == 2)
        return a(paramResources, xmlResourceParser, attributeSet, paramTheme); 
      throw new XmlPullParserException("No start tag found");
    } catch (XmlPullParserException paramResources) {
    
    } catch (IOException paramResources) {}
    Log.e("VectorDrawableCompat", "parser error", paramResources);
    return null;
  }
  
  public static i a(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    i i1 = new i();
    i1.inflate(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    return i1;
  }
  
  private void a(TypedArray paramTypedArray, XmlPullParser paramXmlPullParser) {
    String str;
    g g1 = this.b;
    f f1 = g1.b;
    g1.d = a(g.a(paramTypedArray, paramXmlPullParser, "tintMode", 6, -1), PorterDuff.Mode.SRC_IN);
    ColorStateList colorStateList = paramTypedArray.getColorStateList(1);
    if (colorStateList != null)
      g1.c = colorStateList; 
    g1.e = g.a(paramTypedArray, paramXmlPullParser, "autoMirrored", 5, g1.e);
    f1.f = g.a(paramTypedArray, paramXmlPullParser, "viewportWidth", 7, f1.f);
    f1.g = g.a(paramTypedArray, paramXmlPullParser, "viewportHeight", 8, f1.g);
    if (f1.f > 0.0F) {
      if (f1.g > 0.0F) {
        f1.d = paramTypedArray.getDimension(3, f1.d);
        f1.e = paramTypedArray.getDimension(2, f1.e);
        if (f1.d > 0.0F) {
          if (f1.e > 0.0F) {
            f1.setAlpha(g.a(paramTypedArray, paramXmlPullParser, "alpha", 4, f1.getAlpha()));
            str = paramTypedArray.getString(0);
            if (str != null) {
              f1.i = str;
              f1.k.put(str, f1);
            } 
            return;
          } 
          StringBuilder stringBuilder3 = new StringBuilder();
          stringBuilder3.append(str.getPositionDescription());
          stringBuilder3.append("<vector> tag requires height > 0");
          throw new XmlPullParserException(stringBuilder3.toString());
        } 
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append(str.getPositionDescription());
        stringBuilder2.append("<vector> tag requires width > 0");
        throw new XmlPullParserException(stringBuilder2.toString());
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(str.getPositionDescription());
      stringBuilder1.append("<vector> tag requires viewportHeight > 0");
      throw new XmlPullParserException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(str.getPositionDescription());
    stringBuilder.append("<vector> tag requires viewportWidth > 0");
    throw new XmlPullParserException(stringBuilder.toString());
  }
  
  private boolean a() {
    int m = Build.VERSION.SDK_INT;
    byte b1 = 0;
    int n = b1;
    if (m >= 17) {
      n = b1;
      if (isAutoMirrored()) {
        n = b1;
        if (a.h(this) == 1)
          n = 1; 
      } 
    } 
    return n;
  }
  
  private void b(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) { // Byte code:
    //   0: aload_0
    //   1: getfield b : Landroid/support/b/a/i$g;
    //   4: astore #9
    //   6: aload #9
    //   8: getfield b : Landroid/support/b/a/i$f;
    //   11: astore #10
    //   13: new java/util/ArrayDeque
    //   16: dup
    //   17: invokespecial <init> : ()V
    //   20: astore #11
    //   22: aload #11
    //   24: aload #10
    //   26: getfield c : Landroid/support/b/a/i$c;
    //   29: invokevirtual push : (Ljava/lang/Object;)V
    //   32: aload_2
    //   33: invokeinterface getEventType : ()I
    //   38: istore #7
    //   40: aload_2
    //   41: invokeinterface getDepth : ()I
    //   46: istore #8
    //   48: iconst_1
    //   49: istore #5
    //   51: iload #7
    //   53: iconst_1
    //   54: if_icmpeq -> 428
    //   57: aload_2
    //   58: invokeinterface getDepth : ()I
    //   63: iload #8
    //   65: iconst_1
    //   66: iadd
    //   67: if_icmpge -> 76
    //   70: iload #7
    //   72: iconst_3
    //   73: if_icmpeq -> 428
    //   76: iload #7
    //   78: iconst_2
    //   79: if_icmpne -> 374
    //   82: aload_2
    //   83: invokeinterface getName : ()Ljava/lang/String;
    //   88: astore #13
    //   90: aload #11
    //   92: invokevirtual peek : ()Ljava/lang/Object;
    //   95: checkcast android/support/b/a/i$c
    //   98: astore #12
    //   100: ldc_w 'path'
    //   103: aload #13
    //   105: invokevirtual equals : (Ljava/lang/Object;)Z
    //   108: ifeq -> 185
    //   111: new android/support/b/a/i$b
    //   114: dup
    //   115: invokespecial <init> : ()V
    //   118: astore #13
    //   120: aload #13
    //   122: aload_1
    //   123: aload_3
    //   124: aload #4
    //   126: aload_2
    //   127: invokevirtual a : (Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)V
    //   130: aload #12
    //   132: getfield b : Ljava/util/ArrayList;
    //   135: aload #13
    //   137: invokevirtual add : (Ljava/lang/Object;)Z
    //   140: pop
    //   141: aload #13
    //   143: invokevirtual getPathName : ()Ljava/lang/String;
    //   146: ifnull -> 165
    //   149: aload #10
    //   151: getfield k : Landroid/support/v4/util/a;
    //   154: aload #13
    //   156: invokevirtual getPathName : ()Ljava/lang/String;
    //   159: aload #13
    //   161: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   164: pop
    //   165: iconst_0
    //   166: istore #5
    //   168: aload #9
    //   170: getfield a : I
    //   173: istore #7
    //   175: aload #13
    //   177: getfield o : I
    //   180: istore #6
    //   182: goto -> 264
    //   185: ldc_w 'clip-path'
    //   188: aload #13
    //   190: invokevirtual equals : (Ljava/lang/Object;)Z
    //   193: ifeq -> 281
    //   196: new android/support/b/a/i$a
    //   199: dup
    //   200: invokespecial <init> : ()V
    //   203: astore #13
    //   205: aload #13
    //   207: aload_1
    //   208: aload_3
    //   209: aload #4
    //   211: aload_2
    //   212: invokevirtual a : (Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)V
    //   215: aload #12
    //   217: getfield b : Ljava/util/ArrayList;
    //   220: aload #13
    //   222: invokevirtual add : (Ljava/lang/Object;)Z
    //   225: pop
    //   226: aload #13
    //   228: invokevirtual getPathName : ()Ljava/lang/String;
    //   231: ifnull -> 250
    //   234: aload #10
    //   236: getfield k : Landroid/support/v4/util/a;
    //   239: aload #13
    //   241: invokevirtual getPathName : ()Ljava/lang/String;
    //   244: aload #13
    //   246: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   249: pop
    //   250: aload #9
    //   252: getfield a : I
    //   255: istore #7
    //   257: aload #13
    //   259: getfield o : I
    //   262: istore #6
    //   264: aload #9
    //   266: iload #6
    //   268: iload #7
    //   270: ior
    //   271: putfield a : I
    //   274: iload #5
    //   276: istore #6
    //   278: goto -> 413
    //   281: iload #5
    //   283: istore #6
    //   285: ldc_w 'group'
    //   288: aload #13
    //   290: invokevirtual equals : (Ljava/lang/Object;)Z
    //   293: ifeq -> 413
    //   296: new android/support/b/a/i$c
    //   299: dup
    //   300: invokespecial <init> : ()V
    //   303: astore #13
    //   305: aload #13
    //   307: aload_1
    //   308: aload_3
    //   309: aload #4
    //   311: aload_2
    //   312: invokevirtual a : (Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/res/Resources$Theme;Lorg/xmlpull/v1/XmlPullParser;)V
    //   315: aload #12
    //   317: getfield b : Ljava/util/ArrayList;
    //   320: aload #13
    //   322: invokevirtual add : (Ljava/lang/Object;)Z
    //   325: pop
    //   326: aload #11
    //   328: aload #13
    //   330: invokevirtual push : (Ljava/lang/Object;)V
    //   333: aload #13
    //   335: invokevirtual getGroupName : ()Ljava/lang/String;
    //   338: ifnull -> 357
    //   341: aload #10
    //   343: getfield k : Landroid/support/v4/util/a;
    //   346: aload #13
    //   348: invokevirtual getGroupName : ()Ljava/lang/String;
    //   351: aload #13
    //   353: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   356: pop
    //   357: aload #9
    //   359: getfield a : I
    //   362: istore #7
    //   364: aload #13
    //   366: getfield e : I
    //   369: istore #6
    //   371: goto -> 264
    //   374: iload #5
    //   376: istore #6
    //   378: iload #7
    //   380: iconst_3
    //   381: if_icmpne -> 413
    //   384: iload #5
    //   386: istore #6
    //   388: ldc_w 'group'
    //   391: aload_2
    //   392: invokeinterface getName : ()Ljava/lang/String;
    //   397: invokevirtual equals : (Ljava/lang/Object;)Z
    //   400: ifeq -> 413
    //   403: aload #11
    //   405: invokevirtual pop : ()Ljava/lang/Object;
    //   408: pop
    //   409: iload #5
    //   411: istore #6
    //   413: aload_2
    //   414: invokeinterface next : ()I
    //   419: istore #7
    //   421: iload #6
    //   423: istore #5
    //   425: goto -> 51
    //   428: iload #5
    //   430: ifne -> 434
    //   433: return
    //   434: new org/xmlpull/v1/XmlPullParserException
    //   437: dup
    //   438: ldc_w 'no path defined'
    //   441: invokespecial <init> : (Ljava/lang/String;)V
    //   444: athrow }
  
  PorterDuffColorFilter a(PorterDuffColorFilter paramPorterDuffColorFilter, ColorStateList paramColorStateList, PorterDuff.Mode paramMode) { return (paramColorStateList == null || paramMode == null) ? null : new PorterDuffColorFilter(paramColorStateList.getColorForState(getState(), 0), paramMode); }
  
  Object a(String paramString) { return this.b.b.k.get(paramString); }
  
  void a(boolean paramBoolean) { this.g = paramBoolean; }
  
  public boolean canApplyTheme() {
    if (this.c != null)
      a.d(this.c); 
    return false;
  }
  
  public void draw(Canvas paramCanvas) {
    if (this.c != null) {
      this.c.draw(paramCanvas);
      return;
    } 
    copyBounds(this.k);
    if (this.k.width() > 0) {
      if (this.k.height() <= 0)
        return; 
      ColorFilter colorFilter = this.e;
      PorterDuffColorFilter porterDuffColorFilter = colorFilter;
      if (colorFilter == null)
        porterDuffColorFilter = this.d; 
      paramCanvas.getMatrix(this.j);
      this.j.getValues(this.i);
      float f1 = Math.abs(this.i[0]);
      float f2 = Math.abs(this.i[4]);
      float f4 = Math.abs(this.i[1]);
      float f3 = Math.abs(this.i[3]);
      if (f4 != 0.0F || f3 != 0.0F) {
        f1 = 1.0F;
        f2 = f1;
      } 
      int m = (int)(this.k.width() * f1);
      int n = (int)(this.k.height() * f2);
      m = Math.min(2048, m);
      n = Math.min(2048, n);
      if (m > 0) {
        if (n <= 0)
          return; 
        int i1 = paramCanvas.save();
        paramCanvas.translate(this.k.left, this.k.top);
        if (a()) {
          paramCanvas.translate(this.k.width(), 0.0F);
          paramCanvas.scale(-1.0F, 1.0F);
        } 
        this.k.offsetTo(0, 0);
        this.b.b(m, n);
        if (!this.g) {
          this.b.a(m, n);
        } else if (!this.b.b()) {
          this.b.a(m, n);
          this.b.c();
        } 
        this.b.a(paramCanvas, porterDuffColorFilter, this.k);
        paramCanvas.restoreToCount(i1);
      } 
    } 
  }
  
  public int getAlpha() { return (this.c != null) ? a.c(this.c) : this.b.b.getRootAlpha(); }
  
  public int getChangingConfigurations() { return (this.c != null) ? this.c.getChangingConfigurations() : (super.getChangingConfigurations() | this.b.getChangingConfigurations()); }
  
  public Drawable.ConstantState getConstantState() {
    if (this.c != null && Build.VERSION.SDK_INT >= 24)
      return new h(this.c.getConstantState()); 
    this.b.a = getChangingConfigurations();
    return this.b;
  }
  
  public int getIntrinsicHeight() { return (this.c != null) ? this.c.getIntrinsicHeight() : (int)this.b.b.e; }
  
  public int getIntrinsicWidth() { return (this.c != null) ? this.c.getIntrinsicWidth() : (int)this.b.b.d; }
  
  public int getOpacity() { return (this.c != null) ? this.c.getOpacity() : -3; }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet) {
    if (this.c != null) {
      this.c.inflate(paramResources, paramXmlPullParser, paramAttributeSet);
      return;
    } 
    inflate(paramResources, paramXmlPullParser, paramAttributeSet, null);
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) {
    if (this.c != null) {
      a.a(this.c, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return;
    } 
    g g1 = this.b;
    g1.b = new f();
    TypedArray typedArray = g.a(paramResources, paramTheme, paramAttributeSet, a.a);
    a(typedArray, paramXmlPullParser);
    typedArray.recycle();
    g1.a = getChangingConfigurations();
    g1.k = true;
    b(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    this.d = a(this.d, g1.c, g1.d);
  }
  
  public void invalidateSelf() {
    if (this.c != null) {
      this.c.invalidateSelf();
      return;
    } 
    super.invalidateSelf();
  }
  
  public boolean isAutoMirrored() { return (this.c != null) ? a.b(this.c) : this.b.e; }
  
  public boolean isStateful() {
    if (this.c != null)
      return this.c.isStateful(); 
    if (!super.isStateful()) {
      g g1 = this.b;
      if (g1 == null || (!g1.d() && (this.b.c == null || !this.b.c.isStateful())))
        return false; 
    } 
    return true;
  }
  
  public Drawable mutate() {
    if (this.c != null) {
      this.c.mutate();
      return this;
    } 
    if (!this.f && super.mutate() == this) {
      this.b = new g(this.b);
      this.f = true;
    } 
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect) {
    if (this.c != null)
      this.c.setBounds(paramRect); 
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    if (this.c != null)
      return this.c.setState(paramArrayOfInt); 
    int m = 0;
    g g1 = this.b;
    byte b1 = m;
    if (g1.c != null) {
      b1 = m;
      if (g1.d != null) {
        this.d = a(this.d, g1.c, g1.d);
        invalidateSelf();
        b1 = 1;
      } 
    } 
    m = b1;
    if (g1.d()) {
      m = b1;
      if (g1.a(paramArrayOfInt)) {
        invalidateSelf();
        m = 1;
      } 
    } 
    return m;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong) {
    if (this.c != null) {
      this.c.scheduleSelf(paramRunnable, paramLong);
      return;
    } 
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  public void setAlpha(int paramInt) {
    if (this.c != null) {
      this.c.setAlpha(paramInt);
      return;
    } 
    if (this.b.b.getRootAlpha() != paramInt) {
      this.b.b.setRootAlpha(paramInt);
      invalidateSelf();
    } 
  }
  
  public void setAutoMirrored(boolean paramBoolean) {
    if (this.c != null) {
      a.a(this.c, paramBoolean);
      return;
    } 
    this.b.e = paramBoolean;
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {
    if (this.c != null) {
      this.c.setColorFilter(paramColorFilter);
      return;
    } 
    this.e = paramColorFilter;
    invalidateSelf();
  }
  
  public void setTint(int paramInt) {
    if (this.c != null) {
      a.a(this.c, paramInt);
      return;
    } 
    setTintList(ColorStateList.valueOf(paramInt));
  }
  
  public void setTintList(ColorStateList paramColorStateList) {
    if (this.c != null) {
      a.a(this.c, paramColorStateList);
      return;
    } 
    g g1 = this.b;
    if (g1.c != paramColorStateList) {
      g1.c = paramColorStateList;
      this.d = a(this.d, paramColorStateList, g1.d);
      invalidateSelf();
    } 
  }
  
  public void setTintMode(PorterDuff.Mode paramMode) {
    if (this.c != null) {
      a.a(this.c, paramMode);
      return;
    } 
    g g1 = this.b;
    if (g1.d != paramMode) {
      g1.d = paramMode;
      this.d = a(this.d, g1.c, paramMode);
      invalidateSelf();
    } 
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) { return (this.c != null) ? this.c.setVisible(paramBoolean1, paramBoolean2) : super.setVisible(paramBoolean1, paramBoolean2); }
  
  public void unscheduleSelf(Runnable paramRunnable) {
    if (this.c != null) {
      this.c.unscheduleSelf(paramRunnable);
      return;
    } 
    super.unscheduleSelf(paramRunnable);
  }
}
