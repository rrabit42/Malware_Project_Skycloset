package android.arch.lifecycle;

import android.arch.a.a.a;
import android.arch.a.b.b;
import java.util.Map;

public abstract class LiveData<T> extends Object {
  private static final Object b = new Object();
  
  private final Object a = new Object();
  
  private b<k<T>, a> c = new b();
  
  private int d = 0;
  
  private int g;
  
  private boolean h;
  
  private boolean i;
  
  private final Runnable j;
  
  public LiveData() {
    Object object = b;
    this.e = object;
    this.f = object;
    this.g = -1;
    this.j = new Object(this);
  }
  
  private void a(a parama) {
    if (!parama.d)
      return; 
    if (!parama.a()) {
      parama.a(false);
      return;
    } 
    int k = parama.e;
    int m = this.g;
    if (k >= m)
      return; 
    parama.e = m;
    parama.c.a(this.e);
  }
  
  private static void a(String paramString) {
    if (a.a().b())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Cannot invoke ");
    stringBuilder.append(paramString);
    stringBuilder.append(" on a background");
    stringBuilder.append(" thread");
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  private void b(a parama) {
    if (this.h) {
      this.i = true;
      return;
    } 
    this.h = true;
    do {
      a a1;
      this.i = false;
      if (parama != null) {
        a(parama);
        a1 = null;
      } else {
        b.d d1 = this.c.c();
        while (true) {
          a1 = parama;
          if (d1.hasNext()) {
            a((a)((Map.Entry)d1.next()).getValue());
            if (this.i) {
              a1 = parama;
              break;
            } 
            continue;
          } 
          break;
        } 
      } 
      parama = a1;
    } while (this.i);
    this.h = false;
  }
  
  public T a() {
    Object object = this.e;
    return (object != b) ? (T)object : null;
  }
  
  public void a(e parame, k<T> paramk) {
    if (parame.a().a() == c.b.a)
      return; 
    LifecycleBoundObserver lifecycleBoundObserver = new LifecycleBoundObserver(this, parame, paramk);
    a a1 = (a)this.c.a(paramk, lifecycleBoundObserver);
    if (a1 == null || a1.a(parame)) {
      if (a1 != null)
        return; 
      parame.a().a(lifecycleBoundObserver);
      return;
    } 
    throw new IllegalArgumentException("Cannot add the same observer with different lifecycles");
  }
  
  public void a(k<T> paramk) {
    a("removeObserver");
    a a1 = (a)this.c.b(paramk);
    if (a1 == null)
      return; 
    a1.b();
    a1.a(false);
  }
  
  protected void a(T paramT) {
    a("setValue");
    this.g++;
    this.e = paramT;
    b(null);
  }
  
  protected void b() {}
  
  protected void c() {}
  
  public boolean d() { return (this.d > 0); }
}
