package okhttp3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okhttp3.internal.Util;
import okhttp3.internal.http.HttpDate;

public final class Cookie {
  private static final Pattern DAY_OF_MONTH_PATTERN;
  
  private static final Pattern MONTH_PATTERN;
  
  private static final Pattern TIME_PATTERN = (DAY_OF_MONTH_PATTERN = (MONTH_PATTERN = (YEAR_PATTERN = Pattern.compile("(\\d{2,4})[^\\d]*")).compile("(?i)(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec).*")).compile("(\\d{1,2})[^\\d]*")).compile("(\\d{1,2}):(\\d{1,2}):(\\d{1,2})[^\\d]*");
  
  private static final Pattern YEAR_PATTERN;
  
  private final String domain;
  
  private final long expiresAt;
  
  private final boolean hostOnly;
  
  private final boolean httpOnly;
  
  private final String name;
  
  private final String path;
  
  private final boolean persistent;
  
  private final boolean secure;
  
  private final String value;
  
  private Cookie(String paramString1, String paramString2, long paramLong, String paramString3, String paramString4, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4) {
    this.name = paramString1;
    this.value = paramString2;
    this.expiresAt = paramLong;
    this.domain = paramString3;
    this.path = paramString4;
    this.secure = paramBoolean1;
    this.httpOnly = paramBoolean2;
    this.hostOnly = paramBoolean3;
    this.persistent = paramBoolean4;
  }
  
  Cookie(Builder paramBuilder) {
    if (paramBuilder.name != null) {
      if (paramBuilder.value != null) {
        if (paramBuilder.domain != null) {
          this.name = paramBuilder.name;
          this.value = paramBuilder.value;
          this.expiresAt = paramBuilder.expiresAt;
          this.domain = paramBuilder.domain;
          this.path = paramBuilder.path;
          this.secure = paramBuilder.secure;
          this.httpOnly = paramBuilder.httpOnly;
          this.persistent = paramBuilder.persistent;
          this.hostOnly = paramBuilder.hostOnly;
          return;
        } 
        throw new NullPointerException("builder.domain == null");
      } 
      throw new NullPointerException("builder.value == null");
    } 
    throw new NullPointerException("builder.name == null");
  }
  
  private static int dateCharacterOffset(String paramString, int paramInt1, int paramInt2, boolean paramBoolean) {
    while (paramInt1 < paramInt2) {
      char c = paramString.charAt(paramInt1);
      if ((c < ' ' && c != '\t') || c >= '' || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ':') {
        c = '\001';
      } else {
        c = Character.MIN_VALUE;
      } 
      if (c == (paramBoolean ^ true))
        return paramInt1; 
      paramInt1++;
    } 
    return paramInt2;
  }
  
  private static boolean domainMatch(String paramString1, String paramString2) { return paramString1.equals(paramString2) ? true : ((paramString1.endsWith(paramString2) && paramString1.charAt(paramString1.length() - paramString2.length() - 1) == '.' && !Util.verifyAsIpAddress(paramString1))); }
  
  static Cookie parse(long paramLong, HttpUrl paramHttpUrl, String paramString) { // Byte code:
    //   0: aload_3
    //   1: invokevirtual length : ()I
    //   4: istore #5
    //   6: aload_3
    //   7: iconst_0
    //   8: iload #5
    //   10: bipush #59
    //   12: invokestatic delimiterOffset : (Ljava/lang/String;IIC)I
    //   15: istore #4
    //   17: aload_3
    //   18: iconst_0
    //   19: iload #4
    //   21: bipush #61
    //   23: invokestatic delimiterOffset : (Ljava/lang/String;IIC)I
    //   26: istore #6
    //   28: iload #6
    //   30: iload #4
    //   32: if_icmpne -> 37
    //   35: aconst_null
    //   36: areturn
    //   37: aload_3
    //   38: iconst_0
    //   39: iload #6
    //   41: invokestatic trimSubstring : (Ljava/lang/String;II)Ljava/lang/String;
    //   44: astore #27
    //   46: aload #27
    //   48: invokevirtual isEmpty : ()Z
    //   51: ifne -> 736
    //   54: aload #27
    //   56: invokestatic indexOfControlOrNonAscii : (Ljava/lang/String;)I
    //   59: iconst_m1
    //   60: if_icmpeq -> 66
    //   63: goto -> 736
    //   66: aload_3
    //   67: iload #6
    //   69: iconst_1
    //   70: iadd
    //   71: iload #4
    //   73: invokestatic trimSubstring : (Ljava/lang/String;II)Ljava/lang/String;
    //   76: astore #28
    //   78: aload #28
    //   80: invokestatic indexOfControlOrNonAscii : (Ljava/lang/String;)I
    //   83: iconst_m1
    //   84: if_icmpeq -> 89
    //   87: aconst_null
    //   88: areturn
    //   89: iload #4
    //   91: iconst_1
    //   92: iadd
    //   93: istore #4
    //   95: iconst_0
    //   96: istore #20
    //   98: iload #20
    //   100: istore #16
    //   102: iload #16
    //   104: istore #17
    //   106: aconst_null
    //   107: astore #23
    //   109: iconst_1
    //   110: istore #18
    //   112: ldc2_w -1
    //   115: lstore #10
    //   117: ldc2_w 253402300799999
    //   120: lstore #8
    //   122: aload #23
    //   124: astore #24
    //   126: iload #16
    //   128: istore #19
    //   130: iload #20
    //   132: istore #16
    //   134: iload #4
    //   136: iload #5
    //   138: if_icmpge -> 512
    //   141: aload_3
    //   142: iload #4
    //   144: iload #5
    //   146: bipush #59
    //   148: invokestatic delimiterOffset : (Ljava/lang/String;IIC)I
    //   151: istore #6
    //   153: aload_3
    //   154: iload #4
    //   156: iload #6
    //   158: bipush #61
    //   160: invokestatic delimiterOffset : (Ljava/lang/String;IIC)I
    //   163: istore #7
    //   165: aload_3
    //   166: iload #4
    //   168: iload #7
    //   170: invokestatic trimSubstring : (Ljava/lang/String;II)Ljava/lang/String;
    //   173: astore #29
    //   175: iload #7
    //   177: iload #6
    //   179: if_icmpge -> 197
    //   182: aload_3
    //   183: iload #7
    //   185: iconst_1
    //   186: iadd
    //   187: iload #6
    //   189: invokestatic trimSubstring : (Ljava/lang/String;II)Ljava/lang/String;
    //   192: astore #25
    //   194: goto -> 201
    //   197: ldc ''
    //   199: astore #25
    //   201: aload #29
    //   203: ldc 'expires'
    //   205: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   208: ifeq -> 231
    //   211: aload #25
    //   213: iconst_0
    //   214: aload #25
    //   216: invokevirtual length : ()I
    //   219: invokestatic parseExpires : (Ljava/lang/String;II)J
    //   222: lstore #12
    //   224: lload #12
    //   226: lstore #8
    //   228: goto -> 252
    //   231: aload #29
    //   233: ldc 'max-age'
    //   235: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   238: ifeq -> 282
    //   241: aload #25
    //   243: invokestatic parseMaxAge : (Ljava/lang/String;)J
    //   246: lstore #12
    //   248: lload #12
    //   250: lstore #10
    //   252: iconst_1
    //   253: istore #22
    //   255: aload #24
    //   257: astore #25
    //   259: lload #10
    //   261: lstore #12
    //   263: iload #16
    //   265: istore #20
    //   267: aload #23
    //   269: astore #26
    //   271: iload #18
    //   273: istore #21
    //   275: lload #8
    //   277: lstore #14
    //   279: goto -> 475
    //   282: aload #29
    //   284: ldc 'domain'
    //   286: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   289: ifeq -> 325
    //   292: aload #25
    //   294: invokestatic parseDomain : (Ljava/lang/String;)Ljava/lang/String;
    //   297: astore #25
    //   299: iconst_0
    //   300: istore #21
    //   302: lload #10
    //   304: lstore #12
    //   306: iload #16
    //   308: istore #20
    //   310: aload #23
    //   312: astore #26
    //   314: lload #8
    //   316: lstore #14
    //   318: iload #17
    //   320: istore #22
    //   322: goto -> 475
    //   325: aload #29
    //   327: ldc 'path'
    //   329: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   332: ifeq -> 366
    //   335: aload #25
    //   337: astore #26
    //   339: aload #24
    //   341: astore #25
    //   343: lload #10
    //   345: lstore #12
    //   347: iload #16
    //   349: istore #20
    //   351: iload #18
    //   353: istore #21
    //   355: lload #8
    //   357: lstore #14
    //   359: iload #17
    //   361: istore #22
    //   363: goto -> 475
    //   366: aload #29
    //   368: ldc 'secure'
    //   370: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   373: ifeq -> 406
    //   376: iconst_1
    //   377: istore #20
    //   379: aload #24
    //   381: astore #25
    //   383: lload #10
    //   385: lstore #12
    //   387: aload #23
    //   389: astore #26
    //   391: iload #18
    //   393: istore #21
    //   395: lload #8
    //   397: lstore #14
    //   399: iload #17
    //   401: istore #22
    //   403: goto -> 475
    //   406: aload #24
    //   408: astore #25
    //   410: lload #10
    //   412: lstore #12
    //   414: iload #16
    //   416: istore #20
    //   418: aload #23
    //   420: astore #26
    //   422: iload #18
    //   424: istore #21
    //   426: lload #8
    //   428: lstore #14
    //   430: iload #17
    //   432: istore #22
    //   434: aload #29
    //   436: ldc 'httponly'
    //   438: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   441: ifeq -> 475
    //   444: iconst_1
    //   445: istore #19
    //   447: iload #17
    //   449: istore #22
    //   451: lload #8
    //   453: lstore #14
    //   455: iload #18
    //   457: istore #21
    //   459: aload #23
    //   461: astore #26
    //   463: iload #16
    //   465: istore #20
    //   467: lload #10
    //   469: lstore #12
    //   471: aload #24
    //   473: astore #25
    //   475: iload #6
    //   477: iconst_1
    //   478: iadd
    //   479: istore #4
    //   481: aload #25
    //   483: astore #24
    //   485: lload #12
    //   487: lstore #10
    //   489: iload #20
    //   491: istore #16
    //   493: aload #26
    //   495: astore #23
    //   497: iload #21
    //   499: istore #18
    //   501: lload #14
    //   503: lstore #8
    //   505: iload #22
    //   507: istore #17
    //   509: goto -> 134
    //   512: ldc2_w -9223372036854775808
    //   515: lstore #12
    //   517: lload #10
    //   519: ldc2_w -9223372036854775808
    //   522: lcmp
    //   523: ifne -> 532
    //   526: lload #12
    //   528: lstore_0
    //   529: goto -> 601
    //   532: lload #10
    //   534: ldc2_w -1
    //   537: lcmp
    //   538: ifeq -> 598
    //   541: lload #10
    //   543: ldc2_w 9223372036854775
    //   546: lcmp
    //   547: ifgt -> 561
    //   550: lload #10
    //   552: ldc2_w 1000
    //   555: lmul
    //   556: lstore #8
    //   558: goto -> 566
    //   561: ldc2_w 9223372036854775807
    //   564: lstore #8
    //   566: lload_0
    //   567: lload #8
    //   569: ladd
    //   570: lstore #8
    //   572: lload #8
    //   574: lload_0
    //   575: lcmp
    //   576: iflt -> 591
    //   579: lload #8
    //   581: lstore_0
    //   582: lload #8
    //   584: ldc2_w 253402300799999
    //   587: lcmp
    //   588: ifle -> 529
    //   591: ldc2_w 253402300799999
    //   594: lstore_0
    //   595: goto -> 601
    //   598: lload #8
    //   600: lstore_0
    //   601: aload_2
    //   602: invokevirtual host : ()Ljava/lang/String;
    //   605: astore #25
    //   607: aload #24
    //   609: ifnonnull -> 618
    //   612: aload #25
    //   614: astore_3
    //   615: goto -> 633
    //   618: aload #25
    //   620: aload #24
    //   622: invokestatic domainMatch : (Ljava/lang/String;Ljava/lang/String;)Z
    //   625: ifne -> 630
    //   628: aconst_null
    //   629: areturn
    //   630: aload #24
    //   632: astore_3
    //   633: aload #25
    //   635: invokevirtual length : ()I
    //   638: aload_3
    //   639: invokevirtual length : ()I
    //   642: if_icmpeq -> 657
    //   645: invokestatic get : ()Lokhttp3/internal/publicsuffix/PublicSuffixDatabase;
    //   648: aload_3
    //   649: invokevirtual getEffectiveTldPlusOne : (Ljava/lang/String;)Ljava/lang/String;
    //   652: ifnonnull -> 657
    //   655: aconst_null
    //   656: areturn
    //   657: aload #23
    //   659: ifnull -> 681
    //   662: aload #23
    //   664: ldc '/'
    //   666: invokevirtual startsWith : (Ljava/lang/String;)Z
    //   669: ifne -> 675
    //   672: goto -> 681
    //   675: aload #23
    //   677: astore_2
    //   678: goto -> 713
    //   681: aload_2
    //   682: invokevirtual encodedPath : ()Ljava/lang/String;
    //   685: astore_2
    //   686: aload_2
    //   687: bipush #47
    //   689: invokevirtual lastIndexOf : (I)I
    //   692: istore #4
    //   694: iload #4
    //   696: ifeq -> 710
    //   699: aload_2
    //   700: iconst_0
    //   701: iload #4
    //   703: invokevirtual substring : (II)Ljava/lang/String;
    //   706: astore_2
    //   707: goto -> 713
    //   710: ldc '/'
    //   712: astore_2
    //   713: new okhttp3/Cookie
    //   716: dup
    //   717: aload #27
    //   719: aload #28
    //   721: lload_0
    //   722: aload_3
    //   723: aload_2
    //   724: iload #16
    //   726: iload #19
    //   728: iload #18
    //   730: iload #17
    //   732: invokespecial <init> : (Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;ZZZZ)V
    //   735: areturn
    //   736: aconst_null
    //   737: areturn
    //   738: astore #25
    //   740: aload #24
    //   742: astore #25
    //   744: lload #10
    //   746: lstore #12
    //   748: iload #16
    //   750: istore #20
    //   752: aload #23
    //   754: astore #26
    //   756: iload #18
    //   758: istore #21
    //   760: lload #8
    //   762: lstore #14
    //   764: iload #17
    //   766: istore #22
    //   768: goto -> 475
    // Exception table:
    //   from	to	target	type
    //   211	224	738	java/lang/IllegalArgumentException
    //   241	248	738	java/lang/NumberFormatException
    //   292	299	738	java/lang/IllegalArgumentException }
  
  public static Cookie parse(HttpUrl paramHttpUrl, String paramString) { return parse(System.currentTimeMillis(), paramHttpUrl, paramString); }
  
  public static List<Cookie> parseAll(HttpUrl paramHttpUrl, Headers paramHeaders) {
    ArrayList arrayList;
    List list = paramHeaders.values("Set-Cookie");
    int i = list.size();
    paramHeaders = null;
    for (byte b = 0; b < i; b++) {
      Cookie cookie = parse(paramHttpUrl, (String)list.get(b));
      if (cookie != null) {
        ArrayList arrayList1 = paramHeaders;
        if (paramHeaders == null)
          arrayList1 = new ArrayList(); 
        arrayList1.add(cookie);
        arrayList = arrayList1;
      } 
    } 
    return (arrayList != null) ? Collections.unmodifiableList(arrayList) : Collections.emptyList();
  }
  
  private static String parseDomain(String paramString) {
    if (!paramString.endsWith(".")) {
      String str = paramString;
      if (paramString.startsWith("."))
        str = paramString.substring(1); 
      paramString = Util.canonicalizeHost(str);
      if (paramString != null)
        return paramString; 
      throw new IllegalArgumentException();
    } 
    throw new IllegalArgumentException();
  }
  
  private static long parseExpires(String paramString, int paramInt1, int paramInt2) {
    int i1 = dateCharacterOffset(paramString, paramInt1, paramInt2, false);
    Matcher matcher = TIME_PATTERN.matcher(paramString);
    int i2 = -1;
    paramInt1 = i2;
    int i = paramInt1;
    int j = i;
    int k = j;
    int m = k;
    int n = paramInt1;
    paramInt1 = i2;
    while (i1 < paramInt2) {
      int i6;
      int i5;
      int i4;
      int i3;
      int i7 = dateCharacterOffset(paramString, i1 + 1, paramInt2, true);
      matcher.region(i1, i7);
      if (n == -1 && matcher.usePattern(TIME_PATTERN).matches()) {
        i2 = Integer.parseInt(matcher.group(1));
        i5 = Integer.parseInt(matcher.group(2));
        i6 = Integer.parseInt(matcher.group(3));
        i1 = paramInt1;
        i3 = i;
        i4 = j;
      } else if (i == -1 && matcher.usePattern(DAY_OF_MONTH_PATTERN).matches()) {
        i3 = Integer.parseInt(matcher.group(1));
        i1 = paramInt1;
        i2 = n;
        i4 = j;
        i5 = k;
        i6 = m;
      } else if (j == -1 && matcher.usePattern(MONTH_PATTERN).matches()) {
        String str = matcher.group(1).toLowerCase(Locale.US);
        i4 = MONTH_PATTERN.pattern().indexOf(str) / 4;
        i1 = paramInt1;
        i2 = n;
        i3 = i;
        i5 = k;
        i6 = m;
      } else {
        i1 = paramInt1;
        i2 = n;
        i3 = i;
        i4 = j;
        i5 = k;
        i6 = m;
        if (paramInt1 == -1) {
          i1 = paramInt1;
          i2 = n;
          i3 = i;
          i4 = j;
          i5 = k;
          i6 = m;
          if (matcher.usePattern(YEAR_PATTERN).matches()) {
            i1 = Integer.parseInt(matcher.group(1));
            i6 = m;
            i5 = k;
            i4 = j;
            i3 = i;
            i2 = n;
          } 
        } 
      } 
      i7 = dateCharacterOffset(paramString, i7 + 1, paramInt2, false);
      paramInt1 = i1;
      n = i2;
      i = i3;
      j = i4;
      k = i5;
      m = i6;
      i1 = i7;
    } 
    paramInt2 = paramInt1;
    if (paramInt1 >= 70) {
      paramInt2 = paramInt1;
      if (paramInt1 <= 99)
        paramInt2 = paramInt1 + 1900; 
    } 
    paramInt1 = paramInt2;
    if (paramInt2 >= 0) {
      paramInt1 = paramInt2;
      if (paramInt2 <= 69)
        paramInt1 = paramInt2 + 2000; 
    } 
    if (paramInt1 >= 1601) {
      if (j != -1) {
        if (i >= 1 && i <= 31) {
          if (n >= 0 && n <= 23) {
            if (k >= 0 && k <= 59) {
              if (m >= 0 && m <= 59) {
                GregorianCalendar gregorianCalendar = new GregorianCalendar(Util.UTC);
                gregorianCalendar.setLenient(false);
                gregorianCalendar.set(1, paramInt1);
                gregorianCalendar.set(2, j - 1);
                gregorianCalendar.set(5, i);
                gregorianCalendar.set(11, n);
                gregorianCalendar.set(12, k);
                gregorianCalendar.set(13, m);
                gregorianCalendar.set(14, 0);
                return gregorianCalendar.getTimeInMillis();
              } 
              throw new IllegalArgumentException();
            } 
            throw new IllegalArgumentException();
          } 
          throw new IllegalArgumentException();
        } 
        throw new IllegalArgumentException();
      } 
      throw new IllegalArgumentException();
    } 
    throw new IllegalArgumentException();
  }
  
  private static long parseMaxAge(String paramString) {
    try {
      long l = Long.parseLong(paramString);
      return (l <= 0L) ? Float.MIN_VALUE : l;
    } catch (NumberFormatException numberFormatException) {
      if (paramString.matches("-?\\d+"))
        return paramString.startsWith("-") ? Float.MIN_VALUE : Float.MAX_VALUE; 
      throw numberFormatException;
    } 
  }
  
  private static boolean pathMatch(HttpUrl paramHttpUrl, String paramString) {
    String str = paramHttpUrl.encodedPath();
    if (str.equals(paramString))
      return true; 
    if (str.startsWith(paramString)) {
      if (paramString.endsWith("/"))
        return true; 
      if (str.charAt(paramString.length()) == '/')
        return true; 
    } 
    return false;
  }
  
  public String domain() { return this.domain; }
  
  public boolean equals(Object paramObject) {
    boolean bool = paramObject instanceof Cookie;
    boolean bool1 = false;
    if (!bool)
      return false; 
    paramObject = (Cookie)paramObject;
    bool = bool1;
    if (paramObject.name.equals(this.name)) {
      bool = bool1;
      if (paramObject.value.equals(this.value)) {
        bool = bool1;
        if (paramObject.domain.equals(this.domain)) {
          bool = bool1;
          if (paramObject.path.equals(this.path)) {
            bool = bool1;
            if (paramObject.expiresAt == this.expiresAt) {
              bool = bool1;
              if (paramObject.secure == this.secure) {
                bool = bool1;
                if (paramObject.httpOnly == this.httpOnly) {
                  bool = bool1;
                  if (paramObject.persistent == this.persistent) {
                    bool = bool1;
                    if (paramObject.hostOnly == this.hostOnly)
                      bool = true; 
                  } 
                } 
              } 
            } 
          } 
        } 
      } 
    } 
    return bool;
  }
  
  public long expiresAt() { return this.expiresAt; }
  
  public int hashCode() {
    int i = this.name.hashCode();
    int j = this.value.hashCode();
    int k = this.domain.hashCode();
    int m = this.path.hashCode();
    long l = this.expiresAt;
    return ((((((((527 + i) * 31 + j) * 31 + k) * 31 + m) * 31 + (int)(l ^ l >>> 32)) * 31 + (this.secure ^ true)) * 31 + (this.httpOnly ^ true)) * 31 + (this.persistent ^ true)) * 31 + (this.hostOnly ^ true);
  }
  
  public boolean hostOnly() { return this.hostOnly; }
  
  public boolean httpOnly() { return this.httpOnly; }
  
  public boolean matches(HttpUrl paramHttpUrl) {
    boolean bool;
    if (this.hostOnly) {
      bool = paramHttpUrl.host().equals(this.domain);
    } else {
      bool = domainMatch(paramHttpUrl.host(), this.domain);
    } 
    return !bool ? false : (!pathMatch(paramHttpUrl, this.path) ? false : (!(this.secure && !paramHttpUrl.isHttps())));
  }
  
  public String name() { return this.name; }
  
  public String path() { return this.path; }
  
  public boolean persistent() { return this.persistent; }
  
  public boolean secure() { return this.secure; }
  
  public String toString() { return toString(false); }
  
  String toString(boolean paramBoolean) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(this.name);
    stringBuilder.append('=');
    stringBuilder.append(this.value);
    if (this.persistent) {
      String str;
      if (this.expiresAt == Float.MIN_VALUE) {
        str = "; max-age=0";
      } else {
        stringBuilder.append("; expires=");
        str = HttpDate.format(new Date(this.expiresAt));
      } 
      stringBuilder.append(str);
    } 
    if (!this.hostOnly) {
      stringBuilder.append("; domain=");
      if (paramBoolean)
        stringBuilder.append("."); 
      stringBuilder.append(this.domain);
    } 
    stringBuilder.append("; path=");
    stringBuilder.append(this.path);
    if (this.secure)
      stringBuilder.append("; secure"); 
    if (this.httpOnly)
      stringBuilder.append("; httponly"); 
    return stringBuilder.toString();
  }
  
  public String value() { return this.value; }
}
