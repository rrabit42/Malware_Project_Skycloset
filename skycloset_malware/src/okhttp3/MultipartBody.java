package okhttp3;

import b.c;
import b.d;
import b.f;
import java.util.List;
import okhttp3.internal.Util;

public final class MultipartBody extends RequestBody {
  public static final MediaType ALTERNATIVE;
  
  private static final byte[] COLONSPACE;
  
  private static final byte[] CRLF;
  
  private static final byte[] DASHDASH;
  
  public static final MediaType DIGEST;
  
  public static final MediaType FORM = (PARALLEL = (DIGEST = (ALTERNATIVE = (MIXED = MediaType.get("multipart/mixed")).get("multipart/alternative")).get("multipart/digest")).get("multipart/parallel")).get("multipart/form-data");
  
  public static final MediaType MIXED;
  
  public static final MediaType PARALLEL;
  
  private final f boundary;
  
  private long contentLength = -1L;
  
  private final MediaType contentType;
  
  private final MediaType originalType;
  
  private final List<Part> parts;
  
  static  {
    COLONSPACE = new byte[] { 58, 32 };
    CRLF = new byte[] { 13, 10 };
    DASHDASH = new byte[] { 45, 45 };
  }
  
  MultipartBody(f paramf, MediaType paramMediaType, List<Part> paramList) {
    this.boundary = paramf;
    this.originalType = paramMediaType;
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramMediaType);
    stringBuilder.append("; boundary=");
    stringBuilder.append(paramf.a());
    this.contentType = MediaType.get(stringBuilder.toString());
    this.parts = Util.immutableList(paramList);
  }
  
  static StringBuilder appendQuotedString(StringBuilder paramStringBuilder, String paramString) {
    paramStringBuilder.append('"');
    int i = paramString.length();
    for (byte b = 0; b < i; b++) {
      char c = paramString.charAt(b);
      if (c != '\n') {
        if (c != '\r') {
          if (c != '"') {
            paramStringBuilder.append(c);
          } else {
            String str = "%22";
            paramStringBuilder.append(str);
          } 
        } else {
          String str = "%0D";
          paramStringBuilder.append(str);
        } 
      } else {
        String str = "%0A";
        paramStringBuilder.append(str);
      } 
    } 
    paramStringBuilder.append('"');
    return paramStringBuilder;
  }
  
  private long writeOrCountBytes(d paramd, boolean paramBoolean) {
    c c2;
    c c1;
    if (paramBoolean) {
      c2 = new c();
      c1 = c2;
    } else {
      c c = null;
      c2 = c1;
      c1 = c;
    } 
    int i = this.parts.size();
    long l1 = 0L;
    for (byte b = 0; b < i; b++) {
      Part part = (Part)this.parts.get(b);
      Headers headers = part.headers;
      RequestBody requestBody = part.body;
      c2.c(DASHDASH);
      c2.c(this.boundary);
      c2.c(CRLF);
      if (headers != null) {
        int j = headers.size();
        byte b1;
        for (b1 = 0; b1 < j; b1++)
          c2.b(headers.name(b1)).c(COLONSPACE).b(headers.value(b1)).c(CRLF); 
      } 
      MediaType mediaType = requestBody.contentType();
      if (mediaType != null)
        c2.b("Content-Type: ").b(mediaType.toString()).c(CRLF); 
      long l = requestBody.contentLength();
      if (l != -1L) {
        c2.b("Content-Length: ").n(l).c(CRLF);
      } else if (paramBoolean) {
        c1.u();
        return -1L;
      } 
      c2.c(CRLF);
      if (paramBoolean) {
        l1 += l;
      } else {
        requestBody.writeTo(c2);
      } 
      c2.c(CRLF);
    } 
    c2.c(DASHDASH);
    c2.c(this.boundary);
    c2.c(DASHDASH);
    c2.c(CRLF);
    long l2 = l1;
    if (paramBoolean) {
      l2 = l1 + c1.a();
      c1.u();
    } 
    return l2;
  }
  
  public String boundary() { return this.boundary.a(); }
  
  public long contentLength() {
    long l = this.contentLength;
    if (l != -1L)
      return l; 
    l = writeOrCountBytes(null, true);
    this.contentLength = l;
    return l;
  }
  
  public MediaType contentType() { return this.contentType; }
  
  public Part part(int paramInt) { return (Part)this.parts.get(paramInt); }
  
  public List<Part> parts() { return this.parts; }
  
  public int size() { return this.parts.size(); }
  
  public MediaType type() { return this.originalType; }
  
  public void writeTo(d paramd) { writeOrCountBytes(paramd, false); }
}
