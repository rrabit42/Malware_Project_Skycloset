package okhttp3.internal.cache2;

import b.c;
import b.f;
import b.t;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

final class Relay {
  private static final long FILE_HEADER_SIZE = 32L;
  
  static final f PREFIX_CLEAN;
  
  static final f PREFIX_DIRTY = (PREFIX_CLEAN = f.a("OkHttp cache v1\n")).a("OkHttp DIRTY :(\n");
  
  private static final int SOURCE_FILE = 2;
  
  private static final int SOURCE_UPSTREAM = 1;
  
  final c buffer = new c();
  
  final long bufferMaxSize;
  
  boolean complete;
  
  RandomAccessFile file;
  
  private final f metadata;
  
  int sourceCount;
  
  t upstream;
  
  final c upstreamBuffer = new c();
  
  long upstreamPos;
  
  Thread upstreamReader;
  
  private Relay(RandomAccessFile paramRandomAccessFile, t paramt, long paramLong1, f paramf, long paramLong2) {
    this.file = paramRandomAccessFile;
    this.upstream = paramt;
    if (paramt == null) {
      bool = true;
    } else {
      bool = false;
    } 
    this.complete = bool;
    this.upstreamPos = paramLong1;
    this.metadata = paramf;
    this.bufferMaxSize = paramLong2;
  }
  
  public static Relay edit(File paramFile, t paramt, f paramf, long paramLong) {
    RandomAccessFile randomAccessFile = new RandomAccessFile(paramFile, "rw");
    Relay relay = new Relay(randomAccessFile, paramt, 0L, paramf, paramLong);
    randomAccessFile.setLength(0L);
    relay.writeHeader(PREFIX_DIRTY, -1L, -1L);
    return relay;
  }
  
  public static Relay read(File paramFile) {
    RandomAccessFile randomAccessFile = new RandomAccessFile(paramFile, "rw");
    FileOperator fileOperator = new FileOperator(randomAccessFile.getChannel());
    c c1 = new c();
    fileOperator.read(0L, c1, 32L);
    if (c1.d(PREFIX_CLEAN.h()).equals(PREFIX_CLEAN)) {
      long l1 = c1.l();
      long l2 = c1.l();
      c1 = new c();
      fileOperator.read(l1 + 32L, c1, l2);
      return new Relay(randomAccessFile, null, l1, c1.q(), 0L);
    } 
    throw new IOException("unreadable cache file");
  }
  
  private void writeHeader(f paramf, long paramLong1, long paramLong2) {
    c c1 = new c();
    c1.a(paramf);
    c1.j(paramLong1);
    c1.j(paramLong2);
    if (c1.a() == 32L) {
      (new FileOperator(this.file.getChannel())).write(0L, c1, 32L);
      return;
    } 
    throw new IllegalArgumentException();
  }
  
  private void writeMetadata(long paramLong) {
    c c1 = new c();
    c1.a(this.metadata);
    (new FileOperator(this.file.getChannel())).write(32L + paramLong, c1, this.metadata.h());
  }
  
  void commit(long paramLong) { // Byte code:
    //   0: aload_0
    //   1: lload_1
    //   2: invokespecial writeMetadata : (J)V
    //   5: aload_0
    //   6: getfield file : Ljava/io/RandomAccessFile;
    //   9: invokevirtual getChannel : ()Ljava/nio/channels/FileChannel;
    //   12: iconst_0
    //   13: invokevirtual force : (Z)V
    //   16: aload_0
    //   17: getstatic okhttp3/internal/cache2/Relay.PREFIX_CLEAN : Lb/f;
    //   20: lload_1
    //   21: aload_0
    //   22: getfield metadata : Lb/f;
    //   25: invokevirtual h : ()I
    //   28: i2l
    //   29: invokespecial writeHeader : (Lb/f;JJ)V
    //   32: aload_0
    //   33: getfield file : Ljava/io/RandomAccessFile;
    //   36: invokevirtual getChannel : ()Ljava/nio/channels/FileChannel;
    //   39: iconst_0
    //   40: invokevirtual force : (Z)V
    //   43: aload_0
    //   44: monitorenter
    //   45: aload_0
    //   46: iconst_1
    //   47: putfield complete : Z
    //   50: aload_0
    //   51: monitorexit
    //   52: aload_0
    //   53: getfield upstream : Lb/t;
    //   56: invokestatic closeQuietly : (Ljava/io/Closeable;)V
    //   59: aload_0
    //   60: aconst_null
    //   61: putfield upstream : Lb/t;
    //   64: return
    //   65: astore_3
    //   66: aload_0
    //   67: monitorexit
    //   68: aload_3
    //   69: athrow
    // Exception table:
    //   from	to	target	type
    //   45	52	65	finally
    //   66	68	65	finally }
  
  boolean isClosed() { return (this.file == null); }
  
  public f metadata() { return this.metadata; }
  
  public t newSource() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield file : Ljava/io/RandomAccessFile;
    //   6: ifnonnull -> 13
    //   9: aload_0
    //   10: monitorexit
    //   11: aconst_null
    //   12: areturn
    //   13: aload_0
    //   14: aload_0
    //   15: getfield sourceCount : I
    //   18: iconst_1
    //   19: iadd
    //   20: putfield sourceCount : I
    //   23: aload_0
    //   24: monitorexit
    //   25: new okhttp3/internal/cache2/Relay$RelaySource
    //   28: dup
    //   29: aload_0
    //   30: invokespecial <init> : (Lokhttp3/internal/cache2/Relay;)V
    //   33: areturn
    //   34: astore_1
    //   35: aload_0
    //   36: monitorexit
    //   37: aload_1
    //   38: athrow
    // Exception table:
    //   from	to	target	type
    //   2	11	34	finally
    //   13	25	34	finally
    //   35	37	34	finally }
}
