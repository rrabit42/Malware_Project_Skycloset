package okhttp3.internal.platform;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.List;
import javax.net.ssl.SSLSocket;
import okhttp3.Protocol;
import okhttp3.internal.Util;

class JdkWithJettyBootPlatform extends Platform {
  private final Class<?> clientProviderClass;
  
  private final Method getMethod;
  
  private final Method putMethod;
  
  private final Method removeMethod;
  
  private final Class<?> serverProviderClass;
  
  JdkWithJettyBootPlatform(Method paramMethod1, Method paramMethod2, Method paramMethod3, Class<?> paramClass1, Class<?> paramClass2) {
    this.putMethod = paramMethod1;
    this.getMethod = paramMethod2;
    this.removeMethod = paramMethod3;
    this.clientProviderClass = paramClass1;
    this.serverProviderClass = paramClass2;
  }
  
  public static Platform buildIfSupported() {
    try {
      Class clazz1 = Class.forName("org.eclipse.jetty.alpn.ALPN");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("org.eclipse.jetty.alpn.ALPN");
      stringBuilder1.append("$Provider");
      Class clazz2 = Class.forName(stringBuilder1.toString());
      StringBuilder stringBuilder2 = new StringBuilder();
      stringBuilder2.append("org.eclipse.jetty.alpn.ALPN");
      stringBuilder2.append("$ClientProvider");
      Class clazz3 = Class.forName(stringBuilder2.toString());
      StringBuilder stringBuilder3 = new StringBuilder();
      stringBuilder3.append("org.eclipse.jetty.alpn.ALPN");
      stringBuilder3.append("$ServerProvider");
      Class clazz4 = Class.forName(stringBuilder3.toString());
      return new JdkWithJettyBootPlatform(clazz1.getMethod("put", new Class[] { SSLSocket.class, clazz2 }), clazz1.getMethod("get", new Class[] { SSLSocket.class }), clazz1.getMethod("remove", new Class[] { SSLSocket.class }), clazz3, clazz4);
    } catch (ClassNotFoundException|NoSuchMethodException classNotFoundException) {
      return null;
    } 
  }
  
  public void afterHandshake(SSLSocket paramSSLSocket) {
    try {
      this.removeMethod.invoke(null, new Object[] { paramSSLSocket });
      return;
    } catch (IllegalAccessException paramSSLSocket) {
    
    } catch (InvocationTargetException paramSSLSocket) {}
    throw Util.assertionError("unable to remove alpn", paramSSLSocket);
  }
  
  public void configureTlsExtensions(SSLSocket paramSSLSocket, String paramString, List<Protocol> paramList) {
    List list = alpnProtocolNames(paramList);
    try {
      ClassLoader classLoader = Platform.class.getClassLoader();
      Class clazz1 = this.clientProviderClass;
      Class clazz2 = this.serverProviderClass;
      JettyNegoProvider jettyNegoProvider = new JettyNegoProvider(list);
      Object object = Proxy.newProxyInstance(classLoader, new Class[] { clazz1, clazz2 }, jettyNegoProvider);
      this.putMethod.invoke(null, new Object[] { paramSSLSocket, object });
      return;
    } catch (InvocationTargetException paramSSLSocket) {
    
    } catch (IllegalAccessException paramSSLSocket) {}
    throw Util.assertionError("unable to set alpn", paramSSLSocket);
  }
  
  public String getSelectedProtocol(SSLSocket paramSSLSocket) {
    try {
      JettyNegoProvider jettyNegoProvider = (JettyNegoProvider)Proxy.getInvocationHandler(this.getMethod.invoke(null, new Object[] { paramSSLSocket }));
      if (!jettyNegoProvider.unsupported && jettyNegoProvider.selected == null) {
        Platform.get().log(4, "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?", null);
        return null;
      } 
      return jettyNegoProvider.unsupported ? null : jettyNegoProvider.selected;
    } catch (InvocationTargetException paramSSLSocket) {
    
    } catch (IllegalAccessException paramSSLSocket) {}
    throw Util.assertionError("unable to get selected protocol", paramSSLSocket);
  }
}
