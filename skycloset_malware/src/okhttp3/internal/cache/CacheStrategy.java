package okhttp3.internal.cache;

import okhttp3.Request;
import okhttp3.Response;

public final class CacheStrategy {
  public final Response cacheResponse;
  
  public final Request networkRequest;
  
  CacheStrategy(Request paramRequest, Response paramResponse) {
    this.networkRequest = paramRequest;
    this.cacheResponse = paramResponse;
  }
  
  public static boolean isCacheable(Response paramResponse, Request paramRequest) {
    int i = paramResponse.code();
    byte b = 0;
    switch (i) {
      default:
        return false;
      case 302:
      case 307:
        if (paramResponse.header("Expires") == null && paramResponse.cacheControl().maxAgeSeconds() == -1 && !paramResponse.cacheControl().isPublic()) {
          boolean bool = b;
          if (paramResponse.cacheControl().isPrivate())
            break; 
          return bool;
        } 
        break;
      case 200:
      case 203:
      case 204:
      case 300:
      case 301:
      case 308:
      case 404:
      case 405:
      case 410:
      case 414:
      case 501:
        break;
    } 
    int j = b;
    if (!paramResponse.cacheControl().noStore()) {
      j = b;
      if (!paramRequest.cacheControl().noStore())
        j = 1; 
    } 
    return j;
  }
}
