package okhttp3.internal.cache;

import b.l;
import b.s;
import okhttp3.Headers;
import okhttp3.Interceptor;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.Internal;
import okhttp3.internal.Util;
import okhttp3.internal.http.RealResponseBody;

public final class CacheInterceptor implements Interceptor {
  final InternalCache cache;
  
  public CacheInterceptor(InternalCache paramInternalCache) { this.cache = paramInternalCache; }
  
  private Response cacheWritingResponse(CacheRequest paramCacheRequest, Response paramResponse) {
    if (paramCacheRequest == null)
      return paramResponse; 
    s s = paramCacheRequest.body();
    if (s == null)
      return paramResponse; 
    Object object = new Object(this, paramResponse.body().source(), paramCacheRequest, l.a(s));
    String str = paramResponse.header("Content-Type");
    long l = paramResponse.body().contentLength();
    return paramResponse.newBuilder().body(new RealResponseBody(str, l, l.a(object))).build();
  }
  
  private static Headers combine(Headers paramHeaders1, Headers paramHeaders2) {
    Headers.Builder builder = new Headers.Builder();
    int i = paramHeaders1.size();
    byte b2 = 0;
    byte b1;
    for (b1 = 0; b1 < i; b1++) {
      String str1 = paramHeaders1.name(b1);
      String str2 = paramHeaders1.value(b1);
      if ((!"Warning".equalsIgnoreCase(str1) || !str2.startsWith("1")) && (isContentSpecificHeader(str1) || !isEndToEnd(str1) || paramHeaders2.get(str1) == null))
        Internal.instance.addLenient(builder, str1, str2); 
    } 
    i = paramHeaders2.size();
    for (b1 = b2; b1 < i; b1++) {
      String str = paramHeaders2.name(b1);
      if (!isContentSpecificHeader(str) && isEndToEnd(str))
        Internal.instance.addLenient(builder, str, paramHeaders2.value(b1)); 
    } 
    return builder.build();
  }
  
  static boolean isContentSpecificHeader(String paramString) { return ("Content-Length".equalsIgnoreCase(paramString) || "Content-Encoding".equalsIgnoreCase(paramString) || "Content-Type".equalsIgnoreCase(paramString)); }
  
  static boolean isEndToEnd(String paramString) { return (!"Connection".equalsIgnoreCase(paramString) && !"Keep-Alive".equalsIgnoreCase(paramString) && !"Proxy-Authenticate".equalsIgnoreCase(paramString) && !"Proxy-Authorization".equalsIgnoreCase(paramString) && !"TE".equalsIgnoreCase(paramString) && !"Trailers".equalsIgnoreCase(paramString) && !"Transfer-Encoding".equalsIgnoreCase(paramString) && !"Upgrade".equalsIgnoreCase(paramString)); }
  
  private static Response stripBody(Response paramResponse) {
    Response response = paramResponse;
    if (paramResponse != null) {
      response = paramResponse;
      if (paramResponse.body() != null)
        response = paramResponse.newBuilder().body(null).build(); 
    } 
    return response;
  }
  
  public Response intercept(Interceptor.Chain paramChain) {
    internalCache1 = this.cache;
    if (internalCache1 != null) {
      Response response1 = internalCache1.get(paramChain.request());
    } else {
      internalCache1 = null;
    } 
    CacheStrategy cacheStrategy = (new CacheStrategy.Factory(System.currentTimeMillis(), paramChain.request(), internalCache1)).get();
    request = cacheStrategy.networkRequest;
    response = cacheStrategy.cacheResponse;
    InternalCache internalCache2 = this.cache;
    if (internalCache2 != null)
      internalCache2.trackResponse(cacheStrategy); 
    if (internalCache1 != null && response == null)
      Util.closeQuietly(internalCache1.body()); 
    if (request == null && response == null)
      return (new Response.Builder()).request(paramChain.request()).protocol(Protocol.HTTP_1_1).code(504).message("Unsatisfiable Request (only-if-cached)").body(Util.EMPTY_RESPONSE).sentRequestAtMillis(-1L).receivedResponseAtMillis(System.currentTimeMillis()).build(); 
    if (request == null)
      return response.newBuilder().cacheResponse(stripBody(response)).build(); 
    try {
      null = paramChain.proceed(request);
      if (null == null && internalCache1 != null)
        Util.closeQuietly(internalCache1.body()); 
      if (response != null) {
        if (null.code() == 304) {
          response1 = response.newBuilder().headers(combine(response.headers(), null.headers())).sentRequestAtMillis(null.sentRequestAtMillis()).receivedResponseAtMillis(null.receivedResponseAtMillis()).cacheResponse(stripBody(response)).networkResponse(stripBody(null)).build();
          null.body().close();
          this.cache.trackConditionalCacheHit();
          return response1;
        } 
        Util.closeQuietly(response.body());
      } 
      return null.newBuilder().cacheResponse(stripBody(response)).networkResponse(stripBody(null)).build();
    } finally {
      if (internalCache1 != null)
        Util.closeQuietly(internalCache1.body()); 
    } 
  }
}
