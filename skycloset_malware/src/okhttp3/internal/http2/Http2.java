package okhttp3.internal.http2;

import b.f;
import java.io.IOException;
import okhttp3.internal.Util;

public final class Http2 {
  static final String[] BINARY;
  
  static final f CONNECTION_PREFACE = f.a("PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");
  
  static final String[] FLAGS;
  
  static final byte FLAG_ACK = 1;
  
  static final byte FLAG_COMPRESSED = 32;
  
  static final byte FLAG_END_HEADERS = 4;
  
  static final byte FLAG_END_PUSH_PROMISE = 4;
  
  static final byte FLAG_END_STREAM = 1;
  
  static final byte FLAG_NONE = 0;
  
  static final byte FLAG_PADDED = 8;
  
  static final byte FLAG_PRIORITY = 32;
  
  private static final String[] FRAME_NAMES = { "DATA", "HEADERS", "PRIORITY", "RST_STREAM", "SETTINGS", "PUSH_PROMISE", "PING", "GOAWAY", "WINDOW_UPDATE", "CONTINUATION" };
  
  static final int INITIAL_MAX_FRAME_SIZE = 16384;
  
  static final byte TYPE_CONTINUATION = 9;
  
  static final byte TYPE_DATA = 0;
  
  static final byte TYPE_GOAWAY = 7;
  
  static final byte TYPE_HEADERS = 1;
  
  static final byte TYPE_PING = 6;
  
  static final byte TYPE_PRIORITY = 2;
  
  static final byte TYPE_PUSH_PROMISE = 5;
  
  static final byte TYPE_RST_STREAM = 3;
  
  static final byte TYPE_SETTINGS = 4;
  
  static final byte TYPE_WINDOW_UPDATE = 8;
  
  static  {
    FLAGS = new String[64];
    BINARY = new String[256];
    int j = 0;
    byte b = 0;
    while (true) {
      String[] arrayOfString1 = BINARY;
      if (b < arrayOfString1.length) {
        arrayOfString1[b] = Util.format("%8s", new Object[] { Integer.toBinaryString(b) }).replace(' ', '0');
        b++;
        continue;
      } 
      break;
    } 
    String[] arrayOfString = FLAGS;
    arrayOfString[0] = "";
    arrayOfString[1] = "END_STREAM";
    int[] arrayOfInt1 = new int[1];
    arrayOfInt1[0] = 1;
    arrayOfString[8] = "PADDED";
    int i = arrayOfInt1.length;
    for (b = 0; b < i; b++) {
      int m = arrayOfInt1[b];
      arrayOfString = FLAGS;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(FLAGS[m]);
      stringBuilder.append("|PADDED");
      arrayOfString[m | 0x8] = stringBuilder.toString();
    } 
    arrayOfString = FLAGS;
    arrayOfString[4] = "END_HEADERS";
    arrayOfString[32] = "PRIORITY";
    arrayOfString[36] = "END_HEADERS|PRIORITY";
    int[] arrayOfInt2 = new int[3];
    arrayOfInt2[0] = 4;
    arrayOfInt2[1] = 32;
    arrayOfInt2[2] = 36;
    arrayOfInt2;
    int k = arrayOfInt2.length;
    b = 0;
    while (true) {
      i = j;
      if (b < k) {
        int m = arrayOfInt2[b];
        int n = arrayOfInt1.length;
        for (i = 0; i < n; i++) {
          int i1 = arrayOfInt1[i];
          String[] arrayOfString1 = FLAGS;
          int i2 = i1 | m;
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append(FLAGS[i1]);
          stringBuilder.append('|');
          stringBuilder.append(FLAGS[m]);
          arrayOfString1[i2] = stringBuilder.toString();
          arrayOfString1 = FLAGS;
          stringBuilder = new StringBuilder();
          stringBuilder.append(FLAGS[i1]);
          stringBuilder.append('|');
          stringBuilder.append(FLAGS[m]);
          stringBuilder.append("|PADDED");
          arrayOfString1[i2 | 0x8] = stringBuilder.toString();
        } 
        b++;
        continue;
      } 
      break;
    } 
    while (true) {
      String[] arrayOfString1 = FLAGS;
      if (i < arrayOfString1.length) {
        if (arrayOfString1[i] == null)
          arrayOfString1[i] = BINARY[i]; 
        i++;
        continue;
      } 
      break;
    } 
  }
  
  static String formatFlags(byte paramByte1, byte paramByte2) { // Byte code:
    //   0: iload_1
    //   1: ifne -> 7
    //   4: ldc ''
    //   6: areturn
    //   7: iload_0
    //   8: tableswitch default -> 52, 2 -> 83, 3 -> 83, 4 -> 69, 5 -> 52, 6 -> 69, 7 -> 83, 8 -> 83
    //   52: getstatic okhttp3/internal/http2/Http2.FLAGS : [Ljava/lang/String;
    //   55: astore_2
    //   56: iload_1
    //   57: aload_2
    //   58: arraylength
    //   59: if_icmpge -> 89
    //   62: aload_2
    //   63: iload_1
    //   64: aaload
    //   65: astore_2
    //   66: goto -> 95
    //   69: iload_1
    //   70: iconst_1
    //   71: if_icmpne -> 77
    //   74: ldc 'ACK'
    //   76: areturn
    //   77: getstatic okhttp3/internal/http2/Http2.BINARY : [Ljava/lang/String;
    //   80: iload_1
    //   81: aaload
    //   82: areturn
    //   83: getstatic okhttp3/internal/http2/Http2.BINARY : [Ljava/lang/String;
    //   86: iload_1
    //   87: aaload
    //   88: areturn
    //   89: getstatic okhttp3/internal/http2/Http2.BINARY : [Ljava/lang/String;
    //   92: iload_1
    //   93: aaload
    //   94: astore_2
    //   95: iload_0
    //   96: iconst_5
    //   97: if_icmpne -> 115
    //   100: iload_1
    //   101: iconst_4
    //   102: iand
    //   103: ifeq -> 115
    //   106: aload_2
    //   107: ldc 'HEADERS'
    //   109: ldc 'PUSH_PROMISE'
    //   111: invokevirtual replace : (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   114: areturn
    //   115: iload_0
    //   116: ifne -> 135
    //   119: iload_1
    //   120: bipush #32
    //   122: iand
    //   123: ifeq -> 135
    //   126: aload_2
    //   127: ldc 'PRIORITY'
    //   129: ldc 'COMPRESSED'
    //   131: invokevirtual replace : (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
    //   134: areturn
    //   135: aload_2
    //   136: areturn }
  
  static String frameLog(boolean paramBoolean, int paramInt1, int paramInt2, byte paramByte1, byte paramByte2) {
    String str2;
    String str1 = FRAME_NAMES;
    if (paramByte1 < str1.length) {
      String str = str1[paramByte1];
    } else {
      str1 = Util.format("0x%02x", new Object[] { Byte.valueOf(paramByte1) });
    } 
    String str3 = formatFlags(paramByte1, paramByte2);
    if (paramBoolean) {
      str2 = "<<";
    } else {
      str2 = ">>";
    } 
    return Util.format("%s 0x%08x %5d %-13s %s", new Object[] { str2, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), str1, str3 });
  }
  
  static IllegalArgumentException illegalArgument(String paramString, Object... paramVarArgs) { throw new IllegalArgumentException(Util.format(paramString, paramVarArgs)); }
  
  static IOException ioException(String paramString, Object... paramVarArgs) { throw new IOException(Util.format(paramString, paramVarArgs)); }
}
