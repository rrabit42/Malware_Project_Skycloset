package okhttp3.internal.http2;

import b.e;
import b.f;
import java.io.Closeable;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import okhttp3.internal.Util;

final class Http2Reader implements Closeable {
  static final Logger logger = Logger.getLogger(Http2.class.getName());
  
  private final boolean client;
  
  private final ContinuationSource continuation;
  
  final Hpack.Reader hpackReader;
  
  private final e source;
  
  Http2Reader(e parame, boolean paramBoolean) {
    this.source = parame;
    this.client = paramBoolean;
    this.continuation = new ContinuationSource(this.source);
    this.hpackReader = new Hpack.Reader(4096, this.continuation);
  }
  
  static int lengthWithoutPadding(int paramInt, byte paramByte, short paramShort) {
    int i = paramInt;
    if ((paramByte & 0x8) != 0)
      i = paramInt - 1; 
    if (paramShort <= i)
      return (short)(i - paramShort); 
    throw Http2.ioException("PROTOCOL_ERROR padding %s > remaining length %s", new Object[] { Short.valueOf(paramShort), Integer.valueOf(i) });
  }
  
  private void readData(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    short s = 0;
    if (paramInt2 != 0) {
      boolean bool1;
      boolean bool = true;
      if ((paramByte & true) != 0) {
        bool1 = true;
      } else {
        bool1 = false;
      } 
      if ((paramByte & 0x20) == 0)
        bool = false; 
      if (!bool) {
        if ((paramByte & 0x8) != 0)
          s = (short)(this.source.i() & 0xFF); 
        paramInt1 = lengthWithoutPadding(paramInt1, paramByte, s);
        paramHandler.data(bool1, paramInt2, this.source, paramInt1);
        this.source.i(s);
        return;
      } 
      throw Http2.ioException("PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA", new Object[0]);
    } 
    throw Http2.ioException("PROTOCOL_ERROR: TYPE_DATA streamId == 0", new Object[0]);
  }
  
  private void readGoAway(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    if (paramInt1 >= 8) {
      if (paramInt2 == 0) {
        int i = this.source.k();
        paramInt2 = this.source.k();
        paramInt1 -= 8;
        ErrorCode errorCode = ErrorCode.fromHttp2(paramInt2);
        if (errorCode != null) {
          f f = f.b;
          if (paramInt1 > 0)
            f = this.source.d(paramInt1); 
          paramHandler.goAway(i, errorCode, f);
          return;
        } 
        throw Http2.ioException("TYPE_GOAWAY unexpected error code: %d", new Object[] { Integer.valueOf(paramInt2) });
      } 
      throw Http2.ioException("TYPE_GOAWAY streamId != 0", new Object[0]);
    } 
    throw Http2.ioException("TYPE_GOAWAY length < 8: %s", new Object[] { Integer.valueOf(paramInt1) });
  }
  
  private List<Header> readHeaderBlock(int paramInt1, short paramShort, byte paramByte, int paramInt2) {
    ContinuationSource continuationSource = this.continuation;
    continuationSource.left = paramInt1;
    continuationSource.length = paramInt1;
    continuationSource.padding = paramShort;
    continuationSource.flags = paramByte;
    continuationSource.streamId = paramInt2;
    this.hpackReader.readHeaders();
    return this.hpackReader.getAndResetHeaderList();
  }
  
  private void readHeaders(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    short s = 0;
    if (paramInt2 != 0) {
      boolean bool;
      if ((paramByte & true) != 0) {
        bool = true;
      } else {
        bool = false;
      } 
      if ((paramByte & 0x8) != 0)
        s = (short)(this.source.i() & 0xFF); 
      int i = paramInt1;
      if ((paramByte & 0x20) != 0) {
        readPriority(paramHandler, paramInt2);
        i = paramInt1 - 5;
      } 
      paramHandler.headers(bool, paramInt2, -1, readHeaderBlock(lengthWithoutPadding(i, paramByte, s), s, paramByte, paramInt2));
      return;
    } 
    throw Http2.ioException("PROTOCOL_ERROR: TYPE_HEADERS streamId == 0", new Object[0]);
  }
  
  static int readMedium(e parame) {
    byte b1 = parame.i();
    byte b2 = parame.i();
    return parame.i() & 0xFF | (b1 & 0xFF) << 16 | (b2 & 0xFF) << 8;
  }
  
  private void readPing(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    boolean bool = false;
    if (paramInt1 == 8) {
      if (paramInt2 == 0) {
        paramInt1 = this.source.k();
        paramInt2 = this.source.k();
        if ((paramByte & true) != 0)
          bool = true; 
        paramHandler.ping(bool, paramInt1, paramInt2);
        return;
      } 
      throw Http2.ioException("TYPE_PING streamId != 0", new Object[0]);
    } 
    throw Http2.ioException("TYPE_PING length != 8: %s", new Object[] { Integer.valueOf(paramInt1) });
  }
  
  private void readPriority(Handler paramHandler, int paramInt) {
    boolean bool;
    int i = this.source.k();
    if ((0x80000000 & i) != 0) {
      bool = true;
    } else {
      bool = false;
    } 
    paramHandler.priority(paramInt, i & 0x7FFFFFFF, (this.source.i() & 0xFF) + 1, bool);
  }
  
  private void readPriority(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    if (paramInt1 == 5) {
      if (paramInt2 != 0) {
        readPriority(paramHandler, paramInt2);
        return;
      } 
      throw Http2.ioException("TYPE_PRIORITY streamId == 0", new Object[0]);
    } 
    throw Http2.ioException("TYPE_PRIORITY length: %d != 5", new Object[] { Integer.valueOf(paramInt1) });
  }
  
  private void readPushPromise(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    short s = 0;
    if (paramInt2 != 0) {
      if ((paramByte & 0x8) != 0)
        s = (short)(this.source.i() & 0xFF); 
      paramHandler.pushPromise(paramInt2, this.source.k() & 0x7FFFFFFF, readHeaderBlock(lengthWithoutPadding(paramInt1 - 4, paramByte, s), s, paramByte, paramInt2));
      return;
    } 
    throw Http2.ioException("PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0", new Object[0]);
  }
  
  private void readRstStream(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    if (paramInt1 == 4) {
      if (paramInt2 != 0) {
        paramInt1 = this.source.k();
        ErrorCode errorCode = ErrorCode.fromHttp2(paramInt1);
        if (errorCode != null) {
          paramHandler.rstStream(paramInt2, errorCode);
          return;
        } 
        throw Http2.ioException("TYPE_RST_STREAM unexpected error code: %d", new Object[] { Integer.valueOf(paramInt1) });
      } 
      throw Http2.ioException("TYPE_RST_STREAM streamId == 0", new Object[0]);
    } 
    throw Http2.ioException("TYPE_RST_STREAM length: %d != 4", new Object[] { Integer.valueOf(paramInt1) });
  }
  
  private void readSettings(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    if (paramInt2 == 0) {
      if ((paramByte & true) != 0) {
        if (paramInt1 == 0) {
          paramHandler.ackSettings();
          return;
        } 
        throw Http2.ioException("FRAME_SIZE_ERROR ack frame should be empty!", new Object[0]);
      } 
      if (paramInt1 % 6 == 0) {
        Settings settings = new Settings();
        for (paramInt2 = 0; paramInt2 < paramInt1; paramInt2 += 6) {
          short s1 = this.source.j() & 0xFFFF;
          int i = this.source.k();
          short s = s1;
          switch (s1) {
            default:
              s = s1;
              break;
            case 5:
              if (i >= 16384 && i <= 16777215) {
                s = s1;
                break;
              } 
              throw Http2.ioException("PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s", new Object[] { Integer.valueOf(i) });
            case 4:
              s = 7;
              if (i >= 0)
                break; 
              throw Http2.ioException("PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1", new Object[0]);
            case 3:
              s = 4;
              break;
            case 2:
              s = s1;
              if (i != 0) {
                if (i == 1) {
                  s = s1;
                  break;
                } 
                throw Http2.ioException("PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1", new Object[0]);
              } 
              break;
            case 1:
            case 6:
              break;
          } 
          settings.set(s, i);
        } 
        paramHandler.settings(false, settings);
        return;
      } 
      throw Http2.ioException("TYPE_SETTINGS length %% 6 != 0: %s", new Object[] { Integer.valueOf(paramInt1) });
    } 
    throw Http2.ioException("TYPE_SETTINGS streamId != 0", new Object[0]);
  }
  
  private void readWindowUpdate(Handler paramHandler, int paramInt1, byte paramByte, int paramInt2) {
    if (paramInt1 == 4) {
      long l = this.source.k() & 0x7FFFFFFFL;
      if (l != 0L) {
        paramHandler.windowUpdate(paramInt2, l);
        return;
      } 
      throw Http2.ioException("windowSizeIncrement was 0", new Object[] { Long.valueOf(l) });
    } 
    throw Http2.ioException("TYPE_WINDOW_UPDATE length !=4: %s", new Object[] { Integer.valueOf(paramInt1) });
  }
  
  public void close() { this.source.close(); }
  
  public boolean nextFrame(boolean paramBoolean, Handler paramHandler) {
    try {
      this.source.a(9L);
      int i = readMedium(this.source);
      if (i >= 0 && i <= 16384) {
        byte b = (byte)(this.source.i() & 0xFF);
        if (!paramBoolean || b == 4) {
          byte b1 = (byte)(this.source.i() & 0xFF);
          int j = this.source.k() & 0x7FFFFFFF;
          if (logger.isLoggable(Level.FINE))
            logger.fine(Http2.frameLog(true, j, i, b, b1)); 
          switch (b) {
            default:
              this.source.i(i);
              return true;
            case 8:
              readWindowUpdate(paramHandler, i, b1, j);
              return true;
            case 7:
              readGoAway(paramHandler, i, b1, j);
              return true;
            case 6:
              readPing(paramHandler, i, b1, j);
              return true;
            case 5:
              readPushPromise(paramHandler, i, b1, j);
              return true;
            case 4:
              readSettings(paramHandler, i, b1, j);
              return true;
            case 3:
              readRstStream(paramHandler, i, b1, j);
              return true;
            case 2:
              readPriority(paramHandler, i, b1, j);
              return true;
            case 1:
              readHeaders(paramHandler, i, b1, j);
              return true;
            case 0:
              break;
          } 
          readData(paramHandler, i, b1, j);
          return true;
        } 
        throw Http2.ioException("Expected a SETTINGS frame but was %s", new Object[] { Byte.valueOf(b) });
      } 
      throw Http2.ioException("FRAME_SIZE_ERROR: %s", new Object[] { Integer.valueOf(i) });
    } catch (IOException paramHandler) {
      return false;
    } 
  }
  
  public void readConnectionPreface(Handler paramHandler) {
    if (this.client) {
      if (nextFrame(true, paramHandler))
        return; 
      throw Http2.ioException("Required SETTINGS preface not received", new Object[0]);
    } 
    f f = this.source.d(Http2.CONNECTION_PREFACE.h());
    if (logger.isLoggable(Level.FINE))
      logger.fine(Util.format("<< CONNECTION %s", new Object[] { f.f() })); 
    if (Http2.CONNECTION_PREFACE.equals(f))
      return; 
    throw Http2.ioException("Expected a connection header but was %s", new Object[] { f.a() });
  }
}
