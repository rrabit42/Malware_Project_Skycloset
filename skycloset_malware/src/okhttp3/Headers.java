package okhttp3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import okhttp3.internal.Util;
import okhttp3.internal.http.HttpDate;

public final class Headers {
  private final String[] namesAndValues;
  
  Headers(Builder paramBuilder) { this.namesAndValues = (String[])paramBuilder.namesAndValues.toArray(new String[paramBuilder.namesAndValues.size()]); }
  
  private Headers(String[] paramArrayOfString) { this.namesAndValues = paramArrayOfString; }
  
  static void checkName(String paramString) {
    if (paramString != null) {
      if (!paramString.isEmpty()) {
        int i = paramString.length();
        byte b = 0;
        while (b < i) {
          char c = paramString.charAt(b);
          if (c > ' ' && c < '') {
            b++;
            continue;
          } 
          throw new IllegalArgumentException(Util.format("Unexpected char %#04x at %d in header name: %s", new Object[] { Integer.valueOf(c), Integer.valueOf(b), paramString }));
        } 
        return;
      } 
      throw new IllegalArgumentException("name is empty");
    } 
    throw new NullPointerException("name == null");
  }
  
  static void checkValue(String paramString1, String paramString2) {
    if (paramString1 != null) {
      int i = paramString1.length();
      byte b = 0;
      while (b < i) {
        char c = paramString1.charAt(b);
        if ((c > '\037' || c == '\t') && c < '') {
          b++;
          continue;
        } 
        throw new IllegalArgumentException(Util.format("Unexpected char %#04x at %d in %s value: %s", new Object[] { Integer.valueOf(c), Integer.valueOf(b), paramString2, paramString1 }));
      } 
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("value for name ");
    stringBuilder.append(paramString2);
    stringBuilder.append(" == null");
    throw new NullPointerException(stringBuilder.toString());
  }
  
  private static String get(String[] paramArrayOfString, String paramString) {
    for (int i = paramArrayOfString.length - 2; i >= 0; i -= 2) {
      if (paramString.equalsIgnoreCase(paramArrayOfString[i]))
        return paramArrayOfString[i + 1]; 
    } 
    return null;
  }
  
  public static Headers of(Map<String, String> paramMap) {
    if (paramMap != null) {
      String[] arrayOfString = new String[paramMap.size() * 2];
      byte b = 0;
      for (Map.Entry entry : paramMap.entrySet()) {
        if (entry.getKey() != null && entry.getValue() != null) {
          String str1 = ((String)entry.getKey()).trim();
          String str2 = ((String)entry.getValue()).trim();
          checkName(str1);
          checkValue(str2, str1);
          arrayOfString[b] = str1;
          arrayOfString[b + true] = str2;
          b += 2;
          continue;
        } 
        throw new IllegalArgumentException("Headers cannot be null");
      } 
      return new Headers(arrayOfString);
    } 
    throw new NullPointerException("headers == null");
  }
  
  public static Headers of(String... paramVarArgs) {
    if (paramVarArgs != null) {
      if (paramVarArgs.length % 2 == 0) {
        byte b2;
        paramVarArgs = (String[])paramVarArgs.clone();
        boolean bool = false;
        byte b1 = 0;
        while (true) {
          b2 = bool;
          if (b1 < paramVarArgs.length) {
            if (paramVarArgs[b1] != null) {
              paramVarArgs[b1] = paramVarArgs[b1].trim();
              b1++;
              continue;
            } 
            throw new IllegalArgumentException("Headers cannot be null");
          } 
          break;
        } 
        while (b2 < paramVarArgs.length) {
          String str1 = paramVarArgs[b2];
          String str2 = paramVarArgs[b2 + true];
          checkName(str1);
          checkValue(str2, str1);
          b2 += 2;
        } 
        return new Headers(paramVarArgs);
      } 
      throw new IllegalArgumentException("Expected alternating header names and values");
    } 
    throw new NullPointerException("namesAndValues == null");
  }
  
  public long byteCount() {
    String[] arrayOfString = this.namesAndValues;
    long l = (arrayOfString.length * 2);
    int i = arrayOfString.length;
    for (byte b = 0; b < i; b++)
      l += this.namesAndValues[b].length(); 
    return l;
  }
  
  public boolean equals(Object paramObject) { return (paramObject instanceof Headers && Arrays.equals(((Headers)paramObject).namesAndValues, this.namesAndValues)); }
  
  public String get(String paramString) { return get(this.namesAndValues, paramString); }
  
  public Date getDate(String paramString) {
    paramString = get(paramString);
    return (paramString != null) ? HttpDate.parse(paramString) : null;
  }
  
  public int hashCode() { return Arrays.hashCode(this.namesAndValues); }
  
  public String name(int paramInt) { return this.namesAndValues[paramInt * 2]; }
  
  public Set<String> names() {
    TreeSet treeSet = new TreeSet(String.CASE_INSENSITIVE_ORDER);
    int i = size();
    for (byte b = 0; b < i; b++)
      treeSet.add(name(b)); 
    return Collections.unmodifiableSet(treeSet);
  }
  
  public Builder newBuilder() {
    Builder builder = new Builder();
    Collections.addAll(builder.namesAndValues, this.namesAndValues);
    return builder;
  }
  
  public int size() { return this.namesAndValues.length / 2; }
  
  public Map<String, List<String>> toMultimap() {
    TreeMap treeMap = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    int i = size();
    for (byte b = 0; b < i; b++) {
      String str = name(b).toLowerCase(Locale.US);
      List list2 = (List)treeMap.get(str);
      List list1 = list2;
      if (list2 == null) {
        list1 = new ArrayList(2);
        treeMap.put(str, list1);
      } 
      list1.add(value(b));
    } 
    return treeMap;
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    int i = size();
    for (byte b = 0; b < i; b++) {
      stringBuilder.append(name(b));
      stringBuilder.append(": ");
      stringBuilder.append(value(b));
      stringBuilder.append("\n");
    } 
    return stringBuilder.toString();
  }
  
  public String value(int paramInt) { return this.namesAndValues[paramInt * 2 + 1]; }
  
  public List<String> values(String paramString) {
    int i = size();
    ArrayList arrayList = null;
    byte b = 0;
    while (b < i) {
      ArrayList arrayList1 = arrayList;
      if (paramString.equalsIgnoreCase(name(b))) {
        arrayList1 = arrayList;
        if (arrayList == null)
          arrayList1 = new ArrayList(2); 
        arrayList1.add(value(b));
      } 
      b++;
      arrayList = arrayList1;
    } 
    return (arrayList != null) ? Collections.unmodifiableList(arrayList) : Collections.emptyList();
  }
}
