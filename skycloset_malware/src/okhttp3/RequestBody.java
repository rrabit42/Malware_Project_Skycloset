package okhttp3;

import b.d;
import b.f;
import java.io.File;
import java.nio.charset.Charset;
import okhttp3.internal.Util;

public abstract class RequestBody {
  public static RequestBody create(MediaType paramMediaType, f paramf) { return new Object(paramMediaType, paramf); }
  
  public static RequestBody create(MediaType paramMediaType, File paramFile) {
    if (paramFile != null)
      return new Object(paramMediaType, paramFile); 
    throw new NullPointerException("file == null");
  }
  
  public static RequestBody create(MediaType paramMediaType, String paramString) {
    Charset charset = Util.UTF_8;
    MediaType mediaType = paramMediaType;
    if (paramMediaType != null) {
      Charset charset1 = paramMediaType.charset();
      charset = charset1;
      mediaType = paramMediaType;
      if (charset1 == null) {
        charset = Util.UTF_8;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(paramMediaType);
        stringBuilder.append("; charset=utf-8");
        mediaType = MediaType.parse(stringBuilder.toString());
      } 
    } 
    return create(mediaType, paramString.getBytes(charset));
  }
  
  public static RequestBody create(MediaType paramMediaType, byte[] paramArrayOfByte) { return create(paramMediaType, paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public static RequestBody create(MediaType paramMediaType, byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (paramArrayOfByte != null) {
      Util.checkOffsetAndCount(paramArrayOfByte.length, paramInt1, paramInt2);
      return new Object(paramMediaType, paramInt2, paramArrayOfByte, paramInt1);
    } 
    throw new NullPointerException("content == null");
  }
  
  public long contentLength() { return -1L; }
  
  public abstract MediaType contentType();
  
  public abstract void writeTo(d paramd);
}
