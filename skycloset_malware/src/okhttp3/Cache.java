package okhttp3;

import b.e;
import b.f;
import java.io.Closeable;
import java.io.File;
import java.io.Flushable;
import java.io.IOException;
import java.util.Iterator;
import okhttp3.internal.Util;
import okhttp3.internal.cache.CacheRequest;
import okhttp3.internal.cache.CacheStrategy;
import okhttp3.internal.cache.DiskLruCache;
import okhttp3.internal.cache.InternalCache;
import okhttp3.internal.http.HttpHeaders;
import okhttp3.internal.http.HttpMethod;
import okhttp3.internal.io.FileSystem;

public final class Cache implements Closeable, Flushable {
  private static final int ENTRY_BODY = 1;
  
  private static final int ENTRY_COUNT = 2;
  
  private static final int ENTRY_METADATA = 0;
  
  private static final int VERSION = 201105;
  
  final DiskLruCache cache;
  
  private int hitCount;
  
  final InternalCache internalCache = new Object(this);
  
  private int networkCount;
  
  private int requestCount;
  
  int writeAbortCount;
  
  int writeSuccessCount;
  
  public Cache(File paramFile, long paramLong) { this(paramFile, paramLong, FileSystem.SYSTEM); }
  
  Cache(File paramFile, long paramLong, FileSystem paramFileSystem) { this.cache = DiskLruCache.create(paramFileSystem, paramFile, 201105, 2, paramLong); }
  
  private void abortQuietly(DiskLruCache.Editor paramEditor) {
    if (paramEditor != null)
      try {
        paramEditor.abort();
        return;
      } catch (IOException paramEditor) {
        return;
      }  
  }
  
  public static String key(HttpUrl paramHttpUrl) { return f.a(paramHttpUrl.toString()).c().f(); }
  
  static int readInt(e parame) {
    try {
      long l = parame.o();
      String str = parame.s();
      if (l >= 0L && l <= 2147483647L && str.isEmpty())
        return (int)l; 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("expected an int but was \"");
      stringBuilder.append(l);
      stringBuilder.append(str);
      stringBuilder.append("\"");
      throw new IOException(stringBuilder.toString());
    } catch (NumberFormatException parame) {
      throw new IOException(parame.getMessage());
    } 
  }
  
  public void close() { this.cache.close(); }
  
  public void delete() { this.cache.delete(); }
  
  public File directory() { return this.cache.getDirectory(); }
  
  public void evictAll() { this.cache.evictAll(); }
  
  public void flush() { this.cache.flush(); }
  
  Response get(Request paramRequest) {
    String str = key(paramRequest.url());
    try {
      Response response = this.cache.get(str);
      if (response == null)
        return null; 
      try {
        Entry entry = new Entry(response.getSource(0));
        response = entry.response(response);
        if (!entry.matches(paramRequest, response)) {
          Util.closeQuietly(response.body());
          return null;
        } 
        return response;
      } catch (IOException paramRequest) {}
      Util.closeQuietly(response);
      return null;
    } catch (IOException paramRequest) {
      return null;
    } 
  }
  
  public int hitCount() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield hitCount : I
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public void initialize() { this.cache.initialize(); }
  
  public boolean isClosed() { return this.cache.isClosed(); }
  
  public long maxSize() { return this.cache.getMaxSize(); }
  
  public int networkCount() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield networkCount : I
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  CacheRequest put(Response paramResponse) {
    String str = paramResponse.request().method();
    if (HttpMethod.invalidatesCache(paramResponse.request().method()))
      try {
        remove(paramResponse.request());
        return null;
      } catch (IOException paramResponse) {
        return null;
      }  
    if (!str.equals("GET"))
      return null; 
    if (HttpHeaders.hasVaryAll(paramResponse))
      return null; 
    entry = new Entry(paramResponse);
    try {
      DiskLruCache.Editor editor = this.cache.edit(key(paramResponse.request().url()));
      if (editor == null)
        return null; 
      try {
        entry.writeTo(editor);
        return new CacheRequestImpl(this, editor);
      } catch (IOException entry) {}
    } catch (IOException paramResponse) {
      paramResponse = null;
    } 
    abortQuietly(paramResponse);
    return null;
  }
  
  void remove(Request paramRequest) { this.cache.remove(key(paramRequest.url())); }
  
  public int requestCount() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield requestCount : I
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public long size() { return this.cache.size(); }
  
  void trackConditionalCacheHit() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_0
    //   4: getfield hitCount : I
    //   7: iconst_1
    //   8: iadd
    //   9: putfield hitCount : I
    //   12: aload_0
    //   13: monitorexit
    //   14: return
    //   15: astore_1
    //   16: aload_0
    //   17: monitorexit
    //   18: aload_1
    //   19: athrow
    // Exception table:
    //   from	to	target	type
    //   2	12	15	finally }
  
  void trackResponse(CacheStrategy paramCacheStrategy) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_0
    //   4: getfield requestCount : I
    //   7: iconst_1
    //   8: iadd
    //   9: putfield requestCount : I
    //   12: aload_1
    //   13: getfield networkRequest : Lokhttp3/Request;
    //   16: ifnull -> 32
    //   19: aload_0
    //   20: aload_0
    //   21: getfield networkCount : I
    //   24: iconst_1
    //   25: iadd
    //   26: putfield networkCount : I
    //   29: goto -> 49
    //   32: aload_1
    //   33: getfield cacheResponse : Lokhttp3/Response;
    //   36: ifnull -> 49
    //   39: aload_0
    //   40: aload_0
    //   41: getfield hitCount : I
    //   44: iconst_1
    //   45: iadd
    //   46: putfield hitCount : I
    //   49: aload_0
    //   50: monitorexit
    //   51: return
    //   52: astore_1
    //   53: aload_0
    //   54: monitorexit
    //   55: aload_1
    //   56: athrow
    // Exception table:
    //   from	to	target	type
    //   2	29	52	finally
    //   32	49	52	finally }
  
  void update(Response paramResponse1, Response paramResponse2) {
    entry = new Entry(paramResponse2);
    snapshot = ((CacheResponseBody)paramResponse1.body()).snapshot;
    try {
      DiskLruCache.Editor editor = snapshot.edit();
      if (editor != null) {
        try {
          entry.writeTo(editor);
          editor.commit();
          return;
        } catch (IOException entry) {}
      } else {
        return;
      } 
    } catch (IOException snapshot) {
      snapshot = null;
    } 
    abortQuietly(snapshot);
  }
  
  public Iterator<String> urls() { return new Object(this); }
  
  public int writeAbortCount() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield writeAbortCount : I
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public int writeSuccessCount() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield writeSuccessCount : I
    //   6: istore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: iload_1
    //   10: ireturn
    //   11: astore_2
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_2
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
}
