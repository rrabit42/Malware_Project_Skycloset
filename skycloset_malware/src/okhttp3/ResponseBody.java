package okhttp3;

import b.c;
import b.e;
import b.f;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import okhttp3.internal.Util;

public abstract class ResponseBody implements Closeable {
  private Reader reader;
  
  private Charset charset() {
    MediaType mediaType = contentType();
    return (mediaType != null) ? mediaType.charset(Util.UTF_8) : Util.UTF_8;
  }
  
  public static ResponseBody create(MediaType paramMediaType, long paramLong, e parame) {
    if (parame != null)
      return new Object(paramMediaType, paramLong, parame); 
    throw new NullPointerException("source == null");
  }
  
  public static ResponseBody create(MediaType paramMediaType, f paramf) {
    c c = (new c()).a(paramf);
    return create(paramMediaType, paramf.h(), c);
  }
  
  public static ResponseBody create(MediaType paramMediaType, String paramString) {
    Charset charset = Util.UTF_8;
    MediaType mediaType = paramMediaType;
    if (paramMediaType != null) {
      Charset charset1 = paramMediaType.charset();
      charset = charset1;
      mediaType = paramMediaType;
      if (charset1 == null) {
        charset = Util.UTF_8;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(paramMediaType);
        stringBuilder.append("; charset=utf-8");
        mediaType = MediaType.parse(stringBuilder.toString());
      } 
    } 
    c c = (new c()).a(paramString, charset);
    return create(mediaType, c.a(), c);
  }
  
  public static ResponseBody create(MediaType paramMediaType, byte[] paramArrayOfByte) {
    c c = (new c()).b(paramArrayOfByte);
    return create(paramMediaType, paramArrayOfByte.length, c);
  }
  
  public final InputStream byteStream() { return source().g(); }
  
  public final byte[] bytes() {
    l = contentLength();
    if (l <= 2147483647L) {
      stringBuilder1 = source();
      try {
        arrayOfByte = stringBuilder1.t();
        Util.closeQuietly(stringBuilder1);
        return arrayOfByte;
      } finally {
        Util.closeQuietly(stringBuilder1);
      } 
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Cannot buffer entire body for content length: ");
    stringBuilder.append(l);
    throw new IOException(stringBuilder.toString());
  }
  
  public final Reader charStream() {
    Reader reader1 = this.reader;
    if (reader1 != null)
      return reader1; 
    BomAwareReader bomAwareReader = new BomAwareReader(source(), charset());
    this.reader = bomAwareReader;
    return bomAwareReader;
  }
  
  public void close() { Util.closeQuietly(source()); }
  
  public abstract long contentLength();
  
  public abstract MediaType contentType();
  
  public abstract e source();
  
  public final String string() {
    e = source();
    try {
      return e.a(Util.bomAwareCharset(e, charset()));
    } finally {
      Util.closeQuietly(e);
    } 
  }
}
