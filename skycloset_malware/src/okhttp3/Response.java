package okhttp3;

import b.c;
import b.e;
import java.io.Closeable;
import java.util.Collections;
import java.util.List;
import okhttp3.internal.http.HttpHeaders;

public final class Response implements Closeable {
  final ResponseBody body;
  
  final Response cacheResponse;
  
  final int code;
  
  final Handshake handshake;
  
  final Headers headers;
  
  final String message;
  
  final Response networkResponse;
  
  final Response priorResponse;
  
  final Protocol protocol;
  
  final long receivedResponseAtMillis;
  
  final Request request;
  
  final long sentRequestAtMillis;
  
  Response(Builder paramBuilder) {
    this.request = paramBuilder.request;
    this.protocol = paramBuilder.protocol;
    this.code = paramBuilder.code;
    this.message = paramBuilder.message;
    this.handshake = paramBuilder.handshake;
    this.headers = paramBuilder.headers.build();
    this.body = paramBuilder.body;
    this.networkResponse = paramBuilder.networkResponse;
    this.cacheResponse = paramBuilder.cacheResponse;
    this.priorResponse = paramBuilder.priorResponse;
    this.sentRequestAtMillis = paramBuilder.sentRequestAtMillis;
    this.receivedResponseAtMillis = paramBuilder.receivedResponseAtMillis;
  }
  
  public ResponseBody body() { return this.body; }
  
  public CacheControl cacheControl() {
    CacheControl cacheControl1 = this.cacheControl;
    if (cacheControl1 != null)
      return cacheControl1; 
    cacheControl1 = CacheControl.parse(this.headers);
    this.cacheControl = cacheControl1;
    return cacheControl1;
  }
  
  public Response cacheResponse() { return this.cacheResponse; }
  
  public List<Challenge> challenges() {
    String str;
    int i = this.code;
    if (i == 401) {
      str = "WWW-Authenticate";
    } else {
      if (i == 407) {
        str = "Proxy-Authenticate";
        return HttpHeaders.parseChallenges(headers(), str);
      } 
      return Collections.emptyList();
    } 
    return HttpHeaders.parseChallenges(headers(), str);
  }
  
  public void close() {
    ResponseBody responseBody = this.body;
    if (responseBody != null) {
      responseBody.close();
      return;
    } 
    throw new IllegalStateException("response is not eligible for a body and must not be closed");
  }
  
  public int code() { return this.code; }
  
  public Handshake handshake() { return this.handshake; }
  
  public String header(String paramString) { return header(paramString, null); }
  
  public String header(String paramString1, String paramString2) {
    paramString1 = this.headers.get(paramString1);
    return (paramString1 != null) ? paramString1 : paramString2;
  }
  
  public List<String> headers(String paramString) { return this.headers.values(paramString); }
  
  public Headers headers() { return this.headers; }
  
  public boolean isRedirect() {
    switch (this.code) {
      default:
        return false;
      case 300:
      case 301:
      case 302:
      case 303:
      case 307:
      case 308:
        break;
    } 
    return true;
  }
  
  public boolean isSuccessful() {
    int i = this.code;
    return (i >= 200 && i < 300);
  }
  
  public String message() { return this.message; }
  
  public Response networkResponse() { return this.networkResponse; }
  
  public Builder newBuilder() { return new Builder(this); }
  
  public ResponseBody peekBody(long paramLong) {
    e e = this.body.source();
    e.b(paramLong);
    c c2 = e.b().v();
    c c1 = c2;
    if (c2.a() > paramLong) {
      c1 = new c();
      c1.write(c2, paramLong);
      c2.u();
    } 
    return ResponseBody.create(this.body.contentType(), c1.a(), c1);
  }
  
  public Response priorResponse() { return this.priorResponse; }
  
  public Protocol protocol() { return this.protocol; }
  
  public long receivedResponseAtMillis() { return this.receivedResponseAtMillis; }
  
  public Request request() { return this.request; }
  
  public long sentRequestAtMillis() { return this.sentRequestAtMillis; }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Response{protocol=");
    stringBuilder.append(this.protocol);
    stringBuilder.append(", code=");
    stringBuilder.append(this.code);
    stringBuilder.append(", message=");
    stringBuilder.append(this.message);
    stringBuilder.append(", url=");
    stringBuilder.append(this.request.url());
    stringBuilder.append('}');
    return stringBuilder.toString();
  }
}
