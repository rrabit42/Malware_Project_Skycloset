package b;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;

public class a extends u {
  private static final long IDLE_TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(60L);
  
  private static final long IDLE_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(IDLE_TIMEOUT_MILLIS);
  
  private static final int TIMEOUT_WRITE_SIZE = 65536;
  
  static a head;
  
  private boolean inQueue;
  
  private a next;
  
  private long timeoutAt;
  
  static a awaitTimeout() {
    a a1 = head.next;
    a a2 = null;
    if (a1 == null) {
      long l1 = System.nanoTime();
      a.class.wait(IDLE_TIMEOUT_MILLIS);
      a1 = a2;
      if (head.next == null) {
        a1 = a2;
        if (System.nanoTime() - l1 >= IDLE_TIMEOUT_NANOS)
          a1 = head; 
      } 
      return a1;
    } 
    long l = a1.remainingNanos(System.nanoTime());
    if (l > 0L) {
      long l1 = l / 1000000L;
      a.class.wait(l1, (int)(l - 1000000L * l1));
      return null;
    } 
    head.next = a1.next;
    a1.next = null;
    return a1;
  }
  
  private static boolean cancelScheduledTimeout(a parama) { // Byte code:
    //   0: ldc b/a
    //   2: monitorenter
    //   3: getstatic b/a.head : Lb/a;
    //   6: astore_2
    //   7: aload_2
    //   8: ifnull -> 47
    //   11: aload_2
    //   12: getfield next : Lb/a;
    //   15: aload_0
    //   16: if_acmpne -> 39
    //   19: aload_2
    //   20: aload_0
    //   21: getfield next : Lb/a;
    //   24: putfield next : Lb/a;
    //   27: aload_0
    //   28: aconst_null
    //   29: putfield next : Lb/a;
    //   32: iconst_0
    //   33: istore_1
    //   34: ldc b/a
    //   36: monitorexit
    //   37: iload_1
    //   38: ireturn
    //   39: aload_2
    //   40: getfield next : Lb/a;
    //   43: astore_2
    //   44: goto -> 7
    //   47: iconst_1
    //   48: istore_1
    //   49: goto -> 34
    //   52: astore_0
    //   53: ldc b/a
    //   55: monitorexit
    //   56: aload_0
    //   57: athrow
    // Exception table:
    //   from	to	target	type
    //   3	7	52	finally
    //   11	32	52	finally
    //   39	44	52	finally }
  
  private long remainingNanos(long paramLong) { return this.timeoutAt - paramLong; }
  
  private static void scheduleTimeout(a parama, long paramLong, boolean paramBoolean) { // Byte code:
    //   0: ldc b/a
    //   2: monitorenter
    //   3: getstatic b/a.head : Lb/a;
    //   6: ifnonnull -> 29
    //   9: new b/a
    //   12: dup
    //   13: invokespecial <init> : ()V
    //   16: putstatic b/a.head : Lb/a;
    //   19: new b/a$a
    //   22: dup
    //   23: invokespecial <init> : ()V
    //   26: invokevirtual start : ()V
    //   29: invokestatic nanoTime : ()J
    //   32: lstore #5
    //   34: lload_1
    //   35: lconst_0
    //   36: lcmp
    //   37: istore #4
    //   39: iload #4
    //   41: ifeq -> 177
    //   44: iload_3
    //   45: ifeq -> 177
    //   48: lload_1
    //   49: aload_0
    //   50: invokevirtual deadlineNanoTime : ()J
    //   53: lload #5
    //   55: lsub
    //   56: invokestatic min : (JJ)J
    //   59: lstore_1
    //   60: aload_0
    //   61: lload_1
    //   62: lload #5
    //   64: ladd
    //   65: putfield timeoutAt : J
    //   68: goto -> 83
    //   71: iload_3
    //   72: ifeq -> 163
    //   75: aload_0
    //   76: aload_0
    //   77: invokevirtual deadlineNanoTime : ()J
    //   80: putfield timeoutAt : J
    //   83: aload_0
    //   84: lload #5
    //   86: invokespecial remainingNanos : (J)J
    //   89: lstore_1
    //   90: getstatic b/a.head : Lb/a;
    //   93: astore #7
    //   95: aload #7
    //   97: getfield next : Lb/a;
    //   100: ifnull -> 131
    //   103: lload_1
    //   104: aload #7
    //   106: getfield next : Lb/a;
    //   109: lload #5
    //   111: invokespecial remainingNanos : (J)J
    //   114: lcmp
    //   115: ifge -> 121
    //   118: goto -> 131
    //   121: aload #7
    //   123: getfield next : Lb/a;
    //   126: astore #7
    //   128: goto -> 95
    //   131: aload_0
    //   132: aload #7
    //   134: getfield next : Lb/a;
    //   137: putfield next : Lb/a;
    //   140: aload #7
    //   142: aload_0
    //   143: putfield next : Lb/a;
    //   146: aload #7
    //   148: getstatic b/a.head : Lb/a;
    //   151: if_acmpne -> 159
    //   154: ldc b/a
    //   156: invokevirtual notify : ()V
    //   159: ldc b/a
    //   161: monitorexit
    //   162: return
    //   163: new java/lang/AssertionError
    //   166: dup
    //   167: invokespecial <init> : ()V
    //   170: athrow
    //   171: astore_0
    //   172: ldc b/a
    //   174: monitorexit
    //   175: aload_0
    //   176: athrow
    //   177: iload #4
    //   179: ifeq -> 71
    //   182: goto -> 60
    // Exception table:
    //   from	to	target	type
    //   3	29	171	finally
    //   29	34	171	finally
    //   48	60	171	finally
    //   60	68	171	finally
    //   75	83	171	finally
    //   83	95	171	finally
    //   95	118	171	finally
    //   121	128	171	finally
    //   131	159	171	finally
    //   163	171	171	finally }
  
  public final void enter() {
    if (!this.inQueue) {
      long l = timeoutNanos();
      boolean bool = hasDeadline();
      if (l == 0L && !bool)
        return; 
      this.inQueue = true;
      scheduleTimeout(this, l, bool);
      return;
    } 
    throw new IllegalStateException("Unbalanced enter/exit");
  }
  
  final IOException exit(IOException paramIOException) { return !exit() ? paramIOException : newTimeoutException(paramIOException); }
  
  final void exit(boolean paramBoolean) {
    if (exit()) {
      if (!paramBoolean)
        return; 
      throw newTimeoutException(null);
    } 
  }
  
  public final boolean exit() {
    if (!this.inQueue)
      return false; 
    this.inQueue = false;
    return cancelScheduledTimeout(this);
  }
  
  protected IOException newTimeoutException(IOException paramIOException) {
    InterruptedIOException interruptedIOException = new InterruptedIOException("timeout");
    if (paramIOException != null)
      interruptedIOException.initCause(paramIOException); 
    return interruptedIOException;
  }
  
  public final s sink(s params) { return new Object(this, params); }
  
  public final t source(t paramt) { return new Object(this, paramt); }
  
  protected void timedOut() {}
}
