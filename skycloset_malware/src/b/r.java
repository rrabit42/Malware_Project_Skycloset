package b;

import java.util.Arrays;

final class r extends f {
  final byte[][] f;
  
  final int[] g;
  
  r(c paramc, int paramInt) {
    super(null);
    v.a(paramc.b, 0L, paramInt);
    p p2 = paramc.a;
    int k = 0;
    int j = 0;
    int i = j;
    while (j < paramInt) {
      if (p2.c != p2.b) {
        j += p2.c - p2.b;
        i++;
        p2 = p2.f;
        continue;
      } 
      throw new AssertionError("s.limit == s.pos");
    } 
    this.f = new byte[i][];
    this.g = new int[i * 2];
    p p1 = paramc.a;
    j = 0;
    i = k;
    while (i < paramInt) {
      this.f[j] = p1.a;
      k = i + p1.c - p1.b;
      i = k;
      if (k > paramInt)
        i = paramInt; 
      int[] arrayOfInt = this.g;
      arrayOfInt[j] = i;
      arrayOfInt[this.f.length + j] = p1.b;
      p1.d = true;
      j++;
      p1 = p1.f;
    } 
  }
  
  private int b(int paramInt) {
    paramInt = Arrays.binarySearch(this.g, 0, this.f.length, paramInt + 1);
    return (paramInt >= 0) ? paramInt : paramInt;
  }
  
  private f k() { return new f(i()); }
  
  public byte a(int paramInt) {
    int i;
    v.a(this.g[this.f.length - 1], paramInt, 1L);
    int j = b(paramInt);
    if (j == 0) {
      i = 0;
    } else {
      i = this.g[j - 1];
    } 
    int[] arrayOfInt = this.g;
    byte[][] arrayOfByte = this.f;
    int k = arrayOfInt[arrayOfByte.length + j];
    return arrayOfByte[j][paramInt - i + k];
  }
  
  public f a(int paramInt1, int paramInt2) { return k().a(paramInt1, paramInt2); }
  
  public String a() { return k().a(); }
  
  void a(c paramc) {
    int k = this.f.length;
    int i = 0;
    int j;
    for (j = 0; i < k; j = m) {
      int[] arrayOfInt = this.g;
      int n = arrayOfInt[k + i];
      int m = arrayOfInt[i];
      p p = new p(this.f[i], n, n + m - j, true, false);
      if (paramc.a == null) {
        p.g = p;
        p.f = p;
        paramc.a = p;
      } else {
        paramc.a.g.a(p);
      } 
      i++;
    } 
    paramc.b += j;
  }
  
  public boolean a(int paramInt1, f paramf, int paramInt2, int paramInt3) {
    if (paramInt1 >= 0) {
      if (paramInt1 > h() - paramInt3)
        return false; 
      int j = b(paramInt1);
      int i = paramInt1;
      for (paramInt1 = j; paramInt3 > 0; paramInt1++) {
        if (paramInt1 == 0) {
          j = 0;
        } else {
          j = this.g[paramInt1 - 1];
        } 
        int k = Math.min(paramInt3, this.g[paramInt1] - j + j - i);
        int[] arrayOfInt = this.g;
        byte[][] arrayOfByte = this.f;
        int m = arrayOfInt[arrayOfByte.length + paramInt1];
        if (!paramf.a(paramInt2, arrayOfByte[paramInt1], i - j + m, k))
          return false; 
        i += k;
        paramInt2 += k;
        paramInt3 -= k;
      } 
      return true;
    } 
    return false;
  }
  
  public boolean a(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) {
    if (paramInt1 >= 0 && paramInt1 <= h() - paramInt3 && paramInt2 >= 0) {
      if (paramInt2 > paramArrayOfByte.length - paramInt3)
        return false; 
      int j = b(paramInt1);
      int i = paramInt1;
      for (paramInt1 = j; paramInt3 > 0; paramInt1++) {
        if (paramInt1 == 0) {
          j = 0;
        } else {
          j = this.g[paramInt1 - 1];
        } 
        int k = Math.min(paramInt3, this.g[paramInt1] - j + j - i);
        int[] arrayOfInt = this.g;
        byte[][] arrayOfByte = this.f;
        int m = arrayOfInt[arrayOfByte.length + paramInt1];
        if (!v.a(arrayOfByte[paramInt1], i - j + m, paramArrayOfByte, paramInt2, k))
          return false; 
        i += k;
        paramInt2 += k;
        paramInt3 -= k;
      } 
      return true;
    } 
    return false;
  }
  
  public String b() { return k().b(); }
  
  public f c() { return k().c(); }
  
  public f d() { return k().d(); }
  
  public f e() { return k().e(); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (paramObject instanceof f) {
      paramObject = (f)paramObject;
      if (paramObject.h() == h() && a(0, paramObject, 0, h()))
        return true; 
    } 
    return false;
  }
  
  public String f() { return k().f(); }
  
  public f g() { return k().g(); }
  
  public int h() { return this.g[this.f.length - 1]; }
  
  public int hashCode() {
    int i = this.d;
    if (i != 0)
      return i; 
    int m = this.f.length;
    int k = 0;
    byte b = 1;
    for (int j = 0; k < m; j = n) {
      byte[] arrayOfByte = this.f[k];
      int[] arrayOfInt = this.g;
      int i1 = arrayOfInt[m + k];
      int n = arrayOfInt[k];
      for (i = i1; i < n - j + i1; i++)
        b = b * 31 + arrayOfByte[i]; 
      k++;
    } 
    this.d = b;
    return b;
  }
  
  public byte[] i() {
    int[] arrayOfInt = this.g;
    byte[][] arrayOfByte = this.f;
    byte[] arrayOfByte1 = new byte[arrayOfInt[arrayOfByte.length - 1]];
    int k = arrayOfByte.length;
    int i = 0;
    for (int j = 0; i < k; j = m) {
      int[] arrayOfInt1 = this.g;
      int n = arrayOfInt1[k + i];
      int m = arrayOfInt1[i];
      System.arraycopy(this.f[i], n, arrayOfByte1, j, m - j);
      i++;
    } 
    return arrayOfByte1;
  }
  
  byte[] j() { return i(); }
  
  public String toString() { return k().toString(); }
}
