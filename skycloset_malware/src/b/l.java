package b;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.logging.Logger;

public final class l {
  static final Logger a = Logger.getLogger(l.class.getName());
  
  public static d a(s params) { return new n(params); }
  
  public static e a(t paramt) { return new o(paramt); }
  
  public static s a() { return new Object(); }
  
  public static s a(OutputStream paramOutputStream) { return a(paramOutputStream, new u()); }
  
  private static s a(OutputStream paramOutputStream, u paramu) {
    if (paramOutputStream != null) {
      if (paramu != null)
        return new Object(paramu, paramOutputStream); 
      throw new IllegalArgumentException("timeout == null");
    } 
    throw new IllegalArgumentException("out == null");
  }
  
  public static s a(Socket paramSocket) {
    if (paramSocket != null) {
      if (paramSocket.getOutputStream() != null) {
        a a1 = c(paramSocket);
        return a1.sink(a(paramSocket.getOutputStream(), a1));
      } 
      throw new IOException("socket's output stream == null");
    } 
    throw new IllegalArgumentException("socket == null");
  }
  
  public static t a(File paramFile) {
    if (paramFile != null)
      return a(new FileInputStream(paramFile)); 
    throw new IllegalArgumentException("file == null");
  }
  
  public static t a(InputStream paramInputStream) { return a(paramInputStream, new u()); }
  
  private static t a(InputStream paramInputStream, u paramu) {
    if (paramInputStream != null) {
      if (paramu != null)
        return new Object(paramu, paramInputStream); 
      throw new IllegalArgumentException("timeout == null");
    } 
    throw new IllegalArgumentException("in == null");
  }
  
  static boolean a(AssertionError paramAssertionError) { return (paramAssertionError.getCause() != null && paramAssertionError.getMessage() != null && paramAssertionError.getMessage().contains("getsockname failed")); }
  
  public static s b(File paramFile) {
    if (paramFile != null)
      return a(new FileOutputStream(paramFile)); 
    throw new IllegalArgumentException("file == null");
  }
  
  public static t b(Socket paramSocket) {
    if (paramSocket != null) {
      if (paramSocket.getInputStream() != null) {
        a a1 = c(paramSocket);
        return a1.source(a(paramSocket.getInputStream(), a1));
      } 
      throw new IOException("socket's input stream == null");
    } 
    throw new IllegalArgumentException("socket == null");
  }
  
  private static a c(Socket paramSocket) { return new Object(paramSocket); }
  
  public static s c(File paramFile) {
    if (paramFile != null)
      return a(new FileOutputStream(paramFile, true)); 
    throw new IllegalArgumentException("file == null");
  }
}
