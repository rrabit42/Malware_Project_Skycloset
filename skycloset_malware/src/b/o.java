package b;

import java.io.EOFException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

final class o implements e {
  public final c a = new c();
  
  public final t b;
  
  boolean c;
  
  o(t paramt) {
    if (paramt != null) {
      this.b = paramt;
      return;
    } 
    throw new NullPointerException("source == null");
  }
  
  public long a(byte paramByte) { return a(paramByte, 0L, Float.MAX_VALUE); }
  
  public long a(byte paramByte, long paramLong1, long paramLong2) {
    if (!this.c) {
      if (paramLong1 >= 0L && paramLong2 >= paramLong1) {
        while (paramLong1 < paramLong2) {
          long l = this.a.a(paramByte, paramLong1, paramLong2);
          if (l != -1L)
            return l; 
          l = this.a.b;
          if (l < paramLong2) {
            if (this.b.read(this.a, 8192L) == -1L)
              return -1L; 
            paramLong1 = Math.max(paramLong1, l);
          } 
        } 
        return -1L;
      } 
      throw new IllegalArgumentException(String.format("fromIndex=%s toIndex=%s", new Object[] { Long.valueOf(paramLong1), Long.valueOf(paramLong2) }));
    } 
    throw new IllegalStateException("closed");
  }
  
  public String a(Charset paramCharset) {
    if (paramCharset != null) {
      this.a.a(this.b);
      return this.a.a(paramCharset);
    } 
    throw new IllegalArgumentException("charset == null");
  }
  
  public void a(long paramLong) {
    if (b(paramLong))
      return; 
    throw new EOFException();
  }
  
  public void a(c paramc, long paramLong) {
    try {
      a(paramLong);
      this.a.a(paramc, paramLong);
      return;
    } catch (EOFException eOFException) {
      paramc.a(this.a);
      throw eOFException;
    } 
  }
  
  public void a(byte[] paramArrayOfByte) {
    try {
      a(paramArrayOfByte.length);
      this.a.a(paramArrayOfByte);
      return;
    } catch (EOFException eOFException) {
      int i = 0;
      while (this.a.b > 0L) {
        c c1 = this.a;
        int j = c1.a(paramArrayOfByte, i, (int)c1.b);
        if (j != -1) {
          i += j;
          continue;
        } 
        throw new AssertionError();
      } 
      throw eOFException;
    } 
  }
  
  public boolean a(long paramLong, f paramf) { return a(paramLong, paramf, 0, paramf.h()); }
  
  public boolean a(long paramLong, f paramf, int paramInt1, int paramInt2) {
    if (!this.c) {
      if (paramLong >= 0L && paramInt1 >= 0 && paramInt2 >= 0) {
        if (paramf.h() - paramInt1 < paramInt2)
          return false; 
        int i;
        for (i = 0; i < paramInt2; i++) {
          long l = i + paramLong;
          if (!b(1L + l))
            return false; 
          if (this.a.c(l) != paramf.a(paramInt1 + i))
            return false; 
        } 
        return true;
      } 
      return false;
    } 
    throw new IllegalStateException("closed");
  }
  
  public c b() { return this.a; }
  
  public boolean b(long paramLong) {
    if (paramLong >= 0L) {
      if (!this.c) {
        while (this.a.b < paramLong) {
          if (this.b.read(this.a, 8192L) == -1L)
            return false; 
        } 
        return true;
      } 
      throw new IllegalStateException("closed");
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("byteCount < 0: ");
    stringBuilder.append(paramLong);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void close() {
    if (this.c)
      return; 
    this.c = true;
    this.b.close();
    this.a.u();
  }
  
  public f d(long paramLong) {
    a(paramLong);
    return this.a.d(paramLong);
  }
  
  public String f(long paramLong) {
    if (paramLong >= 0L) {
      long l1;
      if (paramLong == Float.MAX_VALUE) {
        l1 = Float.MAX_VALUE;
      } else {
        l1 = paramLong + 1L;
      } 
      long l2 = a((byte)10, 0L, l1);
      if (l2 != -1L)
        return this.a.g(l2); 
      if (l1 < Float.MAX_VALUE && b(l1) && this.a.c(l1 - 1L) == 13 && b(1L + l1) && this.a.c(l1) == 10)
        return this.a.g(l1); 
      c c1 = new c();
      c c2 = this.a;
      c2.a(c1, 0L, Math.min(32L, c2.a()));
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("\\n not found: limit=");
      stringBuilder1.append(Math.min(this.a.a(), paramLong));
      stringBuilder1.append(" content=");
      stringBuilder1.append(c1.q().f());
      stringBuilder1.append('â€¦');
      throw new EOFException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("limit < 0: ");
    stringBuilder.append(paramLong);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public boolean f() {
    if (!this.c)
      return (this.a.f() && this.b.read(this.a, 8192L) == -1L); 
    throw new IllegalStateException("closed");
  }
  
  public InputStream g() { return new Object(this); }
  
  public byte[] h(long paramLong) {
    a(paramLong);
    return this.a.h(paramLong);
  }
  
  public byte i() {
    a(1L);
    return this.a.i();
  }
  
  public void i(long paramLong) {
    if (!this.c) {
      while (paramLong > 0L) {
        if (this.a.b != 0L || this.b.read(this.a, 8192L) != -1L) {
          long l = Math.min(paramLong, this.a.a());
          this.a.i(l);
          paramLong -= l;
          continue;
        } 
        throw new EOFException();
      } 
      return;
    } 
    throw new IllegalStateException("closed");
  }
  
  public boolean isOpen() { return this.c ^ true; }
  
  public short j() {
    a(2L);
    return this.a.j();
  }
  
  public int k() {
    a(4L);
    return this.a.k();
  }
  
  public long l() {
    a(8L);
    return this.a.l();
  }
  
  public short m() {
    a(2L);
    return this.a.m();
  }
  
  public int n() {
    a(4L);
    return this.a.n();
  }
  
  public long o() {
    a(1L);
    byte b1 = 0;
    while (true) {
      byte b2 = b1 + true;
      if (b(b2)) {
        byte b3 = this.a.c(b1);
        if ((b3 < 48 || b3 > 57) && (b1 || b3 != 45)) {
          if (b1)
            break; 
          throw new NumberFormatException(String.format("Expected leading [0-9] or '-' character but was %#x", new Object[] { Byte.valueOf(b3) }));
        } 
        b1 = b2;
        continue;
      } 
      break;
    } 
    return this.a.o();
  }
  
  public long p() {
    a(1L);
    byte b1 = 0;
    while (true) {
      byte b2 = b1 + true;
      if (b(b2)) {
        byte b3 = this.a.c(b1);
        if ((b3 < 48 || b3 > 57) && (b3 < 97 || b3 > 102) && (b3 < 65 || b3 > 70)) {
          if (b1)
            break; 
          throw new NumberFormatException(String.format("Expected leading [0-9a-fA-F] character but was %#x", new Object[] { Byte.valueOf(b3) }));
        } 
        b1 = b2;
        continue;
      } 
      break;
    } 
    return this.a.p();
  }
  
  public int read(ByteBuffer paramByteBuffer) { return (this.a.b == 0L && this.b.read(this.a, 8192L) == -1L) ? -1 : this.a.read(paramByteBuffer); }
  
  public long read(c paramc, long paramLong) {
    if (paramc != null) {
      if (paramLong >= 0L) {
        if (!this.c) {
          if (this.a.b == 0L && this.b.read(this.a, 8192L) == -1L)
            return -1L; 
          paramLong = Math.min(paramLong, this.a.b);
          return this.a.read(paramc, paramLong);
        } 
        throw new IllegalStateException("closed");
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("byteCount < 0: ");
      stringBuilder.append(paramLong);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("sink == null");
  }
  
  public String s() { return f(Float.MAX_VALUE); }
  
  public byte[] t() {
    this.a.a(this.b);
    return this.a.t();
  }
  
  public u timeout() { return this.b.timeout(); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("buffer(");
    stringBuilder.append(this.b);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
}
