package b;

import java.io.UnsupportedEncodingException;

final class b {
  private static final byte[] a = { 
      65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 
      75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
      85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
      111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 
      121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 
      56, 57, 43, 47 };
  
  private static final byte[] b = { 
      65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 
      75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
      85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 
      101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
      111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 
      121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 
      56, 57, 45, 95 };
  
  public static String a(byte[] paramArrayOfByte) { return a(paramArrayOfByte, a); }
  
  private static String a(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
    byte b3;
    byte[] arrayOfByte = new byte[(paramArrayOfByte1.length + 2) / 3 * 4];
    int i = paramArrayOfByte1.length - paramArrayOfByte1.length % 3;
    byte b1 = 0;
    byte b2 = 0;
    while (b1 < i) {
      boolean bool = b2 + true;
      arrayOfByte[b2] = paramArrayOfByte2[(paramArrayOfByte1[b1] & 0xFF) >> 2];
      b2 = bool + true;
      byte b5 = paramArrayOfByte1[b1];
      byte b4 = b1 + true;
      arrayOfByte[bool] = paramArrayOfByte2[(b5 & 0x3) << 4 | (paramArrayOfByte1[b4] & 0xFF) >> 4];
      bool = b2 + true;
      b5 = paramArrayOfByte1[b4];
      b4 = b1 + 2;
      arrayOfByte[b2] = paramArrayOfByte2[(b5 & 0xF) << 2 | (paramArrayOfByte1[b4] & 0xFF) >> 6];
      b2 = bool + true;
      arrayOfByte[bool] = paramArrayOfByte2[paramArrayOfByte1[b4] & 0x3F];
      b1 += 3;
    } 
    switch (paramArrayOfByte1.length % 3) {
      case 2:
        b1 = b2 + true;
        arrayOfByte[b2] = paramArrayOfByte2[(paramArrayOfByte1[i] & 0xFF) >> 2];
        b2 = b1 + 1;
        b3 = paramArrayOfByte1[i];
        arrayOfByte[b1] = paramArrayOfByte2[(b3 & 0x3) << 4 | (paramArrayOfByte1[++i] & 0xFF) >> 4];
        arrayOfByte[b2] = paramArrayOfByte2[(paramArrayOfByte1[i] & 0xF) << 2];
        arrayOfByte[b2 + 1] = 61;
        break;
      case 1:
        b1 = b2 + 1;
        arrayOfByte[b2] = paramArrayOfByte2[(paramArrayOfByte1[i] & 0xFF) >> 2];
        b2 = b1 + 1;
        arrayOfByte[b1] = paramArrayOfByte2[(paramArrayOfByte1[i] & 0x3) << 4];
        arrayOfByte[b2] = 61;
        arrayOfByte[b2 + 1] = 61;
        break;
    } 
    try {
      return new String(arrayOfByte, "US-ASCII");
    } catch (UnsupportedEncodingException paramArrayOfByte1) {
      throw new AssertionError(paramArrayOfByte1);
    } 
  }
  
  public static byte[] a(String paramString) {
    int k;
    for (k = paramString.length(); k > 0; k--) {
      char c = paramString.charAt(k - 1);
      if (c != '=' && c != '\n' && c != '\r' && c != ' ' && c != '\t')
        break; 
    } 
    byte[] arrayOfByte2 = new byte[(int)(k * 6L / 8L)];
    byte b2 = 0;
    int i = b2;
    int j = i;
    char c1 = j;
    byte b1 = j;
    char c2 = i;
    j = b2;
    while (true) {
      char c;
      if (j < k) {
        char c3 = paramString.charAt(j);
        if (c3 >= 'A' && c3 <= 'Z') {
          i = c3 - 'A';
        } else if (c3 >= 'a' && c3 <= 'z') {
          i = c3 - 'G';
        } else if (c3 >= '0' && c3 <= '9') {
          i = c3 + '\004';
        } else if (c3 == '+' || c3 == '-') {
          i = 62;
        } else if (c3 == '/' || c3 == '_') {
          i = 63;
        } else {
          i = c2;
          b2 = b1;
          byte b3 = c1;
          if (c3 != '\n') {
            i = c2;
            b2 = b1;
            b3 = c1;
            if (c3 != '\r') {
              i = c2;
              b2 = b1;
              b3 = c1;
              if (c3 != ' ')
                if (c3 == '\t') {
                  i = c2;
                  b2 = b1;
                  b3 = c1;
                } else {
                  return null;
                }  
            } 
          } 
          j++;
          c2 = i;
          b1 = b2;
          c1 = b3;
        } 
        b1 = b1 << 6 | (byte)i;
        i = ++c2;
        b2 = b1;
        c = c1;
        if (c2 % '\004' == '\000') {
          i = c1 + 1;
          arrayOfByte2[c1] = (byte)(b1 >> 16);
          c1 = i + '\001';
          arrayOfByte2[i] = (byte)(b1 >> 8);
          arrayOfByte2[c1] = (byte)b1;
          c = c1 + '\001';
          b2 = b1;
          i = c2;
        } 
      } else {
        break;
      } 
      j++;
      c2 = i;
      b1 = b2;
      c1 = c;
    } 
    j = c2 % '\004';
    if (j == 1)
      return null; 
    if (j == 2) {
      arrayOfByte2[c1] = (byte)(b1 << 12 >> 16);
      i = c1 + '\001';
    } else {
      i = c1;
      if (j == 3) {
        j = b1 << 6;
        k = c1 + '\001';
        arrayOfByte2[c1] = (byte)(j >> 16);
        i = k + 1;
        arrayOfByte2[k] = (byte)(j >> 8);
      } 
    } 
    if (i == arrayOfByte2.length)
      return arrayOfByte2; 
    byte[] arrayOfByte1 = new byte[i];
    System.arraycopy(arrayOfByte2, 0, arrayOfByte1, 0, i);
    return arrayOfByte1;
  }
}
