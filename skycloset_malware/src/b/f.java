package b;

import java.io.Serializable;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

public class f extends Object implements Serializable, Comparable<f> {
  static final char[] a = { 
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
      'a', 'b', 'c', 'd', 'e', 'f' };
  
  public static final f b = a(new byte[0]);
  
  final byte[] c;
  
  int d;
  
  String e;
  
  f(byte[] paramArrayOfByte) { this.c = paramArrayOfByte; }
  
  private static int a(char paramChar) {
    if (paramChar >= '0' && paramChar <= '9')
      return paramChar - '0'; 
    char c1 = 'a';
    if (paramChar < 'a' || paramChar > 'f') {
      c1 = 'A';
      if (paramChar < 'A' || paramChar > 'F') {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unexpected hex digit: ");
        stringBuilder.append(paramChar);
        throw new IllegalArgumentException(stringBuilder.toString());
      } 
    } 
    return paramChar - c1 + '\n';
  }
  
  static int a(String paramString, int paramInt) {
    int j = paramString.length();
    int i = 0;
    byte b1 = 0;
    while (i < j) {
      if (b1 == paramInt)
        return i; 
      int k = paramString.codePointAt(i);
      if ((Character.isISOControl(k) && k != 10 && k != 13) || k == 65533)
        return -1; 
      b1++;
      i += Character.charCount(k);
    } 
    return paramString.length();
  }
  
  public static f a(String paramString) {
    if (paramString != null) {
      f f1 = new f(paramString.getBytes(v.a));
      f1.e = paramString;
      return f1;
    } 
    throw new IllegalArgumentException("s == null");
  }
  
  public static f a(String paramString, Charset paramCharset) {
    if (paramString != null) {
      if (paramCharset != null)
        return new f(paramString.getBytes(paramCharset)); 
      throw new IllegalArgumentException("charset == null");
    } 
    throw new IllegalArgumentException("s == null");
  }
  
  public static f a(byte... paramVarArgs) {
    if (paramVarArgs != null)
      return new f((byte[])paramVarArgs.clone()); 
    throw new IllegalArgumentException("data == null");
  }
  
  public static f b(String paramString) {
    if (paramString != null) {
      byte[] arrayOfByte = b.a(paramString);
      return (arrayOfByte != null) ? new f(arrayOfByte) : null;
    } 
    throw new IllegalArgumentException("base64 == null");
  }
  
  public static f c(String paramString) {
    if (paramString != null) {
      if (paramString.length() % 2 == 0) {
        byte[] arrayOfByte = new byte[paramString.length() / 2];
        for (byte b1 = 0; b1 < arrayOfByte.length; b1++) {
          byte b2 = b1 * 2;
          arrayOfByte[b1] = (byte)((a(paramString.charAt(b2)) << 4) + a(paramString.charAt(b2 + 1)));
        } 
        return a(arrayOfByte);
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Unexpected hex string: ");
      stringBuilder.append(paramString);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("hex == null");
  }
  
  private f d(String paramString) {
    try {
      return a(MessageDigest.getInstance(paramString).digest(this.c));
    } catch (NoSuchAlgorithmException paramString) {
      throw new AssertionError(paramString);
    } 
  }
  
  public byte a(int paramInt) { return this.c[paramInt]; }
  
  public f a(int paramInt1, int paramInt2) {
    if (paramInt1 >= 0) {
      byte[] arrayOfByte = this.c;
      if (paramInt2 <= arrayOfByte.length) {
        int i = paramInt2 - paramInt1;
        if (i >= 0) {
          if (paramInt1 == 0 && paramInt2 == arrayOfByte.length)
            return this; 
          arrayOfByte = new byte[i];
          System.arraycopy(this.c, paramInt1, arrayOfByte, 0, i);
          return new f(arrayOfByte);
        } 
        throw new IllegalArgumentException("endIndex < beginIndex");
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("endIndex > length(");
      stringBuilder.append(this.c.length);
      stringBuilder.append(")");
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("beginIndex < 0");
  }
  
  public String a() {
    String str = this.e;
    if (str != null)
      return str; 
    str = new String(this.c, v.a);
    this.e = str;
    return str;
  }
  
  void a(c paramc) {
    byte[] arrayOfByte = this.c;
    paramc.b(arrayOfByte, 0, arrayOfByte.length);
  }
  
  public boolean a(int paramInt1, f paramf, int paramInt2, int paramInt3) { return paramf.a(paramInt2, this.c, paramInt1, paramInt3); }
  
  public boolean a(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) {
    if (paramInt1 >= 0) {
      byte[] arrayOfByte = this.c;
      if (paramInt1 <= arrayOfByte.length - paramInt3 && paramInt2 >= 0 && paramInt2 <= paramArrayOfByte.length - paramInt3 && v.a(arrayOfByte, paramInt1, paramArrayOfByte, paramInt2, paramInt3))
        return true; 
    } 
    return false;
  }
  
  public final boolean a(f paramf) { return a(0, paramf, 0, paramf.h()); }
  
  public int b(f paramf) {
    int i = h();
    int j = paramf.h();
    int k = Math.min(i, j);
    byte b1 = 0;
    while (b1 < k) {
      byte b2 = a(b1) & 0xFF;
      byte b3 = paramf.a(b1) & 0xFF;
      if (b2 == b3) {
        b1++;
        continue;
      } 
      return (b2 < b3) ? -1 : 1;
    } 
    return (i == j) ? 0 : ((i < j) ? -1 : 1);
  }
  
  public String b() { return b.a(this.c); }
  
  public f c() { return d("MD5"); }
  
  public f d() { return d("SHA-1"); }
  
  public f e() { return d("SHA-256"); }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (paramObject instanceof f) {
      paramObject = (f)paramObject;
      int i = paramObject.h();
      byte[] arrayOfByte = this.c;
      if (i == arrayOfByte.length && paramObject.a(0, arrayOfByte, 0, arrayOfByte.length))
        return true; 
    } 
    return false;
  }
  
  public String f() {
    byte[] arrayOfByte = this.c;
    char[] arrayOfChar = new char[arrayOfByte.length * 2];
    int i = arrayOfByte.length;
    byte b1 = 0;
    boolean bool = false;
    while (b1 < i) {
      byte b2 = arrayOfByte[b1];
      boolean bool1 = bool + true;
      char[] arrayOfChar1 = a;
      arrayOfChar[bool] = arrayOfChar1[b2 >> 4 & 0xF];
      bool = bool1 + true;
      arrayOfChar[bool1] = arrayOfChar1[b2 & 0xF];
      b1++;
    } 
    return new String(arrayOfChar);
  }
  
  public f g() {
    byte b1 = 0;
    while (true) {
      byte[] arrayOfByte = this.c;
      if (b1 < arrayOfByte.length) {
        byte b3 = arrayOfByte[b1];
        if (b3 < 65 || b3 > 90) {
          b1++;
          continue;
        } 
        arrayOfByte = (byte[])arrayOfByte.clone();
        byte b2 = b1 + 1;
        arrayOfByte[b1] = (byte)(b3 + 32);
        for (b1 = b2; b1 < arrayOfByte.length; b1++) {
          b2 = arrayOfByte[b1];
          if (b2 >= 65 && b2 <= 90)
            arrayOfByte[b1] = (byte)(b2 + 32); 
        } 
        return new f(arrayOfByte);
      } 
      break;
    } 
    return this;
  }
  
  public int h() { return this.c.length; }
  
  public int hashCode() {
    int i = this.d;
    if (i != 0)
      return i; 
    i = Arrays.hashCode(this.c);
    this.d = i;
    return i;
  }
  
  public byte[] i() { return (byte[])this.c.clone(); }
  
  byte[] j() { return this.c; }
  
  public String toString() {
    if (this.c.length == 0)
      return "[size=0]"; 
    StringBuilder stringBuilder = a();
    int i = a(stringBuilder, 64);
    if (i == -1) {
      String str1;
      if (this.c.length <= 64) {
        stringBuilder = new StringBuilder();
        stringBuilder.append("[hex=");
        stringBuilder.append(f());
        str1 = "]";
      } else {
        stringBuilder = new StringBuilder();
        stringBuilder.append("[size=");
        stringBuilder.append(this.c.length);
        stringBuilder.append(" hex=");
        stringBuilder.append(a(0, 64).f());
        str1 = "…]";
      } 
      stringBuilder.append(str1);
      return stringBuilder.toString();
    } 
    String str = stringBuilder.substring(0, i).replace("\\", "\\\\").replace("\n", "\\n").replace("\r", "\\r");
    if (i < stringBuilder.length()) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("[size=");
      stringBuilder.append(this.c.length);
      stringBuilder.append(" text=");
      stringBuilder.append(str);
      str = "…]";
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("[text=");
      stringBuilder.append(str);
      str = "]";
    } 
    stringBuilder.append(str);
    return stringBuilder.toString();
  }
}
