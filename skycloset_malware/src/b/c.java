package b;

import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ByteChannel;
import java.nio.charset.Charset;

public final class c implements d, e, Cloneable, ByteChannel {
  private static final byte[] c = { 
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 
      97, 98, 99, 100, 101, 102 };
  
  p a;
  
  long b;
  
  public int a(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    v.a(paramArrayOfByte.length, paramInt1, paramInt2);
    p p1 = this.a;
    if (p1 == null)
      return -1; 
    paramInt2 = Math.min(paramInt2, p1.c - p1.b);
    System.arraycopy(p1.a, p1.b, paramArrayOfByte, paramInt1, paramInt2);
    p1.b += paramInt2;
    this.b -= paramInt2;
    if (p1.b == p1.c) {
      this.a = p1.c();
      q.a(p1);
    } 
    return paramInt2;
  }
  
  public final long a() { return this.b; }
  
  public long a(byte paramByte) { return a(paramByte, 0L, Float.MAX_VALUE); }
  
  public long a(byte paramByte, long paramLong1, long paramLong2) {
    long l = 0L;
    if (paramLong1 >= 0L && paramLong2 >= paramLong1) {
      long l1 = this.b;
      if (paramLong2 <= l1)
        l1 = paramLong2; 
      if (paramLong1 == l1)
        return -1L; 
      p p2 = this.a;
      if (p2 == null)
        return -1L; 
      long l2 = this.b;
      paramLong2 = l;
      p p1 = p2;
      if (l2 - paramLong1 < paramLong1) {
        l = l2;
        p1 = p2;
        while (true) {
          p2 = p1;
          paramLong2 = l;
          if (l > paramLong1) {
            p1 = p1.g;
            l -= (p1.c - p1.b);
            continue;
          } 
          break;
        } 
      } else {
        while (true) {
          l = (p1.c - p1.b) + paramLong2;
          p2 = p1;
          if (l < paramLong1) {
            p1 = p1.f;
            paramLong2 = l;
            continue;
          } 
          break;
        } 
      } 
      while (paramLong2 < l1) {
        byte[] arrayOfByte = p2.a;
        int j = (int)Math.min(p2.c, p2.b + l1 - paramLong2);
        int i;
        for (i = (int)(p2.b + paramLong1 - paramLong2); i < j; i++) {
          if (arrayOfByte[i] == paramByte)
            return (i - p2.b) + paramLong2; 
        } 
        paramLong1 = (p2.c - p2.b) + paramLong2;
        p2 = p2.f;
        paramLong2 = paramLong1;
      } 
      return -1L;
    } 
    throw new IllegalArgumentException(String.format("size=%s fromIndex=%s toIndex=%s", new Object[] { Long.valueOf(this.b), Long.valueOf(paramLong1), Long.valueOf(paramLong2) }));
  }
  
  public long a(f paramf, long paramLong) {
    long l = 0L;
    if (paramLong >= 0L) {
      p p1;
      p p2 = this.a;
      if (p2 == null)
        return -1L; 
      long l1 = this.b;
      p p3 = p2;
      if (l1 - paramLong < paramLong) {
        p3 = p2;
        while (true) {
          p2 = p3;
          l = l1;
          if (l1 > paramLong) {
            p3 = p3.g;
            l1 -= (p3.c - p3.b);
            continue;
          } 
          break;
        } 
      } else {
        while (true) {
          l1 = (p3.c - p3.b) + l;
          p2 = p3;
          if (l1 < paramLong) {
            p3 = p3.f;
            l = l1;
            continue;
          } 
          break;
        } 
      } 
      if (paramf.h() == 2) {
        byte b1 = paramf.a(0);
        byte b2 = paramf.a(1);
        while (l < this.b) {
          byte[] arrayOfByte = p2.a;
          int i = (int)(p2.b + paramLong - l);
          int j = p2.c;
          while (i < j) {
            byte b3 = arrayOfByte[i];
            p1 = p2;
            paramLong = l;
            int k = i;
            if (b3 != b1)
              if (b3 == b2) {
                p1 = p2;
                paramLong = l;
                k = i;
              } else {
                i++;
                continue;
              }  
            return (k - p1.b) + paramLong;
          } 
          paramLong = (p2.c - p2.b) + l;
          p2 = p2.f;
          l = paramLong;
        } 
      } else {
        byte[] arrayOfByte = p1.j();
        while (l < this.b) {
          byte[] arrayOfByte1 = p2.a;
          int i = (int)(p2.b + paramLong - l);
          int j = p2.c;
          while (i < j) {
            byte b1 = arrayOfByte1[i];
            int m = arrayOfByte.length;
            int k;
            for (k = 0; k < m; k++) {
              if (b1 == arrayOfByte[k]) {
                p p4 = p2;
                paramLong = l;
                k = i;
                return (k - p4.b) + paramLong;
              } 
            } 
            i++;
          } 
          paramLong = (p2.c - p2.b) + l;
          p2 = p2.f;
          l = paramLong;
        } 
      } 
      return -1L;
    } 
    throw new IllegalArgumentException("fromIndex < 0");
  }
  
  public long a(t paramt) {
    if (paramt != null) {
      long l = 0L;
      while (true) {
        long l1 = paramt.read(this, 8192L);
        if (l1 != -1L) {
          l += l1;
          continue;
        } 
        break;
      } 
      return l;
    } 
    throw new IllegalArgumentException("source == null");
  }
  
  public final a a(a parama) {
    if (parama.a == null) {
      parama.a = this;
      parama.b = true;
      return parama;
    } 
    throw new IllegalStateException("already attached to a buffer");
  }
  
  public c a(int paramInt) {
    if (paramInt >= 128) {
      int i;
      if (paramInt < 2048) {
        i = paramInt >> 6 | 0xC0;
      } else {
        if (paramInt < 65536) {
          if (paramInt >= 55296 && paramInt <= 57343) {
            b(63);
            return this;
          } 
          i = paramInt >> 12 | 0xE0;
        } else if (paramInt <= 1114111) {
          b(paramInt >> 18 | 0xF0);
          i = paramInt >> 12 & 0x3F | 0x80;
        } else {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Unexpected code point: ");
          stringBuilder.append(Integer.toHexString(paramInt));
          throw new IllegalArgumentException(stringBuilder.toString());
        } 
        b(i);
        i = paramInt >> 6 & 0x3F | 0x80;
      } 
      b(i);
      paramInt = paramInt & 0x3F | 0x80;
    } 
    b(paramInt);
    return this;
  }
  
  public final c a(c paramc, long paramLong1, long paramLong2) {
    if (paramc != null) {
      p p2;
      long l2;
      long l1;
      v.a(this.b, paramLong1, paramLong2);
      if (paramLong2 == 0L)
        return this; 
      paramc.b += paramLong2;
      p p1 = this.a;
      while (true) {
        p2 = p1;
        l1 = paramLong1;
        l2 = paramLong2;
        if (paramLong1 >= (p1.c - p1.b)) {
          paramLong1 -= (p1.c - p1.b);
          p1 = p1.f;
          continue;
        } 
        break;
      } 
      while (l2 > 0L) {
        p1 = p2.a();
        p1.b = (int)(p1.b + l1);
        p1.c = Math.min(p1.b + (int)l2, p1.c);
        p p3 = paramc.a;
        if (p3 == null) {
          p1.g = p1;
          p1.f = p1;
          paramc.a = p1;
        } else {
          p3.g.a(p1);
        } 
        l2 -= (p1.c - p1.b);
        p2 = p2.f;
        l1 = 0L;
      } 
      return this;
    } 
    throw new IllegalArgumentException("out == null");
  }
  
  public c a(f paramf) {
    if (paramf != null) {
      paramf.a(this);
      return this;
    } 
    throw new IllegalArgumentException("byteString == null");
  }
  
  public c a(String paramString) { return a(paramString, 0, paramString.length()); }
  
  public c a(String paramString, int paramInt1, int paramInt2) {
    if (paramString != null) {
      if (paramInt1 >= 0) {
        if (paramInt2 >= paramInt1) {
          if (paramInt2 <= paramString.length()) {
            while (paramInt1 < paramInt2) {
              char c1;
              char c2 = paramString.charAt(paramInt1);
              if (c2 < '') {
                p p1 = e(1);
                byte[] arrayOfByte = p1.a;
                int i = p1.c - paramInt1;
                int j = Math.min(paramInt2, 8192 - i);
                c1 = paramInt1 + 1;
                arrayOfByte[paramInt1 + i] = (byte)c2;
                for (paramInt1 = c1; paramInt1 < j; paramInt1++) {
                  c1 = paramString.charAt(paramInt1);
                  if (c1 >= '')
                    break; 
                  arrayOfByte[paramInt1 + i] = (byte)c1;
                } 
                c1 = i + paramInt1 - p1.c;
                p1.c += c1;
                this.b += c1;
                continue;
              } 
              if (c2 < 'ࠀ') {
                c1 = c2 >> '\006' | 0xC0;
              } else if (c2 < '?' || c2 > '?') {
                b(c2 >> '\f' | 0xE0);
                c1 = c2 >> '\006' & 0x3F | 0x80;
              } else {
                int i = paramInt1 + 1;
                if (i < paramInt2) {
                  c1 = paramString.charAt(i);
                } else {
                  c1 = Character.MIN_VALUE;
                } 
                if (c2 > '?' || c1 < '?' || c1 > '?') {
                  b(63);
                  paramInt1 = i;
                  continue;
                } 
                c1 = ((c2 & 0xFFFF27FF) << '\n' | 0xFFFF23FF & c1) + 65536;
                b(c1 >> '\022' | 0xF0);
                b(c1 >> '\f' & 0x3F | 0x80);
                b(c1 >> '\006' & 0x3F | 0x80);
                b(c1 & 0x3F | 0x80);
                paramInt1 += 2;
                continue;
              } 
              b(c1);
              b(c2 & 0x3F | 0x80);
              paramInt1++;
            } 
            return this;
          } 
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.append("endIndex > string.length: ");
          stringBuilder2.append(paramInt2);
          stringBuilder2.append(" > ");
          stringBuilder2.append(paramString.length());
          throw new IllegalArgumentException(stringBuilder2.toString());
        } 
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append("endIndex < beginIndex: ");
        stringBuilder1.append(paramInt2);
        stringBuilder1.append(" < ");
        stringBuilder1.append(paramInt1);
        throw new IllegalArgumentException(stringBuilder1.toString());
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("beginIndex < 0: ");
      stringBuilder.append(paramInt1);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("string == null");
  }
  
  public c a(String paramString, int paramInt1, int paramInt2, Charset paramCharset) {
    if (paramString != null) {
      if (paramInt1 >= 0) {
        if (paramInt2 >= paramInt1) {
          byte[] arrayOfByte;
          if (paramInt2 <= paramString.length()) {
            if (paramCharset != null) {
              if (paramCharset.equals(v.a))
                return a(paramString, paramInt1, paramInt2); 
              arrayOfByte = paramString.substring(paramInt1, paramInt2).getBytes(paramCharset);
              return b(arrayOfByte, 0, arrayOfByte.length);
            } 
            throw new IllegalArgumentException("charset == null");
          } 
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.append("endIndex > string.length: ");
          stringBuilder2.append(paramInt2);
          stringBuilder2.append(" > ");
          stringBuilder2.append(arrayOfByte.length());
          throw new IllegalArgumentException(stringBuilder2.toString());
        } 
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append("endIndex < beginIndex: ");
        stringBuilder1.append(paramInt2);
        stringBuilder1.append(" < ");
        stringBuilder1.append(paramInt1);
        throw new IllegalArgumentException(stringBuilder1.toString());
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("beginIndex < 0: ");
      stringBuilder.append(paramInt1);
      throw new IllegalAccessError(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("string == null");
  }
  
  public c a(String paramString, Charset paramCharset) { return a(paramString, 0, paramString.length(), paramCharset); }
  
  public String a(long paramLong, Charset paramCharset) {
    v.a(this.b, 0L, paramLong);
    if (paramCharset != null) {
      if (paramLong <= 2147483647L) {
        if (paramLong == 0L)
          return ""; 
        p p1 = this.a;
        if (p1.b + paramLong > p1.c)
          return new String(h(paramLong), paramCharset); 
        String str = new String(p1.a, p1.b, (int)paramLong, paramCharset);
        p1.b = (int)(p1.b + paramLong);
        this.b -= paramLong;
        if (p1.b == p1.c) {
          this.a = p1.c();
          q.a(p1);
        } 
        return str;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("byteCount > Integer.MAX_VALUE: ");
      stringBuilder.append(paramLong);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("charset == null");
  }
  
  public String a(Charset paramCharset) {
    try {
      return a(this.b, paramCharset);
    } catch (EOFException paramCharset) {
      throw new AssertionError(paramCharset);
    } 
  }
  
  public void a(long paramLong) {
    if (this.b >= paramLong)
      return; 
    throw new EOFException();
  }
  
  public void a(c paramc, long paramLong) {
    long l = this.b;
    if (l >= paramLong) {
      paramc.write(this, paramLong);
      return;
    } 
    paramc.write(this, l);
    throw new EOFException();
  }
  
  public void a(byte[] paramArrayOfByte) {
    int i = 0;
    while (i < paramArrayOfByte.length) {
      int j = a(paramArrayOfByte, i, paramArrayOfByte.length - i);
      if (j != -1) {
        i += j;
        continue;
      } 
      throw new EOFException();
    } 
  }
  
  public boolean a(long paramLong, f paramf) { return a(paramLong, paramf, 0, paramf.h()); }
  
  public boolean a(long paramLong, f paramf, int paramInt1, int paramInt2) {
    if (paramLong >= 0L && paramInt1 >= 0 && paramInt2 >= 0 && this.b - paramLong >= paramInt2) {
      if (paramf.h() - paramInt1 < paramInt2)
        return false; 
      int i;
      for (i = 0; i < paramInt2; i++) {
        if (c(i + paramLong) != paramf.a(paramInt1 + i))
          return false; 
      } 
      return true;
    } 
    return false;
  }
  
  public long b(f paramf) { return a(paramf, 0L); }
  
  public c b() { return this; }
  
  public c b(int paramInt) {
    p p1 = e(1);
    byte[] arrayOfByte = p1.a;
    int i = p1.c;
    p1.c = i + 1;
    arrayOfByte[i] = (byte)paramInt;
    this.b++;
    return this;
  }
  
  public c b(byte[] paramArrayOfByte) {
    if (paramArrayOfByte != null)
      return b(paramArrayOfByte, 0, paramArrayOfByte.length); 
    throw new IllegalArgumentException("source == null");
  }
  
  public c b(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (paramArrayOfByte != null) {
      long l1 = paramArrayOfByte.length;
      long l2 = paramInt1;
      long l3 = paramInt2;
      v.a(l1, l2, l3);
      paramInt2 += paramInt1;
      while (paramInt1 < paramInt2) {
        p p1 = e(1);
        int i = Math.min(paramInt2 - paramInt1, 8192 - p1.c);
        System.arraycopy(paramArrayOfByte, paramInt1, p1.a, p1.c, i);
        paramInt1 += i;
        p1.c += i;
      } 
      this.b += l3;
      return this;
    } 
    throw new IllegalArgumentException("source == null");
  }
  
  public boolean b(long paramLong) { return (this.b >= paramLong); }
  
  public final byte c(long paramLong) {
    p p2;
    v.a(this.b, paramLong, 1L);
    long l = this.b;
    if (l - paramLong > paramLong)
      for (p p3 = this.a;; p3 = p3.f) {
        l = (p3.c - p3.b);
        if (paramLong < l)
          return p3.a[p3.b + (int)paramLong]; 
        paramLong -= l;
      }  
    paramLong -= l;
    p p1 = this.a;
    do {
      p2 = p1.g;
      l = paramLong + (p2.c - p2.b);
      p1 = p2;
      paramLong = l;
    } while (l < 0L);
    return p2.a[p2.b + (int)l];
  }
  
  public c c(int paramInt) {
    p p1 = e(2);
    byte[] arrayOfByte = p1.a;
    int i = p1.c;
    int j = i + 1;
    arrayOfByte[i] = (byte)(paramInt >>> 8 & 0xFF);
    arrayOfByte[j] = (byte)(paramInt & 0xFF);
    p1.c = j + 1;
    this.b += 2L;
    return this;
  }
  
  public OutputStream c() { return new Object(this); }
  
  public void close() {}
  
  public c d() { return this; }
  
  public c d(int paramInt) {
    p p1 = e(4);
    byte[] arrayOfByte = p1.a;
    int j = p1.c;
    int i = j + 1;
    arrayOfByte[j] = (byte)(paramInt >>> 24 & 0xFF);
    j = i + 1;
    arrayOfByte[i] = (byte)(paramInt >>> 16 & 0xFF);
    i = j + 1;
    arrayOfByte[j] = (byte)(paramInt >>> 8 & 0xFF);
    arrayOfByte[i] = (byte)(paramInt & 0xFF);
    p1.c = i + 1;
    this.b += 4L;
    return this;
  }
  
  public f d(long paramLong) { return new f(h(paramLong)); }
  
  public d e() { return this; }
  
  p e(int paramInt) {
    p p1;
    if (paramInt >= 1 && paramInt <= 8192) {
      p p2 = this.a;
      if (p2 == null) {
        this.a = q.a();
        p2 = this.a;
        p2.g = p2;
        p2.f = p2;
        return p2;
      } 
      p1 = p2.g;
      if (p1.c + paramInt <= 8192) {
        p2 = p1;
        return !p1.e ? p1.a(q.a()) : p2;
      } 
    } else {
      throw new IllegalArgumentException();
    } 
    return p1.a(q.a());
  }
  
  public String e(long paramLong) { return a(paramLong, v.a); }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof c))
      return false; 
    paramObject = (c)paramObject;
    long l2 = this.b;
    if (l2 != paramObject.b)
      return false; 
    long l1 = 0L;
    if (l2 == 0L)
      return true; 
    p p1 = this.a;
    paramObject = paramObject.a;
    int j = p1.b;
    int i = paramObject.b;
    while (l1 < this.b) {
      l2 = Math.min(p1.c - j, paramObject.c - i);
      byte b1 = 0;
      while (b1 < l2) {
        if (p1.a[j] != paramObject.a[i])
          return false; 
        b1++;
        j++;
        i++;
      } 
      if (j == p1.c) {
        p1 = p1.f;
        j = p1.b;
      } 
      if (i == paramObject.c) {
        paramObject = paramObject.f;
        i = paramObject.b;
      } 
      l1 += l2;
    } 
    return true;
  }
  
  public final f f(int paramInt) { return (paramInt == 0) ? f.b : new r(this, paramInt); }
  
  public String f(long paramLong) {
    if (paramLong >= 0L) {
      long l1 = Float.MAX_VALUE;
      if (paramLong != Float.MAX_VALUE)
        l1 = paramLong + 1L; 
      long l2 = a((byte)10, 0L, l1);
      if (l2 != -1L)
        return g(l2); 
      if (l1 < a() && c(l1 - 1L) == 13 && c(l1) == 10)
        return g(l1); 
      c c1 = new c();
      a(c1, 0L, Math.min(32L, a()));
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("\\n not found: limit=");
      stringBuilder1.append(Math.min(a(), paramLong));
      stringBuilder1.append(" content=");
      stringBuilder1.append(c1.q().f());
      stringBuilder1.append('…');
      throw new EOFException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("limit < 0: ");
    stringBuilder.append(paramLong);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public boolean f() { return (this.b == 0L); }
  
  public void flush() {}
  
  public InputStream g() { return new Object(this); }
  
  String g(long paramLong) {
    if (paramLong > 0L) {
      long l = paramLong - 1L;
      if (c(l) == 13) {
        String str1 = e(l);
        i(2L);
        return str1;
      } 
    } 
    String str = e(paramLong);
    i(1L);
    return str;
  }
  
  public final long h() {
    long l2 = this.b;
    if (l2 == 0L)
      return 0L; 
    p p1 = this.a.g;
    long l1 = l2;
    if (p1.c < 8192) {
      l1 = l2;
      if (p1.e)
        l1 = l2 - (p1.c - p1.b); 
    } 
    return l1;
  }
  
  public byte[] h(long paramLong) {
    v.a(this.b, 0L, paramLong);
    if (paramLong <= 2147483647L) {
      byte[] arrayOfByte = new byte[(int)paramLong];
      a(arrayOfByte);
      return arrayOfByte;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("byteCount > Integer.MAX_VALUE: ");
    stringBuilder.append(paramLong);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public int hashCode() {
    p p2;
    byte b2;
    p p1 = this.a;
    if (p1 == null)
      return 0; 
    byte b1 = 1;
    do {
      int i = p1.b;
      int j = p1.c;
      b2 = b1;
      while (i < j) {
        b2 = b2 * 31 + p1.a[i];
        i++;
      } 
      p2 = p1.f;
      p1 = p2;
      b1 = b2;
    } while (p2 != this.a);
    return b2;
  }
  
  public byte i() {
    if (this.b != 0L) {
      p p1 = this.a;
      int i = p1.b;
      int j = p1.c;
      byte[] arrayOfByte = p1.a;
      int k = i + 1;
      byte b1 = arrayOfByte[i];
      this.b--;
      if (k == j) {
        this.a = p1.c();
        q.a(p1);
        return b1;
      } 
      p1.b = k;
      return b1;
    } 
    throw new IllegalStateException("size == 0");
  }
  
  public void i(long paramLong) {
    while (paramLong > 0L) {
      p p1 = this.a;
      if (p1 != null) {
        int i = (int)Math.min(paramLong, (p1.c - this.a.b));
        long l1 = this.b;
        long l2 = i;
        this.b = l1 - l2;
        l1 = paramLong - l2;
        p1 = this.a;
        p1.b += i;
        paramLong = l1;
        if (this.a.b == this.a.c) {
          p1 = this.a;
          this.a = p1.c();
          q.a(p1);
          paramLong = l1;
        } 
        continue;
      } 
      throw new EOFException();
    } 
  }
  
  public boolean isOpen() { return true; }
  
  public c j(long paramLong) {
    p p1 = e(8);
    byte[] arrayOfByte = p1.a;
    int j = p1.c;
    int i = j + 1;
    arrayOfByte[j] = (byte)(int)(paramLong >>> 56 & 0xFFL);
    j = i + 1;
    arrayOfByte[i] = (byte)(int)(paramLong >>> 48 & 0xFFL);
    i = j + 1;
    arrayOfByte[j] = (byte)(int)(paramLong >>> 40 & 0xFFL);
    j = i + 1;
    arrayOfByte[i] = (byte)(int)(paramLong >>> 32 & 0xFFL);
    i = j + 1;
    arrayOfByte[j] = (byte)(int)(paramLong >>> 24 & 0xFFL);
    j = i + 1;
    arrayOfByte[i] = (byte)(int)(paramLong >>> 16 & 0xFFL);
    i = j + 1;
    arrayOfByte[j] = (byte)(int)(paramLong >>> 8 & 0xFFL);
    arrayOfByte[i] = (byte)(int)(paramLong & 0xFFL);
    p1.c = i + 1;
    this.b += 8L;
    return this;
  }
  
  public short j() {
    if (this.b >= 2L) {
      p p1 = this.a;
      int k = p1.b;
      int i = p1.c;
      if (i - k < 2)
        return (short)((i() & 0xFF) << 8 | i() & 0xFF); 
      byte[] arrayOfByte = p1.a;
      int j = k + 1;
      k = arrayOfByte[k];
      int m = j + 1;
      j = arrayOfByte[j];
      this.b -= 2L;
      if (m == i) {
        this.a = p1.c();
        q.a(p1);
      } else {
        p1.b = m;
      } 
      return (short)((k & 0xFF) << 8 | j & 0xFF);
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("size < 2: ");
    stringBuilder.append(this.b);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public int k() {
    if (this.b >= 4L) {
      p p1 = this.a;
      int j = p1.b;
      int i = p1.c;
      if (i - j < 4)
        return (i() & 0xFF) << 24 | (i() & 0xFF) << 16 | (i() & 0xFF) << 8 | i() & 0xFF; 
      byte[] arrayOfByte = p1.a;
      int k = j + 1;
      j = arrayOfByte[j];
      int n = k + 1;
      k = arrayOfByte[k];
      int m = n + 1;
      byte b1 = arrayOfByte[n];
      n = m + 1;
      j = (j & 0xFF) << 24 | (k & 0xFF) << 16 | (b1 & 0xFF) << 8 | arrayOfByte[m] & 0xFF;
      this.b -= 4L;
      if (n == i) {
        this.a = p1.c();
        q.a(p1);
        return j;
      } 
      p1.b = n;
      return j;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("size < 4: ");
    stringBuilder.append(this.b);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public c k(long paramLong) {
    int j = paramLong cmp 0L;
    if (j == 0)
      return b(48); 
    boolean bool = false;
    int i = 1;
    long l = paramLong;
    if (j < 0) {
      l = -paramLong;
      if (l < 0L)
        return a("-9223372036854775808"); 
      bool = true;
    } 
    if (l < 100000000L) {
      if (l < 10000L) {
        if (l < 100L) {
          if (l >= 10L)
            i = 2; 
        } else if (l < 1000L) {
          i = 3;
        } else {
          i = 4;
        } 
      } else if (l < 1000000L) {
        if (l < 100000L) {
          i = 5;
        } else {
          i = 6;
        } 
      } else if (l < 10000000L) {
        i = 7;
      } else {
        i = 8;
      } 
    } else if (l < 1000000000000L) {
      if (l < 10000000000L) {
        if (l < 1000000000L) {
          i = 9;
        } else {
          i = 10;
        } 
      } else if (l < 100000000000L) {
        i = 11;
      } else {
        i = 12;
      } 
    } else if (l < 1000000000000000L) {
      if (l < 10000000000000L) {
        i = 13;
      } else if (l < 100000000000000L) {
        i = 14;
      } else {
        i = 15;
      } 
    } else if (l < 100000000000000000L) {
      if (l < 10000000000000000L) {
        i = 16;
      } else {
        i = 17;
      } 
    } else if (l < 1000000000000000000L) {
      i = 18;
    } else {
      i = 19;
    } 
    j = i;
    if (bool)
      j = i + 1; 
    p p1 = e(j);
    byte[] arrayOfByte = p1.a;
    i = p1.c + j;
    while (l != 0L) {
      int k = (int)(l % 10L);
      arrayOfByte[--i] = c[k];
      l /= 10L;
    } 
    if (bool)
      arrayOfByte[i - 1] = 45; 
    p1.c += j;
    this.b += j;
    return this;
  }
  
  public long l() {
    if (this.b >= 8L) {
      p p1 = this.a;
      int k = p1.b;
      int i = p1.c;
      if (i - k < 8)
        return (k() & 0xFFFFFFFFL) << 32 | 0xFFFFFFFFL & k(); 
      byte[] arrayOfByte = p1.a;
      int j = k + 1;
      long l1 = arrayOfByte[k];
      k = j + 1;
      long l2 = arrayOfByte[j];
      j = k + 1;
      long l3 = arrayOfByte[k];
      k = j + 1;
      long l4 = arrayOfByte[j];
      j = k + 1;
      long l5 = arrayOfByte[k];
      k = j + 1;
      long l6 = arrayOfByte[j];
      j = k + 1;
      long l7 = arrayOfByte[k];
      k = j + 1;
      l1 = arrayOfByte[j] & 0xFFL | (l1 & 0xFFL) << 56 | (l2 & 0xFFL) << 48 | (l3 & 0xFFL) << 40 | (l4 & 0xFFL) << 32 | (l5 & 0xFFL) << 24 | (l6 & 0xFFL) << 16 | (l7 & 0xFFL) << 8;
      this.b -= 8L;
      if (k == i) {
        this.a = p1.c();
        q.a(p1);
        return l1;
      } 
      p1.b = k;
      return l1;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("size < 8: ");
    stringBuilder.append(this.b);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public c l(long paramLong) {
    if (paramLong == 0L)
      return b(48); 
    int j = Long.numberOfTrailingZeros(Long.highestOneBit(paramLong)) / 4 + 1;
    p p1 = e(j);
    byte[] arrayOfByte = p1.a;
    int i = p1.c + j - 1;
    int k = p1.c;
    while (i >= k) {
      arrayOfByte[i] = c[(int)(0xFL & paramLong)];
      paramLong >>>= 4;
      i--;
    } 
    p1.c += j;
    this.b += j;
    return this;
  }
  
  public short m() { return v.a(j()); }
  
  public int n() { return v.a(k()); }
  
  public long o() {
    long l1 = this.b;
    long l2 = 0L;
    if (l1 != 0L) {
      byte b3;
      byte b2;
      byte b4 = 0;
      long l = -7L;
      byte b5 = 0;
      byte b1 = b5;
      while (true) {
        StringBuilder stringBuilder = this.a;
        byte[] arrayOfByte = stringBuilder.a;
        int i = stringBuilder.b;
        int j = stringBuilder.c;
        b2 = b4;
        b3 = b5;
        l1 = l2;
        while (true) {
          b4 = b1;
          if (i < j) {
            b4 = arrayOfByte[i];
            if (b4 >= 48 && b4 <= 57) {
              b5 = 48 - b4;
              int k = l1 cmp -922337203685477580L;
              if (k < 0 || (k == 0 && b5 < l)) {
                c c1 = (new c()).k(l1).b(b4);
                if (!b3)
                  c1.i(); 
                StringBuilder stringBuilder1 = new StringBuilder();
                stringBuilder1.append("Number too large: ");
                stringBuilder1.append(c1.r());
                throw new NumberFormatException(stringBuilder1.toString());
              } 
              l1 = l1 * 10L + b5;
            } else if (b4 == 45 && !b2) {
              l--;
              b3 = 1;
            } else {
              if (b2) {
                b4 = 1;
                break;
              } 
              stringBuilder = new StringBuilder();
              stringBuilder.append("Expected leading [0-9] or '-' character but was 0x");
              stringBuilder.append(Integer.toHexString(b4));
              throw new NumberFormatException(stringBuilder.toString());
            } 
            i++;
            b2++;
            continue;
          } 
          break;
        } 
        if (i == j) {
          this.a = stringBuilder.c();
          q.a(stringBuilder);
        } else {
          stringBuilder.b = i;
        } 
        if (b4 == 0) {
          l2 = l1;
          b5 = b3;
          b1 = b4;
          b4 = b2;
          if (this.a == null)
            break; 
          continue;
        } 
        break;
      } 
      this.b -= b2;
      return (b3 != 0) ? l1 : -l1;
    } 
    throw new IllegalStateException("size == 0");
  }
  
  public long p() {
    if (this.b != 0L) {
      long l2;
      byte b2;
      byte b1 = 0;
      byte b3 = 0;
      long l1 = 0L;
      while (true) {
        c c1 = this.a;
        byte[] arrayOfByte = c1.a;
        int i = c1.b;
        int j = c1.c;
        l2 = l1;
        b2 = b3;
        while (true) {
          b3 = b1;
          if (i < j) {
            byte b4 = arrayOfByte[i];
            if (b4 >= 48 && b4 <= 57) {
              b3 = b4 - 48;
            } else {
              if (b4 >= 97 && b4 <= 102) {
                b3 = b4 - 97;
              } else if (b4 >= 65 && b4 <= 70) {
                b3 = b4 - 65;
              } else {
                if (b2) {
                  b3 = 1;
                  break;
                } 
                StringBuilder stringBuilder1 = new StringBuilder();
                stringBuilder1.append("Expected leading [0-9a-fA-F] character but was 0x");
                stringBuilder1.append(Integer.toHexString(b4));
                throw new NumberFormatException(stringBuilder1.toString());
              } 
              b3 += 10;
            } 
            if ((0xF000000000000000L & l2) == 0L) {
              l2 = l2 << 4 | b3;
              i++;
              b2++;
              continue;
            } 
            c1 = (new c()).l(l2).b(b4);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Number too large: ");
            stringBuilder.append(c1.r());
            throw new NumberFormatException(stringBuilder.toString());
          } 
          break;
        } 
        if (i == j) {
          this.a = c1.c();
          q.a(c1);
        } else {
          c1.b = i;
        } 
        if (b3 == 0) {
          b1 = b3;
          b3 = b2;
          l1 = l2;
          if (this.a == null)
            break; 
          continue;
        } 
        break;
      } 
      this.b -= b2;
      return l2;
    } 
    throw new IllegalStateException("size == 0");
  }
  
  public f q() { return new f(t()); }
  
  public String r() {
    try {
      return a(this.b, v.a);
    } catch (EOFException eOFException) {
      throw new AssertionError(eOFException);
    } 
  }
  
  public int read(ByteBuffer paramByteBuffer) {
    p p1 = this.a;
    if (p1 == null)
      return -1; 
    int i = Math.min(paramByteBuffer.remaining(), p1.c - p1.b);
    paramByteBuffer.put(p1.a, p1.b, i);
    p1.b += i;
    this.b -= i;
    if (p1.b == p1.c) {
      this.a = p1.c();
      q.a(p1);
    } 
    return i;
  }
  
  public long read(c paramc, long paramLong) {
    if (paramc != null) {
      if (paramLong >= 0L) {
        long l2 = this.b;
        if (l2 == 0L)
          return -1L; 
        long l1 = paramLong;
        if (paramLong > l2)
          l1 = l2; 
        paramc.write(this, l1);
        return l1;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("byteCount < 0: ");
      stringBuilder.append(paramLong);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException("sink == null");
  }
  
  public String s() { return f(Float.MAX_VALUE); }
  
  public byte[] t() {
    try {
      return h(this.b);
    } catch (EOFException eOFException) {
      throw new AssertionError(eOFException);
    } 
  }
  
  public u timeout() { return u.NONE; }
  
  public String toString() { return w().toString(); }
  
  public final void u() {
    try {
      i(this.b);
      return;
    } catch (EOFException eOFException) {
      throw new AssertionError(eOFException);
    } 
  }
  
  public c v() {
    c c1 = new c();
    if (this.b == 0L)
      return c1; 
    c1.a = this.a.a();
    p p1 = c1.a;
    p1.g = p1;
    p1.f = p1;
    p1 = this.a;
    while (true) {
      p1 = p1.f;
      if (p1 != this.a) {
        c1.a.g.a(p1.a());
        continue;
      } 
      break;
    } 
    c1.b = this.b;
    return c1;
  }
  
  public final f w() {
    long l = this.b;
    if (l <= 2147483647L)
      return f((int)l); 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("size > Integer.MAX_VALUE: ");
    stringBuilder.append(this.b);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public int write(ByteBuffer paramByteBuffer) {
    if (paramByteBuffer != null) {
      int j = paramByteBuffer.remaining();
      int i = j;
      while (i > 0) {
        p p1 = e(1);
        int k = Math.min(i, 8192 - p1.c);
        paramByteBuffer.get(p1.a, p1.c, k);
        i -= k;
        p1.c += k;
      } 
      this.b += j;
      return j;
    } 
    throw new IllegalArgumentException("source == null");
  }
  
  public void write(c paramc, long paramLong) {
    if (paramc != null) {
      if (paramc != this) {
        v.a(paramc.b, 0L, paramLong);
        while (paramLong > 0L) {
          if (paramLong < (paramc.a.c - paramc.a.b)) {
            p p3 = this.a;
            if (p3 != null) {
              p3 = p3.g;
            } else {
              p3 = null;
            } 
            if (p3 != null && p3.e) {
              int i;
              long l1 = p3.c;
              if (p3.d) {
                i = 0;
              } else {
                i = p3.b;
              } 
              if (l1 + paramLong - i <= 8192L) {
                paramc.a.a(p3, (int)paramLong);
                paramc.b -= paramLong;
                this.b += paramLong;
                return;
              } 
            } 
            paramc.a = paramc.a.a((int)paramLong);
          } 
          p p1 = paramc.a;
          long l = (p1.c - p1.b);
          paramc.a = p1.c();
          p p2 = this.a;
          if (p2 == null) {
            this.a = p1;
            p1 = this.a;
            p1.g = p1;
            p1.f = p1;
          } else {
            p2.g.a(p1).d();
          } 
          paramc.b -= l;
          this.b += l;
          paramLong -= l;
        } 
        return;
      } 
      throw new IllegalArgumentException("source == this");
    } 
    throw new IllegalArgumentException("source == null");
  }
}
