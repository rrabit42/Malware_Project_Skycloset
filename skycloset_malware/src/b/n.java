package b;

import java.io.OutputStream;
import java.nio.ByteBuffer;

final class n implements d {
  public final c a = new c();
  
  public final s b;
  
  boolean c;
  
  n(s params) {
    if (params != null) {
      this.b = params;
      return;
    } 
    throw new NullPointerException("sink == null");
  }
  
  public long a(t paramt) {
    if (paramt != null) {
      long l = 0L;
      while (true) {
        long l1 = paramt.read(this.a, 8192L);
        if (l1 != -1L) {
          l += l1;
          x();
          continue;
        } 
        break;
      } 
      return l;
    } 
    throw new IllegalArgumentException("source == null");
  }
  
  public c b() { return this.a; }
  
  public d b(String paramString) {
    if (!this.c) {
      this.a.a(paramString);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d c(f paramf) {
    if (!this.c) {
      this.a.a(paramf);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d c(byte[] paramArrayOfByte) {
    if (!this.c) {
      this.a.b(paramArrayOfByte);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d c(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    if (!this.c) {
      this.a.b(paramArrayOfByte, paramInt1, paramInt2);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public OutputStream c() { return new Object(this); }
  
  public void close() {
    if (this.c)
      return; 
    Throwable throwable = null;
    object = throwable;
    try {
      if (this.a.b > 0L) {
        this.b.write(this.a, this.a.b);
        object = throwable;
      } 
    } catch (Throwable object) {}
    try {
      this.b.close();
      throwable = object;
    } catch (Throwable throwable1) {
      throwable = object;
      if (object == null)
        throwable = throwable1; 
    } 
    this.c = true;
    if (throwable != null)
      v.a(throwable); 
  }
  
  public d e() {
    if (!this.c) {
      long l = this.a.a();
      if (l > 0L)
        this.b.write(this.a, l); 
      return this;
    } 
    throw new IllegalStateException("closed");
  }
  
  public void flush() {
    if (!this.c) {
      if (this.a.b > 0L) {
        s s1 = this.b;
        c c1 = this.a;
        s1.write(c1, c1.b);
      } 
      this.b.flush();
      return;
    } 
    throw new IllegalStateException("closed");
  }
  
  public d g(int paramInt) {
    if (!this.c) {
      this.a.d(paramInt);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d h(int paramInt) {
    if (!this.c) {
      this.a.c(paramInt);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d i(int paramInt) {
    if (!this.c) {
      this.a.b(paramInt);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public boolean isOpen() { return this.c ^ true; }
  
  public d m(long paramLong) {
    if (!this.c) {
      this.a.l(paramLong);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public d n(long paramLong) {
    if (!this.c) {
      this.a.k(paramLong);
      return x();
    } 
    throw new IllegalStateException("closed");
  }
  
  public u timeout() { return this.b.timeout(); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("buffer(");
    stringBuilder.append(this.b);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public int write(ByteBuffer paramByteBuffer) {
    if (!this.c) {
      int i = this.a.write(paramByteBuffer);
      x();
      return i;
    } 
    throw new IllegalStateException("closed");
  }
  
  public void write(c paramc, long paramLong) {
    if (!this.c) {
      this.a.write(paramc, paramLong);
      x();
      return;
    } 
    throw new IllegalStateException("closed");
  }
  
  public d x() {
    if (!this.c) {
      long l = this.a.h();
      if (l > 0L)
        this.b.write(this.a, l); 
      return this;
    } 
    throw new IllegalStateException("closed");
  }
}
